/*
 * WRI Restoration Marketplace API
 * ### About  This API serves the web and mobile apps for WRI's Restoration Marketplace (AKA TerraMatch).  ### Authentication & Authorisation  JWTs are used for authentication. Upon successful log in a JWT will be provided for you. These expire after 12 hours.  A padlock icon next to an endpoint indicates that it requires an authenticated user. For example:  ![](/images/padlock.png)  ### Requests & Responses  The response bodies documented here will be wrapped in an object adhering to the JSON:API specification.  ### Error Codes  Any errors returned in the body of a response will have a unique code to help identify the type of error. They are:  ``` ACCEPTED, ACTIVE_URL, AFTER, AFTER_OR_EQUAL, ALPHA, ALPHA_DASH, ALPHA_NUM, ARRAY, BEFORE, BEFORE_OR_EQUAL, BETWEEN, BOOLEAN, CARBON_CERTIFICATION_TYPE, CONFIRMED, CONTAIN_LOWER, CONTAIN_NUMBER, CONTAIN_UPPER, CONTINENT, COUNTRY_CODE, CUSTOM, DATE, DATE_EQUALS, DATE_FORMAT, DIFFERENT, DIGITS, DIGITS_BETWEEN, DIMENSIONS, DISTINCT, DOCUMENT_TYPE, EMAIL, ENDS_WITH, EXISTS, FILE, FILLED, FUNDING_BRACKET, FUNDING_SOURCE, GT, GTE, IMAGE, IN, IN_ARRAY, INTEGER, IP, IPV4, IPV6, JSON, LAND_OWNERSHIP, LAND_SIZE, LAND_TYPE, LT, LTE, MAX, MIMES, MIMETYPES, MIN, NOT_IN, NOT_PRESENT, NOT_REGEX, NUMERIC, OTHER_VALUE_PRESENT, OTHER_VALUE_NULL, OTHER_VALUE_STRING, ORGANISATION_CATEGORY, ORGANISATION_TYPE, PRESENT, REGEX, REJECTED_REASON, REPORTING_FREQUENCY, REPORTING_LEVEL, REQUIRED, REQUIRED_IF, REQUIRED_UNLESS, REQUIRED_WITH, REQUIRED_WITH_ALL, REQUIRED_WITHOUT, REQUIRED_WITHOUT_ALL, RESTORATION_GOAL, RESTORATION_METHOD, REVENUE_DRIVER, SAME, SIZE, SOFT_URL, STARTS_WITH, STARTS_WITH_FACEBOOK, STARTS_WITH_TWITTER, STARTS_WITH_INSTAGRAM, STARTS_WITH_LINKEDIN, STRICT_FLOAT, STRING, SUSTAINABLE_DEVELOPMENT_GOAL, TIMEZONE, TREE_SPECIES_OWNER, UNIQUE, UPLOADED, URL, UUID ```  ### Uploads  Uploads should first be uploaded to the `/uploads` endpoint. Upon success an ID will be returned, this ID is valid for 1 hour. Use this ID in your request body to bind the upload to a property.  ### Elevator Videos  Elevator videos can be created by using the `/elevator_videos` endpoint. After creating an elevator video you will be returned an elevator video ID. Use this to check its status. Elevator videos will start off as `processing` and change to `finished` when it has been build. Once the elevator video is built the `upload_id` property will be present, you can use this just like a regular upload and attach it to a pitch's `video` property. Be sure to use the elevator video's `upload_id` property and not its `id` property. An elevator video's status may end up as `errored` or `timed_out` in which case something has gone wrong.  ### Entity Relationship Diagram  ![](/images/erd.png)  ### Units  * All prices are measured in USD * All land is measured in hectares * All time is measured in months  ### Drafts  When creating a draft the `data` property be equal to a string of JSON containing an empty object. You can then manipulate the `data` property with subsequent updates. When updating a draft you will need to use [JSON Patch](http://jsonpatch.com/) requests to manipulate the `data` property. Operations are relative to the `data` property which means you don't need to preface paths with `/data`. 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WriRestorationMarketplaceApi);
  }
}(this, function(expect, WriRestorationMarketplaceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WriRestorationMarketplaceApi.DraftsApi();
  });

  describe('(package)', function() {
    describe('DraftsApi', function() {
      describe('draftsIDDelete', function() {
        it('should call draftsIDDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsIDDelete call and complete the assertions
          /*
          var ID = 56;

          instance.draftsIDDelete(ID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.Empty);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsIDGet', function() {
        it('should call draftsIDGet successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsIDGet call and complete the assertions
          /*
          var ID = 56;

          instance.draftsIDGet(ID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.DraftRead);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("");
            expect(data.data).to.be.a(WriRestorationMarketplaceApi.DraftReadData);
                  expect(data.data.OFFER).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferRead);
                    expect(data.data.OFFER.offer).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOffer);
                      expect(data.data.OFFER.offer.name).to.be.a('string');
                  expect(data.data.OFFER.offer.name).to.be("");
                {
                  let dataCtr = data.data.OFFER.offer_documents;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOffer);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.OFFER.offer_contacts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOfferContacts);
                    expect(data.user_id).to.be.a('number');
                    expect(data.user_id).to.be(0);
                    expect(data.team_member_id).to.be.a('number');
                    expect(data.team_member_id).to.be(0);
                  }
                }
              expect(data.data.PITCH).to.be.a(WriRestorationMarketplaceApi.DraftDataPitchRead);
                    expect(data.data.PITCH.pitch).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOffer);
                      expect(data.data.PITCH.pitch.name).to.be.a('string');
                  expect(data.data.PITCH.pitch.name).to.be("");
                {
                  let dataCtr = data.data.PITCH.pitch_documents;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOffer);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.PITCH.pitch_contacts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOfferContacts);
                    expect(data.user_id).to.be.a('number');
                    expect(data.user_id).to.be(0);
                    expect(data.team_member_id).to.be.a('number');
                    expect(data.team_member_id).to.be(0);
                  }
                }
                {
                  let dataCtr = data.data.PITCH.carbon_certifications;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataPitchReadCarbonCertifications);
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.PITCH.restoration_method_metrics;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataPitchReadRestorationMethodMetrics);
                    expect(data.restoration_method).to.be.a('string');
                    expect(data.restoration_method).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.PITCH.tree_species;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOffer);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                  }
                }
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.created_by).to.be.a('number');
            expect(data.created_by).to.be(0);
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.updated_by).to.be.a('number');
            expect(data.updated_by).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsIDPatch', function() {
        it('should call draftsIDPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsIDPatch call and complete the assertions
          /*
          var ID = 56;
          var body = new WriRestorationMarketplaceApi.DraftUpdate();

          instance.draftsIDPatch(ID, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.DraftRead);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("");
            expect(data.data).to.be.a(WriRestorationMarketplaceApi.DraftReadData);
                  expect(data.data.OFFER).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferRead);
                    expect(data.data.OFFER.offer).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOffer);
                      expect(data.data.OFFER.offer.name).to.be.a('string');
                  expect(data.data.OFFER.offer.name).to.be("");
                {
                  let dataCtr = data.data.OFFER.offer_documents;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOffer);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.OFFER.offer_contacts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOfferContacts);
                    expect(data.user_id).to.be.a('number');
                    expect(data.user_id).to.be(0);
                    expect(data.team_member_id).to.be.a('number');
                    expect(data.team_member_id).to.be(0);
                  }
                }
              expect(data.data.PITCH).to.be.a(WriRestorationMarketplaceApi.DraftDataPitchRead);
                    expect(data.data.PITCH.pitch).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOffer);
                      expect(data.data.PITCH.pitch.name).to.be.a('string');
                  expect(data.data.PITCH.pitch.name).to.be("");
                {
                  let dataCtr = data.data.PITCH.pitch_documents;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOffer);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.PITCH.pitch_contacts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOfferContacts);
                    expect(data.user_id).to.be.a('number');
                    expect(data.user_id).to.be(0);
                    expect(data.team_member_id).to.be.a('number');
                    expect(data.team_member_id).to.be(0);
                  }
                }
                {
                  let dataCtr = data.data.PITCH.carbon_certifications;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataPitchReadCarbonCertifications);
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.PITCH.restoration_method_metrics;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataPitchReadRestorationMethodMetrics);
                    expect(data.restoration_method).to.be.a('string');
                    expect(data.restoration_method).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.PITCH.tree_species;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOffer);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                  }
                }
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.created_by).to.be.a('number');
            expect(data.created_by).to.be(0);
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.updated_by).to.be.a('number');
            expect(data.updated_by).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsIDPublishPatch', function() {
        it('should call draftsIDPublishPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsIDPublishPatch call and complete the assertions
          /*
          var ID = 56;

          instance.draftsIDPublishPatch(ID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.InlineResponse201);
            expect(data.OFFER).to.be.a(WriRestorationMarketplaceApi.InlineResponse201OFFER);
                  expect(data.OFFER.offer_id).to.be.a('number');
              expect(data.OFFER.offer_id).to.be(0);
            expect(data.PITCH).to.be.a(WriRestorationMarketplaceApi.InlineResponse201PITCH);
                  expect(data.PITCH.pitch_id).to.be.a('number');
              expect(data.PITCH.pitch_id).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsOffersGet', function() {
        it('should call draftsOffersGet successfully', function(done) {
          // TODO: uncomment draftsOffersGet call and complete the assertions
          /*

          instance.draftsOffersGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.DraftReadAll);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsPitchesGet', function() {
        it('should call draftsPitchesGet successfully', function(done) {
          // TODO: uncomment draftsPitchesGet call and complete the assertions
          /*

          instance.draftsPitchesGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.DraftReadAll);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsPost', function() {
        it('should call draftsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsPost call and complete the assertions
          /*
          var body = new WriRestorationMarketplaceApi.DraftCreate();
          body.name = "";
          body.type = "";

          instance.draftsPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WriRestorationMarketplaceApi.DraftRead);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("");
            expect(data.data).to.be.a(WriRestorationMarketplaceApi.DraftReadData);
                  expect(data.data.OFFER).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferRead);
                    expect(data.data.OFFER.offer).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOffer);
                      expect(data.data.OFFER.offer.name).to.be.a('string');
                  expect(data.data.OFFER.offer.name).to.be("");
                {
                  let dataCtr = data.data.OFFER.offer_documents;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOffer);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.OFFER.offer_contacts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOfferContacts);
                    expect(data.user_id).to.be.a('number');
                    expect(data.user_id).to.be(0);
                    expect(data.team_member_id).to.be.a('number');
                    expect(data.team_member_id).to.be(0);
                  }
                }
              expect(data.data.PITCH).to.be.a(WriRestorationMarketplaceApi.DraftDataPitchRead);
                    expect(data.data.PITCH.pitch).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOffer);
                      expect(data.data.PITCH.pitch.name).to.be.a('string');
                  expect(data.data.PITCH.pitch.name).to.be("");
                {
                  let dataCtr = data.data.PITCH.pitch_documents;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOffer);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.PITCH.pitch_contacts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOfferContacts);
                    expect(data.user_id).to.be.a('number');
                    expect(data.user_id).to.be(0);
                    expect(data.team_member_id).to.be.a('number');
                    expect(data.team_member_id).to.be(0);
                  }
                }
                {
                  let dataCtr = data.data.PITCH.carbon_certifications;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataPitchReadCarbonCertifications);
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.PITCH.restoration_method_metrics;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataPitchReadRestorationMethodMetrics);
                    expect(data.restoration_method).to.be.a('string');
                    expect(data.restoration_method).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.PITCH.tree_species;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WriRestorationMarketplaceApi.DraftDataOfferReadOffer);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                  }
                }
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.created_by).to.be.a('number');
            expect(data.created_by).to.be(0);
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.updated_by).to.be.a('number');
            expect(data.updated_by).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
