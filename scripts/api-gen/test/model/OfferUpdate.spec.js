/**
 * WRI Restoration Marketplace API
 * ### About  This API serves the web and mobile apps for WRI's Restoration Marketplace (AKA TerraMatch).  ### Authentication & Authorisation  JWTs are used for authentication. Upon successful log in a JWT will be provided for you. These expire after 12 hours.  A padlock icon next to an endpoint indicates that it requires an authenticated user. For example:  ![](/images/padlock.png)  ### Requests & Responses  The response bodies documented here will be wrapped in an object adhering to the JSON:API specification.  ### Error Codes  Any errors returned in the body of a response will have a unique code to help identify the type of error. They are:  ``` ACCEPTED, ACTIVE_URL, AFTER, AFTER_OR_EQUAL, ALPHA, ALPHA_DASH, ALPHA_NUM, ARRAY, BEFORE, BEFORE_OR_EQUAL, BETWEEN, BOOLEAN, CARBON_CERTIFICATION_TYPE, CONFIRMED, CONTAIN_LOWER, CONTAIN_NUMBER, CONTAIN_UPPER, CONTINENT, COUNTRY_CODE, CUSTOM, DATE, DATE_EQUALS, DATE_FORMAT, DIFFERENT, DIGITS, DIGITS_BETWEEN, DIMENSIONS, DISTINCT, DOCUMENT_TYPE, EMAIL, ENDS_WITH, EXISTS, FILE, FILLED, FUNDING_BRACKET, FUNDING_SOURCE, GT, GTE, IMAGE, IN, IN_ARRAY, INTEGER, IP, IPV4, IPV6, JSON, LAND_OWNERSHIP, LAND_SIZE, LAND_TYPE, LT, LTE, MAX, MIMES, MIMETYPES, MIN, NOT_IN, NOT_PRESENT, NOT_REGEX, NUMERIC, OTHER_VALUE_PRESENT, OTHER_VALUE_NULL, OTHER_VALUE_STRING, ORGANISATION_CATEGORY, ORGANISATION_TYPE, PRESENT, REGEX, REJECTED_REASON, REPORTING_FREQUENCY, REPORTING_LEVEL, REQUIRED, REQUIRED_IF, REQUIRED_UNLESS, REQUIRED_WITH, REQUIRED_WITH_ALL, REQUIRED_WITHOUT, REQUIRED_WITHOUT_ALL, RESTORATION_GOAL, RESTORATION_METHOD, REVENUE_DRIVER, SAME, SIZE, SOFT_URL, STARTS_WITH, STARTS_WITH_FACEBOOK, STARTS_WITH_TWITTER, STARTS_WITH_INSTAGRAM, STARTS_WITH_LINKEDIN, STRICT_FLOAT, STRING, SUSTAINABLE_DEVELOPMENT_GOAL, TIMEZONE, TREE_SPECIES_OWNER, UNIQUE, UPLOADED, URL, UUID ```  ### Uploads  Uploads should first be uploaded to the `/uploads` endpoint. Upon success an ID will be returned, this ID is valid for 1 hour. Use this ID in your request body to bind the upload to a property.  ### Entity Relationship Diagram  ![](/images/erd.png)  ### Units  * All prices are measured in USD * All land is measured in hectares * All time is measured in months 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WriRestorationMarketplaceApi);
  }
}(this, function(expect, WriRestorationMarketplaceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WriRestorationMarketplaceApi.OfferUpdate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OfferUpdate', function() {
    it('should create an instance of OfferUpdate', function() {
      // uncomment below and update the code to test OfferUpdate
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be.a(WriRestorationMarketplaceApi.OfferUpdate);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property landTypes (base name: "land_types")', function() {
      // uncomment below and update the code to test the property landTypes
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property landOwnerships (base name: "land_ownerships")', function() {
      // uncomment below and update the code to test the property landOwnerships
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property landSize (base name: "land_size")', function() {
      // uncomment below and update the code to test the property landSize
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property landContinent (base name: "land_continent")', function() {
      // uncomment below and update the code to test the property landContinent
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property landCountry (base name: "land_country")', function() {
      // uncomment below and update the code to test the property landCountry
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property restorationMethods (base name: "restoration_methods")', function() {
      // uncomment below and update the code to test the property restorationMethods
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property restorationGoals (base name: "restoration_goals")', function() {
      // uncomment below and update the code to test the property restorationGoals
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property fundingSources (base name: "funding_sources")', function() {
      // uncomment below and update the code to test the property fundingSources
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property fundingAmount (base name: "funding_amount")', function() {
      // uncomment below and update the code to test the property fundingAmount
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property fundingBracket (base name: "funding_bracket")', function() {
      // uncomment below and update the code to test the property fundingBracket
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property pricePerTree (base name: "price_per_tree")', function() {
      // uncomment below and update the code to test the property pricePerTree
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property longTermEngagement (base name: "long_term_engagement")', function() {
      // uncomment below and update the code to test the property longTermEngagement
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property reportingFrequency (base name: "reporting_frequency")', function() {
      // uncomment below and update the code to test the property reportingFrequency
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property reportingLevel (base name: "reporting_level")', function() {
      // uncomment below and update the code to test the property reportingLevel
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property sustainableDevelopmentGoals (base name: "sustainable_development_goals")', function() {
      // uncomment below and update the code to test the property sustainableDevelopmentGoals
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property coverPhoto (base name: "cover_photo")', function() {
      // uncomment below and update the code to test the property coverPhoto
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property avatar (base name: "avatar")', function() {
      // uncomment below and update the code to test the property avatar
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

    it('should have the property video (base name: "video")', function() {
      // uncomment below and update the code to test the property video
      //var instance = new WriRestorationMarketplaceApi.OfferUpdate();
      //expect(instance).to.be();
    });

  });

}));
