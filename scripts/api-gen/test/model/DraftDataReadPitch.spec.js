/*
 * WRI Restoration Marketplace API
 * ### About  This API serves the web and mobile apps for WRI's Restoration Marketplace (AKA TerraMatch).  ### Authentication & Authorisation  JWTs are used for authentication. Upon successful log in a JWT will be provided for you. These expire after 12 hours.  A padlock icon next to an endpoint indicates that it requires an authenticated user. For example:  ![](/images/padlock.png)  ### Requests & Responses  The response bodies documented here will be wrapped in an object adhering to the JSON:API specification.  ### Error Codes  Any errors returned in the body of a response will have a unique code to help identify the type of error. They are:  ``` ACCEPTED, ACTIVE_URL, AFTER, AFTER_OR_EQUAL, ALPHA, ALPHA_DASH, ALPHA_NUM, ARRAY, BEFORE, BEFORE_OR_EQUAL, BETWEEN, BOOLEAN, CARBON_CERTIFICATION_TYPE, CONFIRMED, CONTAIN_LOWER, CONTAIN_NUMBER, CONTAIN_UPPER, CONTINENT, COUNTRY_CODE, CUSTOM, DATE, DATE_EQUALS, DATE_FORMAT, DIFFERENT, DIGITS, DIGITS_BETWEEN, DIMENSIONS, DISTINCT, DOCUMENT_TYPE, EMAIL, ENDS_WITH, EXISTS, FILE, FILLED, FUNDING_BRACKET, FUNDING_SOURCE, GT, GTE, IMAGE, IN, IN_ARRAY, INTEGER, IP, IPV4, IPV6, JSON, LAND_OWNERSHIP, LAND_SIZE, LAND_TYPE, LT, LTE, MAX, MIMES, MIMETYPES, MIN, NOT_IN, NOT_PRESENT, NOT_REGEX, NUMERIC, OTHER_VALUE_PRESENT, OTHER_VALUE_NULL, OTHER_VALUE_STRING, ORGANISATION_CATEGORY, ORGANISATION_TYPE, PRESENT, REGEX, REJECTED_REASON, REPORTING_FREQUENCY, REPORTING_LEVEL, REQUIRED, REQUIRED_IF, REQUIRED_UNLESS, REQUIRED_WITH, REQUIRED_WITH_ALL, REQUIRED_WITHOUT, REQUIRED_WITHOUT_ALL, RESTORATION_GOAL, RESTORATION_METHOD, REVENUE_DRIVER, SAME, SIZE, SOFT_URL, STARTS_WITH, STARTS_WITH_FACEBOOK, STARTS_WITH_TWITTER, STARTS_WITH_INSTAGRAM, STARTS_WITH_LINKEDIN, STRICT_FLOAT, STRING, SUSTAINABLE_DEVELOPMENT_GOAL, TIMEZONE, TREE_SPECIES_OWNER, UNIQUE, UPLOADED, URL, UUID, VISIBILITY ```  ### Uploads  Uploads should first be uploaded to the `/uploads` endpoint. Upon success an ID will be returned, this ID is valid for 1 day. Use this ID in your request body to bind the upload to a property.  ### Elevator Videos  Elevator videos can be created by using the `/elevator_videos` endpoint. After creating an elevator video you will be returned an elevator video ID. Use this to check its status. Elevator videos will start off as `processing` and change to `finished` when it has been build. Once the elevator video is built the `upload_id` property will be present, you can use this just like a regular upload and attach it to a pitch's `video` property. Be sure to use the elevator video's `upload_id` property and not its `id` property. An elevator video's status may end up as `errored` or `timed_out` in which case something has gone wrong.  ### Entity Relationship Diagram  ![](/images/erd.png)  ### Units  * All prices are measured in USD * All land is measured in hectares * All time is measured in months  ### Drafts  When creating a draft the `data` property be equal to a string of JSON containing an empty object. You can then manipulate the `data` property with subsequent updates. When updating a draft you will need to use [JSON Patch](http://jsonpatch.com/) requests to manipulate the `data` property. Operations are relative to the `data` property which means you don't need to preface paths with `/data`. 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WriRestorationMarketplaceApi);
  }
}(this, function(expect, WriRestorationMarketplaceApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DraftDataReadPitch', function() {
      beforeEach(function() {
        instance = new WriRestorationMarketplaceApi.DraftDataReadPitch();
      });

      it('should create an instance of DraftDataReadPitch', function() {
        // TODO: update the code to test DraftDataReadPitch
        expect(instance).to.be.a(WriRestorationMarketplaceApi.DraftDataReadPitch);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property land_types (base name: "land_types")', function() {
        // TODO: update the code to test the property land_types
        expect(instance).to.have.property('land_types');
        // expect(instance.land_types).to.be(expectedValueLiteral);
      });

      it('should have the property land_ownerships (base name: "land_ownerships")', function() {
        // TODO: update the code to test the property land_ownerships
        expect(instance).to.have.property('land_ownerships');
        // expect(instance.land_ownerships).to.be(expectedValueLiteral);
      });

      it('should have the property land_size (base name: "land_size")', function() {
        // TODO: update the code to test the property land_size
        expect(instance).to.have.property('land_size');
        // expect(instance.land_size).to.be(expectedValueLiteral);
      });

      it('should have the property land_continent (base name: "land_continent")', function() {
        // TODO: update the code to test the property land_continent
        expect(instance).to.have.property('land_continent');
        // expect(instance.land_continent).to.be(expectedValueLiteral);
      });

      it('should have the property land_country (base name: "land_country")', function() {
        // TODO: update the code to test the property land_country
        expect(instance).to.have.property('land_country');
        // expect(instance.land_country).to.be(expectedValueLiteral);
      });

      it('should have the property land_geojson (base name: "land_geojson")', function() {
        // TODO: update the code to test the property land_geojson
        expect(instance).to.have.property('land_geojson');
        // expect(instance.land_geojson).to.be(expectedValueLiteral);
      });

      it('should have the property restoration_methods (base name: "restoration_methods")', function() {
        // TODO: update the code to test the property restoration_methods
        expect(instance).to.have.property('restoration_methods');
        // expect(instance.restoration_methods).to.be(expectedValueLiteral);
      });

      it('should have the property restoration_goals (base name: "restoration_goals")', function() {
        // TODO: update the code to test the property restoration_goals
        expect(instance).to.have.property('restoration_goals');
        // expect(instance.restoration_goals).to.be(expectedValueLiteral);
      });

      it('should have the property funding_sources (base name: "funding_sources")', function() {
        // TODO: update the code to test the property funding_sources
        expect(instance).to.have.property('funding_sources');
        // expect(instance.funding_sources).to.be(expectedValueLiteral);
      });

      it('should have the property funding_amount (base name: "funding_amount")', function() {
        // TODO: update the code to test the property funding_amount
        expect(instance).to.have.property('funding_amount');
        // expect(instance.funding_amount).to.be(expectedValueLiteral);
      });

      it('should have the property funding_bracket (base name: "funding_bracket")', function() {
        // TODO: update the code to test the property funding_bracket
        expect(instance).to.have.property('funding_bracket');
        // expect(instance.funding_bracket).to.be(expectedValueLiteral);
      });

      it('should have the property revenue_drivers (base name: "revenue_drivers")', function() {
        // TODO: update the code to test the property revenue_drivers
        expect(instance).to.have.property('revenue_drivers');
        // expect(instance.revenue_drivers).to.be(expectedValueLiteral);
      });

      it('should have the property estimated_timespan (base name: "estimated_timespan")', function() {
        // TODO: update the code to test the property estimated_timespan
        expect(instance).to.have.property('estimated_timespan');
        // expect(instance.estimated_timespan).to.be(expectedValueLiteral);
      });

      it('should have the property long_term_engagement (base name: "long_term_engagement")', function() {
        // TODO: update the code to test the property long_term_engagement
        expect(instance).to.have.property('long_term_engagement');
        // expect(instance.long_term_engagement).to.be(expectedValueLiteral);
      });

      it('should have the property reporting_frequency (base name: "reporting_frequency")', function() {
        // TODO: update the code to test the property reporting_frequency
        expect(instance).to.have.property('reporting_frequency');
        // expect(instance.reporting_frequency).to.be(expectedValueLiteral);
      });

      it('should have the property reporting_level (base name: "reporting_level")', function() {
        // TODO: update the code to test the property reporting_level
        expect(instance).to.have.property('reporting_level');
        // expect(instance.reporting_level).to.be(expectedValueLiteral);
      });

      it('should have the property sustainable_development_goals (base name: "sustainable_development_goals")', function() {
        // TODO: update the code to test the property sustainable_development_goals
        expect(instance).to.have.property('sustainable_development_goals');
        // expect(instance.sustainable_development_goals).to.be(expectedValueLiteral);
      });

      it('should have the property cover_photo (base name: "cover_photo")', function() {
        // TODO: update the code to test the property cover_photo
        expect(instance).to.have.property('cover_photo');
        // expect(instance.cover_photo).to.be(expectedValueLiteral);
      });

      it('should have the property video (base name: "video")', function() {
        // TODO: update the code to test the property video
        expect(instance).to.have.property('video');
        // expect(instance.video).to.be(expectedValueLiteral);
      });

      it('should have the property problem (base name: "problem")', function() {
        // TODO: update the code to test the property problem
        expect(instance).to.have.property('problem');
        // expect(instance.problem).to.be(expectedValueLiteral);
      });

      it('should have the property anticipated_outcome (base name: "anticipated_outcome")', function() {
        // TODO: update the code to test the property anticipated_outcome
        expect(instance).to.have.property('anticipated_outcome');
        // expect(instance.anticipated_outcome).to.be(expectedValueLiteral);
      });

      it('should have the property who_is_involved (base name: "who_is_involved")', function() {
        // TODO: update the code to test the property who_is_involved
        expect(instance).to.have.property('who_is_involved');
        // expect(instance.who_is_involved).to.be(expectedValueLiteral);
      });

      it('should have the property local_community_involvement (base name: "local_community_involvement")', function() {
        // TODO: update the code to test the property local_community_involvement
        expect(instance).to.have.property('local_community_involvement');
        // expect(instance.local_community_involvement).to.be(expectedValueLiteral);
      });

      it('should have the property training_involved (base name: "training_involved")', function() {
        // TODO: update the code to test the property training_involved
        expect(instance).to.have.property('training_involved');
        // expect(instance.training_involved).to.be(expectedValueLiteral);
      });

      it('should have the property training_type (base name: "training_type")', function() {
        // TODO: update the code to test the property training_type
        expect(instance).to.have.property('training_type');
        // expect(instance.training_type).to.be(expectedValueLiteral);
      });

      it('should have the property training_amount_people (base name: "training_amount_people")', function() {
        // TODO: update the code to test the property training_amount_people
        expect(instance).to.have.property('training_amount_people');
        // expect(instance.training_amount_people).to.be(expectedValueLiteral);
      });

      it('should have the property people_working_in (base name: "people_working_in")', function() {
        // TODO: update the code to test the property people_working_in
        expect(instance).to.have.property('people_working_in');
        // expect(instance.people_working_in).to.be(expectedValueLiteral);
      });

      it('should have the property people_amount_nearby (base name: "people_amount_nearby")', function() {
        // TODO: update the code to test the property people_amount_nearby
        expect(instance).to.have.property('people_amount_nearby');
        // expect(instance.people_amount_nearby).to.be(expectedValueLiteral);
      });

      it('should have the property people_amount_abroad (base name: "people_amount_abroad")', function() {
        // TODO: update the code to test the property people_amount_abroad
        expect(instance).to.have.property('people_amount_abroad');
        // expect(instance.people_amount_abroad).to.be(expectedValueLiteral);
      });

      it('should have the property people_amount_employees (base name: "people_amount_employees")', function() {
        // TODO: update the code to test the property people_amount_employees
        expect(instance).to.have.property('people_amount_employees');
        // expect(instance.people_amount_employees).to.be(expectedValueLiteral);
      });

      it('should have the property people_amount_volunteers (base name: "people_amount_volunteers")', function() {
        // TODO: update the code to test the property people_amount_volunteers
        expect(instance).to.have.property('people_amount_volunteers');
        // expect(instance.people_amount_volunteers).to.be(expectedValueLiteral);
      });

      it('should have the property benefited_people (base name: "benefited_people")', function() {
        // TODO: update the code to test the property benefited_people
        expect(instance).to.have.property('benefited_people');
        // expect(instance.benefited_people).to.be(expectedValueLiteral);
      });

      it('should have the property future_maintenance (base name: "future_maintenance")', function() {
        // TODO: update the code to test the property future_maintenance
        expect(instance).to.have.property('future_maintenance');
        // expect(instance.future_maintenance).to.be(expectedValueLiteral);
      });

      it('should have the property use_of_resources (base name: "use_of_resources")', function() {
        // TODO: update the code to test the property use_of_resources
        expect(instance).to.have.property('use_of_resources');
        // expect(instance.use_of_resources).to.be(expectedValueLiteral);
      });

    });
  });

}));
