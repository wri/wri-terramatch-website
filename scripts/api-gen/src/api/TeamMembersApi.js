/*
 * WRI Restoration Marketplace API
 * ### About  This API serves the web and mobile apps for WRI's Restoration Marketplace (AKA TerraMatch).  ### Authentication & Authorisation  JWTs are used for authentication. Upon successful log in a JWT will be provided for you. These expire after 12 hours.  A padlock icon next to an endpoint indicates that it requires an authenticated user. For example:  ![](/images/padlock.png)  ### Requests & Responses  The response bodies documented here will be wrapped in an object adhering to the JSON:API specification.  ### Error Codes  Any errors returned in the body of a response will have a unique code to help identify the type of error. They are:  ``` ACCEPTED, ACTIVE_URL, AFTER, AFTER_OR_EQUAL, ALPHA, ALPHA_DASH, ALPHA_NUM, ARRAY, BEFORE, BEFORE_OR_EQUAL, BETWEEN, BOOLEAN, CARBON_CERTIFICATION_TYPE, CONFIRMED, CONTAIN_LOWER, CONTAIN_NUMBER, CONTAIN_UPPER, CONTINENT, COUNTRY_CODE, CUSTOM, DATE, DATE_EQUALS, DATE_FORMAT, DIFFERENT, DIGITS, DIGITS_BETWEEN, DIMENSIONS, DISTINCT, DOCUMENT_TYPE, EMAIL, ENDS_WITH, EXISTS, FILE, FILLED, FUNDING_BRACKET, FUNDING_SOURCE, GT, GTE, IMAGE, IN, IN_ARRAY, INTEGER, IP, IPV4, IPV6, JSON, LAND_OWNERSHIP, LAND_SIZE, LAND_TYPE, LT, LTE, MAX, MIMES, MIMETYPES, MIN, NOT_IN, NOT_PRESENT, NOT_REGEX, NUMERIC, OTHER_VALUE_PRESENT, OTHER_VALUE_NULL, OTHER_VALUE_STRING, ORGANISATION_CATEGORY, ORGANISATION_TYPE, PRESENT, REGEX, REJECTED_REASON, REPORTING_FREQUENCY, REPORTING_LEVEL, REQUIRED, REQUIRED_IF, REQUIRED_UNLESS, REQUIRED_WITH, REQUIRED_WITH_ALL, REQUIRED_WITHOUT, REQUIRED_WITHOUT_ALL, RESTORATION_GOAL, RESTORATION_METHOD, REVENUE_DRIVER, SAME, SIZE, SOFT_URL, STARTS_WITH, STARTS_WITH_FACEBOOK, STARTS_WITH_TWITTER, STARTS_WITH_INSTAGRAM, STARTS_WITH_LINKEDIN, STRICT_FLOAT, STRING, SUSTAINABLE_DEVELOPMENT_GOAL, TIMEZONE, TREE_SPECIES_OWNER, UNIQUE, UPLOADED, URL, UUID, VISIBILITY ```  ### Uploads  Uploads should first be uploaded to the `/uploads` endpoint. Upon success an ID will be returned, this ID is valid for 1 day. Use this ID in your request body to bind the upload to a property.  ### Elevator Videos  Elevator videos can be created by using the `/elevator_videos` endpoint. After creating an elevator video you will be returned an elevator video ID. Use this to check its status. Elevator videos will start off as `processing` and change to `finished` when it has been build. Once the elevator video is built the `upload_id` property will be present, you can use this just like a regular upload and attach it to a pitch's `video` property. Be sure to use the elevator video's `upload_id` property and not its `id` property. An elevator video's status may end up as `errored` or `timed_out` in which case something has gone wrong.  ### Entity Relationship Diagram  ![](/images/erd.png)  ### Units  * All prices are measured in USD * All land is measured in hectares * All time is measured in months  ### Drafts  When creating a draft the `data` property be equal to a string of JSON containing an empty object. You can then manipulate the `data` property with subsequent updates. When updating a draft you will need to use [JSON Patch](http://jsonpatch.com/) requests to manipulate the `data` property. Operations are relative to the `data` property which means you don't need to preface paths with `/data`. 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient', '../model/Empty', '../model/MaskedTeamMemberReadAll', '../model/TeamMemberCreate', '../model/TeamMemberRead', '../model/TeamMemberReadAll', '../model/TeamMemberUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Empty'), require('../model/MaskedTeamMemberReadAll'), require('../model/TeamMemberCreate'), require('../model/TeamMemberRead'), require('../model/TeamMemberReadAll'), require('../model/TeamMemberUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.WriRestorationMarketplaceApi) {
      root.WriRestorationMarketplaceApi = {};
    }
    root.WriRestorationMarketplaceApi.TeamMembersApi = factory(root.WriRestorationMarketplaceApi.ApiClient, root.WriRestorationMarketplaceApi.Empty, root.WriRestorationMarketplaceApi.MaskedTeamMemberReadAll, root.WriRestorationMarketplaceApi.TeamMemberCreate, root.WriRestorationMarketplaceApi.TeamMemberRead, root.WriRestorationMarketplaceApi.TeamMemberReadAll, root.WriRestorationMarketplaceApi.TeamMemberUpdate);
  }
}(this, function(ApiClient, Empty, MaskedTeamMemberReadAll, TeamMemberCreate, TeamMemberRead, TeamMemberReadAll, TeamMemberUpdate) {
  'use strict';

  /**
   * TeamMembers service.
   * @module api/TeamMembersApi
   * @version 1.0.0
   */

  /**
   * Constructs a new TeamMembersApi. 
   * @alias module:api/TeamMembersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the organisationsIDTeamMembersGet operation.
     * @callback module:api/TeamMembersApi~organisationsIDTeamMembersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MaskedTeamMemberReadAll} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read an organisation's team members
     * @param {Number} ID 
     * @param {module:api/TeamMembersApi~organisationsIDTeamMembersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MaskedTeamMemberReadAll}
     */
    this.organisationsIDTeamMembersGet = function(ID, callback) {
      var postBody = null;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling organisationsIDTeamMembersGet");
      }


      var pathParams = {
        'ID': ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MaskedTeamMemberReadAll;

      return this.apiClient.callApi(
        '/organisations/{ID}/team_members', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsIDTeamMembersInspectGet operation.
     * @callback module:api/TeamMembersApi~organisationsIDTeamMembersInspectGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMemberReadAll} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspect an organisation's team members
     * @param {Number} ID 
     * @param {module:api/TeamMembersApi~organisationsIDTeamMembersInspectGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMemberReadAll}
     */
    this.organisationsIDTeamMembersInspectGet = function(ID, callback) {
      var postBody = null;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling organisationsIDTeamMembersInspectGet");
      }


      var pathParams = {
        'ID': ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TeamMemberReadAll;

      return this.apiClient.callApi(
        '/organisations/{ID}/team_members/inspect', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamMembersIDDelete operation.
     * @callback module:api/TeamMembersApi~teamMembersIDDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Empty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a team member
     * @param {Number} ID 
     * @param {module:api/TeamMembersApi~teamMembersIDDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Empty}
     */
    this.teamMembersIDDelete = function(ID, callback) {
      var postBody = null;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling teamMembersIDDelete");
      }


      var pathParams = {
        'ID': ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/team_members/{ID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamMembersIDGet operation.
     * @callback module:api/TeamMembersApi~teamMembersIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMemberRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read a team member
     * @param {Number} ID 
     * @param {module:api/TeamMembersApi~teamMembersIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMemberRead}
     */
    this.teamMembersIDGet = function(ID, callback) {
      var postBody = null;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling teamMembersIDGet");
      }


      var pathParams = {
        'ID': ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TeamMemberRead;

      return this.apiClient.callApi(
        '/team_members/{ID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamMembersIDPatch operation.
     * @callback module:api/TeamMembersApi~teamMembersIDPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMemberRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a team member
     * @param {Number} ID 
     * @param {module:model/TeamMemberUpdate} body 
     * @param {module:api/TeamMembersApi~teamMembersIDPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMemberRead}
     */
    this.teamMembersIDPatch = function(ID, body, callback) {
      var postBody = body;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling teamMembersIDPatch");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling teamMembersIDPatch");
      }


      var pathParams = {
        'ID': ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TeamMemberRead;

      return this.apiClient.callApi(
        '/team_members/{ID}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamMembersPost operation.
     * @callback module:api/TeamMembersApi~teamMembersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMemberRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a team member
     * @param {module:model/TeamMemberCreate} body 
     * @param {module:api/TeamMembersApi~teamMembersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMemberRead}
     */
    this.teamMembersPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling teamMembersPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['BearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TeamMemberRead;

      return this.apiClient.callApi(
        '/team_members', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
