/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as RequestBodies from "./apiRequestBodies";

export type GetV2TreeSpeciesEntityUUIDPathParams = {
  /**
   * allowed values project/site/nursery/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2TreeSpeciesEntityUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2TreeSpeciesEntityUUIDResponse = {
  data?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type GetV2TreeSpeciesEntityUUIDVariables = {
  pathParams: GetV2TreeSpeciesEntityUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2TreeSpeciesEntityUUID = (variables: GetV2TreeSpeciesEntityUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2TreeSpeciesEntityUUIDResponse,
    GetV2TreeSpeciesEntityUUIDError,
    undefined,
    {},
    {},
    GetV2TreeSpeciesEntityUUIDPathParams
  >({ url: "/v2/tree-species/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2TreeSpeciesEntityUUID = <TData = GetV2TreeSpeciesEntityUUIDResponse>(
  variables: GetV2TreeSpeciesEntityUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2TreeSpeciesEntityUUIDResponse, GetV2TreeSpeciesEntityUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2TreeSpeciesEntityUUIDResponse, GetV2TreeSpeciesEntityUUIDError, TData>(
    queryKeyFn({ path: "/v2/tree-species/{entity}/{UUID}", operationId: "getV2TreeSpeciesEntityUUID", variables }),
    ({ signal }) => fetchGetV2TreeSpeciesEntityUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminProjectsMultiQueryParams = {
  /**
   * comma separated list of values. eg ?ids=uuid1,uuid2
   */
  ids: string;
};

export type GetV2AdminProjectsMultiError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminProjectsMultiResponse = {
  id?: string;
  uuid?: string;
  status?: string;
  name?: string;
  organisation?: {
    uuid?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    currency?: string;
    states?: string[];
    loan_status_types?: string[];
    land_systems?: string[];
    fund_utilisation?: string[];
    detailed_intervention_types?: string[];
    account_number_1?: string;
    account_number_2?: string;
    approach_of_marginalized_communities?: string;
    community_engagement_numbers_marginalized?: string;
    founding_date?: string;
    description?: string;
    leadership_team?: string;
    countries?: string[];
    languages?: string[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    engagement_farmers?: string[];
    engagement_women?: string[];
    engagement_youth?: string[];
    engagement_non_youth?: string[];
    tree_restoration_practices?: string[];
    business_model?: string;
    subtype?: string;
    organisation_revenue_this_year?: number;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
  };
  planting_start_date?: string;
  framework_key?: string;
  framework_uuid?: string;
  has_monitoring_data?: boolean;
}[];

export type GetV2AdminProjectsMultiVariables = {
  queryParams: GetV2AdminProjectsMultiQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminProjectsMulti = (variables: GetV2AdminProjectsMultiVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminProjectsMultiResponse,
    GetV2AdminProjectsMultiError,
    undefined,
    {},
    GetV2AdminProjectsMultiQueryParams,
    {}
  >({ url: "/v2/admin/projects/multi", method: "get", ...variables, signal });

export const useGetV2AdminProjectsMulti = <TData = GetV2AdminProjectsMultiResponse>(
  variables: GetV2AdminProjectsMultiVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminProjectsMultiResponse, GetV2AdminProjectsMultiError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminProjectsMultiResponse, GetV2AdminProjectsMultiError, TData>(
    queryKeyFn({ path: "/v2/admin/projects/multi", operationId: "getV2AdminProjectsMulti", variables }),
    ({ signal }) => fetchGetV2AdminProjectsMulti({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminNurseriesMultiQueryParams = {
  /**
   * comma separated list of values. eg ?ids=uuid1,uuid2
   */
  ids: string;
};

export type GetV2AdminNurseriesMultiError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminNurseriesMultiResponse = {
  uuid?: string;
  name?: string;
  project?: {
    id?: string;
    uuid?: string;
    status?: string;
    name?: string;
    organisation?: {
      uuid?: string;
      type?: string;
      private?: boolean;
      name?: string;
      phone?: string;
      currency?: string;
      states?: string[];
      loan_status_types?: string[];
      land_systems?: string[];
      fund_utilisation?: string[];
      detailed_intervention_types?: string[];
      account_number_1?: string;
      account_number_2?: string;
      approach_of_marginalized_communities?: string;
      community_engagement_numbers_marginalized?: string;
      founding_date?: string;
      description?: string;
      leadership_team?: string;
      countries?: string[];
      languages?: string[];
      project_pitches?: {
        id?: string;
        uuid?: string;
        status?: string;
        readable_status?: string;
        organisation_id?: string;
        funding_programmes?: {
          id?: number;
          uuid?: string;
          name?: string;
          description?: string;
          read_more_url?: string;
          organisation_types?: string[];
          location?: string;
          status?: string;
        };
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_name?: string;
        how_discovered?: string;
        project_objectives?: string;
        project_country?: string[];
        project_county_district?: string;
        restoration_intervention_types?: string[];
        land_systems?: string[];
        tree_restoration_practices?: string[];
        total_hectares?: number;
        project_budget?: number;
        total_trees?: number;
        capacity_building_needs?: string[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        restoration_photos?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        proof_of_land_tenure_mou?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        detailed_project_budget?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        expected_active_restoration_start_date?: string;
        expected_active_restoration_end_date?: string;
        description_of_project_timeline?: string;
        proj_partner_info?: string;
        land_tenure_proj_area?: string[];
        landholder_comm_engage?: string;
        proj_success_risks?: string;
        monitor_eval_plan?: string;
        proj_boundary?: string;
        sustainable_dev_goals?: string[];
        proj_area_description?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_sites?: number;
        environmental_goals?: string;
        main_degradation_causes?: string;
        seedlings_source?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_nurseries?: number;
        curr_land_degradation?: string;
        proj_impact_socieconom?: string;
        proj_impact_foodsec?: string;
        proj_impact_watersec?: string;
        proj_impact_jobtypes?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        num_jobs_created?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_men?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_18to35?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_older35?: number;
        proj_beneficiaries?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_small?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_large?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_youth?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_classes?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_tribes?: number;
        monitoring_evaluation_plan?: string;
        main_causes_of_degradation?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      web_url?: string;
      facebook_url?: string;
      instagram_url?: string;
      linkedin_url?: string;
      twitter_url?: string;
      hq_street_1?: string;
      hq_street_2?: string;
      hq_city?: string;
      hq_state?: string;
      hq_zipcode?: string;
      hq_country?: string;
      fin_start_month?: number;
      /**
       * @format float
       */
      fin_budget_3year?: number;
      /**
       * @format float
       */
      fin_budget_2year?: number;
      /**
       * @format float
       */
      fin_budget_1year?: number;
      /**
       * @format float
       */
      fin_budget_current_year?: number;
      /**
       * @format float
       */
      ha_restored_total?: number;
      /**
       * @format float
       */
      ha_restored_3year?: number;
      relevant_experience_years?: number;
      trees_grown_total?: number;
      trees_grown_3year?: number;
      tree_care_approach?: string;
      ft_permanent_employees?: number;
      pt_permanent_employees?: number;
      temp_employees?: number;
      female_employees?: number;
      male_employees?: number;
      young_employees?: number;
      additional_funding_details?: string;
      community_experience?: string;
      total_engaged_community_members_3yr?: number;
      percent_engaged_women_3yr?: number;
      percent_engaged_men_3yr?: number;
      percent_engaged_under_35_3yr?: number;
      percent_engaged_over_35_3yr?: number;
      percent_engaged_smallholder_3yr?: number;
      total_trees_grown?: number;
      avg_tree_survival_rate?: number;
      tree_maintenance_aftercare_approach?: string;
      restored_areas_description?: string;
      monitoring_evaluation_experience?: string;
      funding_history?: string;
      engagement_farmers?: string[];
      engagement_women?: string[];
      engagement_youth?: string[];
      engagement_non_youth?: string[];
      tree_restoration_practices?: string[];
      business_model?: string;
      subtype?: string;
      organisation_revenue_this_year?: number;
      shapefiles?: {
        uuid?: string;
        shapefileable_type?: string;
        shapefileable_id?: number;
        geojson?: string;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      bank_statements?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      previous_annual_reports?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      logo?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      reference?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_2year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_last_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_this_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_next_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      legal_registration?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
    };
    planting_start_date?: string;
    framework_key?: string;
    framework_uuid?: string;
    has_monitoring_data?: boolean;
  };
  framework_key?: string;
  framework_uuid?: string;
  status?: string;
  readable_status?: string;
}[];

export type GetV2AdminNurseriesMultiVariables = {
  queryParams: GetV2AdminNurseriesMultiQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminNurseriesMulti = (variables: GetV2AdminNurseriesMultiVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminNurseriesMultiResponse,
    GetV2AdminNurseriesMultiError,
    undefined,
    {},
    GetV2AdminNurseriesMultiQueryParams,
    {}
  >({ url: "/v2/admin/nurseries/multi", method: "get", ...variables, signal });

export const useGetV2AdminNurseriesMulti = <TData = GetV2AdminNurseriesMultiResponse>(
  variables: GetV2AdminNurseriesMultiVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminNurseriesMultiResponse, GetV2AdminNurseriesMultiError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminNurseriesMultiResponse, GetV2AdminNurseriesMultiError, TData>(
    queryKeyFn({ path: "/v2/admin/nurseries/multi", operationId: "getV2AdminNurseriesMulti", variables }),
    ({ signal }) => fetchGetV2AdminNurseriesMulti({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminSitesMultiQueryParams = {
  /**
   * comma separated list of values. eg ?ids=uuid1,uuid2
   */
  ids: string;
};

export type GetV2AdminSitesMultiError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminSitesMultiResponse = {
  uuid?: string;
  name?: string;
  project?: {
    id?: string;
    uuid?: string;
    status?: string;
    name?: string;
    organisation?: {
      uuid?: string;
      type?: string;
      private?: boolean;
      name?: string;
      phone?: string;
      currency?: string;
      states?: string[];
      loan_status_types?: string[];
      land_systems?: string[];
      fund_utilisation?: string[];
      detailed_intervention_types?: string[];
      account_number_1?: string;
      account_number_2?: string;
      approach_of_marginalized_communities?: string;
      community_engagement_numbers_marginalized?: string;
      founding_date?: string;
      description?: string;
      leadership_team?: string;
      countries?: string[];
      languages?: string[];
      project_pitches?: {
        id?: string;
        uuid?: string;
        status?: string;
        readable_status?: string;
        organisation_id?: string;
        funding_programmes?: {
          id?: number;
          uuid?: string;
          name?: string;
          description?: string;
          read_more_url?: string;
          organisation_types?: string[];
          location?: string;
          status?: string;
        };
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_name?: string;
        how_discovered?: string;
        project_objectives?: string;
        project_country?: string[];
        project_county_district?: string;
        restoration_intervention_types?: string[];
        land_systems?: string[];
        tree_restoration_practices?: string[];
        total_hectares?: number;
        project_budget?: number;
        total_trees?: number;
        capacity_building_needs?: string[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        restoration_photos?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        proof_of_land_tenure_mou?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        detailed_project_budget?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        expected_active_restoration_start_date?: string;
        expected_active_restoration_end_date?: string;
        description_of_project_timeline?: string;
        proj_partner_info?: string;
        land_tenure_proj_area?: string[];
        landholder_comm_engage?: string;
        proj_success_risks?: string;
        monitor_eval_plan?: string;
        proj_boundary?: string;
        sustainable_dev_goals?: string[];
        proj_area_description?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_sites?: number;
        environmental_goals?: string;
        main_degradation_causes?: string;
        seedlings_source?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_nurseries?: number;
        curr_land_degradation?: string;
        proj_impact_socieconom?: string;
        proj_impact_foodsec?: string;
        proj_impact_watersec?: string;
        proj_impact_jobtypes?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        num_jobs_created?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_men?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_18to35?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_older35?: number;
        proj_beneficiaries?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_small?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_large?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_youth?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_classes?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_tribes?: number;
        monitoring_evaluation_plan?: string;
        main_causes_of_degradation?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      web_url?: string;
      facebook_url?: string;
      instagram_url?: string;
      linkedin_url?: string;
      twitter_url?: string;
      hq_street_1?: string;
      hq_street_2?: string;
      hq_city?: string;
      hq_state?: string;
      hq_zipcode?: string;
      hq_country?: string;
      fin_start_month?: number;
      /**
       * @format float
       */
      fin_budget_3year?: number;
      /**
       * @format float
       */
      fin_budget_2year?: number;
      /**
       * @format float
       */
      fin_budget_1year?: number;
      /**
       * @format float
       */
      fin_budget_current_year?: number;
      /**
       * @format float
       */
      ha_restored_total?: number;
      /**
       * @format float
       */
      ha_restored_3year?: number;
      relevant_experience_years?: number;
      trees_grown_total?: number;
      trees_grown_3year?: number;
      tree_care_approach?: string;
      ft_permanent_employees?: number;
      pt_permanent_employees?: number;
      temp_employees?: number;
      female_employees?: number;
      male_employees?: number;
      young_employees?: number;
      additional_funding_details?: string;
      community_experience?: string;
      total_engaged_community_members_3yr?: number;
      percent_engaged_women_3yr?: number;
      percent_engaged_men_3yr?: number;
      percent_engaged_under_35_3yr?: number;
      percent_engaged_over_35_3yr?: number;
      percent_engaged_smallholder_3yr?: number;
      total_trees_grown?: number;
      avg_tree_survival_rate?: number;
      tree_maintenance_aftercare_approach?: string;
      restored_areas_description?: string;
      monitoring_evaluation_experience?: string;
      funding_history?: string;
      engagement_farmers?: string[];
      engagement_women?: string[];
      engagement_youth?: string[];
      engagement_non_youth?: string[];
      tree_restoration_practices?: string[];
      business_model?: string;
      subtype?: string;
      organisation_revenue_this_year?: number;
      shapefiles?: {
        uuid?: string;
        shapefileable_type?: string;
        shapefileable_id?: number;
        geojson?: string;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      bank_statements?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      previous_annual_reports?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      logo?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      reference?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_2year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_last_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_this_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_next_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      legal_registration?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
    };
    planting_start_date?: string;
    framework_key?: string;
    framework_uuid?: string;
    has_monitoring_data?: boolean;
  };
  framework_key?: string;
  framework_uuid?: string;
  status?: string;
  readable_status?: string;
  has_monitoring_data?: boolean;
}[];

export type GetV2AdminSitesMultiVariables = {
  queryParams: GetV2AdminSitesMultiQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminSitesMulti = (variables: GetV2AdminSitesMultiVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminSitesMultiResponse, GetV2AdminSitesMultiError, undefined, {}, GetV2AdminSitesMultiQueryParams, {}>(
    { url: "/v2/admin/sites/multi", method: "get", ...variables, signal }
  );

export const useGetV2AdminSitesMulti = <TData = GetV2AdminSitesMultiResponse>(
  variables: GetV2AdminSitesMultiVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminSitesMultiResponse, GetV2AdminSitesMultiError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminSitesMultiResponse, GetV2AdminSitesMultiError, TData>(
    queryKeyFn({ path: "/v2/admin/sites/multi", operationId: "getV2AdminSitesMulti", variables }),
    ({ signal }) => fetchGetV2AdminSitesMulti({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostUsersError = Fetcher.ErrorWrapper<undefined>;

export type PostUsersResponse = {
  id?: number;
  uuid?: string;
  role?: string;
  job_role?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  phone_number?: string;
  whatsapp_phone?: string;
  organisation?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  };
  /**
   * @format date-time
   */
  last_logged_in_at?: string;
  /**
   * @format date-time
   */
  email_address_verified_at?: string;
  verified?: boolean;
  /**
   * @format date-time
   */
  date_added?: string;
  banners?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
  /**
   * @format date-time
   */
  created_at?: string;
};

export type PostUsersRequestBody = {
  first_name?: string;
  last_name?: string;
  email_address?: string;
  password?: string;
  job_role?: string;
  facebook?: string;
  twitter?: string;
  instagram?: string;
  linkedin?: string;
  phone_number?: string;
  whatsapp_phone?: string;
  callback_url?: string;
  role?: string;
  country?: string;
  program?: string;
};

export type PostUsersVariables = {
  body?: PostUsersRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostUsers = (variables: PostUsersVariables, signal?: AbortSignal) =>
  apiFetch<PostUsersResponse, PostUsersError, PostUsersRequestBody, {}, {}, {}>({
    url: "/users",
    method: "post",
    ...variables,
    signal
  });

export const usePostUsers = (
  options?: Omit<reactQuery.UseMutationOptions<PostUsersResponse, PostUsersError, PostUsersVariables>, "mutationFn">
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostUsersResponse, PostUsersError, PostUsersVariables>(
    (variables: PostUsersVariables) => fetchPostUsers({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ProjectsUUIDPartnersPathParams = {
  uuid: string;
};

export type GetV2ProjectsUUIDPartnersError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDPartnersResponse = {
  uuid?: string;
  role?: string;
  job_role?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  /**
   * allowed values Pending|Accepted
   */
  status?: string;
}[];

export type GetV2ProjectsUUIDPartnersVariables = {
  pathParams: GetV2ProjectsUUIDPartnersPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectsUUIDPartners = (variables: GetV2ProjectsUUIDPartnersVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2ProjectsUUIDPartnersResponse,
    GetV2ProjectsUUIDPartnersError,
    undefined,
    {},
    {},
    GetV2ProjectsUUIDPartnersPathParams
  >({ url: "/v2/projects/{uuid}/partners", method: "get", ...variables, signal });

export const useGetV2ProjectsUUIDPartners = <TData = GetV2ProjectsUUIDPartnersResponse>(
  variables: GetV2ProjectsUUIDPartnersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectsUUIDPartnersResponse, GetV2ProjectsUUIDPartnersError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectsUUIDPartnersResponse, GetV2ProjectsUUIDPartnersError, TData>(
    queryKeyFn({ path: "/v2/projects/{UUID}/partners", operationId: "getV2ProjectsUUIDPartners", variables }),
    ({ signal }) => fetchGetV2ProjectsUUIDPartners({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2ProjectsUUIDEMAILRemovePartnerPathParams = {
  uuid: string;
  email: string;
};

export type DeleteV2ProjectsUUIDEMAILRemovePartnerError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2ProjectsUUIDEMAILRemovePartnerVariables = {
  pathParams: DeleteV2ProjectsUUIDEMAILRemovePartnerPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2ProjectsUUIDEMAILRemovePartner = (
  variables: DeleteV2ProjectsUUIDEMAILRemovePartnerVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2ProjectsUUIDEMAILRemovePartnerError,
    undefined,
    {},
    {},
    DeleteV2ProjectsUUIDEMAILRemovePartnerPathParams
  >({ url: "/v2/projects/{uuid}/{email}/remove-partner", method: "delete", ...variables, signal });

export const useDeleteV2ProjectsUUIDEMAILRemovePartner = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2ProjectsUUIDEMAILRemovePartnerError,
      DeleteV2ProjectsUUIDEMAILRemovePartnerVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2ProjectsUUIDEMAILRemovePartnerError,
    DeleteV2ProjectsUUIDEMAILRemovePartnerVariables
  >(
    (variables: DeleteV2ProjectsUUIDEMAILRemovePartnerVariables) =>
      fetchDeleteV2ProjectsUUIDEMAILRemovePartner({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2MyProjectsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2MyProjectsResponse = {
  id?: string;
  uuid?: string;
  status?: string;
  name?: string;
  organisation?: {
    uuid?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    currency?: string;
    states?: string[];
    loan_status_types?: string[];
    land_systems?: string[];
    fund_utilisation?: string[];
    detailed_intervention_types?: string[];
    account_number_1?: string;
    account_number_2?: string;
    approach_of_marginalized_communities?: string;
    community_engagement_numbers_marginalized?: string;
    founding_date?: string;
    description?: string;
    leadership_team?: string;
    countries?: string[];
    languages?: string[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    engagement_farmers?: string[];
    engagement_women?: string[];
    engagement_youth?: string[];
    engagement_non_youth?: string[];
    tree_restoration_practices?: string[];
    business_model?: string;
    subtype?: string;
    organisation_revenue_this_year?: number;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
  };
  planting_start_date?: string;
  framework_key?: string;
  framework_uuid?: string;
  has_monitoring_data?: boolean;
}[];

export type GetV2MyProjectsVariables = ApiContext["fetcherOptions"];

export const fetchGetV2MyProjects = (variables: GetV2MyProjectsVariables, signal?: AbortSignal) =>
  apiFetch<GetV2MyProjectsResponse, GetV2MyProjectsError, undefined, {}, {}, {}>({
    url: "/v2/my/projects",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2MyProjects = <TData = GetV2MyProjectsResponse>(
  variables: GetV2MyProjectsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2MyProjectsResponse, GetV2MyProjectsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2MyProjectsResponse, GetV2MyProjectsError, TData>(
    queryKeyFn({ path: "/v2/my/projects", operationId: "getV2MyProjects", variables }),
    ({ signal }) => fetchGetV2MyProjects({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2MyActionsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2MyActionsResponse = {
  data?: {
    uuid?: string;
    status?: string;
    type?: string;
    subtype?: string;
    title?: string;
    sub_title?: string;
    text?: string;
    key?: string;
    /**
     * one of Project|ProjectReport|Site|SiteReport|Nursery|NurseryReport|UpdateRequest
     */
    targetable_type?: string;
    targetable_id?: number;
    /**
     * contains the “Lite” objects for the model involved with the Action
     */
    target?: Record<string, any>;
    organisation_id?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
};

export type GetV2MyActionsVariables = ApiContext["fetcherOptions"];

export const fetchGetV2MyActions = (variables: GetV2MyActionsVariables, signal?: AbortSignal) =>
  apiFetch<GetV2MyActionsResponse, GetV2MyActionsError, undefined, {}, {}, {}>({
    url: "/v2/my/actions",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2MyActions = <TData = GetV2MyActionsResponse>(
  variables: GetV2MyActionsVariables,
  options?: Omit<reactQuery.UseQueryOptions<GetV2MyActionsResponse, GetV2MyActionsError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2MyActionsResponse, GetV2MyActionsError, TData>(
    queryKeyFn({ path: "/v2/my/actions", operationId: "getV2MyActions", variables }),
    ({ signal }) => fetchGetV2MyActions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2MyActionsUUIDCompletePathParams = {
  uuid: string;
};

export type PutV2MyActionsUUIDCompleteError = Fetcher.ErrorWrapper<undefined>;

export type PutV2MyActionsUUIDCompleteResponse = {
  uuid?: string;
  status?: string;
  type?: string;
  subtype?: string;
  title?: string;
  sub_title?: string;
  text?: string;
  key?: string;
  /**
   * one of Project|ProjectReport|Site|SiteReport|Nursery|NurseryReport|UpdateRequest
   */
  targetable_type?: string;
  targetable_id?: number;
  /**
   * contains the “Lite” objects for the model involved with the Action
   */
  target?: Record<string, any>;
  organisation_id?: number;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PutV2MyActionsUUIDCompleteVariables = {
  pathParams: PutV2MyActionsUUIDCompletePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2MyActionsUUIDComplete = (variables: PutV2MyActionsUUIDCompleteVariables, signal?: AbortSignal) =>
  apiFetch<
    PutV2MyActionsUUIDCompleteResponse,
    PutV2MyActionsUUIDCompleteError,
    undefined,
    {},
    {},
    PutV2MyActionsUUIDCompletePathParams
  >({ url: "/v2/my/actions/{uuid}/complete", method: "put", ...variables, signal });

export const usePutV2MyActionsUUIDComplete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2MyActionsUUIDCompleteResponse,
      PutV2MyActionsUUIDCompleteError,
      PutV2MyActionsUUIDCompleteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2MyActionsUUIDCompleteResponse,
    PutV2MyActionsUUIDCompleteError,
    PutV2MyActionsUUIDCompleteVariables
  >(
    (variables: PutV2MyActionsUUIDCompleteVariables) =>
      fetchPutV2MyActionsUUIDComplete({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2ENTITYUUIDNothingToReportPathParams = {
  /**
   * allowed values are project-reports, site-reports, nursery-reports
   */
  entity: string;
  uuid: string;
};

export type PutV2ENTITYUUIDNothingToReportError = Fetcher.ErrorWrapper<undefined>;

export type PutV2ENTITYUUIDNothingToReportVariables = {
  pathParams: PutV2ENTITYUUIDNothingToReportPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2ENTITYUUIDNothingToReport = (
  variables: PutV2ENTITYUUIDNothingToReportVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PutV2ENTITYUUIDNothingToReportError, undefined, {}, {}, PutV2ENTITYUUIDNothingToReportPathParams>(
    { url: "/v2/{entity}/{uuid}/nothing-to-report", method: "put", ...variables, signal }
  );

export const usePutV2ENTITYUUIDNothingToReport = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PutV2ENTITYUUIDNothingToReportError,
      PutV2ENTITYUUIDNothingToReportVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    PutV2ENTITYUUIDNothingToReportError,
    PutV2ENTITYUUIDNothingToReportVariables
  >(
    (variables: PutV2ENTITYUUIDNothingToReportVariables) =>
      fetchPutV2ENTITYUUIDNothingToReport({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ENTITYUUIDReportsPathParams = {
  /**
   * allowed values are projects, sites, nurserys
   */
  entity: string;
  uuid: string;
};

export type GetV2ENTITYUUIDReportsQueryParams = {
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-name
   */
  sort?: string;
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2ENTITYUUIDReportsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ENTITYUUIDReportsResponse = {
  data?: Record<string, any>[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2ENTITYUUIDReportsVariables = {
  pathParams: GetV2ENTITYUUIDReportsPathParams;
  queryParams?: GetV2ENTITYUUIDReportsQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Filters : status  |  Available Searches: name  |  Available Sort Options: name, status, created_at, updated_at
 */
export const fetchGetV2ENTITYUUIDReports = (variables: GetV2ENTITYUUIDReportsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2ENTITYUUIDReportsResponse,
    GetV2ENTITYUUIDReportsError,
    undefined,
    {},
    GetV2ENTITYUUIDReportsQueryParams,
    GetV2ENTITYUUIDReportsPathParams
  >({ url: "/v2/{entity}/{uuid}/reports", method: "get", ...variables, signal });

/**
 * Available Filters : status  |  Available Searches: name  |  Available Sort Options: name, status, created_at, updated_at
 */
export const useGetV2ENTITYUUIDReports = <TData = GetV2ENTITYUUIDReportsResponse>(
  variables: GetV2ENTITYUUIDReportsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ENTITYUUIDReportsResponse, GetV2ENTITYUUIDReportsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ENTITYUUIDReportsResponse, GetV2ENTITYUUIDReportsError, TData>(
    queryKeyFn({ path: "/v2/{ENTITY}/{UUID}/reports", operationId: "getV2ENTITYUUIDReports", variables }),
    ({ signal }) => fetchGetV2ENTITYUUIDReports({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminNurseryReportsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminNurseryReportsResponse = {
  data?: {
    uuid?: string;
    framework_key?: string;
    framework_uuid?: string;
    status?: number;
    readable_status?: string;
    title?: string;
    due_at?: string;
    date_submitted?: string;
    organisation?: {
      uuid?: string;
      type?: string;
      private?: boolean;
      name?: string;
      phone?: string;
      currency?: string;
      states?: string[];
      loan_status_types?: string[];
      land_systems?: string[];
      fund_utilisation?: string[];
      detailed_intervention_types?: string[];
      account_number_1?: string;
      account_number_2?: string;
      approach_of_marginalized_communities?: string;
      community_engagement_numbers_marginalized?: string;
      founding_date?: string;
      description?: string;
      leadership_team?: string;
      countries?: string[];
      languages?: string[];
      project_pitches?: {
        id?: string;
        uuid?: string;
        status?: string;
        readable_status?: string;
        organisation_id?: string;
        funding_programmes?: {
          id?: number;
          uuid?: string;
          name?: string;
          description?: string;
          read_more_url?: string;
          organisation_types?: string[];
          location?: string;
          status?: string;
        };
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_name?: string;
        how_discovered?: string;
        project_objectives?: string;
        project_country?: string[];
        project_county_district?: string;
        restoration_intervention_types?: string[];
        land_systems?: string[];
        tree_restoration_practices?: string[];
        total_hectares?: number;
        project_budget?: number;
        total_trees?: number;
        capacity_building_needs?: string[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        restoration_photos?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        proof_of_land_tenure_mou?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        detailed_project_budget?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        expected_active_restoration_start_date?: string;
        expected_active_restoration_end_date?: string;
        description_of_project_timeline?: string;
        proj_partner_info?: string;
        land_tenure_proj_area?: string[];
        landholder_comm_engage?: string;
        proj_success_risks?: string;
        monitor_eval_plan?: string;
        proj_boundary?: string;
        sustainable_dev_goals?: string[];
        proj_area_description?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_sites?: number;
        environmental_goals?: string;
        main_degradation_causes?: string;
        seedlings_source?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_nurseries?: number;
        curr_land_degradation?: string;
        proj_impact_socieconom?: string;
        proj_impact_foodsec?: string;
        proj_impact_watersec?: string;
        proj_impact_jobtypes?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        num_jobs_created?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_men?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_18to35?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_older35?: number;
        proj_beneficiaries?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_small?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_large?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_youth?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_classes?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_tribes?: number;
        monitoring_evaluation_plan?: string;
        main_causes_of_degradation?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      web_url?: string;
      facebook_url?: string;
      instagram_url?: string;
      linkedin_url?: string;
      twitter_url?: string;
      hq_street_1?: string;
      hq_street_2?: string;
      hq_city?: string;
      hq_state?: string;
      hq_zipcode?: string;
      hq_country?: string;
      fin_start_month?: number;
      /**
       * @format float
       */
      fin_budget_3year?: number;
      /**
       * @format float
       */
      fin_budget_2year?: number;
      /**
       * @format float
       */
      fin_budget_1year?: number;
      /**
       * @format float
       */
      fin_budget_current_year?: number;
      /**
       * @format float
       */
      ha_restored_total?: number;
      /**
       * @format float
       */
      ha_restored_3year?: number;
      relevant_experience_years?: number;
      trees_grown_total?: number;
      trees_grown_3year?: number;
      tree_care_approach?: string;
      ft_permanent_employees?: number;
      pt_permanent_employees?: number;
      temp_employees?: number;
      female_employees?: number;
      male_employees?: number;
      young_employees?: number;
      additional_funding_details?: string;
      community_experience?: string;
      total_engaged_community_members_3yr?: number;
      percent_engaged_women_3yr?: number;
      percent_engaged_men_3yr?: number;
      percent_engaged_under_35_3yr?: number;
      percent_engaged_over_35_3yr?: number;
      percent_engaged_smallholder_3yr?: number;
      total_trees_grown?: number;
      avg_tree_survival_rate?: number;
      tree_maintenance_aftercare_approach?: string;
      restored_areas_description?: string;
      monitoring_evaluation_experience?: string;
      funding_history?: string;
      engagement_farmers?: string[];
      engagement_women?: string[];
      engagement_youth?: string[];
      engagement_non_youth?: string[];
      tree_restoration_practices?: string[];
      business_model?: string;
      subtype?: string;
      organisation_revenue_this_year?: number;
      shapefiles?: {
        uuid?: string;
        shapefileable_type?: string;
        shapefileable_id?: number;
        geojson?: string;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      bank_statements?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      previous_annual_reports?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      logo?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      reference?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_2year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_last_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_this_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_next_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      legal_registration?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
    };
    project?: {
      id?: string;
      uuid?: string;
      status?: string;
      name?: string;
      organisation?: {
        uuid?: string;
        type?: string;
        private?: boolean;
        name?: string;
        phone?: string;
        currency?: string;
        states?: string[];
        loan_status_types?: string[];
        land_systems?: string[];
        fund_utilisation?: string[];
        detailed_intervention_types?: string[];
        account_number_1?: string;
        account_number_2?: string;
        approach_of_marginalized_communities?: string;
        community_engagement_numbers_marginalized?: string;
        founding_date?: string;
        description?: string;
        leadership_team?: string;
        countries?: string[];
        languages?: string[];
        project_pitches?: {
          id?: string;
          uuid?: string;
          status?: string;
          readable_status?: string;
          organisation_id?: string;
          funding_programmes?: {
            id?: number;
            uuid?: string;
            name?: string;
            description?: string;
            read_more_url?: string;
            organisation_types?: string[];
            location?: string;
            status?: string;
          };
          tree_species?: {
            uuid?: string;
            name?: string;
            amount?: number;
            type?: string;
            collection?: string;
          }[];
          project_name?: string;
          how_discovered?: string;
          project_objectives?: string;
          project_country?: string[];
          project_county_district?: string;
          restoration_intervention_types?: string[];
          land_systems?: string[];
          tree_restoration_practices?: string[];
          total_hectares?: number;
          project_budget?: number;
          total_trees?: number;
          capacity_building_needs?: string[];
          additional?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          restoration_photos?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          cover?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          proof_of_land_tenure_mou?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          detailed_project_budget?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          expected_active_restoration_start_date?: string;
          expected_active_restoration_end_date?: string;
          description_of_project_timeline?: string;
          proj_partner_info?: string;
          land_tenure_proj_area?: string[];
          landholder_comm_engage?: string;
          proj_success_risks?: string;
          monitor_eval_plan?: string;
          proj_boundary?: string;
          sustainable_dev_goals?: string[];
          proj_area_description?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          proposed_num_sites?: number;
          environmental_goals?: string;
          main_degradation_causes?: string;
          seedlings_source?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          proposed_num_nurseries?: number;
          curr_land_degradation?: string;
          proj_impact_socieconom?: string;
          proj_impact_foodsec?: string;
          proj_impact_watersec?: string;
          proj_impact_jobtypes?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          num_jobs_created?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_men?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_women?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_18to35?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_older35?: number;
          proj_beneficiaries?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_women?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_small?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_large?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_youth?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_scheduled_classes?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_scheduled_tribes?: number;
          monitoring_evaluation_plan?: string;
          main_causes_of_degradation?: string;
          deleted_at?: string;
          created_at?: string;
          updated_at?: string;
        }[];
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        web_url?: string;
        facebook_url?: string;
        instagram_url?: string;
        linkedin_url?: string;
        twitter_url?: string;
        hq_street_1?: string;
        hq_street_2?: string;
        hq_city?: string;
        hq_state?: string;
        hq_zipcode?: string;
        hq_country?: string;
        fin_start_month?: number;
        /**
         * @format float
         */
        fin_budget_3year?: number;
        /**
         * @format float
         */
        fin_budget_2year?: number;
        /**
         * @format float
         */
        fin_budget_1year?: number;
        /**
         * @format float
         */
        fin_budget_current_year?: number;
        /**
         * @format float
         */
        ha_restored_total?: number;
        /**
         * @format float
         */
        ha_restored_3year?: number;
        relevant_experience_years?: number;
        trees_grown_total?: number;
        trees_grown_3year?: number;
        tree_care_approach?: string;
        ft_permanent_employees?: number;
        pt_permanent_employees?: number;
        temp_employees?: number;
        female_employees?: number;
        male_employees?: number;
        young_employees?: number;
        additional_funding_details?: string;
        community_experience?: string;
        total_engaged_community_members_3yr?: number;
        percent_engaged_women_3yr?: number;
        percent_engaged_men_3yr?: number;
        percent_engaged_under_35_3yr?: number;
        percent_engaged_over_35_3yr?: number;
        percent_engaged_smallholder_3yr?: number;
        total_trees_grown?: number;
        avg_tree_survival_rate?: number;
        tree_maintenance_aftercare_approach?: string;
        restored_areas_description?: string;
        monitoring_evaluation_experience?: string;
        funding_history?: string;
        engagement_farmers?: string[];
        engagement_women?: string[];
        engagement_youth?: string[];
        engagement_non_youth?: string[];
        tree_restoration_practices?: string[];
        business_model?: string;
        subtype?: string;
        organisation_revenue_this_year?: number;
        shapefiles?: {
          uuid?: string;
          shapefileable_type?: string;
          shapefileable_id?: number;
          geojson?: string;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        bank_statements?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        previous_annual_reports?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        logo?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        reference?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_2year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_last_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_this_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_next_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        legal_registration?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg slug: name
         */
        tags?: string[];
      };
      planting_start_date?: string;
      framework_key?: string;
      framework_uuid?: string;
      has_monitoring_data?: boolean;
    };
    nursery?: {
      uuid?: string;
      name?: string;
      project?: {
        id?: string;
        uuid?: string;
        status?: string;
        name?: string;
        organisation?: {
          uuid?: string;
          type?: string;
          private?: boolean;
          name?: string;
          phone?: string;
          currency?: string;
          states?: string[];
          loan_status_types?: string[];
          land_systems?: string[];
          fund_utilisation?: string[];
          detailed_intervention_types?: string[];
          account_number_1?: string;
          account_number_2?: string;
          approach_of_marginalized_communities?: string;
          community_engagement_numbers_marginalized?: string;
          founding_date?: string;
          description?: string;
          leadership_team?: string;
          countries?: string[];
          languages?: string[];
          project_pitches?: {
            id?: string;
            uuid?: string;
            status?: string;
            readable_status?: string;
            organisation_id?: string;
            funding_programmes?: {
              id?: number;
              uuid?: string;
              name?: string;
              description?: string;
              read_more_url?: string;
              organisation_types?: string[];
              location?: string;
              status?: string;
            };
            tree_species?: {
              uuid?: string;
              name?: string;
              amount?: number;
              type?: string;
              collection?: string;
            }[];
            project_name?: string;
            how_discovered?: string;
            project_objectives?: string;
            project_country?: string[];
            project_county_district?: string;
            restoration_intervention_types?: string[];
            land_systems?: string[];
            tree_restoration_practices?: string[];
            total_hectares?: number;
            project_budget?: number;
            total_trees?: number;
            capacity_building_needs?: string[];
            additional?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            }[];
            restoration_photos?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            }[];
            cover?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            };
            proof_of_land_tenure_mou?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            }[];
            detailed_project_budget?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            };
            expected_active_restoration_start_date?: string;
            expected_active_restoration_end_date?: string;
            description_of_project_timeline?: string;
            proj_partner_info?: string;
            land_tenure_proj_area?: string[];
            landholder_comm_engage?: string;
            proj_success_risks?: string;
            monitor_eval_plan?: string;
            proj_boundary?: string;
            sustainable_dev_goals?: string[];
            proj_area_description?: string;
            /**
             * @minimum 0
             * @maximum 4294967295
             */
            proposed_num_sites?: number;
            environmental_goals?: string;
            main_degradation_causes?: string;
            seedlings_source?: string;
            /**
             * @minimum 0
             * @maximum 4294967295
             */
            proposed_num_nurseries?: number;
            curr_land_degradation?: string;
            proj_impact_socieconom?: string;
            proj_impact_foodsec?: string;
            proj_impact_watersec?: string;
            proj_impact_jobtypes?: string;
            /**
             * @minimum 0
             * @maximum 4294967295
             */
            num_jobs_created?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_employees_men?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_employees_women?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_employees_18to35?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_employees_older35?: number;
            proj_beneficiaries?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_women?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_small?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_large?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_youth?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_scheduled_classes?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_scheduled_tribes?: number;
            monitoring_evaluation_plan?: string;
            main_causes_of_degradation?: string;
            deleted_at?: string;
            created_at?: string;
            updated_at?: string;
          }[];
          tree_species?: {
            uuid?: string;
            name?: string;
            amount?: number;
            type?: string;
            collection?: string;
          }[];
          web_url?: string;
          facebook_url?: string;
          instagram_url?: string;
          linkedin_url?: string;
          twitter_url?: string;
          hq_street_1?: string;
          hq_street_2?: string;
          hq_city?: string;
          hq_state?: string;
          hq_zipcode?: string;
          hq_country?: string;
          fin_start_month?: number;
          /**
           * @format float
           */
          fin_budget_3year?: number;
          /**
           * @format float
           */
          fin_budget_2year?: number;
          /**
           * @format float
           */
          fin_budget_1year?: number;
          /**
           * @format float
           */
          fin_budget_current_year?: number;
          /**
           * @format float
           */
          ha_restored_total?: number;
          /**
           * @format float
           */
          ha_restored_3year?: number;
          relevant_experience_years?: number;
          trees_grown_total?: number;
          trees_grown_3year?: number;
          tree_care_approach?: string;
          ft_permanent_employees?: number;
          pt_permanent_employees?: number;
          temp_employees?: number;
          female_employees?: number;
          male_employees?: number;
          young_employees?: number;
          additional_funding_details?: string;
          community_experience?: string;
          total_engaged_community_members_3yr?: number;
          percent_engaged_women_3yr?: number;
          percent_engaged_men_3yr?: number;
          percent_engaged_under_35_3yr?: number;
          percent_engaged_over_35_3yr?: number;
          percent_engaged_smallholder_3yr?: number;
          total_trees_grown?: number;
          avg_tree_survival_rate?: number;
          tree_maintenance_aftercare_approach?: string;
          restored_areas_description?: string;
          monitoring_evaluation_experience?: string;
          funding_history?: string;
          engagement_farmers?: string[];
          engagement_women?: string[];
          engagement_youth?: string[];
          engagement_non_youth?: string[];
          tree_restoration_practices?: string[];
          business_model?: string;
          subtype?: string;
          organisation_revenue_this_year?: number;
          shapefiles?: {
            uuid?: string;
            shapefileable_type?: string;
            shapefileable_id?: number;
            geojson?: string;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          bank_statements?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          previous_annual_reports?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          logo?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          cover?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          reference?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          additional?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          op_budget_2year?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          op_budget_last_year?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          op_budget_this_year?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          op_budget_next_year?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          legal_registration?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          /**
           * this is a list of key value pairs eg slug: name
           */
          tags?: string[];
        };
        planting_start_date?: string;
        framework_key?: string;
        framework_uuid?: string;
        has_monitoring_data?: boolean;
      };
      framework_key?: string;
      framework_uuid?: string;
      status?: string;
      readable_status?: string;
    };
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminNurseryReportsVariables = {
  body?: RequestBodies.GetV2AdminNurseryReportsBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminNurseryReports = (variables: GetV2AdminNurseryReportsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminNurseryReportsResponse,
    GetV2AdminNurseryReportsError,
    RequestBodies.GetV2AdminNurseryReportsBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/nursery-reports", method: "get", ...variables, signal });

export const useGetV2AdminNurseryReports = <TData = GetV2AdminNurseryReportsResponse>(
  variables: GetV2AdminNurseryReportsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminNurseryReportsResponse, GetV2AdminNurseryReportsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminNurseryReportsResponse, GetV2AdminNurseryReportsError, TData>(
    queryKeyFn({ path: "/v2/admin/nursery-reports", operationId: "getV2AdminNurseryReports", variables }),
    ({ signal }) => fetchGetV2AdminNurseryReports({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminSiteReportsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminSiteReportsResponse = {
  data?: {
    uuid?: string;
    framework_key?: string;
    framework_uuid?: string;
    status?: number;
    readable_status?: string;
    title?: string;
    due_at?: string;
    date_submitted?: string;
    organisation?: {
      uuid?: string;
      type?: string;
      private?: boolean;
      name?: string;
      phone?: string;
      currency?: string;
      states?: string[];
      loan_status_types?: string[];
      land_systems?: string[];
      fund_utilisation?: string[];
      detailed_intervention_types?: string[];
      account_number_1?: string;
      account_number_2?: string;
      approach_of_marginalized_communities?: string;
      community_engagement_numbers_marginalized?: string;
      founding_date?: string;
      description?: string;
      leadership_team?: string;
      countries?: string[];
      languages?: string[];
      project_pitches?: {
        id?: string;
        uuid?: string;
        status?: string;
        readable_status?: string;
        organisation_id?: string;
        funding_programmes?: {
          id?: number;
          uuid?: string;
          name?: string;
          description?: string;
          read_more_url?: string;
          organisation_types?: string[];
          location?: string;
          status?: string;
        };
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_name?: string;
        how_discovered?: string;
        project_objectives?: string;
        project_country?: string[];
        project_county_district?: string;
        restoration_intervention_types?: string[];
        land_systems?: string[];
        tree_restoration_practices?: string[];
        total_hectares?: number;
        project_budget?: number;
        total_trees?: number;
        capacity_building_needs?: string[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        restoration_photos?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        proof_of_land_tenure_mou?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        detailed_project_budget?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        expected_active_restoration_start_date?: string;
        expected_active_restoration_end_date?: string;
        description_of_project_timeline?: string;
        proj_partner_info?: string;
        land_tenure_proj_area?: string[];
        landholder_comm_engage?: string;
        proj_success_risks?: string;
        monitor_eval_plan?: string;
        proj_boundary?: string;
        sustainable_dev_goals?: string[];
        proj_area_description?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_sites?: number;
        environmental_goals?: string;
        main_degradation_causes?: string;
        seedlings_source?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_nurseries?: number;
        curr_land_degradation?: string;
        proj_impact_socieconom?: string;
        proj_impact_foodsec?: string;
        proj_impact_watersec?: string;
        proj_impact_jobtypes?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        num_jobs_created?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_men?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_18to35?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_older35?: number;
        proj_beneficiaries?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_small?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_large?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_youth?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_classes?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_tribes?: number;
        monitoring_evaluation_plan?: string;
        main_causes_of_degradation?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      web_url?: string;
      facebook_url?: string;
      instagram_url?: string;
      linkedin_url?: string;
      twitter_url?: string;
      hq_street_1?: string;
      hq_street_2?: string;
      hq_city?: string;
      hq_state?: string;
      hq_zipcode?: string;
      hq_country?: string;
      fin_start_month?: number;
      /**
       * @format float
       */
      fin_budget_3year?: number;
      /**
       * @format float
       */
      fin_budget_2year?: number;
      /**
       * @format float
       */
      fin_budget_1year?: number;
      /**
       * @format float
       */
      fin_budget_current_year?: number;
      /**
       * @format float
       */
      ha_restored_total?: number;
      /**
       * @format float
       */
      ha_restored_3year?: number;
      relevant_experience_years?: number;
      trees_grown_total?: number;
      trees_grown_3year?: number;
      tree_care_approach?: string;
      ft_permanent_employees?: number;
      pt_permanent_employees?: number;
      temp_employees?: number;
      female_employees?: number;
      male_employees?: number;
      young_employees?: number;
      additional_funding_details?: string;
      community_experience?: string;
      total_engaged_community_members_3yr?: number;
      percent_engaged_women_3yr?: number;
      percent_engaged_men_3yr?: number;
      percent_engaged_under_35_3yr?: number;
      percent_engaged_over_35_3yr?: number;
      percent_engaged_smallholder_3yr?: number;
      total_trees_grown?: number;
      avg_tree_survival_rate?: number;
      tree_maintenance_aftercare_approach?: string;
      restored_areas_description?: string;
      monitoring_evaluation_experience?: string;
      funding_history?: string;
      engagement_farmers?: string[];
      engagement_women?: string[];
      engagement_youth?: string[];
      engagement_non_youth?: string[];
      tree_restoration_practices?: string[];
      business_model?: string;
      subtype?: string;
      organisation_revenue_this_year?: number;
      shapefiles?: {
        uuid?: string;
        shapefileable_type?: string;
        shapefileable_id?: number;
        geojson?: string;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      bank_statements?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      previous_annual_reports?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      logo?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      reference?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_2year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_last_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_this_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_next_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      legal_registration?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
    };
    project?: {
      id?: string;
      uuid?: string;
      status?: string;
      name?: string;
      organisation?: {
        uuid?: string;
        type?: string;
        private?: boolean;
        name?: string;
        phone?: string;
        currency?: string;
        states?: string[];
        loan_status_types?: string[];
        land_systems?: string[];
        fund_utilisation?: string[];
        detailed_intervention_types?: string[];
        account_number_1?: string;
        account_number_2?: string;
        approach_of_marginalized_communities?: string;
        community_engagement_numbers_marginalized?: string;
        founding_date?: string;
        description?: string;
        leadership_team?: string;
        countries?: string[];
        languages?: string[];
        project_pitches?: {
          id?: string;
          uuid?: string;
          status?: string;
          readable_status?: string;
          organisation_id?: string;
          funding_programmes?: {
            id?: number;
            uuid?: string;
            name?: string;
            description?: string;
            read_more_url?: string;
            organisation_types?: string[];
            location?: string;
            status?: string;
          };
          tree_species?: {
            uuid?: string;
            name?: string;
            amount?: number;
            type?: string;
            collection?: string;
          }[];
          project_name?: string;
          how_discovered?: string;
          project_objectives?: string;
          project_country?: string[];
          project_county_district?: string;
          restoration_intervention_types?: string[];
          land_systems?: string[];
          tree_restoration_practices?: string[];
          total_hectares?: number;
          project_budget?: number;
          total_trees?: number;
          capacity_building_needs?: string[];
          additional?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          restoration_photos?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          cover?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          proof_of_land_tenure_mou?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          detailed_project_budget?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          expected_active_restoration_start_date?: string;
          expected_active_restoration_end_date?: string;
          description_of_project_timeline?: string;
          proj_partner_info?: string;
          land_tenure_proj_area?: string[];
          landholder_comm_engage?: string;
          proj_success_risks?: string;
          monitor_eval_plan?: string;
          proj_boundary?: string;
          sustainable_dev_goals?: string[];
          proj_area_description?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          proposed_num_sites?: number;
          environmental_goals?: string;
          main_degradation_causes?: string;
          seedlings_source?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          proposed_num_nurseries?: number;
          curr_land_degradation?: string;
          proj_impact_socieconom?: string;
          proj_impact_foodsec?: string;
          proj_impact_watersec?: string;
          proj_impact_jobtypes?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          num_jobs_created?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_men?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_women?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_18to35?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_older35?: number;
          proj_beneficiaries?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_women?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_small?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_large?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_youth?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_scheduled_classes?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_scheduled_tribes?: number;
          monitoring_evaluation_plan?: string;
          main_causes_of_degradation?: string;
          deleted_at?: string;
          created_at?: string;
          updated_at?: string;
        }[];
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        web_url?: string;
        facebook_url?: string;
        instagram_url?: string;
        linkedin_url?: string;
        twitter_url?: string;
        hq_street_1?: string;
        hq_street_2?: string;
        hq_city?: string;
        hq_state?: string;
        hq_zipcode?: string;
        hq_country?: string;
        fin_start_month?: number;
        /**
         * @format float
         */
        fin_budget_3year?: number;
        /**
         * @format float
         */
        fin_budget_2year?: number;
        /**
         * @format float
         */
        fin_budget_1year?: number;
        /**
         * @format float
         */
        fin_budget_current_year?: number;
        /**
         * @format float
         */
        ha_restored_total?: number;
        /**
         * @format float
         */
        ha_restored_3year?: number;
        relevant_experience_years?: number;
        trees_grown_total?: number;
        trees_grown_3year?: number;
        tree_care_approach?: string;
        ft_permanent_employees?: number;
        pt_permanent_employees?: number;
        temp_employees?: number;
        female_employees?: number;
        male_employees?: number;
        young_employees?: number;
        additional_funding_details?: string;
        community_experience?: string;
        total_engaged_community_members_3yr?: number;
        percent_engaged_women_3yr?: number;
        percent_engaged_men_3yr?: number;
        percent_engaged_under_35_3yr?: number;
        percent_engaged_over_35_3yr?: number;
        percent_engaged_smallholder_3yr?: number;
        total_trees_grown?: number;
        avg_tree_survival_rate?: number;
        tree_maintenance_aftercare_approach?: string;
        restored_areas_description?: string;
        monitoring_evaluation_experience?: string;
        funding_history?: string;
        engagement_farmers?: string[];
        engagement_women?: string[];
        engagement_youth?: string[];
        engagement_non_youth?: string[];
        tree_restoration_practices?: string[];
        business_model?: string;
        subtype?: string;
        organisation_revenue_this_year?: number;
        shapefiles?: {
          uuid?: string;
          shapefileable_type?: string;
          shapefileable_id?: number;
          geojson?: string;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        bank_statements?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        previous_annual_reports?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        logo?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        reference?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_2year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_last_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_this_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_next_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        legal_registration?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg slug: name
         */
        tags?: string[];
      };
      planting_start_date?: string;
      framework_key?: string;
      framework_uuid?: string;
      has_monitoring_data?: boolean;
    };
    site?: {
      uuid?: string;
      name?: string;
      project?: {
        id?: string;
        uuid?: string;
        status?: string;
        name?: string;
        organisation?: {
          uuid?: string;
          type?: string;
          private?: boolean;
          name?: string;
          phone?: string;
          currency?: string;
          states?: string[];
          loan_status_types?: string[];
          land_systems?: string[];
          fund_utilisation?: string[];
          detailed_intervention_types?: string[];
          account_number_1?: string;
          account_number_2?: string;
          approach_of_marginalized_communities?: string;
          community_engagement_numbers_marginalized?: string;
          founding_date?: string;
          description?: string;
          leadership_team?: string;
          countries?: string[];
          languages?: string[];
          project_pitches?: {
            id?: string;
            uuid?: string;
            status?: string;
            readable_status?: string;
            organisation_id?: string;
            funding_programmes?: {
              id?: number;
              uuid?: string;
              name?: string;
              description?: string;
              read_more_url?: string;
              organisation_types?: string[];
              location?: string;
              status?: string;
            };
            tree_species?: {
              uuid?: string;
              name?: string;
              amount?: number;
              type?: string;
              collection?: string;
            }[];
            project_name?: string;
            how_discovered?: string;
            project_objectives?: string;
            project_country?: string[];
            project_county_district?: string;
            restoration_intervention_types?: string[];
            land_systems?: string[];
            tree_restoration_practices?: string[];
            total_hectares?: number;
            project_budget?: number;
            total_trees?: number;
            capacity_building_needs?: string[];
            additional?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            }[];
            restoration_photos?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            }[];
            cover?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            };
            proof_of_land_tenure_mou?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            }[];
            detailed_project_budget?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            };
            expected_active_restoration_start_date?: string;
            expected_active_restoration_end_date?: string;
            description_of_project_timeline?: string;
            proj_partner_info?: string;
            land_tenure_proj_area?: string[];
            landholder_comm_engage?: string;
            proj_success_risks?: string;
            monitor_eval_plan?: string;
            proj_boundary?: string;
            sustainable_dev_goals?: string[];
            proj_area_description?: string;
            /**
             * @minimum 0
             * @maximum 4294967295
             */
            proposed_num_sites?: number;
            environmental_goals?: string;
            main_degradation_causes?: string;
            seedlings_source?: string;
            /**
             * @minimum 0
             * @maximum 4294967295
             */
            proposed_num_nurseries?: number;
            curr_land_degradation?: string;
            proj_impact_socieconom?: string;
            proj_impact_foodsec?: string;
            proj_impact_watersec?: string;
            proj_impact_jobtypes?: string;
            /**
             * @minimum 0
             * @maximum 4294967295
             */
            num_jobs_created?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_employees_men?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_employees_women?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_employees_18to35?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_employees_older35?: number;
            proj_beneficiaries?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_women?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_small?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_large?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_youth?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_scheduled_classes?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_scheduled_tribes?: number;
            monitoring_evaluation_plan?: string;
            main_causes_of_degradation?: string;
            deleted_at?: string;
            created_at?: string;
            updated_at?: string;
          }[];
          tree_species?: {
            uuid?: string;
            name?: string;
            amount?: number;
            type?: string;
            collection?: string;
          }[];
          web_url?: string;
          facebook_url?: string;
          instagram_url?: string;
          linkedin_url?: string;
          twitter_url?: string;
          hq_street_1?: string;
          hq_street_2?: string;
          hq_city?: string;
          hq_state?: string;
          hq_zipcode?: string;
          hq_country?: string;
          fin_start_month?: number;
          /**
           * @format float
           */
          fin_budget_3year?: number;
          /**
           * @format float
           */
          fin_budget_2year?: number;
          /**
           * @format float
           */
          fin_budget_1year?: number;
          /**
           * @format float
           */
          fin_budget_current_year?: number;
          /**
           * @format float
           */
          ha_restored_total?: number;
          /**
           * @format float
           */
          ha_restored_3year?: number;
          relevant_experience_years?: number;
          trees_grown_total?: number;
          trees_grown_3year?: number;
          tree_care_approach?: string;
          ft_permanent_employees?: number;
          pt_permanent_employees?: number;
          temp_employees?: number;
          female_employees?: number;
          male_employees?: number;
          young_employees?: number;
          additional_funding_details?: string;
          community_experience?: string;
          total_engaged_community_members_3yr?: number;
          percent_engaged_women_3yr?: number;
          percent_engaged_men_3yr?: number;
          percent_engaged_under_35_3yr?: number;
          percent_engaged_over_35_3yr?: number;
          percent_engaged_smallholder_3yr?: number;
          total_trees_grown?: number;
          avg_tree_survival_rate?: number;
          tree_maintenance_aftercare_approach?: string;
          restored_areas_description?: string;
          monitoring_evaluation_experience?: string;
          funding_history?: string;
          engagement_farmers?: string[];
          engagement_women?: string[];
          engagement_youth?: string[];
          engagement_non_youth?: string[];
          tree_restoration_practices?: string[];
          business_model?: string;
          subtype?: string;
          organisation_revenue_this_year?: number;
          shapefiles?: {
            uuid?: string;
            shapefileable_type?: string;
            shapefileable_id?: number;
            geojson?: string;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          bank_statements?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          previous_annual_reports?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          logo?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          cover?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          reference?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          additional?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          op_budget_2year?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          op_budget_last_year?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          op_budget_this_year?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          op_budget_next_year?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          legal_registration?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          /**
           * this is a list of key value pairs eg slug: name
           */
          tags?: string[];
        };
        planting_start_date?: string;
        framework_key?: string;
        framework_uuid?: string;
        has_monitoring_data?: boolean;
      };
      framework_key?: string;
      framework_uuid?: string;
      status?: string;
      readable_status?: string;
      has_monitoring_data?: boolean;
    };
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminSiteReportsVariables = {
  body?: RequestBodies.GetV2AdminNurseryReportsBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminSiteReports = (variables: GetV2AdminSiteReportsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminSiteReportsResponse,
    GetV2AdminSiteReportsError,
    RequestBodies.GetV2AdminNurseryReportsBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/site-reports", method: "get", ...variables, signal });

export const useGetV2AdminSiteReports = <TData = GetV2AdminSiteReportsResponse>(
  variables: GetV2AdminSiteReportsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminSiteReportsResponse, GetV2AdminSiteReportsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminSiteReportsResponse, GetV2AdminSiteReportsError, TData>(
    queryKeyFn({ path: "/v2/admin/site-reports", operationId: "getV2AdminSiteReports", variables }),
    ({ signal }) => fetchGetV2AdminSiteReports({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminProjectReportsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminProjectReportsResponse = {
  data?: {
    uuid?: string;
    framework_key?: string;
    status?: number;
    readable_status?: string;
    title?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminProjectReportsVariables = {
  body?: RequestBodies.GetV2AdminNurseryReportsBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminProjectReports = (variables: GetV2AdminProjectReportsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminProjectReportsResponse,
    GetV2AdminProjectReportsError,
    RequestBodies.GetV2AdminNurseryReportsBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/project-reports", method: "get", ...variables, signal });

export const useGetV2AdminProjectReports = <TData = GetV2AdminProjectReportsResponse>(
  variables: GetV2AdminProjectReportsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminProjectReportsResponse, GetV2AdminProjectReportsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminProjectReportsResponse, GetV2AdminProjectReportsError, TData>(
    queryKeyFn({ path: "/v2/admin/project-reports", operationId: "getV2AdminProjectReports", variables }),
    ({ signal }) => fetchGetV2AdminProjectReports({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminTasksError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminTasksResponse = {
  data?: {
    uuid?: string;
    project?: Record<string, any>;
    period_key?: string;
    status?: string;
    readable_status?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminTasksVariables = {
  body?: RequestBodies.GetV2AdminNurseryReportsBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminTasks = (variables: GetV2AdminTasksVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminTasksResponse, GetV2AdminTasksError, RequestBodies.GetV2AdminNurseryReportsBody, {}, {}, {}>({
    url: "/v2/admin/tasks",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminTasks = <TData = GetV2AdminTasksResponse>(
  variables: GetV2AdminTasksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminTasksResponse, GetV2AdminTasksError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminTasksResponse, GetV2AdminTasksError, TData>(
    queryKeyFn({ path: "/v2/admin/tasks", operationId: "getV2AdminTasks", variables }),
    ({ signal }) => fetchGetV2AdminTasks({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminNurseriesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminNurseriesResponse = {
  data?: {
    uuid?: string;
    framework_key?: string;
    framework_uuid?: string;
    status?: number;
    readable_status?: string;
    type?: string;
    establishment_date?: string;
    start_date?: string;
    seedling_grown?: number;
    planting_contribution?: string;
    organisation?: {
      uuid?: string;
      type?: string;
      private?: boolean;
      name?: string;
      phone?: string;
      currency?: string;
      states?: string[];
      loan_status_types?: string[];
      land_systems?: string[];
      fund_utilisation?: string[];
      detailed_intervention_types?: string[];
      account_number_1?: string;
      account_number_2?: string;
      approach_of_marginalized_communities?: string;
      community_engagement_numbers_marginalized?: string;
      founding_date?: string;
      description?: string;
      leadership_team?: string;
      countries?: string[];
      languages?: string[];
      project_pitches?: {
        id?: string;
        uuid?: string;
        status?: string;
        readable_status?: string;
        organisation_id?: string;
        funding_programmes?: {
          id?: number;
          uuid?: string;
          name?: string;
          description?: string;
          read_more_url?: string;
          organisation_types?: string[];
          location?: string;
          status?: string;
        };
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_name?: string;
        how_discovered?: string;
        project_objectives?: string;
        project_country?: string[];
        project_county_district?: string;
        restoration_intervention_types?: string[];
        land_systems?: string[];
        tree_restoration_practices?: string[];
        total_hectares?: number;
        project_budget?: number;
        total_trees?: number;
        capacity_building_needs?: string[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        restoration_photos?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        proof_of_land_tenure_mou?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        detailed_project_budget?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        expected_active_restoration_start_date?: string;
        expected_active_restoration_end_date?: string;
        description_of_project_timeline?: string;
        proj_partner_info?: string;
        land_tenure_proj_area?: string[];
        landholder_comm_engage?: string;
        proj_success_risks?: string;
        monitor_eval_plan?: string;
        proj_boundary?: string;
        sustainable_dev_goals?: string[];
        proj_area_description?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_sites?: number;
        environmental_goals?: string;
        main_degradation_causes?: string;
        seedlings_source?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_nurseries?: number;
        curr_land_degradation?: string;
        proj_impact_socieconom?: string;
        proj_impact_foodsec?: string;
        proj_impact_watersec?: string;
        proj_impact_jobtypes?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        num_jobs_created?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_men?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_18to35?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_older35?: number;
        proj_beneficiaries?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_small?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_large?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_youth?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_classes?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_tribes?: number;
        monitoring_evaluation_plan?: string;
        main_causes_of_degradation?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      web_url?: string;
      facebook_url?: string;
      instagram_url?: string;
      linkedin_url?: string;
      twitter_url?: string;
      hq_street_1?: string;
      hq_street_2?: string;
      hq_city?: string;
      hq_state?: string;
      hq_zipcode?: string;
      hq_country?: string;
      fin_start_month?: number;
      /**
       * @format float
       */
      fin_budget_3year?: number;
      /**
       * @format float
       */
      fin_budget_2year?: number;
      /**
       * @format float
       */
      fin_budget_1year?: number;
      /**
       * @format float
       */
      fin_budget_current_year?: number;
      /**
       * @format float
       */
      ha_restored_total?: number;
      /**
       * @format float
       */
      ha_restored_3year?: number;
      relevant_experience_years?: number;
      trees_grown_total?: number;
      trees_grown_3year?: number;
      tree_care_approach?: string;
      ft_permanent_employees?: number;
      pt_permanent_employees?: number;
      temp_employees?: number;
      female_employees?: number;
      male_employees?: number;
      young_employees?: number;
      additional_funding_details?: string;
      community_experience?: string;
      total_engaged_community_members_3yr?: number;
      percent_engaged_women_3yr?: number;
      percent_engaged_men_3yr?: number;
      percent_engaged_under_35_3yr?: number;
      percent_engaged_over_35_3yr?: number;
      percent_engaged_smallholder_3yr?: number;
      total_trees_grown?: number;
      avg_tree_survival_rate?: number;
      tree_maintenance_aftercare_approach?: string;
      restored_areas_description?: string;
      monitoring_evaluation_experience?: string;
      funding_history?: string;
      engagement_farmers?: string[];
      engagement_women?: string[];
      engagement_youth?: string[];
      engagement_non_youth?: string[];
      tree_restoration_practices?: string[];
      business_model?: string;
      subtype?: string;
      organisation_revenue_this_year?: number;
      shapefiles?: {
        uuid?: string;
        shapefileable_type?: string;
        shapefileable_id?: number;
        geojson?: string;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      bank_statements?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      previous_annual_reports?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      logo?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      reference?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_2year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_last_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_this_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_next_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      legal_registration?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
    };
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminNurseriesVariables = {
  body?: RequestBodies.GetV2AdminNurseryReportsBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminNurseries = (variables: GetV2AdminNurseriesVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminNurseriesResponse,
    GetV2AdminNurseriesError,
    RequestBodies.GetV2AdminNurseryReportsBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/nurseries", method: "get", ...variables, signal });

export const useGetV2AdminNurseries = <TData = GetV2AdminNurseriesResponse>(
  variables: GetV2AdminNurseriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminNurseriesResponse, GetV2AdminNurseriesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminNurseriesResponse, GetV2AdminNurseriesError, TData>(
    queryKeyFn({ path: "/v2/admin/nurseries", operationId: "getV2AdminNurseries", variables }),
    ({ signal }) => fetchGetV2AdminNurseries({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2AdminFormsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminFormsResponse = {
  type?: string;
  title?: string;
  subtitle?: string;
  description?: string;
  deadline_at?: string;
  documentation?: string;
  documentation_label?: string;
  submission_message?: string;
  duration?: string;
  stage_id?: number;
  options_other?: boolean;
  /**
   * this is a list of key value pairs eg. slug: name
   */
  tags?: string[];
  form_sections?: {
    order?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    form_questions?: {
      additional_props?: Record<string, any>[];
      child_form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      table_headers?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      linked_field_key?: string;
      show_on_parent_condition?: boolean;
      input_type?:
        | "date"
        | "text"
        | "long-text"
        | "select"
        | "checkboxes"
        | "radio"
        | "number"
        | "image"
        | "file"
        | "conditional";
      label?: string;
      placeholder?: string;
      description?: string;
      validation?: Record<string, any>;
      multichoice?: boolean;
      order?: number;
      options_list?: string;
      options?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
  }[];
};

export type PostV2AdminFormsVariables = ApiContext["fetcherOptions"];

export const fetchPostV2AdminForms = (variables: PostV2AdminFormsVariables, signal?: AbortSignal) =>
  apiFetch<PostV2AdminFormsResponse, PostV2AdminFormsError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2AdminForms = (
  options?: Omit<
    reactQuery.UseMutationOptions<PostV2AdminFormsResponse, PostV2AdminFormsError, PostV2AdminFormsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2AdminFormsResponse, PostV2AdminFormsError, PostV2AdminFormsVariables>(
    (variables: PostV2AdminFormsVariables) => fetchPostV2AdminForms({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminFormsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsResponse = {
  data?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminFormsVariables = {
  body?: RequestBodies.GetV2AdminNurseryReportsBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminForms = (variables: GetV2AdminFormsVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminFormsResponse, GetV2AdminFormsError, RequestBodies.GetV2AdminNurseryReportsBody, {}, {}, {}>({
    url: "/v2/admin/forms",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminForms = <TData = GetV2AdminFormsResponse>(
  variables: GetV2AdminFormsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFormsResponse, GetV2AdminFormsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFormsResponse, GetV2AdminFormsError, TData>(
    queryKeyFn({ path: "/v2/admin/forms", operationId: "getV2AdminForms", variables }),
    ({ signal }) => fetchGetV2AdminForms({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminReportingFrameworksError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminReportingFrameworksResponse = {
  data?: {
    uuid?: string;
    name?: string;
    slug?: string;
    access_code?: string;
    project_form_uuid?: string;
    project_report_form_uuid?: string;
    site_form_uuid?: string;
    site_report_form_uuid?: string;
    nursery_form_uuid?: string;
    nursery_report_form_uuid?: string;
  }[];
};

export type GetV2AdminReportingFrameworksVariables = ApiContext["fetcherOptions"];

export const fetchGetV2AdminReportingFrameworks = (
  variables: GetV2AdminReportingFrameworksVariables,
  signal?: AbortSignal
) =>
  apiFetch<GetV2AdminReportingFrameworksResponse, GetV2AdminReportingFrameworksError, undefined, {}, {}, {}>({
    url: "/v2/admin/reporting-frameworks",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminReportingFrameworks = <TData = GetV2AdminReportingFrameworksResponse>(
  variables: GetV2AdminReportingFrameworksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminReportingFrameworksResponse, GetV2AdminReportingFrameworksError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminReportingFrameworksResponse, GetV2AdminReportingFrameworksError, TData>(
    queryKeyFn({ path: "/v2/admin/reporting-frameworks", operationId: "getV2AdminReportingFrameworks", variables }),
    ({ signal }) => fetchGetV2AdminReportingFrameworks({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2AdminReportingFrameworksError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminReportingFrameworksResponse = {
  uuid?: string;
  name?: string;
  slug?: string;
  access_code?: string;
  project_form_uuid?: string;
  project_report_form_uuid?: string;
  site_form_uuid?: string;
  site_report_form_uuid?: string;
  nursery_form_uuid?: string;
  nursery_report_form_uuid?: string;
};

export type PostV2AdminReportingFrameworksRequestBody = {
  name?: string;
  access_code?: string;
  project_form_uuid?: string;
  project_report_form_uuid?: string;
  site_form_uuid?: string;
  site_report_form_uuid?: string;
  nursery_form_uuid?: string;
  nursery_report_form_uuid?: string;
};

export type PostV2AdminReportingFrameworksVariables = {
  body?: PostV2AdminReportingFrameworksRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminReportingFrameworks = (
  variables: PostV2AdminReportingFrameworksVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2AdminReportingFrameworksResponse,
    PostV2AdminReportingFrameworksError,
    PostV2AdminReportingFrameworksRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/reporting-frameworks", method: "post", ...variables, signal });

export const usePostV2AdminReportingFrameworks = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2AdminReportingFrameworksResponse,
      PostV2AdminReportingFrameworksError,
      PostV2AdminReportingFrameworksVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2AdminReportingFrameworksResponse,
    PostV2AdminReportingFrameworksError,
    PostV2AdminReportingFrameworksVariables
  >(
    (variables: PostV2AdminReportingFrameworksVariables) =>
      fetchPostV2AdminReportingFrameworks({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2AdminReportingFrameworksUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminReportingFrameworksUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminReportingFrameworksUUIDResponse = {
  uuid?: string;
  name?: string;
  slug?: string;
  access_code?: string;
  project_form_uuid?: string;
  project_report_form_uuid?: string;
  site_form_uuid?: string;
  site_report_form_uuid?: string;
  nursery_form_uuid?: string;
  nursery_report_form_uuid?: string;
};

export type PutV2AdminReportingFrameworksUUIDRequestBody = {
  name?: string;
  access_code?: string;
  project_form_uuid?: string;
  project_report_form_uuid?: string;
  site_form_uuid?: string;
  site_report_form_uuid?: string;
  nursery_form_uuid?: string;
  nursery_report_form_uuid?: string;
};

export type PutV2AdminReportingFrameworksUUIDVariables = {
  body?: PutV2AdminReportingFrameworksUUIDRequestBody;
  pathParams: PutV2AdminReportingFrameworksUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminReportingFrameworksUUID = (
  variables: PutV2AdminReportingFrameworksUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2AdminReportingFrameworksUUIDResponse,
    PutV2AdminReportingFrameworksUUIDError,
    PutV2AdminReportingFrameworksUUIDRequestBody,
    {},
    {},
    PutV2AdminReportingFrameworksUUIDPathParams
  >({ url: "/v2/admin/reporting-frameworks/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminReportingFrameworksUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2AdminReportingFrameworksUUIDResponse,
      PutV2AdminReportingFrameworksUUIDError,
      PutV2AdminReportingFrameworksUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2AdminReportingFrameworksUUIDResponse,
    PutV2AdminReportingFrameworksUUIDError,
    PutV2AdminReportingFrameworksUUIDVariables
  >(
    (variables: PutV2AdminReportingFrameworksUUIDVariables) =>
      fetchPutV2AdminReportingFrameworksUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminReportingFrameworksUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminReportingFrameworksUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminReportingFrameworksUUIDResponse = {
  uuid?: string;
  name?: string;
  slug?: string;
  access_code?: string;
  project_form_uuid?: string;
  project_report_form_uuid?: string;
  site_form_uuid?: string;
  site_report_form_uuid?: string;
  nursery_form_uuid?: string;
  nursery_report_form_uuid?: string;
};

export type DeleteV2AdminReportingFrameworksUUIDVariables = {
  pathParams: DeleteV2AdminReportingFrameworksUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminReportingFrameworksUUID = (
  variables: DeleteV2AdminReportingFrameworksUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    DeleteV2AdminReportingFrameworksUUIDResponse,
    DeleteV2AdminReportingFrameworksUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminReportingFrameworksUUIDPathParams
  >({ url: "/v2/admin/reporting-frameworks/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminReportingFrameworksUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2AdminReportingFrameworksUUIDResponse,
      DeleteV2AdminReportingFrameworksUUIDError,
      DeleteV2AdminReportingFrameworksUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2AdminReportingFrameworksUUIDResponse,
    DeleteV2AdminReportingFrameworksUUIDError,
    DeleteV2AdminReportingFrameworksUUIDVariables
  >(
    (variables: DeleteV2AdminReportingFrameworksUUIDVariables) =>
      fetchDeleteV2AdminReportingFrameworksUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ReportingFrameworksAccessCodeACCESSCODEPathParams = {
  accessCode: string;
};

export type GetV2ReportingFrameworksAccessCodeACCESSCODEError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ReportingFrameworksAccessCodeACCESSCODEResponse = {
  uuid?: string;
  name?: string;
  slug?: string;
  access_code?: string;
  project_form_uuid?: string;
  project_report_form_uuid?: string;
  site_form_uuid?: string;
  site_report_form_uuid?: string;
  nursery_form_uuid?: string;
  nursery_report_form_uuid?: string;
};

export type GetV2ReportingFrameworksAccessCodeACCESSCODEVariables = {
  pathParams: GetV2ReportingFrameworksAccessCodeACCESSCODEPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ReportingFrameworksAccessCodeACCESSCODE = (
  variables: GetV2ReportingFrameworksAccessCodeACCESSCODEVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2ReportingFrameworksAccessCodeACCESSCODEResponse,
    GetV2ReportingFrameworksAccessCodeACCESSCODEError,
    undefined,
    {},
    {},
    GetV2ReportingFrameworksAccessCodeACCESSCODEPathParams
  >({ url: "/v2/reporting-frameworks/access-code/{accessCode}", method: "get", ...variables, signal });

export const useGetV2ReportingFrameworksAccessCodeACCESSCODE = <
  TData = GetV2ReportingFrameworksAccessCodeACCESSCODEResponse
>(
  variables: GetV2ReportingFrameworksAccessCodeACCESSCODEVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2ReportingFrameworksAccessCodeACCESSCODEResponse,
      GetV2ReportingFrameworksAccessCodeACCESSCODEError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetV2ReportingFrameworksAccessCodeACCESSCODEResponse,
    GetV2ReportingFrameworksAccessCodeACCESSCODEError,
    TData
  >(
    queryKeyFn({
      path: "/v2/reporting-frameworks/access-code/{ACCESS_CODE}",
      operationId: "getV2ReportingFrameworksAccessCodeACCESSCODE",
      variables
    }),
    ({ signal }) => fetchGetV2ReportingFrameworksAccessCodeACCESSCODE({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ReportingFrameworksUUIDPathParams = {
  uuid: string;
};

export type GetV2ReportingFrameworksUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ReportingFrameworksUUIDResponse = {
  uuid?: string;
  name?: string;
  slug?: string;
  access_code?: string;
  project_form_uuid?: string;
  project_report_form_uuid?: string;
  site_form_uuid?: string;
  site_report_form_uuid?: string;
  nursery_form_uuid?: string;
  nursery_report_form_uuid?: string;
};

export type GetV2ReportingFrameworksUUIDVariables = {
  pathParams: GetV2ReportingFrameworksUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ReportingFrameworksUUID = (
  variables: GetV2ReportingFrameworksUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2ReportingFrameworksUUIDResponse,
    GetV2ReportingFrameworksUUIDError,
    undefined,
    {},
    {},
    GetV2ReportingFrameworksUUIDPathParams
  >({ url: "/v2/reporting-frameworks/{uuid}", method: "get", ...variables, signal });

export const useGetV2ReportingFrameworksUUID = <TData = GetV2ReportingFrameworksUUIDResponse>(
  variables: GetV2ReportingFrameworksUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ReportingFrameworksUUIDResponse, GetV2ReportingFrameworksUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ReportingFrameworksUUIDResponse, GetV2ReportingFrameworksUUIDError, TData>(
    queryKeyFn({ path: "/v2/reporting-frameworks/{UUID}", operationId: "getV2ReportingFrameworksUUID", variables }),
    ({ signal }) => fetchGetV2ReportingFrameworksUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FormsENTITYUUIDPathParams = {
  /**
   * allowed values projects/sites/nurseries/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2FormsENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsENTITYUUIDResponse = {
  uuid?: string;
  name?: string;
  status?: string;
  form?: Record<string, any>;
  answers?: Record<string, any>;
  form_title?: string;
  feedback?: string;
  feedback_fields?: string[];
  update_request?: {
    uuid?: string;
    framework_key?: string;
    status?: string;
    readable_status?: string;
    content?: string;
    feedback?: string;
    feedback_fields?: string[];
    project?: Record<string, any>;
    organisation?: Record<string, any>;
    created_by?: Record<string, any>;
  };
};

export type GetV2FormsENTITYUUIDVariables = {
  pathParams: GetV2FormsENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsENTITYUUID = (variables: GetV2FormsENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2FormsENTITYUUIDResponse, GetV2FormsENTITYUUIDError, undefined, {}, {}, GetV2FormsENTITYUUIDPathParams>({
    url: "/v2/forms/{entity}/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2FormsENTITYUUID = <TData = GetV2FormsENTITYUUIDResponse>(
  variables: GetV2FormsENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FormsENTITYUUIDResponse, GetV2FormsENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsENTITYUUIDResponse, GetV2FormsENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/forms/{ENTITY}/{UUID}", operationId: "getV2FormsENTITYUUID", variables }),
    ({ signal }) => fetchGetV2FormsENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2FormsENTITYUUIDPathParams = {
  /**
   * allowed values projects/sites/nurseries/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type PutV2FormsENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2FormsENTITYUUIDResponse = {
  uuid?: string;
  name?: string;
  status?: string;
  form?: Record<string, any>;
  answers?: Record<string, any>;
  form_title?: string;
  feedback?: string;
  feedback_fields?: string[];
  update_request?: {
    uuid?: string;
    framework_key?: string;
    status?: string;
    readable_status?: string;
    content?: string;
    feedback?: string;
    feedback_fields?: string[];
    project?: Record<string, any>;
    organisation?: Record<string, any>;
    created_by?: Record<string, any>;
  };
};

export type PutV2FormsENTITYUUIDRequestBody = {
  name?: string;
  status?: string;
  answers?: Record<string, any>;
};

export type PutV2FormsENTITYUUIDVariables = {
  body?: PutV2FormsENTITYUUIDRequestBody;
  pathParams: PutV2FormsENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

/**
 * there is no need to provide which schema as it will use the current published one for this entity and framework
 */
export const fetchPutV2FormsENTITYUUID = (variables: PutV2FormsENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PutV2FormsENTITYUUIDResponse,
    PutV2FormsENTITYUUIDError,
    PutV2FormsENTITYUUIDRequestBody,
    {},
    {},
    PutV2FormsENTITYUUIDPathParams
  >({ url: "/v2/forms/{entity}/{uuid}", method: "put", ...variables, signal });

/**
 * there is no need to provide which schema as it will use the current published one for this entity and framework
 */
export const usePutV2FormsENTITYUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2FormsENTITYUUIDResponse,
      PutV2FormsENTITYUUIDError,
      PutV2FormsENTITYUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PutV2FormsENTITYUUIDResponse, PutV2FormsENTITYUUIDError, PutV2FormsENTITYUUIDVariables>(
    (variables: PutV2FormsENTITYUUIDVariables) => fetchPutV2FormsENTITYUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2FormsENTITYUUIDSubmitPathParams = {
  /**
   * allowed values projects/sites/nurseries/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type PutV2FormsENTITYUUIDSubmitError = Fetcher.ErrorWrapper<undefined>;

export type PutV2FormsENTITYUUIDSubmitResponse = {
  uuid?: string;
  name?: string;
  status?: string;
  form?: Record<string, any>;
  answers?: Record<string, any>;
  form_title?: string;
  feedback?: string;
  feedback_fields?: string[];
  update_request?: {
    uuid?: string;
    framework_key?: string;
    status?: string;
    readable_status?: string;
    content?: string;
    feedback?: string;
    feedback_fields?: string[];
    project?: Record<string, any>;
    organisation?: Record<string, any>;
    created_by?: Record<string, any>;
  };
};

export type PutV2FormsENTITYUUIDSubmitVariables = {
  pathParams: PutV2FormsENTITYUUIDSubmitPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2FormsENTITYUUIDSubmit = (variables: PutV2FormsENTITYUUIDSubmitVariables, signal?: AbortSignal) =>
  apiFetch<
    PutV2FormsENTITYUUIDSubmitResponse,
    PutV2FormsENTITYUUIDSubmitError,
    undefined,
    {},
    {},
    PutV2FormsENTITYUUIDSubmitPathParams
  >({ url: "/v2/forms/{entity}/{uuid}/submit", method: "put", ...variables, signal });

export const usePutV2FormsENTITYUUIDSubmit = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2FormsENTITYUUIDSubmitResponse,
      PutV2FormsENTITYUUIDSubmitError,
      PutV2FormsENTITYUUIDSubmitVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2FormsENTITYUUIDSubmitResponse,
    PutV2FormsENTITYUUIDSubmitError,
    PutV2FormsENTITYUUIDSubmitVariables
  >(
    (variables: PutV2FormsENTITYUUIDSubmitVariables) =>
      fetchPutV2FormsENTITYUUIDSubmit({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2FormsENTITYPathParams = {
  /**
   * allowed values projects/sites/nurseries
   */
  entity: string;
  /**
   * this is the uuid of the form
   */
  uuid: string;
};

export type PostV2FormsENTITYError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FormsENTITYResponse = {
  uuid?: string;
  name?: string;
  status?: string;
  form?: Record<string, any>;
  answers?: Record<string, any>;
  form_title?: string;
  feedback?: string;
  feedback_fields?: string[];
  update_request?: {
    uuid?: string;
    framework_key?: string;
    status?: string;
    readable_status?: string;
    content?: string;
    feedback?: string;
    feedback_fields?: string[];
    project?: Record<string, any>;
    organisation?: Record<string, any>;
    created_by?: Record<string, any>;
  };
};

export type PostV2FormsENTITYVariables = {
  body?: RequestBodies.PostV2FormsEntityFormUuidBody;
  pathParams: PostV2FormsENTITYPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FormsENTITY = (variables: PostV2FormsENTITYVariables, signal?: AbortSignal) =>
  apiFetch<
    PostV2FormsENTITYResponse,
    PostV2FormsENTITYError,
    RequestBodies.PostV2FormsEntityFormUuidBody,
    {},
    {},
    PostV2FormsENTITYPathParams
  >({ url: "/v2/forms/{entity}", method: "post", ...variables, signal });

export const usePostV2FormsENTITY = (
  options?: Omit<
    reactQuery.UseMutationOptions<PostV2FormsENTITYResponse, PostV2FormsENTITYError, PostV2FormsENTITYVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2FormsENTITYResponse, PostV2FormsENTITYError, PostV2FormsENTITYVariables>(
    (variables: PostV2FormsENTITYVariables) => fetchPostV2FormsENTITY({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2FormsProjectsUUIDPathParams = {
  /**
   * this is the uuid of the form
   */
  uuid: string;
};

export type PostV2FormsProjectsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FormsProjectsUUIDResponse = {
  uuid?: string;
  name?: string;
  status?: string;
  form?: Record<string, any>;
  answers?: Record<string, any>;
  form_title?: string;
  feedback?: string;
  feedback_fields?: string[];
  update_request?: {
    uuid?: string;
    framework_key?: string;
    status?: string;
    readable_status?: string;
    content?: string;
    feedback?: string;
    feedback_fields?: string[];
    project?: Record<string, any>;
    organisation?: Record<string, any>;
    created_by?: Record<string, any>;
  };
};

export type PostV2FormsProjectsUUIDVariables = {
  body?: RequestBodies.PostV2FormsEntityFormUuidBody;
  pathParams: PostV2FormsProjectsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FormsProjectsUUID = (variables: PostV2FormsProjectsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PostV2FormsProjectsUUIDResponse,
    PostV2FormsProjectsUUIDError,
    RequestBodies.PostV2FormsEntityFormUuidBody,
    {},
    {},
    PostV2FormsProjectsUUIDPathParams
  >({ url: "/v2/forms/projects/{uuid}", method: "post", ...variables, signal });

export const usePostV2FormsProjectsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2FormsProjectsUUIDResponse,
      PostV2FormsProjectsUUIDError,
      PostV2FormsProjectsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2FormsProjectsUUIDResponse,
    PostV2FormsProjectsUUIDError,
    PostV2FormsProjectsUUIDVariables
  >(
    (variables: PostV2FormsProjectsUUIDVariables) => fetchPostV2FormsProjectsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ProjectsUUIDSitePolygonsPathParams = {
  uuid: string;
};

export type GetV2ProjectsUUIDSitePolygonsQueryParams = {
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2ProjectsUUIDSitePolygonsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDSitePolygonsResponse = {
  data?: {
    uuid?: string;
    project?: Record<string, any>;
    period_key?: string;
    status?: string;
    readable_status?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2ProjectsUUIDSitePolygonsVariables = {
  pathParams: GetV2ProjectsUUIDSitePolygonsPathParams;
  queryParams?: GetV2ProjectsUUIDSitePolygonsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectsUUIDSitePolygons = (
  variables: GetV2ProjectsUUIDSitePolygonsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2ProjectsUUIDSitePolygonsResponse,
    GetV2ProjectsUUIDSitePolygonsError,
    undefined,
    {},
    GetV2ProjectsUUIDSitePolygonsQueryParams,
    GetV2ProjectsUUIDSitePolygonsPathParams
  >({ url: "/v2/projects/{uuid}/site-polygons", method: "get", ...variables, signal });

export const useGetV2ProjectsUUIDSitePolygons = <TData = GetV2ProjectsUUIDSitePolygonsResponse>(
  variables: GetV2ProjectsUUIDSitePolygonsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectsUUIDSitePolygonsResponse, GetV2ProjectsUUIDSitePolygonsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectsUUIDSitePolygonsResponse, GetV2ProjectsUUIDSitePolygonsError, TData>(
    queryKeyFn({ path: "/v2/projects/{UUID}/site-polygons", operationId: "getV2ProjectsUUIDSitePolygons", variables }),
    ({ signal }) => fetchGetV2ProjectsUUIDSitePolygons({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminUpdateRequestsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminUpdateRequestsResponse = {
  data?: {
    uuid?: string;
    framework_key?: string;
    status?: string;
    readable_status?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminUpdateRequestsVariables = {
  body?: RequestBodies.GetV2AdminNurseryReportsBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminUpdateRequests = (variables: GetV2AdminUpdateRequestsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminUpdateRequestsResponse,
    GetV2AdminUpdateRequestsError,
    RequestBodies.GetV2AdminNurseryReportsBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/update-requests/", method: "get", ...variables, signal });

export const useGetV2AdminUpdateRequests = <TData = GetV2AdminUpdateRequestsResponse>(
  variables: GetV2AdminUpdateRequestsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminUpdateRequestsResponse, GetV2AdminUpdateRequestsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminUpdateRequestsResponse, GetV2AdminUpdateRequestsError, TData>(
    queryKeyFn({ path: "/v2/admin/update-requests/", operationId: "getV2AdminUpdateRequests", variables }),
    ({ signal }) => fetchGetV2AdminUpdateRequests({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2AdminUpdateRequestsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminUpdateRequestsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminUpdateRequestsUUIDVariables = {
  pathParams: DeleteV2AdminUpdateRequestsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminUpdateRequestsUUID = (
  variables: DeleteV2AdminUpdateRequestsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminUpdateRequestsUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminUpdateRequestsUUIDPathParams
  >({ url: "/v2/admin/update-requests/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminUpdateRequestsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminUpdateRequestsUUIDError,
      DeleteV2AdminUpdateRequestsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminUpdateRequestsUUIDError,
    DeleteV2AdminUpdateRequestsUUIDVariables
  >(
    (variables: DeleteV2AdminUpdateRequestsUUIDVariables) =>
      fetchDeleteV2AdminUpdateRequestsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2AdminUpdateRequestsUUIDSTATUSPathParams = {
  uuid: string;
  /**
   * allowed values are approve, moreinfo
   */
  status: string;
};

export type PutV2AdminUpdateRequestsUUIDSTATUSError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminUpdateRequestsUUIDSTATUSResponse = {
  uuid?: string;
  framework_key?: string;
  status?: string;
  readable_status?: string;
  content?: string;
  feedback?: string;
  feedback_fields?: string[];
  project?: Record<string, any>;
  organisation?: Record<string, any>;
  created_by?: Record<string, any>;
};

export type PutV2AdminUpdateRequestsUUIDSTATUSVariables = {
  body?: RequestBodies.PutV2AdminUpdateRequestsUuidStatusBody;
  pathParams: PutV2AdminUpdateRequestsUUIDSTATUSPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminUpdateRequestsUUIDSTATUS = (
  variables: PutV2AdminUpdateRequestsUUIDSTATUSVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2AdminUpdateRequestsUUIDSTATUSResponse,
    PutV2AdminUpdateRequestsUUIDSTATUSError,
    RequestBodies.PutV2AdminUpdateRequestsUuidStatusBody,
    {},
    {},
    PutV2AdminUpdateRequestsUUIDSTATUSPathParams
  >({ url: "/v2/admin/update-requests/{uuid}/{status}", method: "put", ...variables, signal });

export const usePutV2AdminUpdateRequestsUUIDSTATUS = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2AdminUpdateRequestsUUIDSTATUSResponse,
      PutV2AdminUpdateRequestsUUIDSTATUSError,
      PutV2AdminUpdateRequestsUUIDSTATUSVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2AdminUpdateRequestsUUIDSTATUSResponse,
    PutV2AdminUpdateRequestsUUIDSTATUSError,
    PutV2AdminUpdateRequestsUUIDSTATUSVariables
  >(
    (variables: PutV2AdminUpdateRequestsUUIDSTATUSVariables) =>
      fetchPutV2AdminUpdateRequestsUUIDSTATUS({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2AdminENTITYUUIDSTATUSPathParams = {
  /**
   * allowed values are projects, project-reports, site, site-reports, nurseries, nursery-reports
   */
  entity: string;
  uuid: string;
  /**
   * allowed values are approve, moreinfo
   */
  status: string;
};

export type PutV2AdminENTITYUUIDSTATUSError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminENTITYUUIDSTATUSVariables = {
  body?: RequestBodies.PutV2AdminUpdateRequestsUuidStatusBody;
  pathParams: PutV2AdminENTITYUUIDSTATUSPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminENTITYUUIDSTATUS = (variables: PutV2AdminENTITYUUIDSTATUSVariables, signal?: AbortSignal) =>
  apiFetch<
    undefined,
    PutV2AdminENTITYUUIDSTATUSError,
    RequestBodies.PutV2AdminUpdateRequestsUuidStatusBody,
    {},
    {},
    PutV2AdminENTITYUUIDSTATUSPathParams
  >({ url: "/v2/admin/{entity}/{uuid}/{status}", method: "put", ...variables, signal });

export const usePutV2AdminENTITYUUIDSTATUS = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PutV2AdminENTITYUUIDSTATUSError, PutV2AdminENTITYUUIDSTATUSVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2AdminENTITYUUIDSTATUSError, PutV2AdminENTITYUUIDSTATUSVariables>(
    (variables: PutV2AdminENTITYUUIDSTATUSVariables) =>
      fetchPutV2AdminENTITYUUIDSTATUS({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2AdminENTITYUUIDReminderPathParams = {
  /**
   * allowed values are project-reports, site-reports, nursery-reports
   */
  entity: string;
  uuid: string;
};

export type PostV2AdminENTITYUUIDReminderError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminENTITYUUIDReminderRequestBody = {
  feedback?: string;
};

export type PostV2AdminENTITYUUIDReminderVariables = {
  body?: PostV2AdminENTITYUUIDReminderRequestBody;
  pathParams: PostV2AdminENTITYUUIDReminderPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminENTITYUUIDReminder = (
  variables: PostV2AdminENTITYUUIDReminderVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    PostV2AdminENTITYUUIDReminderError,
    PostV2AdminENTITYUUIDReminderRequestBody,
    {},
    {},
    PostV2AdminENTITYUUIDReminderPathParams
  >({ url: "/v2/admin/{entity}/{uuid}/reminder", method: "post", ...variables, signal });

export const usePostV2AdminENTITYUUIDReminder = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PostV2AdminENTITYUUIDReminderError,
      PostV2AdminENTITYUUIDReminderVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PostV2AdminENTITYUUIDReminderError, PostV2AdminENTITYUUIDReminderVariables>(
    (variables: PostV2AdminENTITYUUIDReminderVariables) =>
      fetchPostV2AdminENTITYUUIDReminder({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2UpdateRequestsUUIDPathParams = {
  uuid: string;
};

export type GetV2UpdateRequestsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2UpdateRequestsUUIDResponse = {
  uuid?: string;
  framework_key?: string;
  status?: string;
  readable_status?: string;
  content?: string;
  feedback?: string;
  feedback_fields?: string[];
  project?: Record<string, any>;
  organisation?: Record<string, any>;
  created_by?: Record<string, any>;
};

export type GetV2UpdateRequestsUUIDVariables = {
  pathParams: GetV2UpdateRequestsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2UpdateRequestsUUID = (variables: GetV2UpdateRequestsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2UpdateRequestsUUIDResponse,
    GetV2UpdateRequestsUUIDError,
    undefined,
    {},
    {},
    GetV2UpdateRequestsUUIDPathParams
  >({ url: "/v2/update-requests/{uuid}", method: "get", ...variables, signal });

export const useGetV2UpdateRequestsUUID = <TData = GetV2UpdateRequestsUUIDResponse>(
  variables: GetV2UpdateRequestsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2UpdateRequestsUUIDResponse, GetV2UpdateRequestsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2UpdateRequestsUUIDResponse, GetV2UpdateRequestsUUIDError, TData>(
    queryKeyFn({ path: "/v2/update-requests/{UUID}", operationId: "getV2UpdateRequestsUUID", variables }),
    ({ signal }) => fetchGetV2UpdateRequestsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2UpdateRequestsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2UpdateRequestsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2UpdateRequestsUUIDVariables = {
  pathParams: DeleteV2UpdateRequestsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2UpdateRequestsUUID = (variables: DeleteV2UpdateRequestsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2UpdateRequestsUUIDError, undefined, {}, {}, DeleteV2UpdateRequestsUUIDPathParams>({
    url: "/v2/update-requests/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2UpdateRequestsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2UpdateRequestsUUIDError, DeleteV2UpdateRequestsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2UpdateRequestsUUIDError, DeleteV2UpdateRequestsUUIDVariables>(
    (variables: DeleteV2UpdateRequestsUUIDVariables) =>
      fetchDeleteV2UpdateRequestsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2UpdateRequestsENTITYUUIDPathParams = {
  /**
   * available options are project, site, nursery, project-report, site-report, nursery-report
   */
  entity: string;
  uuid: string;
};

export type GetV2UpdateRequestsENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2UpdateRequestsENTITYUUIDResponse = {
  uuid?: string;
  framework_key?: string;
  status?: string;
  readable_status?: string;
  content?: string;
  feedback?: string;
  feedback_fields?: string[];
  project?: Record<string, any>;
  organisation?: Record<string, any>;
  created_by?: Record<string, any>;
};

export type GetV2UpdateRequestsENTITYUUIDVariables = {
  pathParams: GetV2UpdateRequestsENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2UpdateRequestsENTITYUUID = (
  variables: GetV2UpdateRequestsENTITYUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2UpdateRequestsENTITYUUIDResponse,
    GetV2UpdateRequestsENTITYUUIDError,
    undefined,
    {},
    {},
    GetV2UpdateRequestsENTITYUUIDPathParams
  >({ url: "/v2/update-requests/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2UpdateRequestsENTITYUUID = <TData = GetV2UpdateRequestsENTITYUUIDResponse>(
  variables: GetV2UpdateRequestsENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2UpdateRequestsENTITYUUIDResponse, GetV2UpdateRequestsENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2UpdateRequestsENTITYUUIDResponse, GetV2UpdateRequestsENTITYUUIDError, TData>(
    queryKeyFn({
      path: "/v2/update-requests/{ENTITY}/{UUID}",
      operationId: "getV2UpdateRequestsENTITYUUID",
      variables
    }),
    ({ signal }) => fetchGetV2UpdateRequestsENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2WorkdaysENTITYUUIDPathParams = {
  /**
   * allowed values project-report/site-report
   */
  entity: string;
  uuid: string;
};

export type GetV2WorkdaysENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2WorkdaysENTITYUUIDResponse = {
  data?: {
    uuid?: string;
    collection?: string;
    readable_collection?: string;
    demographics?: {
      type?: "gender" | "age" | "ethnicity";
      subtype?: string;
      name?: string;
      amount?: number;
    }[];
  }[];
};

export type GetV2WorkdaysENTITYUUIDVariables = {
  pathParams: GetV2WorkdaysENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2WorkdaysENTITYUUID = (variables: GetV2WorkdaysENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2WorkdaysENTITYUUIDResponse,
    GetV2WorkdaysENTITYUUIDError,
    undefined,
    {},
    {},
    GetV2WorkdaysENTITYUUIDPathParams
  >({ url: "/v2/workdays/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2WorkdaysENTITYUUID = <TData = GetV2WorkdaysENTITYUUIDResponse>(
  variables: GetV2WorkdaysENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2WorkdaysENTITYUUIDResponse, GetV2WorkdaysENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2WorkdaysENTITYUUIDResponse, GetV2WorkdaysENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/workdays/{ENTITY}/{UUID}", operationId: "getV2WorkdaysENTITYUUID", variables }),
    ({ signal }) => fetchGetV2WorkdaysENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2StratasENTITYUUIDPathParams = {
  /**
   * allowed values project/site/nursery/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2StratasENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2StratasENTITYUUIDResponse = {
  data?: {
    uuid?: string;
    description?: string;
    extent?: number;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type GetV2StratasENTITYUUIDVariables = {
  pathParams: GetV2StratasENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2StratasENTITYUUID = (variables: GetV2StratasENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2StratasENTITYUUIDResponse,
    GetV2StratasENTITYUUIDError,
    undefined,
    {},
    {},
    GetV2StratasENTITYUUIDPathParams
  >({ url: "/v2/stratas/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2StratasENTITYUUID = <TData = GetV2StratasENTITYUUIDResponse>(
  variables: GetV2StratasENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2StratasENTITYUUIDResponse, GetV2StratasENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2StratasENTITYUUIDResponse, GetV2StratasENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/stratas/{ENTITY}/{UUID}", operationId: "getV2StratasENTITYUUID", variables }),
    ({ signal }) => fetchGetV2StratasENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2SeedingsENTITYUUIDPathParams = {
  /**
   * allowed values site/site-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2SeedingsENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2SeedingsENTITYUUIDResponse = {
  data?: {
    uuid?: string;
    name?: string;
    weight_of_sample?: number;
    seeds_in_sample?: number;
    amount?: number;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type GetV2SeedingsENTITYUUIDVariables = {
  pathParams: GetV2SeedingsENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2SeedingsENTITYUUID = (variables: GetV2SeedingsENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2SeedingsENTITYUUIDResponse,
    GetV2SeedingsENTITYUUIDError,
    undefined,
    {},
    {},
    GetV2SeedingsENTITYUUIDPathParams
  >({ url: "/v2/seedings/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2SeedingsENTITYUUID = <TData = GetV2SeedingsENTITYUUIDResponse>(
  variables: GetV2SeedingsENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2SeedingsENTITYUUIDResponse, GetV2SeedingsENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2SeedingsENTITYUUIDResponse, GetV2SeedingsENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/seedings/{ENTITY}/{UUID}", operationId: "getV2SeedingsENTITYUUID", variables }),
    ({ signal }) => fetchGetV2SeedingsENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DisturbancesENTITYUUIDPathParams = {
  /**
   * allowed values project/site/nursery/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2DisturbancesENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DisturbancesENTITYUUIDResponse = {
  data?: {
    uuid?: string;
    description?: string;
    intensity?: string;
    extent?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type GetV2DisturbancesENTITYUUIDVariables = {
  pathParams: GetV2DisturbancesENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2DisturbancesENTITYUUID = (
  variables: GetV2DisturbancesENTITYUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2DisturbancesENTITYUUIDResponse,
    GetV2DisturbancesENTITYUUIDError,
    undefined,
    {},
    {},
    GetV2DisturbancesENTITYUUIDPathParams
  >({ url: "/v2/disturbances/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2DisturbancesENTITYUUID = <TData = GetV2DisturbancesENTITYUUIDResponse>(
  variables: GetV2DisturbancesENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2DisturbancesENTITYUUIDResponse, GetV2DisturbancesENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DisturbancesENTITYUUIDResponse, GetV2DisturbancesENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/disturbances/{ENTITY}/{UUID}", operationId: "getV2DisturbancesENTITYUUID", variables }),
    ({ signal }) => fetchGetV2DisturbancesENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2InvasivesENTITYUUIDPathParams = {
  /**
   * allowed values project/site/nursery/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2InvasivesENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2InvasivesENTITYUUIDResponse = {
  data?: {
    uuid?: string;
    name?: string;
    type?: number;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type GetV2InvasivesENTITYUUIDVariables = {
  pathParams: GetV2InvasivesENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2InvasivesENTITYUUID = (variables: GetV2InvasivesENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2InvasivesENTITYUUIDResponse,
    GetV2InvasivesENTITYUUIDError,
    undefined,
    {},
    {},
    GetV2InvasivesENTITYUUIDPathParams
  >({ url: "/v2/invasives/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2InvasivesENTITYUUID = <TData = GetV2InvasivesENTITYUUIDResponse>(
  variables: GetV2InvasivesENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2InvasivesENTITYUUIDResponse, GetV2InvasivesENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2InvasivesENTITYUUIDResponse, GetV2InvasivesENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/invasives/{ENTITY}/{UUID}", operationId: "getV2InvasivesENTITYUUID", variables }),
    ({ signal }) => fetchGetV2InvasivesENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FormsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsResponse = {
  data?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2FormsVariables = {
  body?: RequestBodies.GetV2AdminNurseryReportsBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2Forms = (variables: GetV2FormsVariables, signal?: AbortSignal) =>
  apiFetch<GetV2FormsResponse, GetV2FormsError, RequestBodies.GetV2AdminNurseryReportsBody, {}, {}, {}>({
    url: "/v2/forms",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2Forms = <TData = GetV2FormsResponse>(
  variables: GetV2FormsVariables,
  options?: Omit<reactQuery.UseQueryOptions<GetV2FormsResponse, GetV2FormsError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsResponse, GetV2FormsError, TData>(
    queryKeyFn({ path: "/v2/forms", operationId: "getV2Forms", variables }),
    ({ signal }) => fetchGetV2Forms({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchV2AdminFormsUUIDPublishError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFormsUUIDPublishResponse = {
  id?: number;
  uuid?: string;
  type?: string;
  version?: number;
  title?: string;
  subtitle?: string;
  description?: string;
  framework_key?: string;
  duration?: string;
  deadline_at?: string;
  documentation?: string;
  documentation_label?: string;
  submission_message?: string;
  published?: boolean;
  stage_id?: string;
  options_other?: boolean;
  form_sections?: {
    order?: number;
    form_id?: number;
    form_questions?: {
      id?: number;
      uuid?: string;
      form_section_id?: number;
      label?: string;
      validation?: string[];
      parent_id?: string;
      linked_field_key?: string;
      children?: Record<string, any>[];
      multichoice?: boolean;
      order?: number;
      options?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      table_headers?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      additional_text?: string;
      additional_url?: string;
      show_on_parent_condition?: boolean;
      input_type?:
        | "date"
        | "text"
        | "long-text"
        | "select"
        | "checkboxes"
        | "radio"
        | "number"
        | "image"
        | "file"
        | "conditional";
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg. slug: name
   */
  tags?: string[];
  updated_by?: number;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PatchV2AdminFormsUUIDPublishVariables = ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFormsUUIDPublish = (
  variables: PatchV2AdminFormsUUIDPublishVariables,
  signal?: AbortSignal
) =>
  apiFetch<PatchV2AdminFormsUUIDPublishResponse, PatchV2AdminFormsUUIDPublishError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms/{uuid}/publish",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2AdminFormsUUIDPublish = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2AdminFormsUUIDPublishResponse,
      PatchV2AdminFormsUUIDPublishError,
      PatchV2AdminFormsUUIDPublishVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2AdminFormsUUIDPublishResponse,
    PatchV2AdminFormsUUIDPublishError,
    PatchV2AdminFormsUUIDPublishVariables
  >(
    (variables: PatchV2AdminFormsUUIDPublishVariables) =>
      fetchPatchV2AdminFormsUUIDPublish({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2AdminFormsSectionError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminFormsSectionResponse = {
  order?: number;
  form_id?: number;
  form_questions?: {
    id?: number;
    uuid?: string;
    form_section_id?: number;
    label?: string;
    validation?: string[];
    parent_id?: string;
    linked_field_key?: string;
    children?: Record<string, any>[];
    multichoice?: boolean;
    order?: number;
    options?: {
      id?: number;
      uuid?: string;
      form_question_id?: number;
      label?: string;
      order?: number;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    table_headers?: {
      id?: number;
      uuid?: string;
      form_question_id?: number;
      label?: string;
      order?: number;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    additional_text?: string;
    additional_url?: string;
    show_on_parent_condition?: boolean;
    input_type?:
      | "date"
      | "text"
      | "long-text"
      | "select"
      | "checkboxes"
      | "radio"
      | "number"
      | "image"
      | "file"
      | "conditional";
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  created_at?: string;
  updated_at?: string;
  deleted_at?: string;
};

export type PostV2AdminFormsSectionRequestBody = {
  order?: number;
  title?: string;
  subtitle?: string;
  description?: string;
  form_questions?: {
    additional_props?: Record<string, any>[];
    child_form_questions?: {
      id?: number;
      uuid?: string;
      form_section_id?: number;
      label?: string;
      validation?: string[];
      parent_id?: string;
      linked_field_key?: string;
      children?: Record<string, any>[];
      multichoice?: boolean;
      order?: number;
      options?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      table_headers?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      additional_text?: string;
      additional_url?: string;
      show_on_parent_condition?: boolean;
      input_type?:
        | "date"
        | "text"
        | "long-text"
        | "select"
        | "checkboxes"
        | "radio"
        | "number"
        | "image"
        | "file"
        | "conditional";
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    table_headers?: {
      id?: number;
      uuid?: string;
      form_question_id?: number;
      label?: string;
      order?: number;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    linked_field_key?: string;
    show_on_parent_condition?: boolean;
    input_type?:
      | "date"
      | "text"
      | "long-text"
      | "select"
      | "checkboxes"
      | "radio"
      | "number"
      | "image"
      | "file"
      | "conditional";
    label?: string;
    placeholder?: string;
    description?: string;
    validation?: Record<string, any>;
    multichoice?: boolean;
    order?: number;
    options_list?: string;
    options?: {
      id?: number;
      uuid?: string;
      form_question_id?: number;
      label?: string;
      order?: number;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
};

export type PostV2AdminFormsSectionVariables = {
  body?: PostV2AdminFormsSectionRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminFormsSection = (variables: PostV2AdminFormsSectionVariables, signal?: AbortSignal) =>
  apiFetch<
    PostV2AdminFormsSectionResponse,
    PostV2AdminFormsSectionError,
    PostV2AdminFormsSectionRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/forms/section", method: "post", ...variables, signal });

export const usePostV2AdminFormsSection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2AdminFormsSectionResponse,
      PostV2AdminFormsSectionError,
      PostV2AdminFormsSectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2AdminFormsSectionResponse,
    PostV2AdminFormsSectionError,
    PostV2AdminFormsSectionVariables
  >(
    (variables: PostV2AdminFormsSectionVariables) => fetchPostV2AdminFormsSection({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminFormsQuestionUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFormsQuestionUUIDResponse = {
  id?: number;
  uuid?: string;
  form_section_id?: number;
  label?: string;
  validation?: string[];
  parent_id?: string;
  linked_field_key?: string;
  children?: Record<string, any>[];
  multichoice?: boolean;
  order?: number;
  options?: {
    id?: number;
    uuid?: string;
    form_question_id?: number;
    label?: string;
    order?: number;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  table_headers?: {
    id?: number;
    uuid?: string;
    form_question_id?: number;
    label?: string;
    order?: number;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  additional_text?: string;
  additional_url?: string;
  show_on_parent_condition?: boolean;
  input_type?:
    | "date"
    | "text"
    | "long-text"
    | "select"
    | "checkboxes"
    | "radio"
    | "number"
    | "image"
    | "file"
    | "conditional";
  created_at?: string;
  updated_at?: string;
  deleted_at?: string;
};

export type DeleteV2AdminFormsQuestionUUIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFormsQuestionUUID = (
  variables: DeleteV2AdminFormsQuestionUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<DeleteV2AdminFormsQuestionUUIDResponse, DeleteV2AdminFormsQuestionUUIDError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms/question/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminFormsQuestionUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2AdminFormsQuestionUUIDResponse,
      DeleteV2AdminFormsQuestionUUIDError,
      DeleteV2AdminFormsQuestionUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2AdminFormsQuestionUUIDResponse,
    DeleteV2AdminFormsQuestionUUIDError,
    DeleteV2AdminFormsQuestionUUIDVariables
  >(
    (variables: DeleteV2AdminFormsQuestionUUIDVariables) =>
      fetchDeleteV2AdminFormsQuestionUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminFormsSectionUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFormsSectionUUIDResponse = {
  order?: number;
  form_id?: number;
  form_questions?: {
    id?: number;
    uuid?: string;
    form_section_id?: number;
    label?: string;
    validation?: string[];
    parent_id?: string;
    linked_field_key?: string;
    children?: Record<string, any>[];
    multichoice?: boolean;
    order?: number;
    options?: {
      id?: number;
      uuid?: string;
      form_question_id?: number;
      label?: string;
      order?: number;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    table_headers?: {
      id?: number;
      uuid?: string;
      form_question_id?: number;
      label?: string;
      order?: number;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    additional_text?: string;
    additional_url?: string;
    show_on_parent_condition?: boolean;
    input_type?:
      | "date"
      | "text"
      | "long-text"
      | "select"
      | "checkboxes"
      | "radio"
      | "number"
      | "image"
      | "file"
      | "conditional";
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  created_at?: string;
  updated_at?: string;
  deleted_at?: string;
};

export type DeleteV2AdminFormsSectionUUIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFormsSectionUUID = (
  variables: DeleteV2AdminFormsSectionUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<DeleteV2AdminFormsSectionUUIDResponse, DeleteV2AdminFormsSectionUUIDError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms/section/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminFormsSectionUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2AdminFormsSectionUUIDResponse,
      DeleteV2AdminFormsSectionUUIDError,
      DeleteV2AdminFormsSectionUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2AdminFormsSectionUUIDResponse,
    DeleteV2AdminFormsSectionUUIDError,
    DeleteV2AdminFormsSectionUUIDVariables
  >(
    (variables: DeleteV2AdminFormsSectionUUIDVariables) =>
      fetchDeleteV2AdminFormsSectionUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AdminFormsSectionUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFormsSectionUUIDResponse = {
  order?: number;
  form_id?: number;
  form_questions?: {
    id?: number;
    uuid?: string;
    form_section_id?: number;
    label?: string;
    validation?: string[];
    parent_id?: string;
    linked_field_key?: string;
    children?: Record<string, any>[];
    multichoice?: boolean;
    order?: number;
    options?: {
      id?: number;
      uuid?: string;
      form_question_id?: number;
      label?: string;
      order?: number;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    table_headers?: {
      id?: number;
      uuid?: string;
      form_question_id?: number;
      label?: string;
      order?: number;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    additional_text?: string;
    additional_url?: string;
    show_on_parent_condition?: boolean;
    input_type?:
      | "date"
      | "text"
      | "long-text"
      | "select"
      | "checkboxes"
      | "radio"
      | "number"
      | "image"
      | "file"
      | "conditional";
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  created_at?: string;
  updated_at?: string;
  deleted_at?: string;
};

export type PatchV2AdminFormsSectionUUIDRequestBody = {
  order?: number;
};

export type PatchV2AdminFormsSectionUUIDVariables = {
  body?: PatchV2AdminFormsSectionUUIDRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFormsSectionUUID = (
  variables: PatchV2AdminFormsSectionUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PatchV2AdminFormsSectionUUIDResponse,
    PatchV2AdminFormsSectionUUIDError,
    PatchV2AdminFormsSectionUUIDRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/forms/section/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2AdminFormsSectionUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2AdminFormsSectionUUIDResponse,
      PatchV2AdminFormsSectionUUIDError,
      PatchV2AdminFormsSectionUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2AdminFormsSectionUUIDResponse,
    PatchV2AdminFormsSectionUUIDError,
    PatchV2AdminFormsSectionUUIDVariables
  >(
    (variables: PatchV2AdminFormsSectionUUIDVariables) =>
      fetchPatchV2AdminFormsSectionUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminFormsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFormsUUIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFormsUUID = (variables: DeleteV2AdminFormsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2AdminFormsUUIDError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminFormsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2AdminFormsUUIDError, DeleteV2AdminFormsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2AdminFormsUUIDError, DeleteV2AdminFormsUUIDVariables>(
    (variables: DeleteV2AdminFormsUUIDVariables) => fetchDeleteV2AdminFormsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AdminFormsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFormsUUIDResponse = {
  id?: number;
  uuid?: string;
  type?: string;
  version?: number;
  title?: string;
  subtitle?: string;
  description?: string;
  framework_key?: string;
  duration?: string;
  deadline_at?: string;
  documentation?: string;
  documentation_label?: string;
  submission_message?: string;
  published?: boolean;
  stage_id?: string;
  options_other?: boolean;
  form_sections?: {
    order?: number;
    form_id?: number;
    form_questions?: {
      id?: number;
      uuid?: string;
      form_section_id?: number;
      label?: string;
      validation?: string[];
      parent_id?: string;
      linked_field_key?: string;
      children?: Record<string, any>[];
      multichoice?: boolean;
      order?: number;
      options?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      table_headers?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      additional_text?: string;
      additional_url?: string;
      show_on_parent_condition?: boolean;
      input_type?:
        | "date"
        | "text"
        | "long-text"
        | "select"
        | "checkboxes"
        | "radio"
        | "number"
        | "image"
        | "file"
        | "conditional";
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg. slug: name
   */
  tags?: string[];
  updated_by?: number;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PatchV2AdminFormsUUIDRequestBody = {
  type?: string;
  title?: string;
  subtitle?: string;
  description?: string;
  documentation?: string;
  documentation_label?: string;
  submission_message?: string;
  duration?: string;
  options_other?: boolean;
};

export type PatchV2AdminFormsUUIDVariables = {
  body?: PatchV2AdminFormsUUIDRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFormsUUID = (variables: PatchV2AdminFormsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<PatchV2AdminFormsUUIDResponse, PatchV2AdminFormsUUIDError, PatchV2AdminFormsUUIDRequestBody, {}, {}, {}>({
    url: "/v2/admin/forms/{uuid}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2AdminFormsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2AdminFormsUUIDResponse,
      PatchV2AdminFormsUUIDError,
      PatchV2AdminFormsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2AdminFormsUUIDResponse,
    PatchV2AdminFormsUUIDError,
    PatchV2AdminFormsUUIDVariables
  >(
    (variables: PatchV2AdminFormsUUIDVariables) => fetchPatchV2AdminFormsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FormsLinkedFieldListingQueryParams = {
  /**
   * array of form types
   */
  form_types?: string[];
};

export type GetV2FormsLinkedFieldListingError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsLinkedFieldListingResponse = {
  uuid?: string;
  name?: string;
  input_type?: string;
  model_key?: string;
  option_list_key?: string;
  options?: string[];
};

export type GetV2FormsLinkedFieldListingVariables = {
  queryParams?: GetV2FormsLinkedFieldListingQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsLinkedFieldListing = (
  variables: GetV2FormsLinkedFieldListingVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2FormsLinkedFieldListingResponse,
    GetV2FormsLinkedFieldListingError,
    undefined,
    {},
    GetV2FormsLinkedFieldListingQueryParams,
    {}
  >({ url: "/v2/forms/linked-field-listing", method: "get", ...variables, signal });

export const useGetV2FormsLinkedFieldListing = <TData = GetV2FormsLinkedFieldListingResponse>(
  variables: GetV2FormsLinkedFieldListingVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FormsLinkedFieldListingResponse, GetV2FormsLinkedFieldListingError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsLinkedFieldListingResponse, GetV2FormsLinkedFieldListingError, TData>(
    queryKeyFn({ path: "/v2/forms/linked-field-listing", operationId: "getV2FormsLinkedFieldListing", variables }),
    ({ signal }) => fetchGetV2FormsLinkedFieldListing({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFormsCommonOptionsBUCKETPathParams = {
  /**
   * name of the bucket/collection of common options
   */
  bucket: string;
};

export type GetV2AdminFormsCommonOptionsBUCKETQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
};

export type GetV2AdminFormsCommonOptionsBUCKETError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsCommonOptionsBUCKETResponse = {
  uuid?: string;
  slug?: string;
  alt_value?: string;
  label?: string;
};

export type GetV2AdminFormsCommonOptionsBUCKETVariables = {
  pathParams: GetV2AdminFormsCommonOptionsBUCKETPathParams;
  queryParams?: GetV2AdminFormsCommonOptionsBUCKETQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsCommonOptionsBUCKET = (
  variables: GetV2AdminFormsCommonOptionsBUCKETVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2AdminFormsCommonOptionsBUCKETResponse,
    GetV2AdminFormsCommonOptionsBUCKETError,
    undefined,
    {},
    GetV2AdminFormsCommonOptionsBUCKETQueryParams,
    GetV2AdminFormsCommonOptionsBUCKETPathParams
  >({ url: "/v2/admin/forms/common-options/{bucket}", method: "get", ...variables, signal });

export const useGetV2AdminFormsCommonOptionsBUCKET = <TData = GetV2AdminFormsCommonOptionsBUCKETResponse>(
  variables: GetV2AdminFormsCommonOptionsBUCKETVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2AdminFormsCommonOptionsBUCKETResponse,
      GetV2AdminFormsCommonOptionsBUCKETError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetV2AdminFormsCommonOptionsBUCKETResponse,
    GetV2AdminFormsCommonOptionsBUCKETError,
    TData
  >(
    queryKeyFn({
      path: "/v2/admin/forms/common-options/{BUCKET}",
      operationId: "getV2AdminFormsCommonOptionsBUCKET",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsCommonOptionsBUCKET({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminOrganisationsQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminOrganisationsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminOrganisationsResponse = {
  data?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2AdminOrganisationsVariables = {
  queryParams?: GetV2AdminOrganisationsQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Currently available sort is status, type, trees_grown_total, name, fin_budget_1year, created_at
 */
export const fetchGetV2AdminOrganisations = (variables: GetV2AdminOrganisationsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminOrganisationsResponse,
    GetV2AdminOrganisationsError,
    undefined,
    {},
    GetV2AdminOrganisationsQueryParams,
    {}
  >({ url: "/v2/admin/organisations", method: "get", ...variables, signal });

/**
 * Currently available sort is status, type, trees_grown_total, name, fin_budget_1year, created_at
 */
export const useGetV2AdminOrganisations = <TData = GetV2AdminOrganisationsResponse>(
  variables: GetV2AdminOrganisationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminOrganisationsResponse, GetV2AdminOrganisationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminOrganisationsResponse, GetV2AdminOrganisationsError, TData>(
    queryKeyFn({ path: "/v2/admin/organisations", operationId: "getV2AdminOrganisations", variables }),
    ({ signal }) => fetchGetV2AdminOrganisations({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminOrganisationsMultiQueryParams = {
  /**
   * comma separated list of values. eg ?ids=uuid1,uuid2
   */
  ids: string;
};

export type GetV2AdminOrganisationsMultiError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminOrganisationsMultiResponse = {
  uuid?: string;
  status?: string;
  readable_status?: string;
  type?: string;
  private?: boolean;
  name?: string;
  phone?: string;
  founding_date?: string;
  description?: string;
  countries?: string[];
  languages?: string[];
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  project_pitches?: {
    id?: string;
    uuid?: string;
    status?: string;
    readable_status?: string;
    organisation_id?: string;
    funding_programmes?: {
      id?: number;
      uuid?: string;
      name?: string;
      description?: string;
      read_more_url?: string;
      organisation_types?: string[];
      location?: string;
      status?: string;
    };
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_name?: string;
    how_discovered?: string;
    project_objectives?: string;
    project_country?: string[];
    project_county_district?: string;
    restoration_intervention_types?: string[];
    land_systems?: string[];
    tree_restoration_practices?: string[];
    total_hectares?: number;
    project_budget?: number;
    total_trees?: number;
    capacity_building_needs?: string[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    restoration_photos?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    proof_of_land_tenure_mou?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    detailed_project_budget?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    expected_active_restoration_start_date?: string;
    expected_active_restoration_end_date?: string;
    description_of_project_timeline?: string;
    proj_partner_info?: string;
    land_tenure_proj_area?: string[];
    landholder_comm_engage?: string;
    proj_success_risks?: string;
    monitor_eval_plan?: string;
    proj_boundary?: string;
    sustainable_dev_goals?: string[];
    proj_area_description?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_sites?: number;
    environmental_goals?: string;
    main_degradation_causes?: string;
    seedlings_source?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_nurseries?: number;
    curr_land_degradation?: string;
    proj_impact_socieconom?: string;
    proj_impact_foodsec?: string;
    proj_impact_watersec?: string;
    proj_impact_jobtypes?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    num_jobs_created?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_men?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_18to35?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_older35?: number;
    proj_beneficiaries?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_small?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_large?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_youth?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_classes?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_tribes?: number;
    monitoring_evaluation_plan?: string;
    main_causes_of_degradation?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  web_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  linkedin_url?: string;
  twitter_url?: string;
  hq_street_1?: string;
  hq_street_2?: string;
  hq_city?: string;
  hq_state?: string;
  hq_zipcode?: string;
  hq_country?: string;
  fin_start_month?: number;
  /**
   * @format float
   */
  fin_budget_3year?: number;
  /**
   * @format float
   */
  fin_budget_2year?: number;
  /**
   * @format float
   */
  fin_budget_1year?: number;
  /**
   * @format float
   */
  fin_budget_current_year?: number;
  /**
   * @format float
   */
  ha_restored_total?: number;
  /**
   * @format float
   */
  ha_restored_3year?: number;
  relevant_experience_years?: number;
  trees_grown_total?: number;
  trees_grown_3year?: number;
  tree_care_approach?: string;
  ft_permanent_employees?: number;
  pt_permanent_employees?: number;
  temp_employees?: number;
  female_employees?: number;
  male_employees?: number;
  young_employees?: number;
  additional_funding_details?: string;
  community_experience?: string;
  total_engaged_community_members_3yr?: number;
  percent_engaged_women_3yr?: number;
  percent_engaged_men_3yr?: number;
  percent_engaged_under_35_3yr?: number;
  percent_engaged_over_35_3yr?: number;
  percent_engaged_smallholder_3yr?: number;
  total_trees_grown?: number;
  avg_tree_survival_rate?: number;
  tree_maintenance_aftercare_approach?: string;
  restored_areas_description?: string;
  monitoring_evaluation_experience?: string;
  funding_history?: string;
  shapefiles?: {
    uuid?: string;
    shapefileable_type?: string;
    shapefileable_id?: number;
    geojson?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  bank_statements?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  previous_annual_reports?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  logo?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  reference?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  additional?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_2year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_last_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_this_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_next_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  legal_registration?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg. slug: name
   */
  tags?: string[];
  created_at?: string;
  updated_at?: string;
};

export type GetV2AdminOrganisationsMultiVariables = {
  queryParams: GetV2AdminOrganisationsMultiQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminOrganisationsMulti = (
  variables: GetV2AdminOrganisationsMultiVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2AdminOrganisationsMultiResponse,
    GetV2AdminOrganisationsMultiError,
    undefined,
    {},
    GetV2AdminOrganisationsMultiQueryParams,
    {}
  >({ url: "/v2/admin/organisations/multi", method: "get", ...variables, signal });

export const useGetV2AdminOrganisationsMulti = <TData = GetV2AdminOrganisationsMultiResponse>(
  variables: GetV2AdminOrganisationsMultiVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminOrganisationsMultiResponse, GetV2AdminOrganisationsMultiError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminOrganisationsMultiResponse, GetV2AdminOrganisationsMultiError, TData>(
    queryKeyFn({ path: "/v2/admin/organisations/multi", operationId: "getV2AdminOrganisationsMulti", variables }),
    ({ signal }) => fetchGetV2AdminOrganisationsMulti({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminOrganisationsUUIDPathParams = {
  uuid: string;
};

export type GetV2AdminOrganisationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminOrganisationsUUIDResponse = {
  uuid?: string;
  status?: string;
  readable_status?: string;
  type?: string;
  private?: boolean;
  name?: string;
  phone?: string;
  founding_date?: string;
  description?: string;
  countries?: string[];
  languages?: string[];
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  project_pitches?: {
    id?: string;
    uuid?: string;
    status?: string;
    readable_status?: string;
    organisation_id?: string;
    funding_programmes?: {
      id?: number;
      uuid?: string;
      name?: string;
      description?: string;
      read_more_url?: string;
      organisation_types?: string[];
      location?: string;
      status?: string;
    };
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_name?: string;
    how_discovered?: string;
    project_objectives?: string;
    project_country?: string[];
    project_county_district?: string;
    restoration_intervention_types?: string[];
    land_systems?: string[];
    tree_restoration_practices?: string[];
    total_hectares?: number;
    project_budget?: number;
    total_trees?: number;
    capacity_building_needs?: string[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    restoration_photos?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    proof_of_land_tenure_mou?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    detailed_project_budget?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    expected_active_restoration_start_date?: string;
    expected_active_restoration_end_date?: string;
    description_of_project_timeline?: string;
    proj_partner_info?: string;
    land_tenure_proj_area?: string[];
    landholder_comm_engage?: string;
    proj_success_risks?: string;
    monitor_eval_plan?: string;
    proj_boundary?: string;
    sustainable_dev_goals?: string[];
    proj_area_description?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_sites?: number;
    environmental_goals?: string;
    main_degradation_causes?: string;
    seedlings_source?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_nurseries?: number;
    curr_land_degradation?: string;
    proj_impact_socieconom?: string;
    proj_impact_foodsec?: string;
    proj_impact_watersec?: string;
    proj_impact_jobtypes?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    num_jobs_created?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_men?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_18to35?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_older35?: number;
    proj_beneficiaries?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_small?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_large?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_youth?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_classes?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_tribes?: number;
    monitoring_evaluation_plan?: string;
    main_causes_of_degradation?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  web_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  linkedin_url?: string;
  twitter_url?: string;
  hq_street_1?: string;
  hq_street_2?: string;
  hq_city?: string;
  hq_state?: string;
  hq_zipcode?: string;
  hq_country?: string;
  fin_start_month?: number;
  /**
   * @format float
   */
  fin_budget_3year?: number;
  /**
   * @format float
   */
  fin_budget_2year?: number;
  /**
   * @format float
   */
  fin_budget_1year?: number;
  /**
   * @format float
   */
  fin_budget_current_year?: number;
  /**
   * @format float
   */
  ha_restored_total?: number;
  /**
   * @format float
   */
  ha_restored_3year?: number;
  relevant_experience_years?: number;
  trees_grown_total?: number;
  trees_grown_3year?: number;
  tree_care_approach?: string;
  ft_permanent_employees?: number;
  pt_permanent_employees?: number;
  temp_employees?: number;
  female_employees?: number;
  male_employees?: number;
  young_employees?: number;
  additional_funding_details?: string;
  community_experience?: string;
  total_engaged_community_members_3yr?: number;
  percent_engaged_women_3yr?: number;
  percent_engaged_men_3yr?: number;
  percent_engaged_under_35_3yr?: number;
  percent_engaged_over_35_3yr?: number;
  percent_engaged_smallholder_3yr?: number;
  total_trees_grown?: number;
  avg_tree_survival_rate?: number;
  tree_maintenance_aftercare_approach?: string;
  restored_areas_description?: string;
  monitoring_evaluation_experience?: string;
  funding_history?: string;
  shapefiles?: {
    uuid?: string;
    shapefileable_type?: string;
    shapefileable_id?: number;
    geojson?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  bank_statements?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  previous_annual_reports?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  logo?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  reference?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  additional?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_2year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_last_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_this_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_next_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  legal_registration?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg. slug: name
   */
  tags?: string[];
  created_at?: string;
  updated_at?: string;
};

export type GetV2AdminOrganisationsUUIDVariables = {
  pathParams: GetV2AdminOrganisationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminOrganisationsUUID = (
  variables: GetV2AdminOrganisationsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2AdminOrganisationsUUIDResponse,
    GetV2AdminOrganisationsUUIDError,
    undefined,
    {},
    {},
    GetV2AdminOrganisationsUUIDPathParams
  >({ url: "/v2/admin/organisations/{uuid}", method: "get", ...variables, signal });

export const useGetV2AdminOrganisationsUUID = <TData = GetV2AdminOrganisationsUUIDResponse>(
  variables: GetV2AdminOrganisationsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminOrganisationsUUIDResponse, GetV2AdminOrganisationsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminOrganisationsUUIDResponse, GetV2AdminOrganisationsUUIDError, TData>(
    queryKeyFn({ path: "/v2/admin/organisations/{UUID}", operationId: "getV2AdminOrganisationsUUID", variables }),
    ({ signal }) => fetchGetV2AdminOrganisationsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2AdminOrganisationsUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminOrganisationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminOrganisationsUUIDResponse = {
  uuid?: string;
  status?: string;
  readable_status?: string;
  type?: string;
  private?: boolean;
  name?: string;
  phone?: string;
  founding_date?: string;
  description?: string;
  countries?: string[];
  languages?: string[];
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  project_pitches?: {
    id?: string;
    uuid?: string;
    status?: string;
    readable_status?: string;
    organisation_id?: string;
    funding_programmes?: {
      id?: number;
      uuid?: string;
      name?: string;
      description?: string;
      read_more_url?: string;
      organisation_types?: string[];
      location?: string;
      status?: string;
    };
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_name?: string;
    how_discovered?: string;
    project_objectives?: string;
    project_country?: string[];
    project_county_district?: string;
    restoration_intervention_types?: string[];
    land_systems?: string[];
    tree_restoration_practices?: string[];
    total_hectares?: number;
    project_budget?: number;
    total_trees?: number;
    capacity_building_needs?: string[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    restoration_photos?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    proof_of_land_tenure_mou?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    detailed_project_budget?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    expected_active_restoration_start_date?: string;
    expected_active_restoration_end_date?: string;
    description_of_project_timeline?: string;
    proj_partner_info?: string;
    land_tenure_proj_area?: string[];
    landholder_comm_engage?: string;
    proj_success_risks?: string;
    monitor_eval_plan?: string;
    proj_boundary?: string;
    sustainable_dev_goals?: string[];
    proj_area_description?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_sites?: number;
    environmental_goals?: string;
    main_degradation_causes?: string;
    seedlings_source?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_nurseries?: number;
    curr_land_degradation?: string;
    proj_impact_socieconom?: string;
    proj_impact_foodsec?: string;
    proj_impact_watersec?: string;
    proj_impact_jobtypes?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    num_jobs_created?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_men?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_18to35?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_older35?: number;
    proj_beneficiaries?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_small?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_large?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_youth?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_classes?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_tribes?: number;
    monitoring_evaluation_plan?: string;
    main_causes_of_degradation?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  web_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  linkedin_url?: string;
  twitter_url?: string;
  hq_street_1?: string;
  hq_street_2?: string;
  hq_city?: string;
  hq_state?: string;
  hq_zipcode?: string;
  hq_country?: string;
  fin_start_month?: number;
  /**
   * @format float
   */
  fin_budget_3year?: number;
  /**
   * @format float
   */
  fin_budget_2year?: number;
  /**
   * @format float
   */
  fin_budget_1year?: number;
  /**
   * @format float
   */
  fin_budget_current_year?: number;
  /**
   * @format float
   */
  ha_restored_total?: number;
  /**
   * @format float
   */
  ha_restored_3year?: number;
  relevant_experience_years?: number;
  trees_grown_total?: number;
  trees_grown_3year?: number;
  tree_care_approach?: string;
  ft_permanent_employees?: number;
  pt_permanent_employees?: number;
  temp_employees?: number;
  female_employees?: number;
  male_employees?: number;
  young_employees?: number;
  additional_funding_details?: string;
  community_experience?: string;
  total_engaged_community_members_3yr?: number;
  percent_engaged_women_3yr?: number;
  percent_engaged_men_3yr?: number;
  percent_engaged_under_35_3yr?: number;
  percent_engaged_over_35_3yr?: number;
  percent_engaged_smallholder_3yr?: number;
  total_trees_grown?: number;
  avg_tree_survival_rate?: number;
  tree_maintenance_aftercare_approach?: string;
  restored_areas_description?: string;
  monitoring_evaluation_experience?: string;
  funding_history?: string;
  shapefiles?: {
    uuid?: string;
    shapefileable_type?: string;
    shapefileable_id?: number;
    geojson?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  bank_statements?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  previous_annual_reports?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  logo?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  reference?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  additional?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_2year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_last_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_this_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_next_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  legal_registration?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg. slug: name
   */
  tags?: string[];
  created_at?: string;
  updated_at?: string;
};

export type PutV2AdminOrganisationsUUIDRequestBody = {
  type?: string;
  private?: boolean;
  name?: string;
  phone?: string;
  founding_date?: string;
  description?: string;
  countries?: string[];
  languages?: string[];
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  web_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  linkedin_url?: string;
  twitter_url?: string;
  hq_street_1?: string;
  hq_street_2?: string;
  hq_city?: string;
  hq_state?: string;
  hq_zipcode?: string;
  hq_country?: string;
  fin_start_month?: number;
  /**
   * @format float
   */
  fin_budget_3year?: number;
  /**
   * @format float
   */
  fin_budget_2year?: number;
  /**
   * @format float
   */
  fin_budget_1year?: number;
  /**
   * @format float
   */
  fin_budget_current_year?: number;
  /**
   * @format float
   */
  ha_restored_total?: number;
  /**
   * @format float
   */
  ha_restored_3year?: number;
  relevant_experience_years?: number;
  trees_grown_total?: number;
  trees_grown_3year?: number;
  tree_care_approach?: string;
  ft_permanent_employees?: number;
  pt_permanent_employees?: number;
  temp_employees?: number;
  female_employees?: number;
  male_employees?: number;
  young_employees?: number;
  additional_funding_details?: string;
  community_experience?: string;
  total_engaged_community_members_3yr?: number;
  percent_engaged_women_3yr?: number;
  percent_engaged_men_3yr?: number;
  percent_engaged_under_35_3yr?: number;
  percent_engaged_over_35_3yr?: number;
  percent_engaged_smallholder_3yr?: number;
  total_trees_grown?: number;
  avg_tree_survival_rate?: number;
  tree_maintenance_aftercare_approach?: string;
  restored_areas_description?: string;
  monitoring_evaluation_experience?: string;
  funding_history?: string;
  engagement_farmers?: string[];
  engagement_women?: string[];
  engagement_youth?: string[];
  engagement_non_youth?: string[];
  tree_restoration_practices?: string[];
  business_model?: string;
  subtype?: string;
  organisation_revenue_this_year?: number;
  shapefiles?: {
    uuid?: string;
    shapefileable_type?: string;
    shapefileable_id?: number;
    geojson?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  tags?: string[];
};

export type PutV2AdminOrganisationsUUIDVariables = {
  body?: PutV2AdminOrganisationsUUIDRequestBody;
  pathParams: PutV2AdminOrganisationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminOrganisationsUUID = (
  variables: PutV2AdminOrganisationsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2AdminOrganisationsUUIDResponse,
    PutV2AdminOrganisationsUUIDError,
    PutV2AdminOrganisationsUUIDRequestBody,
    {},
    {},
    PutV2AdminOrganisationsUUIDPathParams
  >({ url: "/v2/admin/organisations/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminOrganisationsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2AdminOrganisationsUUIDResponse,
      PutV2AdminOrganisationsUUIDError,
      PutV2AdminOrganisationsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2AdminOrganisationsUUIDResponse,
    PutV2AdminOrganisationsUUIDError,
    PutV2AdminOrganisationsUUIDVariables
  >(
    (variables: PutV2AdminOrganisationsUUIDVariables) =>
      fetchPutV2AdminOrganisationsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminOrganisationsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminOrganisationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminOrganisationsUUIDVariables = {
  pathParams: DeleteV2AdminOrganisationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminOrganisationsUUID = (
  variables: DeleteV2AdminOrganisationsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteV2AdminOrganisationsUUIDError, undefined, {}, {}, DeleteV2AdminOrganisationsUUIDPathParams>(
    { url: "/v2/admin/organisations/{uuid}", method: "delete", ...variables, signal }
  );

export const useDeleteV2AdminOrganisationsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminOrganisationsUUIDError,
      DeleteV2AdminOrganisationsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminOrganisationsUUIDError,
    DeleteV2AdminOrganisationsUUIDVariables
  >(
    (variables: DeleteV2AdminOrganisationsUUIDVariables) =>
      fetchDeleteV2AdminOrganisationsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2AdminOrganisationsApproveError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminOrganisationsApproveResponse = {
  type?: string;
  private?: boolean;
  name?: string;
  phone?: string;
  founding_date?: string;
  description?: string;
  countries?: string[];
  languages?: string[];
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  web_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  linkedin_url?: string;
  twitter_url?: string;
  hq_street_1?: string;
  hq_street_2?: string;
  hq_city?: string;
  hq_state?: string;
  hq_zipcode?: string;
  hq_country?: string;
  fin_start_month?: number;
  /**
   * @format float
   */
  fin_budget_3year?: number;
  /**
   * @format float
   */
  fin_budget_2year?: number;
  /**
   * @format float
   */
  fin_budget_1year?: number;
  /**
   * @format float
   */
  fin_budget_current_year?: number;
  /**
   * @format float
   */
  ha_restored_total?: number;
  /**
   * @format float
   */
  ha_restored_3year?: number;
  relevant_experience_years?: number;
  trees_grown_total?: number;
  trees_grown_3year?: number;
  tree_care_approach?: string;
  ft_permanent_employees?: number;
  pt_permanent_employees?: number;
  temp_employees?: number;
  female_employees?: number;
  male_employees?: number;
  young_employees?: number;
  additional_funding_details?: string;
  community_experience?: string;
  total_engaged_community_members_3yr?: number;
  percent_engaged_women_3yr?: number;
  percent_engaged_men_3yr?: number;
  percent_engaged_under_35_3yr?: number;
  percent_engaged_over_35_3yr?: number;
  percent_engaged_smallholder_3yr?: number;
  total_trees_grown?: number;
  avg_tree_survival_rate?: number;
  tree_maintenance_aftercare_approach?: string;
  restored_areas_description?: string;
  monitoring_evaluation_experience?: string;
  funding_history?: string;
  engagement_farmers?: string[];
  engagement_women?: string[];
  engagement_youth?: string[];
  engagement_non_youth?: string[];
  tree_restoration_practices?: string[];
  business_model?: string;
  subtype?: string;
  organisation_revenue_this_year?: number;
  shapefiles?: {
    uuid?: string;
    shapefileable_type?: string;
    shapefileable_id?: number;
    geojson?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  tags?: string[];
};

export type PutV2AdminOrganisationsApproveVariables = {
  body: RequestBodies.V2AdminOrganisationApproveBody;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminOrganisationsApprove = (
  variables: PutV2AdminOrganisationsApproveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2AdminOrganisationsApproveResponse,
    PutV2AdminOrganisationsApproveError,
    RequestBodies.V2AdminOrganisationApproveBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/organisations/approve", method: "put", ...variables, signal });

export const usePutV2AdminOrganisationsApprove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2AdminOrganisationsApproveResponse,
      PutV2AdminOrganisationsApproveError,
      PutV2AdminOrganisationsApproveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2AdminOrganisationsApproveResponse,
    PutV2AdminOrganisationsApproveError,
    PutV2AdminOrganisationsApproveVariables
  >(
    (variables: PutV2AdminOrganisationsApproveVariables) =>
      fetchPutV2AdminOrganisationsApprove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2AdminOrganisationsRejectError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminOrganisationsRejectResponse = {
  type?: string;
  private?: boolean;
  name?: string;
  phone?: string;
  founding_date?: string;
  description?: string;
  countries?: string[];
  languages?: string[];
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  web_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  linkedin_url?: string;
  twitter_url?: string;
  hq_street_1?: string;
  hq_street_2?: string;
  hq_city?: string;
  hq_state?: string;
  hq_zipcode?: string;
  hq_country?: string;
  fin_start_month?: number;
  /**
   * @format float
   */
  fin_budget_3year?: number;
  /**
   * @format float
   */
  fin_budget_2year?: number;
  /**
   * @format float
   */
  fin_budget_1year?: number;
  /**
   * @format float
   */
  fin_budget_current_year?: number;
  /**
   * @format float
   */
  ha_restored_total?: number;
  /**
   * @format float
   */
  ha_restored_3year?: number;
  relevant_experience_years?: number;
  trees_grown_total?: number;
  trees_grown_3year?: number;
  tree_care_approach?: string;
  ft_permanent_employees?: number;
  pt_permanent_employees?: number;
  temp_employees?: number;
  female_employees?: number;
  male_employees?: number;
  young_employees?: number;
  additional_funding_details?: string;
  community_experience?: string;
  total_engaged_community_members_3yr?: number;
  percent_engaged_women_3yr?: number;
  percent_engaged_men_3yr?: number;
  percent_engaged_under_35_3yr?: number;
  percent_engaged_over_35_3yr?: number;
  percent_engaged_smallholder_3yr?: number;
  total_trees_grown?: number;
  avg_tree_survival_rate?: number;
  tree_maintenance_aftercare_approach?: string;
  restored_areas_description?: string;
  monitoring_evaluation_experience?: string;
  funding_history?: string;
  engagement_farmers?: string[];
  engagement_women?: string[];
  engagement_youth?: string[];
  engagement_non_youth?: string[];
  tree_restoration_practices?: string[];
  business_model?: string;
  subtype?: string;
  organisation_revenue_this_year?: number;
  shapefiles?: {
    uuid?: string;
    shapefileable_type?: string;
    shapefileable_id?: number;
    geojson?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  tags?: string[];
};

export type PutV2AdminOrganisationsRejectVariables = {
  body: RequestBodies.V2AdminOrganisationApproveBody;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminOrganisationsReject = (
  variables: PutV2AdminOrganisationsRejectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2AdminOrganisationsRejectResponse,
    PutV2AdminOrganisationsRejectError,
    RequestBodies.V2AdminOrganisationApproveBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/organisations/reject", method: "put", ...variables, signal });

export const usePutV2AdminOrganisationsReject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2AdminOrganisationsRejectResponse,
      PutV2AdminOrganisationsRejectError,
      PutV2AdminOrganisationsRejectVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2AdminOrganisationsRejectResponse,
    PutV2AdminOrganisationsRejectError,
    PutV2AdminOrganisationsRejectVariables
  >(
    (variables: PutV2AdminOrganisationsRejectVariables) =>
      fetchPutV2AdminOrganisationsReject({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminOrganisationsExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminOrganisationsExportVariables = ApiContext["fetcherOptions"];

export const fetchGetV2AdminOrganisationsExport = (
  variables: GetV2AdminOrganisationsExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetV2AdminOrganisationsExportError, undefined, {}, {}, {}>({
    url: "/v2/admin/organisations/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminOrganisationsExport = <TData = undefined>(
  variables: GetV2AdminOrganisationsExportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetV2AdminOrganisationsExportError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetV2AdminOrganisationsExportError, TData>(
    queryKeyFn({ path: "/v2/admin/organisations/export", operationId: "getV2AdminOrganisationsExport", variables }),
    ({ signal }) => fetchGetV2AdminOrganisationsExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2OrganisationsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2OrganisationsVariables = {
  body?: RequestBodies.V2PostOrganisationsBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2Organisations = (variables: PostV2OrganisationsVariables, signal?: AbortSignal) =>
  apiFetch<undefined, PostV2OrganisationsError, RequestBodies.V2PostOrganisationsBody, {}, {}, {}>({
    url: "/v2/organisations",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2Organisations = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PostV2OrganisationsError, PostV2OrganisationsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PostV2OrganisationsError, PostV2OrganisationsVariables>(
    (variables: PostV2OrganisationsVariables) => fetchPostV2Organisations({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2OrganisationsUUIDPathParams = {
  uuid: string;
};

export type GetV2OrganisationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2OrganisationsUUIDResponse = {
  uuid?: string;
  type?: string;
  private?: boolean;
  name?: string;
  phone?: string;
  currency?: string;
  states?: string[];
  loan_status_types?: string[];
  land_systems?: string[];
  fund_utilisation?: string[];
  detailed_intervention_types?: string[];
  account_number_1?: string;
  account_number_2?: string;
  approach_of_marginalized_communities?: string;
  community_engagement_numbers_marginalized?: string;
  founding_date?: string;
  description?: string;
  leadership_team?: string;
  countries?: string[];
  languages?: string[];
  project_pitches?: {
    id?: string;
    uuid?: string;
    status?: string;
    readable_status?: string;
    organisation_id?: string;
    funding_programmes?: {
      id?: number;
      uuid?: string;
      name?: string;
      description?: string;
      read_more_url?: string;
      organisation_types?: string[];
      location?: string;
      status?: string;
    };
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_name?: string;
    how_discovered?: string;
    project_objectives?: string;
    project_country?: string[];
    project_county_district?: string;
    restoration_intervention_types?: string[];
    land_systems?: string[];
    tree_restoration_practices?: string[];
    total_hectares?: number;
    project_budget?: number;
    total_trees?: number;
    capacity_building_needs?: string[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    restoration_photos?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    proof_of_land_tenure_mou?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    detailed_project_budget?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    expected_active_restoration_start_date?: string;
    expected_active_restoration_end_date?: string;
    description_of_project_timeline?: string;
    proj_partner_info?: string;
    land_tenure_proj_area?: string[];
    landholder_comm_engage?: string;
    proj_success_risks?: string;
    monitor_eval_plan?: string;
    proj_boundary?: string;
    sustainable_dev_goals?: string[];
    proj_area_description?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_sites?: number;
    environmental_goals?: string;
    main_degradation_causes?: string;
    seedlings_source?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_nurseries?: number;
    curr_land_degradation?: string;
    proj_impact_socieconom?: string;
    proj_impact_foodsec?: string;
    proj_impact_watersec?: string;
    proj_impact_jobtypes?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    num_jobs_created?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_men?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_18to35?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_older35?: number;
    proj_beneficiaries?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_small?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_large?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_youth?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_classes?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_tribes?: number;
    monitoring_evaluation_plan?: string;
    main_causes_of_degradation?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  web_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  linkedin_url?: string;
  twitter_url?: string;
  hq_street_1?: string;
  hq_street_2?: string;
  hq_city?: string;
  hq_state?: string;
  hq_zipcode?: string;
  hq_country?: string;
  fin_start_month?: number;
  /**
   * @format float
   */
  fin_budget_3year?: number;
  /**
   * @format float
   */
  fin_budget_2year?: number;
  /**
   * @format float
   */
  fin_budget_1year?: number;
  /**
   * @format float
   */
  fin_budget_current_year?: number;
  /**
   * @format float
   */
  ha_restored_total?: number;
  /**
   * @format float
   */
  ha_restored_3year?: number;
  relevant_experience_years?: number;
  trees_grown_total?: number;
  trees_grown_3year?: number;
  tree_care_approach?: string;
  ft_permanent_employees?: number;
  pt_permanent_employees?: number;
  temp_employees?: number;
  female_employees?: number;
  male_employees?: number;
  young_employees?: number;
  additional_funding_details?: string;
  community_experience?: string;
  total_engaged_community_members_3yr?: number;
  percent_engaged_women_3yr?: number;
  percent_engaged_men_3yr?: number;
  percent_engaged_under_35_3yr?: number;
  percent_engaged_over_35_3yr?: number;
  percent_engaged_smallholder_3yr?: number;
  total_trees_grown?: number;
  avg_tree_survival_rate?: number;
  tree_maintenance_aftercare_approach?: string;
  restored_areas_description?: string;
  monitoring_evaluation_experience?: string;
  funding_history?: string;
  engagement_farmers?: string[];
  engagement_women?: string[];
  engagement_youth?: string[];
  engagement_non_youth?: string[];
  tree_restoration_practices?: string[];
  business_model?: string;
  subtype?: string;
  organisation_revenue_this_year?: number;
  shapefiles?: {
    uuid?: string;
    shapefileable_type?: string;
    shapefileable_id?: number;
    geojson?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  bank_statements?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  previous_annual_reports?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  logo?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  reference?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  additional?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_2year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_last_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_this_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_next_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  legal_registration?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
};

export type GetV2OrganisationsUUIDVariables = {
  pathParams: GetV2OrganisationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2OrganisationsUUID = (variables: GetV2OrganisationsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2OrganisationsUUIDResponse,
    GetV2OrganisationsUUIDError,
    undefined,
    {},
    {},
    GetV2OrganisationsUUIDPathParams
  >({ url: "/v2/organisations/{uuid}", method: "get", ...variables, signal });

export const useGetV2OrganisationsUUID = <TData = GetV2OrganisationsUUIDResponse>(
  variables: GetV2OrganisationsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2OrganisationsUUIDResponse, GetV2OrganisationsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2OrganisationsUUIDResponse, GetV2OrganisationsUUIDError, TData>(
    queryKeyFn({ path: "/v2/organisations/{UUID}", operationId: "getV2OrganisationsUUID", variables }),
    ({ signal }) => fetchGetV2OrganisationsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2OrganisationsUUIDPathParams = {
  uuid: string;
};

export type PutV2OrganisationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2OrganisationsUUIDVariables = {
  body?: RequestBodies.V2PostOrganisationsBody;
  pathParams: PutV2OrganisationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2OrganisationsUUID = (variables: PutV2OrganisationsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    undefined,
    PutV2OrganisationsUUIDError,
    RequestBodies.V2PostOrganisationsBody,
    {},
    {},
    PutV2OrganisationsUUIDPathParams
  >({ url: "/v2/organisations/{uuid}", method: "put", ...variables, signal });

export const usePutV2OrganisationsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PutV2OrganisationsUUIDError, PutV2OrganisationsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2OrganisationsUUIDError, PutV2OrganisationsUUIDVariables>(
    (variables: PutV2OrganisationsUUIDVariables) => fetchPutV2OrganisationsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2OrganisationsListingQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
};

export type GetV2OrganisationsListingError = Fetcher.ErrorWrapper<undefined>;

export type GetV2OrganisationsListingResponse = {
  data?: {
    uuid?: string;
    name?: string;
    input_type?: string;
    model_key?: string;
    option_list_key?: string;
    options?: string[];
  }[];
};

export type GetV2OrganisationsListingVariables = {
  queryParams?: GetV2OrganisationsListingQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2OrganisationsListing = (variables: GetV2OrganisationsListingVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2OrganisationsListingResponse,
    GetV2OrganisationsListingError,
    undefined,
    {},
    GetV2OrganisationsListingQueryParams,
    {}
  >({ url: "/v2/organisations/listing", method: "get", ...variables, signal });

export const useGetV2OrganisationsListing = <TData = GetV2OrganisationsListingResponse>(
  variables: GetV2OrganisationsListingVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2OrganisationsListingResponse, GetV2OrganisationsListingError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2OrganisationsListingResponse, GetV2OrganisationsListingError, TData>(
    queryKeyFn({ path: "/v2/organisations/listing", operationId: "getV2OrganisationsListing", variables }),
    ({ signal }) => fetchGetV2OrganisationsListing({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2OrganisationsJoinExistingError = Fetcher.ErrorWrapper<undefined>;

export type PostV2OrganisationsJoinExistingResponse = {
  uuid?: string;
  type?: string;
  private?: boolean;
  name?: string;
  phone?: string;
  currency?: string;
  states?: string[];
  loan_status_types?: string[];
  land_systems?: string[];
  fund_utilisation?: string[];
  detailed_intervention_types?: string[];
  account_number_1?: string;
  account_number_2?: string;
  approach_of_marginalized_communities?: string;
  community_engagement_numbers_marginalized?: string;
  founding_date?: string;
  description?: string;
  leadership_team?: string;
  countries?: string[];
  languages?: string[];
  project_pitches?: {
    id?: string;
    uuid?: string;
    status?: string;
    readable_status?: string;
    organisation_id?: string;
    funding_programmes?: {
      id?: number;
      uuid?: string;
      name?: string;
      description?: string;
      read_more_url?: string;
      organisation_types?: string[];
      location?: string;
      status?: string;
    };
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_name?: string;
    how_discovered?: string;
    project_objectives?: string;
    project_country?: string[];
    project_county_district?: string;
    restoration_intervention_types?: string[];
    land_systems?: string[];
    tree_restoration_practices?: string[];
    total_hectares?: number;
    project_budget?: number;
    total_trees?: number;
    capacity_building_needs?: string[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    restoration_photos?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    proof_of_land_tenure_mou?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    detailed_project_budget?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    expected_active_restoration_start_date?: string;
    expected_active_restoration_end_date?: string;
    description_of_project_timeline?: string;
    proj_partner_info?: string;
    land_tenure_proj_area?: string[];
    landholder_comm_engage?: string;
    proj_success_risks?: string;
    monitor_eval_plan?: string;
    proj_boundary?: string;
    sustainable_dev_goals?: string[];
    proj_area_description?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_sites?: number;
    environmental_goals?: string;
    main_degradation_causes?: string;
    seedlings_source?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_nurseries?: number;
    curr_land_degradation?: string;
    proj_impact_socieconom?: string;
    proj_impact_foodsec?: string;
    proj_impact_watersec?: string;
    proj_impact_jobtypes?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    num_jobs_created?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_men?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_18to35?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_older35?: number;
    proj_beneficiaries?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_small?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_large?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_youth?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_classes?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_tribes?: number;
    monitoring_evaluation_plan?: string;
    main_causes_of_degradation?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  web_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  linkedin_url?: string;
  twitter_url?: string;
  hq_street_1?: string;
  hq_street_2?: string;
  hq_city?: string;
  hq_state?: string;
  hq_zipcode?: string;
  hq_country?: string;
  fin_start_month?: number;
  /**
   * @format float
   */
  fin_budget_3year?: number;
  /**
   * @format float
   */
  fin_budget_2year?: number;
  /**
   * @format float
   */
  fin_budget_1year?: number;
  /**
   * @format float
   */
  fin_budget_current_year?: number;
  /**
   * @format float
   */
  ha_restored_total?: number;
  /**
   * @format float
   */
  ha_restored_3year?: number;
  relevant_experience_years?: number;
  trees_grown_total?: number;
  trees_grown_3year?: number;
  tree_care_approach?: string;
  ft_permanent_employees?: number;
  pt_permanent_employees?: number;
  temp_employees?: number;
  female_employees?: number;
  male_employees?: number;
  young_employees?: number;
  additional_funding_details?: string;
  community_experience?: string;
  total_engaged_community_members_3yr?: number;
  percent_engaged_women_3yr?: number;
  percent_engaged_men_3yr?: number;
  percent_engaged_under_35_3yr?: number;
  percent_engaged_over_35_3yr?: number;
  percent_engaged_smallholder_3yr?: number;
  total_trees_grown?: number;
  avg_tree_survival_rate?: number;
  tree_maintenance_aftercare_approach?: string;
  restored_areas_description?: string;
  monitoring_evaluation_experience?: string;
  funding_history?: string;
  engagement_farmers?: string[];
  engagement_women?: string[];
  engagement_youth?: string[];
  engagement_non_youth?: string[];
  tree_restoration_practices?: string[];
  business_model?: string;
  subtype?: string;
  organisation_revenue_this_year?: number;
  shapefiles?: {
    uuid?: string;
    shapefileable_type?: string;
    shapefileable_id?: number;
    geojson?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  bank_statements?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  previous_annual_reports?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  logo?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  reference?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  additional?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_2year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_last_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_this_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_next_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  legal_registration?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
};

export type PostV2OrganisationsJoinExistingRequestBody = {
  organisation_uuid: string;
};

export type PostV2OrganisationsJoinExistingVariables = {
  body: PostV2OrganisationsJoinExistingRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2OrganisationsJoinExisting = (
  variables: PostV2OrganisationsJoinExistingVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2OrganisationsJoinExistingResponse,
    PostV2OrganisationsJoinExistingError,
    PostV2OrganisationsJoinExistingRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/organisations/join-existing", method: "post", ...variables, signal });

export const usePostV2OrganisationsJoinExisting = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2OrganisationsJoinExistingResponse,
      PostV2OrganisationsJoinExistingError,
      PostV2OrganisationsJoinExistingVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2OrganisationsJoinExistingResponse,
    PostV2OrganisationsJoinExistingError,
    PostV2OrganisationsJoinExistingVariables
  >(
    (variables: PostV2OrganisationsJoinExistingVariables) =>
      fetchPostV2OrganisationsJoinExisting({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2OrganisationsUserRequestsUUIDPathParams = {
  uuid: string;
};

export type GetV2OrganisationsUserRequestsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2OrganisationsUserRequestsUUIDResponse = {
  id?: number;
  uuid?: string;
  role?: string;
  job_role?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  phone_number?: string;
  whatsapp_phone?: string;
  organisation?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  };
  /**
   * @format date-time
   */
  last_logged_in_at?: string;
  /**
   * @format date-time
   */
  email_address_verified_at?: string;
  verified?: boolean;
  /**
   * @format date-time
   */
  date_added?: string;
  banners?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
  /**
   * @format date-time
   */
  created_at?: string;
}[];

export type GetV2OrganisationsUserRequestsUUIDVariables = {
  pathParams: GetV2OrganisationsUserRequestsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2OrganisationsUserRequestsUUID = (
  variables: GetV2OrganisationsUserRequestsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2OrganisationsUserRequestsUUIDResponse,
    GetV2OrganisationsUserRequestsUUIDError,
    undefined,
    {},
    {},
    GetV2OrganisationsUserRequestsUUIDPathParams
  >({ url: "/v2/organisations/user-requests/{uuid}", method: "get", ...variables, signal });

export const useGetV2OrganisationsUserRequestsUUID = <TData = GetV2OrganisationsUserRequestsUUIDResponse>(
  variables: GetV2OrganisationsUserRequestsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2OrganisationsUserRequestsUUIDResponse,
      GetV2OrganisationsUserRequestsUUIDError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetV2OrganisationsUserRequestsUUIDResponse,
    GetV2OrganisationsUserRequestsUUIDError,
    TData
  >(
    queryKeyFn({
      path: "/v2/organisations/user-requests/{UUID}",
      operationId: "getV2OrganisationsUserRequestsUUID",
      variables
    }),
    ({ signal }) => fetchGetV2OrganisationsUserRequestsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2OrganisationsApprovedUsersUUIDPathParams = {
  uuid: string;
};

export type GetV2OrganisationsApprovedUsersUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2OrganisationsApprovedUsersUUIDResponse = {
  id?: number;
  uuid?: string;
  role?: string;
  job_role?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  phone_number?: string;
  whatsapp_phone?: string;
  organisation?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  };
  /**
   * @format date-time
   */
  last_logged_in_at?: string;
  /**
   * @format date-time
   */
  email_address_verified_at?: string;
  verified?: boolean;
  /**
   * @format date-time
   */
  date_added?: string;
  banners?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
  /**
   * @format date-time
   */
  created_at?: string;
}[];

export type GetV2OrganisationsApprovedUsersUUIDVariables = {
  pathParams: GetV2OrganisationsApprovedUsersUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2OrganisationsApprovedUsersUUID = (
  variables: GetV2OrganisationsApprovedUsersUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2OrganisationsApprovedUsersUUIDResponse,
    GetV2OrganisationsApprovedUsersUUIDError,
    undefined,
    {},
    {},
    GetV2OrganisationsApprovedUsersUUIDPathParams
  >({ url: "/v2/organisations/approved-users/{uuid}", method: "get", ...variables, signal });

export const useGetV2OrganisationsApprovedUsersUUID = <TData = GetV2OrganisationsApprovedUsersUUIDResponse>(
  variables: GetV2OrganisationsApprovedUsersUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2OrganisationsApprovedUsersUUIDResponse,
      GetV2OrganisationsApprovedUsersUUIDError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetV2OrganisationsApprovedUsersUUIDResponse,
    GetV2OrganisationsApprovedUsersUUIDError,
    TData
  >(
    queryKeyFn({
      path: "/v2/organisations/approved-users/{UUID}",
      operationId: "getV2OrganisationsApprovedUsersUUID",
      variables
    }),
    ({ signal }) => fetchGetV2OrganisationsApprovedUsersUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2OrganisationsApproveUserError = Fetcher.ErrorWrapper<undefined>;

export type PutV2OrganisationsApproveUserVariables = {
  body: RequestBodies.V2PostOrganisationsApproveUserBody;
} & ApiContext["fetcherOptions"];

export const fetchPutV2OrganisationsApproveUser = (
  variables: PutV2OrganisationsApproveUserVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PutV2OrganisationsApproveUserError, RequestBodies.V2PostOrganisationsApproveUserBody, {}, {}, {}>(
    { url: "/v2/organisations/approve-user", method: "put", ...variables, signal }
  );

export const usePutV2OrganisationsApproveUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PutV2OrganisationsApproveUserError,
      PutV2OrganisationsApproveUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2OrganisationsApproveUserError, PutV2OrganisationsApproveUserVariables>(
    (variables: PutV2OrganisationsApproveUserVariables) =>
      fetchPutV2OrganisationsApproveUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2OrganisationsRejectUserError = Fetcher.ErrorWrapper<undefined>;

export type PutV2OrganisationsRejectUserVariables = {
  body: RequestBodies.V2PostOrganisationsApproveUserBody;
} & ApiContext["fetcherOptions"];

export const fetchPutV2OrganisationsRejectUser = (
  variables: PutV2OrganisationsRejectUserVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PutV2OrganisationsRejectUserError, RequestBodies.V2PostOrganisationsApproveUserBody, {}, {}, {}>({
    url: "/v2/organisations/reject-user",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2OrganisationsRejectUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PutV2OrganisationsRejectUserError, PutV2OrganisationsRejectUserVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2OrganisationsRejectUserError, PutV2OrganisationsRejectUserVariables>(
    (variables: PutV2OrganisationsRejectUserVariables) =>
      fetchPutV2OrganisationsRejectUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2OrganisationsSubmitUUIDPathParams = {
  uuid: string;
};

export type PutV2OrganisationsSubmitUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2OrganisationsSubmitUUIDVariables = {
  pathParams: PutV2OrganisationsSubmitUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2OrganisationsSubmitUUID = (
  variables: PutV2OrganisationsSubmitUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PutV2OrganisationsSubmitUUIDError, undefined, {}, {}, PutV2OrganisationsSubmitUUIDPathParams>({
    url: "/v2/organisations/submit/{uuid}",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2OrganisationsSubmitUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PutV2OrganisationsSubmitUUIDError, PutV2OrganisationsSubmitUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2OrganisationsSubmitUUIDError, PutV2OrganisationsSubmitUUIDVariables>(
    (variables: PutV2OrganisationsSubmitUUIDVariables) =>
      fetchPutV2OrganisationsSubmitUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2OrganisationsRetractMyDraftError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2OrganisationsRetractMyDraftVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2OrganisationsRetractMyDraft = (
  variables: DeleteV2OrganisationsRetractMyDraftVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteV2OrganisationsRetractMyDraftError, undefined, {}, {}, {}>({
    url: "/v2/organisations/retract-my-draft",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2OrganisationsRetractMyDraft = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2OrganisationsRetractMyDraftError,
      DeleteV2OrganisationsRetractMyDraftVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2OrganisationsRetractMyDraftError,
    DeleteV2OrganisationsRetractMyDraftVariables
  >(
    (variables: DeleteV2OrganisationsRetractMyDraftVariables) =>
      fetchDeleteV2OrganisationsRetractMyDraft({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminUsersQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[verified]=true
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminUsersError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminUsersResponse = {
  data?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    first_name?: string;
    last_name?: string;
    email_address?: string;
    job_role?: string;
    facebook?: string;
    instagram?: string;
    linkedin?: string;
    twitter?: string;
    whatsapp_phone?: string;
    date_added?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2AdminUsersVariables = {
  queryParams?: GetV2AdminUsersQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Currently available sort is last_logged_in_at, created_at, first_name, last_name, email_address, organisation_name
 */
export const fetchGetV2AdminUsers = (variables: GetV2AdminUsersVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminUsersResponse, GetV2AdminUsersError, undefined, {}, GetV2AdminUsersQueryParams, {}>({
    url: "/v2/admin/users",
    method: "get",
    ...variables,
    signal
  });

/**
 * Currently available sort is last_logged_in_at, created_at, first_name, last_name, email_address, organisation_name
 */
export const useGetV2AdminUsers = <TData = GetV2AdminUsersResponse>(
  variables: GetV2AdminUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminUsersResponse, GetV2AdminUsersError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminUsersResponse, GetV2AdminUsersError, TData>(
    queryKeyFn({ path: "/v2/admin/users", operationId: "getV2AdminUsers", variables }),
    ({ signal }) => fetchGetV2AdminUsers({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminUsersUsersOrganisationListUUIDPathParams = {
  uuid: string;
};

export type GetV2AdminUsersUsersOrganisationListUUIDQueryParams = {
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminUsersUsersOrganisationListUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminUsersUsersOrganisationListUUIDResponse = {
  data?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    first_name?: string;
    last_name?: string;
    email_address?: string;
    job_role?: string;
    facebook?: string;
    instagram?: string;
    linkedin?: string;
    twitter?: string;
    whatsapp_phone?: string;
    date_added?: string;
  }[];
};

export type GetV2AdminUsersUsersOrganisationListUUIDVariables = {
  pathParams: GetV2AdminUsersUsersOrganisationListUUIDPathParams;
  queryParams?: GetV2AdminUsersUsersOrganisationListUUIDQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminUsersUsersOrganisationListUUID = (
  variables: GetV2AdminUsersUsersOrganisationListUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2AdminUsersUsersOrganisationListUUIDResponse,
    GetV2AdminUsersUsersOrganisationListUUIDError,
    undefined,
    {},
    GetV2AdminUsersUsersOrganisationListUUIDQueryParams,
    GetV2AdminUsersUsersOrganisationListUUIDPathParams
  >({ url: "/v2/admin/users/users-organisation-list/{uuid}", method: "get", ...variables, signal });

export const useGetV2AdminUsersUsersOrganisationListUUID = <TData = GetV2AdminUsersUsersOrganisationListUUIDResponse>(
  variables: GetV2AdminUsersUsersOrganisationListUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2AdminUsersUsersOrganisationListUUIDResponse,
      GetV2AdminUsersUsersOrganisationListUUIDError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetV2AdminUsersUsersOrganisationListUUIDResponse,
    GetV2AdminUsersUsersOrganisationListUUIDError,
    TData
  >(
    queryKeyFn({
      path: "/v2/admin/users/users-organisation-list/{UUID}",
      operationId: "getV2AdminUsersUsersOrganisationListUUID",
      variables
    }),
    ({ signal }) => fetchGetV2AdminUsersUsersOrganisationListUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminUsersUUIDPathParams = {
  uuid: string;
};

export type GetV2AdminUsersUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminUsersUUIDResponse = {
  uuid?: string;
  status?: string;
  readable_status?: string;
  type?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  job_role?: string;
  facebook?: string;
  instagram?: string;
  linkedin?: string;
  twitter?: string;
  whatsapp_phone?: string;
  date_added?: string;
};

export type GetV2AdminUsersUUIDVariables = {
  pathParams: GetV2AdminUsersUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminUsersUUID = (variables: GetV2AdminUsersUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminUsersUUIDResponse, GetV2AdminUsersUUIDError, undefined, {}, {}, GetV2AdminUsersUUIDPathParams>({
    url: "/v2/admin/users/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminUsersUUID = <TData = GetV2AdminUsersUUIDResponse>(
  variables: GetV2AdminUsersUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminUsersUUIDResponse, GetV2AdminUsersUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminUsersUUIDResponse, GetV2AdminUsersUUIDError, TData>(
    queryKeyFn({ path: "/v2/admin/users/{UUID}", operationId: "getV2AdminUsersUUID", variables }),
    ({ signal }) => fetchGetV2AdminUsersUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2AdminUsersUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminUsersUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminUsersUUIDResponse = {
  uuid?: string;
  status?: string;
  readable_status?: string;
  type?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  job_role?: string;
  facebook?: string;
  instagram?: string;
  linkedin?: string;
  twitter?: string;
  whatsapp_phone?: string;
  date_added?: string;
};

export type PutV2AdminUsersUUIDRequestBody = {
  type?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  password?: string;
  role?: string;
  job_role?: string;
  facebook?: string;
  instagram?: string;
  linkedin?: string;
  twitter?: string;
  whatsapp_phone?: string;
  organisation?: string;
  monitoring_organisations?: {
    uuid?: string;
    status?: string;
    users_status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  }[];
};

export type PutV2AdminUsersUUIDVariables = {
  body?: PutV2AdminUsersUUIDRequestBody;
  pathParams: PutV2AdminUsersUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminUsersUUID = (variables: PutV2AdminUsersUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PutV2AdminUsersUUIDResponse,
    PutV2AdminUsersUUIDError,
    PutV2AdminUsersUUIDRequestBody,
    {},
    {},
    PutV2AdminUsersUUIDPathParams
  >({ url: "/v2/admin/users/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminUsersUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<PutV2AdminUsersUUIDResponse, PutV2AdminUsersUUIDError, PutV2AdminUsersUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PutV2AdminUsersUUIDResponse, PutV2AdminUsersUUIDError, PutV2AdminUsersUUIDVariables>(
    (variables: PutV2AdminUsersUUIDVariables) => fetchPutV2AdminUsersUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminUsersUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminUsersUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminUsersUUIDVariables = {
  pathParams: DeleteV2AdminUsersUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminUsersUUID = (variables: DeleteV2AdminUsersUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2AdminUsersUUIDError, undefined, {}, {}, DeleteV2AdminUsersUUIDPathParams>({
    url: "/v2/admin/users/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminUsersUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2AdminUsersUUIDError, DeleteV2AdminUsersUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2AdminUsersUUIDError, DeleteV2AdminUsersUUIDVariables>(
    (variables: DeleteV2AdminUsersUUIDVariables) => fetchDeleteV2AdminUsersUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminUsersMultiQueryParams = {
  ids?: string;
};

export type GetV2AdminUsersMultiError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminUsersMultiResponse = {
  uuid?: string;
  status?: string;
  readable_status?: string;
  type?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  job_role?: string;
  facebook?: string;
  instagram?: string;
  linkedin?: string;
  twitter?: string;
  whatsapp_phone?: string;
  date_added?: string;
};

export type GetV2AdminUsersMultiVariables = {
  queryParams?: GetV2AdminUsersMultiQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminUsersMulti = (variables: GetV2AdminUsersMultiVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminUsersMultiResponse, GetV2AdminUsersMultiError, undefined, {}, GetV2AdminUsersMultiQueryParams, {}>(
    { url: "/v2/admin/users/multi", method: "get", ...variables, signal }
  );

export const useGetV2AdminUsersMulti = <TData = GetV2AdminUsersMultiResponse>(
  variables: GetV2AdminUsersMultiVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminUsersMultiResponse, GetV2AdminUsersMultiError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminUsersMultiResponse, GetV2AdminUsersMultiError, TData>(
    queryKeyFn({ path: "/v2/admin/users/multi", operationId: "getV2AdminUsersMulti", variables }),
    ({ signal }) => fetchGetV2AdminUsersMulti({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminUsersExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminUsersExportVariables = ApiContext["fetcherOptions"];

export const fetchGetV2AdminUsersExport = (variables: GetV2AdminUsersExportVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetV2AdminUsersExportError, undefined, {}, {}, {}>({
    url: "/v2/admin/users/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminUsersExport = <TData = undefined>(
  variables: GetV2AdminUsersExportVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetV2AdminUsersExportError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetV2AdminUsersExportError, TData>(
    queryKeyFn({ path: "/v2/admin/users/export", operationId: "getV2AdminUsersExport", variables }),
    ({ signal }) => fetchGetV2AdminUsersExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2AdminUsersResetPasswordUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminUsersResetPasswordUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminUsersResetPasswordUUIDVariables = {
  pathParams: PutV2AdminUsersResetPasswordUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminUsersResetPasswordUUID = (
  variables: PutV2AdminUsersResetPasswordUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    PutV2AdminUsersResetPasswordUUIDError,
    undefined,
    {},
    {},
    PutV2AdminUsersResetPasswordUUIDPathParams
  >({ url: "/v2/admin/users/reset-password/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminUsersResetPasswordUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PutV2AdminUsersResetPasswordUUIDError,
      PutV2AdminUsersResetPasswordUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    PutV2AdminUsersResetPasswordUUIDError,
    PutV2AdminUsersResetPasswordUUIDVariables
  >(
    (variables: PutV2AdminUsersResetPasswordUUIDVariables) =>
      fetchPutV2AdminUsersResetPasswordUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AdminUsersVerifyUUIDPathParams = {
  uuid: string;
};

export type PatchV2AdminUsersVerifyUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminUsersVerifyUUIDVariables = {
  pathParams: PatchV2AdminUsersVerifyUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AdminUsersVerifyUUID = (
  variables: PatchV2AdminUsersVerifyUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PatchV2AdminUsersVerifyUUIDError, undefined, {}, {}, PatchV2AdminUsersVerifyUUIDPathParams>({
    url: "/v2/admin/users/verify/{uuid}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2AdminUsersVerifyUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PatchV2AdminUsersVerifyUUIDError, PatchV2AdminUsersVerifyUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PatchV2AdminUsersVerifyUUIDError, PatchV2AdminUsersVerifyUUIDVariables>(
    (variables: PatchV2AdminUsersVerifyUUIDVariables) =>
      fetchPatchV2AdminUsersVerifyUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2MODELUUIDFilesPathParams = {
  /**
   * Currently only projects, sites, nurseries, project-reports, nursery-reports, site-reports, project-monitorings and site-monitorings are set up
   */
  model: string;
  uuid: string;
};

export type GetV2MODELUUIDFilesQueryParams = {
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * dependent on model available options are projects, project-reports, sites, site-reports, nurseries, nursery-reports
   */
  model_name?: string;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2MODELUUIDFilesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2MODELUUIDFilesResponse = {
  data?: {
    uuid?: string;
    file_url?: string;
    thumb_url?: string;
    file_name?: string;
    created_date?: string;
    model_name?: string;
    is_public?: boolean;
    is_cover?: boolean;
    location?: {
      lat?: number;
      lng?: number;
    };
    mime_type?: string;
    file_size?: number;
    collection_name?: string;
    description?: string;
    photographer?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2MODELUUIDFilesVariables = {
  pathParams: GetV2MODELUUIDFilesPathParams;
  queryParams?: GetV2MODELUUIDFilesQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Filters : file_type
 */
export const fetchGetV2MODELUUIDFiles = (variables: GetV2MODELUUIDFilesVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2MODELUUIDFilesResponse,
    GetV2MODELUUIDFilesError,
    undefined,
    {},
    GetV2MODELUUIDFilesQueryParams,
    GetV2MODELUUIDFilesPathParams
  >({ url: "/v2/{model}/{uuid}/files", method: "get", ...variables, signal });

/**
 * Available Filters : file_type
 */
export const useGetV2MODELUUIDFiles = <TData = GetV2MODELUUIDFilesResponse>(
  variables: GetV2MODELUUIDFilesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2MODELUUIDFilesResponse, GetV2MODELUUIDFilesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2MODELUUIDFilesResponse, GetV2MODELUUIDFilesError, TData>(
    queryKeyFn({ path: "/v2/{MODEL}/{UUID}/files", operationId: "getV2MODELUUIDFiles", variables }),
    ({ signal }) => fetchGetV2MODELUUIDFiles({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2MODELUUIDImageLocationsPathParams = {
  /**
   * Currently only projects, sites, nurseries, project-reports, nursery-reports and site-reports are set up
   */
  model: string;
  uuid: string;
};

export type GetV2MODELUUIDImageLocationsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2MODELUUIDImageLocationsResponse = {
  data?: {
    uuid?: string;
    thumb_url?: string;
    location?: {
      lat?: number;
      lng?: number;
    };
  }[];
};

export type GetV2MODELUUIDImageLocationsVariables = {
  pathParams: GetV2MODELUUIDImageLocationsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2MODELUUIDImageLocations = (
  variables: GetV2MODELUUIDImageLocationsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2MODELUUIDImageLocationsResponse,
    GetV2MODELUUIDImageLocationsError,
    undefined,
    {},
    {},
    GetV2MODELUUIDImageLocationsPathParams
  >({ url: "/v2/{model}/{uuid}/image/locations", method: "get", ...variables, signal });

export const useGetV2MODELUUIDImageLocations = <TData = GetV2MODELUUIDImageLocationsResponse>(
  variables: GetV2MODELUUIDImageLocationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2MODELUUIDImageLocationsResponse, GetV2MODELUUIDImageLocationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2MODELUUIDImageLocationsResponse, GetV2MODELUUIDImageLocationsError, TData>(
    queryKeyFn({ path: "/v2/{MODEL}/{UUID}/image/locations", operationId: "getV2MODELUUIDImageLocations", variables }),
    ({ signal }) => fetchGetV2MODELUUIDImageLocations({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2FileUploadMODELCOLLECTIONUUIDPathParams = {
  /**
   * Currently only organisation, funding-programme, project-pitch, project, site, nursery, project-report, site-report, nursery-report, project-monitoring and site-monitoring are set up
   */
  model: string;
  collection: string;
  uuid: string;
};

export type PostV2FileUploadMODELCOLLECTIONUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FileUploadMODELCOLLECTIONUUIDResponse = {
  uuid?: string;
  url?: string;
  thumb_url?: string;
  collection_name?: string;
  title?: string;
  file_name?: string;
  mime_type?: string;
  size?: number;
  lat?: number;
  lng?: number;
  is_public?: boolean;
  created_at?: string;
};

export type PostV2FileUploadMODELCOLLECTIONUUIDRequestBody = {
  title?: string;
  /**
   * @format binary
   */
  upload_file?: Blob;
  lat?: number;
  lng?: number;
  /**
   * @default true
   */
  is_public?: boolean;
};

export type PostV2FileUploadMODELCOLLECTIONUUIDVariables = {
  body?: PostV2FileUploadMODELCOLLECTIONUUIDRequestBody;
  pathParams: PostV2FileUploadMODELCOLLECTIONUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FileUploadMODELCOLLECTIONUUID = (
  variables: PostV2FileUploadMODELCOLLECTIONUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2FileUploadMODELCOLLECTIONUUIDResponse,
    PostV2FileUploadMODELCOLLECTIONUUIDError,
    PostV2FileUploadMODELCOLLECTIONUUIDRequestBody,
    {},
    {},
    PostV2FileUploadMODELCOLLECTIONUUIDPathParams
  >({ url: "/v2/file/upload/{model}/{collection}/{uuid}", method: "post", ...variables, signal });

export const usePostV2FileUploadMODELCOLLECTIONUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2FileUploadMODELCOLLECTIONUUIDResponse,
      PostV2FileUploadMODELCOLLECTIONUUIDError,
      PostV2FileUploadMODELCOLLECTIONUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2FileUploadMODELCOLLECTIONUUIDResponse,
    PostV2FileUploadMODELCOLLECTIONUUIDError,
    PostV2FileUploadMODELCOLLECTIONUUIDVariables
  >(
    (variables: PostV2FileUploadMODELCOLLECTIONUUIDVariables) =>
      fetchPostV2FileUploadMODELCOLLECTIONUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2FileUploadSitePhotosUUIDBulkUrlPathParams = {
  uuid: string;
};

export type PostV2FileUploadSitePhotosUUIDBulkUrlError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FileUploadSitePhotosUUIDBulkUrlResponse = {
  uuid?: string;
  url?: string;
  thumb_url?: string;
  collection_name?: string;
  title?: string;
  file_name?: string;
  mime_type?: string;
  size?: number;
  lat?: number;
  lng?: number;
  is_public?: boolean;
  created_at?: string;
}[];

export type PostV2FileUploadSitePhotosUUIDBulkUrlRequestBody = {
  download_url?: string;
  /**
   * @default Name of image
   */
  title?: string;
  /**
   * @default null
   */
  lat?: number;
  /**
   * @default null
   */
  lng?: number;
  /**
   * @default true
   */
  is_public?: boolean;
}[];

export type PostV2FileUploadSitePhotosUUIDBulkUrlVariables = {
  body?: PostV2FileUploadSitePhotosUUIDBulkUrlRequestBody;
  pathParams: PostV2FileUploadSitePhotosUUIDBulkUrlPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FileUploadSitePhotosUUIDBulkUrl = (
  variables: PostV2FileUploadSitePhotosUUIDBulkUrlVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2FileUploadSitePhotosUUIDBulkUrlResponse,
    PostV2FileUploadSitePhotosUUIDBulkUrlError,
    PostV2FileUploadSitePhotosUUIDBulkUrlRequestBody,
    {},
    {},
    PostV2FileUploadSitePhotosUUIDBulkUrlPathParams
  >({ url: "/v2/file/upload/site/photos/{uuid}/bulk_url", method: "post", ...variables, signal });

export const usePostV2FileUploadSitePhotosUUIDBulkUrl = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2FileUploadSitePhotosUUIDBulkUrlResponse,
      PostV2FileUploadSitePhotosUUIDBulkUrlError,
      PostV2FileUploadSitePhotosUUIDBulkUrlVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2FileUploadSitePhotosUUIDBulkUrlResponse,
    PostV2FileUploadSitePhotosUUIDBulkUrlError,
    PostV2FileUploadSitePhotosUUIDBulkUrlVariables
  >(
    (variables: PostV2FileUploadSitePhotosUUIDBulkUrlVariables) =>
      fetchPostV2FileUploadSitePhotosUUIDBulkUrl({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2MediaQueryParams = {
  ["uuids[]"]: string[];
};

export type DeleteV2MediaError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2MediaVariables = {
  queryParams: DeleteV2MediaQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2Media = (variables: DeleteV2MediaVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2MediaError, undefined, {}, DeleteV2MediaQueryParams, {}>({
    url: "/v2/media",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2Media = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, DeleteV2MediaError, DeleteV2MediaVariables>, "mutationFn">
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2MediaError, DeleteV2MediaVariables>(
    (variables: DeleteV2MediaVariables) => fetchDeleteV2Media({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2FilesUUIDPathParams = {
  uuid: string;
};

export type PutV2FilesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2FilesUUIDResponse = {
  uuid?: string;
  url?: string;
  thumb_url?: string;
  collection_name?: string;
  title?: string;
  file_name?: string;
  mime_type?: string;
  size?: number;
  lat?: number;
  lng?: number;
  is_public?: boolean;
  created_at?: string;
};

export type PutV2FilesUUIDRequestBody = {
  title: string;
  is_public?: boolean;
};

export type PutV2FilesUUIDVariables = {
  body: PutV2FilesUUIDRequestBody;
  pathParams: PutV2FilesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2FilesUUID = (variables: PutV2FilesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<PutV2FilesUUIDResponse, PutV2FilesUUIDError, PutV2FilesUUIDRequestBody, {}, {}, PutV2FilesUUIDPathParams>({
    url: "/v2/files/{uuid}",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2FilesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<PutV2FilesUUIDResponse, PutV2FilesUUIDError, PutV2FilesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PutV2FilesUUIDResponse, PutV2FilesUUIDError, PutV2FilesUUIDVariables>(
    (variables: PutV2FilesUUIDVariables) => fetchPutV2FilesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2FilesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2FilesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2FilesUUIDVariables = {
  pathParams: DeleteV2FilesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2FilesUUID = (variables: DeleteV2FilesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2FilesUUIDError, undefined, {}, {}, DeleteV2FilesUUIDPathParams>({
    url: "/v2/files/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2FilesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2FilesUUIDError, DeleteV2FilesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2FilesUUIDError, DeleteV2FilesUUIDVariables>(
    (variables: DeleteV2FilesUUIDVariables) => fetchDeleteV2FilesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2FundingTypeError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FundingTypeResponse = {
  uuid?: string;
  organisation_id?: string;
  amount?: number;
  year?: number;
  type?: string;
};

export type PostV2FundingTypeRequestBody = {
  organisation_id?: string;
  amount?: number;
  year?: number;
  type?: string;
};

export type PostV2FundingTypeVariables = {
  body?: PostV2FundingTypeRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FundingType = (variables: PostV2FundingTypeVariables, signal?: AbortSignal) =>
  apiFetch<PostV2FundingTypeResponse, PostV2FundingTypeError, PostV2FundingTypeRequestBody, {}, {}, {}>({
    url: "/v2/funding-type",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2FundingType = (
  options?: Omit<
    reactQuery.UseMutationOptions<PostV2FundingTypeResponse, PostV2FundingTypeError, PostV2FundingTypeVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2FundingTypeResponse, PostV2FundingTypeError, PostV2FundingTypeVariables>(
    (variables: PostV2FundingTypeVariables) => fetchPostV2FundingType({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2FundingTypeUUIDPathParams = {
  uuid: string;
};

export type PatchV2FundingTypeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2FundingTypeUUIDResponse = {
  uuid?: string;
  organisation_id?: string;
  amount?: number;
  year?: number;
  type?: string;
};

export type PatchV2FundingTypeUUIDRequestBody = {
  amount?: number;
  year?: number;
  type?: string;
};

export type PatchV2FundingTypeUUIDVariables = {
  body?: PatchV2FundingTypeUUIDRequestBody;
  pathParams: PatchV2FundingTypeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2FundingTypeUUID = (variables: PatchV2FundingTypeUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PatchV2FundingTypeUUIDResponse,
    PatchV2FundingTypeUUIDError,
    PatchV2FundingTypeUUIDRequestBody,
    {},
    {},
    PatchV2FundingTypeUUIDPathParams
  >({ url: "/v2/funding-type/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2FundingTypeUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2FundingTypeUUIDResponse,
      PatchV2FundingTypeUUIDError,
      PatchV2FundingTypeUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2FundingTypeUUIDResponse,
    PatchV2FundingTypeUUIDError,
    PatchV2FundingTypeUUIDVariables
  >(
    (variables: PatchV2FundingTypeUUIDVariables) => fetchPatchV2FundingTypeUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2FundingTypeUUIDPathParams = {
  uuid: string;
};

export type DeleteV2FundingTypeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2FundingTypeUUIDResponse = {
  uuid?: string;
  organisation_id?: string;
  amount?: number;
  year?: number;
  type?: string;
};

export type DeleteV2FundingTypeUUIDVariables = {
  pathParams: DeleteV2FundingTypeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2FundingTypeUUID = (variables: DeleteV2FundingTypeUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    DeleteV2FundingTypeUUIDResponse,
    DeleteV2FundingTypeUUIDError,
    undefined,
    {},
    {},
    DeleteV2FundingTypeUUIDPathParams
  >({ url: "/v2/funding-type/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2FundingTypeUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2FundingTypeUUIDResponse,
      DeleteV2FundingTypeUUIDError,
      DeleteV2FundingTypeUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2FundingTypeUUIDResponse,
    DeleteV2FundingTypeUUIDError,
    DeleteV2FundingTypeUUIDVariables
  >(
    (variables: DeleteV2FundingTypeUUIDVariables) => fetchDeleteV2FundingTypeUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2CoreTeamLeaderError = Fetcher.ErrorWrapper<undefined>;

export type PostV2CoreTeamLeaderResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  first_name?: string;
  last_name?: string;
  role?: string;
  age?: number;
};

export type PostV2CoreTeamLeaderRequestBody = {
  organisation_id?: string;
  position?: string;
  gender?: string;
  first_name?: string;
  last_name?: string;
  role?: string;
  age?: number;
};

export type PostV2CoreTeamLeaderVariables = {
  body?: PostV2CoreTeamLeaderRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2CoreTeamLeader = (variables: PostV2CoreTeamLeaderVariables, signal?: AbortSignal) =>
  apiFetch<PostV2CoreTeamLeaderResponse, PostV2CoreTeamLeaderError, PostV2CoreTeamLeaderRequestBody, {}, {}, {}>({
    url: "/v2/core-team-leader",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2CoreTeamLeader = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2CoreTeamLeaderResponse,
      PostV2CoreTeamLeaderError,
      PostV2CoreTeamLeaderVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2CoreTeamLeaderResponse, PostV2CoreTeamLeaderError, PostV2CoreTeamLeaderVariables>(
    (variables: PostV2CoreTeamLeaderVariables) => fetchPostV2CoreTeamLeader({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2CoreTeamLeaderUUIDPathParams = {
  uuid: string;
};

export type PatchV2CoreTeamLeaderUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2CoreTeamLeaderUUIDResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  first_name?: string;
  last_name?: string;
  role?: string;
  age?: number;
};

export type PatchV2CoreTeamLeaderUUIDRequestBody = {
  position?: string;
  gender?: string;
  first_name?: string;
  last_name?: string;
  role?: string;
  age?: number;
};

export type PatchV2CoreTeamLeaderUUIDVariables = {
  body?: PatchV2CoreTeamLeaderUUIDRequestBody;
  pathParams: PatchV2CoreTeamLeaderUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2CoreTeamLeaderUUID = (variables: PatchV2CoreTeamLeaderUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PatchV2CoreTeamLeaderUUIDResponse,
    PatchV2CoreTeamLeaderUUIDError,
    PatchV2CoreTeamLeaderUUIDRequestBody,
    {},
    {},
    PatchV2CoreTeamLeaderUUIDPathParams
  >({ url: "/v2/core-team-leader/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2CoreTeamLeaderUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2CoreTeamLeaderUUIDResponse,
      PatchV2CoreTeamLeaderUUIDError,
      PatchV2CoreTeamLeaderUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2CoreTeamLeaderUUIDResponse,
    PatchV2CoreTeamLeaderUUIDError,
    PatchV2CoreTeamLeaderUUIDVariables
  >(
    (variables: PatchV2CoreTeamLeaderUUIDVariables) =>
      fetchPatchV2CoreTeamLeaderUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2CoreTeamLeaderUUIDPathParams = {
  uuid: string;
};

export type DeleteV2CoreTeamLeaderUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2CoreTeamLeaderUUIDResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  first_name?: string;
  last_name?: string;
  role?: string;
  age?: number;
};

export type DeleteV2CoreTeamLeaderUUIDVariables = {
  pathParams: DeleteV2CoreTeamLeaderUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2CoreTeamLeaderUUID = (variables: DeleteV2CoreTeamLeaderUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    DeleteV2CoreTeamLeaderUUIDResponse,
    DeleteV2CoreTeamLeaderUUIDError,
    undefined,
    {},
    {},
    DeleteV2CoreTeamLeaderUUIDPathParams
  >({ url: "/v2/core-team-leader/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2CoreTeamLeaderUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2CoreTeamLeaderUUIDResponse,
      DeleteV2CoreTeamLeaderUUIDError,
      DeleteV2CoreTeamLeaderUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2CoreTeamLeaderUUIDResponse,
    DeleteV2CoreTeamLeaderUUIDError,
    DeleteV2CoreTeamLeaderUUIDVariables
  >(
    (variables: DeleteV2CoreTeamLeaderUUIDVariables) =>
      fetchDeleteV2CoreTeamLeaderUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2LeadershipTeamError = Fetcher.ErrorWrapper<undefined>;

export type PostV2LeadershipTeamResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  age?: number;
};

export type PostV2LeadershipTeamRequestBody = {
  organisation_id?: string;
  position?: string;
  gender?: string;
  age?: number;
};

export type PostV2LeadershipTeamVariables = {
  body?: PostV2LeadershipTeamRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2LeadershipTeam = (variables: PostV2LeadershipTeamVariables, signal?: AbortSignal) =>
  apiFetch<PostV2LeadershipTeamResponse, PostV2LeadershipTeamError, PostV2LeadershipTeamRequestBody, {}, {}, {}>({
    url: "/v2/leadership-team",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2LeadershipTeam = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2LeadershipTeamResponse,
      PostV2LeadershipTeamError,
      PostV2LeadershipTeamVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2LeadershipTeamResponse, PostV2LeadershipTeamError, PostV2LeadershipTeamVariables>(
    (variables: PostV2LeadershipTeamVariables) => fetchPostV2LeadershipTeam({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2LeadershipTeamUUIDPathParams = {
  uuid: string;
};

export type PatchV2LeadershipTeamUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2LeadershipTeamUUIDResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  age?: number;
};

export type PatchV2LeadershipTeamUUIDRequestBody = {
  position?: string;
  gender?: string;
  age?: number;
};

export type PatchV2LeadershipTeamUUIDVariables = {
  body?: PatchV2LeadershipTeamUUIDRequestBody;
  pathParams: PatchV2LeadershipTeamUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2LeadershipTeamUUID = (variables: PatchV2LeadershipTeamUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PatchV2LeadershipTeamUUIDResponse,
    PatchV2LeadershipTeamUUIDError,
    PatchV2LeadershipTeamUUIDRequestBody,
    {},
    {},
    PatchV2LeadershipTeamUUIDPathParams
  >({ url: "/v2/leadership-team/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2LeadershipTeamUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2LeadershipTeamUUIDResponse,
      PatchV2LeadershipTeamUUIDError,
      PatchV2LeadershipTeamUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2LeadershipTeamUUIDResponse,
    PatchV2LeadershipTeamUUIDError,
    PatchV2LeadershipTeamUUIDVariables
  >(
    (variables: PatchV2LeadershipTeamUUIDVariables) =>
      fetchPatchV2LeadershipTeamUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2LeadershipTeamUUIDPathParams = {
  uuid: string;
};

export type DeleteV2LeadershipTeamUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2LeadershipTeamUUIDResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  age?: number;
};

export type DeleteV2LeadershipTeamUUIDVariables = {
  pathParams: DeleteV2LeadershipTeamUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2LeadershipTeamUUID = (variables: DeleteV2LeadershipTeamUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    DeleteV2LeadershipTeamUUIDResponse,
    DeleteV2LeadershipTeamUUIDError,
    undefined,
    {},
    {},
    DeleteV2LeadershipTeamUUIDPathParams
  >({ url: "/v2/leadership-team/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2LeadershipTeamUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2LeadershipTeamUUIDResponse,
      DeleteV2LeadershipTeamUUIDError,
      DeleteV2LeadershipTeamUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2LeadershipTeamUUIDResponse,
    DeleteV2LeadershipTeamUUIDError,
    DeleteV2LeadershipTeamUUIDVariables
  >(
    (variables: DeleteV2LeadershipTeamUUIDVariables) =>
      fetchDeleteV2LeadershipTeamUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2OwnershipStakeError = Fetcher.ErrorWrapper<undefined>;

export type PostV2OwnershipStakeResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  age?: number;
  percent_ownership?: number;
};

export type PostV2OwnershipStakeRequestBody = {
  organisation_id?: string;
  position?: string;
  gender?: string;
  age?: number;
  percent_ownership?: number;
};

export type PostV2OwnershipStakeVariables = {
  body?: PostV2OwnershipStakeRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2OwnershipStake = (variables: PostV2OwnershipStakeVariables, signal?: AbortSignal) =>
  apiFetch<PostV2OwnershipStakeResponse, PostV2OwnershipStakeError, PostV2OwnershipStakeRequestBody, {}, {}, {}>({
    url: "/v2/ownership-stake",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2OwnershipStake = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2OwnershipStakeResponse,
      PostV2OwnershipStakeError,
      PostV2OwnershipStakeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2OwnershipStakeResponse, PostV2OwnershipStakeError, PostV2OwnershipStakeVariables>(
    (variables: PostV2OwnershipStakeVariables) => fetchPostV2OwnershipStake({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2OwnershipStakeUUIDPathParams = {
  uuid: string;
};

export type PatchV2OwnershipStakeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2OwnershipStakeUUIDResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  age?: number;
  percent_ownership?: number;
};

export type PatchV2OwnershipStakeUUIDRequestBody = {
  position?: string;
  gender?: string;
  age?: number;
  percent_ownership?: number;
};

export type PatchV2OwnershipStakeUUIDVariables = {
  body?: PatchV2OwnershipStakeUUIDRequestBody;
  pathParams: PatchV2OwnershipStakeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2OwnershipStakeUUID = (variables: PatchV2OwnershipStakeUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PatchV2OwnershipStakeUUIDResponse,
    PatchV2OwnershipStakeUUIDError,
    PatchV2OwnershipStakeUUIDRequestBody,
    {},
    {},
    PatchV2OwnershipStakeUUIDPathParams
  >({ url: "/v2/ownership-stake/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2OwnershipStakeUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2OwnershipStakeUUIDResponse,
      PatchV2OwnershipStakeUUIDError,
      PatchV2OwnershipStakeUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2OwnershipStakeUUIDResponse,
    PatchV2OwnershipStakeUUIDError,
    PatchV2OwnershipStakeUUIDVariables
  >(
    (variables: PatchV2OwnershipStakeUUIDVariables) =>
      fetchPatchV2OwnershipStakeUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2OwnershipStakeUUIDPathParams = {
  uuid: string;
};

export type DeleteV2OwnershipStakeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2OwnershipStakeUUIDResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  age?: number;
  percent_ownership?: number;
};

export type DeleteV2OwnershipStakeUUIDVariables = {
  pathParams: DeleteV2OwnershipStakeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2OwnershipStakeUUID = (variables: DeleteV2OwnershipStakeUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    DeleteV2OwnershipStakeUUIDResponse,
    DeleteV2OwnershipStakeUUIDError,
    undefined,
    {},
    {},
    DeleteV2OwnershipStakeUUIDPathParams
  >({ url: "/v2/ownership-stake/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2OwnershipStakeUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2OwnershipStakeUUIDResponse,
      DeleteV2OwnershipStakeUUIDError,
      DeleteV2OwnershipStakeUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2OwnershipStakeUUIDResponse,
    DeleteV2OwnershipStakeUUIDError,
    DeleteV2OwnershipStakeUUIDVariables
  >(
    (variables: DeleteV2OwnershipStakeUUIDVariables) =>
      fetchDeleteV2OwnershipStakeUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminSitesQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminSitesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminSitesResponse = {
  data?: {
    id?: number;
    site_id?: number;
    terrafund_site_id?: number;
    programme_id?: number;
    terrafund_programme_id?: number;
    control_site?: boolean;
    name?: string;
    country?: string;
    project_country?: string;
    continent?: string;
    description?: string;
    planting_pattern?: string;
    stratification_for_heterogeneity?: string;
    history?: string;
    workdays_paid?: number;
    workdays_volunteer?: number;
    total_workdays?: number;
    /**
     * @format date
     */
    establishment_date?: string;
    /**
     * @format date
     */
    start_date?: string;
    /**
     * @format date
     */
    end_date?: string;
    technical_narrative?: string;
    public_narrative?: string;
    aim_survival_rate?: number;
    aim_year_five_crown_cover?: number;
    aim_direct_seeding_survival_rate?: number;
    aim_natural_regeneration_trees_per_hectare?: number;
    aim_natural_regeneration_hectares?: number;
    aim_soil_condition?: string;
    aim_number_of_mature_trees?: number;
    hectares_to_restore?: number;
    landscape_community_contribution?: string;
    disturbances?: string;
    boundary_geojson?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminSitesVariables = {
  queryParams?: GetV2AdminSitesQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminSites = (variables: GetV2AdminSitesVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminSitesResponse, GetV2AdminSitesError, undefined, {}, GetV2AdminSitesQueryParams, {}>({
    url: "/v2/admin/sites",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminSites = <TData = GetV2AdminSitesResponse>(
  variables: GetV2AdminSitesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminSitesResponse, GetV2AdminSitesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminSitesResponse, GetV2AdminSitesError, TData>(
    queryKeyFn({ path: "/v2/admin/sites", operationId: "getV2AdminSites", variables }),
    ({ signal }) => fetchGetV2AdminSites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminProjectPitchesQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminProjectPitchesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminProjectPitchesResponse = {
  data?: {
    id?: string;
    uuid?: string;
    status?: string;
    readable_status?: string;
    organisation_id?: string;
    funding_programmes?: {
      id?: number;
      uuid?: string;
      name?: string;
      description?: string;
      read_more_url?: string;
      organisation_types?: string[];
      location?: string;
      status?: string;
    };
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_name?: string;
    how_discovered?: string;
    project_objectives?: string;
    project_country?: string[];
    project_county_district?: string;
    restoration_intervention_types?: string[];
    land_systems?: string[];
    tree_restoration_practices?: string[];
    total_hectares?: number;
    project_budget?: number;
    total_trees?: number;
    capacity_building_needs?: string[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    restoration_photos?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    proof_of_land_tenure_mou?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    detailed_project_budget?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    expected_active_restoration_start_date?: string;
    expected_active_restoration_end_date?: string;
    description_of_project_timeline?: string;
    proj_partner_info?: string;
    land_tenure_proj_area?: string[];
    landholder_comm_engage?: string;
    proj_success_risks?: string;
    monitor_eval_plan?: string;
    proj_boundary?: string;
    sustainable_dev_goals?: string[];
    proj_area_description?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_sites?: number;
    environmental_goals?: string;
    main_degradation_causes?: string;
    seedlings_source?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_nurseries?: number;
    curr_land_degradation?: string;
    proj_impact_socieconom?: string;
    proj_impact_foodsec?: string;
    proj_impact_watersec?: string;
    proj_impact_jobtypes?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    num_jobs_created?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_men?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_18to35?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_older35?: number;
    proj_beneficiaries?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_small?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_large?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_youth?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_classes?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_tribes?: number;
    monitoring_evaluation_plan?: string;
    main_causes_of_degradation?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminProjectPitchesVariables = {
  queryParams?: GetV2AdminProjectPitchesQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminProjectPitches = (variables: GetV2AdminProjectPitchesVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminProjectPitchesResponse,
    GetV2AdminProjectPitchesError,
    undefined,
    {},
    GetV2AdminProjectPitchesQueryParams,
    {}
  >({ url: "/v2/admin/project-pitches", method: "get", ...variables, signal });

export const useGetV2AdminProjectPitches = <TData = GetV2AdminProjectPitchesResponse>(
  variables: GetV2AdminProjectPitchesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminProjectPitchesResponse, GetV2AdminProjectPitchesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminProjectPitchesResponse, GetV2AdminProjectPitchesError, TData>(
    queryKeyFn({ path: "/v2/admin/project-pitches", operationId: "getV2AdminProjectPitches", variables }),
    ({ signal }) => fetchGetV2AdminProjectPitches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminProjectsQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminProjectsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminProjectsResponse = {
  data?: {
    id?: string;
    uuid?: string;
    status?: string;
    name?: string;
    organisation?: {
      uuid?: string;
      type?: string;
      private?: boolean;
      name?: string;
      phone?: string;
      currency?: string;
      states?: string[];
      loan_status_types?: string[];
      land_systems?: string[];
      fund_utilisation?: string[];
      detailed_intervention_types?: string[];
      account_number_1?: string;
      account_number_2?: string;
      approach_of_marginalized_communities?: string;
      community_engagement_numbers_marginalized?: string;
      founding_date?: string;
      description?: string;
      leadership_team?: string;
      countries?: string[];
      languages?: string[];
      project_pitches?: {
        id?: string;
        uuid?: string;
        status?: string;
        readable_status?: string;
        organisation_id?: string;
        funding_programmes?: {
          id?: number;
          uuid?: string;
          name?: string;
          description?: string;
          read_more_url?: string;
          organisation_types?: string[];
          location?: string;
          status?: string;
        };
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_name?: string;
        how_discovered?: string;
        project_objectives?: string;
        project_country?: string[];
        project_county_district?: string;
        restoration_intervention_types?: string[];
        land_systems?: string[];
        tree_restoration_practices?: string[];
        total_hectares?: number;
        project_budget?: number;
        total_trees?: number;
        capacity_building_needs?: string[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        restoration_photos?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        proof_of_land_tenure_mou?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        detailed_project_budget?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        expected_active_restoration_start_date?: string;
        expected_active_restoration_end_date?: string;
        description_of_project_timeline?: string;
        proj_partner_info?: string;
        land_tenure_proj_area?: string[];
        landholder_comm_engage?: string;
        proj_success_risks?: string;
        monitor_eval_plan?: string;
        proj_boundary?: string;
        sustainable_dev_goals?: string[];
        proj_area_description?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_sites?: number;
        environmental_goals?: string;
        main_degradation_causes?: string;
        seedlings_source?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_nurseries?: number;
        curr_land_degradation?: string;
        proj_impact_socieconom?: string;
        proj_impact_foodsec?: string;
        proj_impact_watersec?: string;
        proj_impact_jobtypes?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        num_jobs_created?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_men?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_18to35?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_older35?: number;
        proj_beneficiaries?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_small?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_large?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_youth?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_classes?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_tribes?: number;
        monitoring_evaluation_plan?: string;
        main_causes_of_degradation?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      web_url?: string;
      facebook_url?: string;
      instagram_url?: string;
      linkedin_url?: string;
      twitter_url?: string;
      hq_street_1?: string;
      hq_street_2?: string;
      hq_city?: string;
      hq_state?: string;
      hq_zipcode?: string;
      hq_country?: string;
      fin_start_month?: number;
      /**
       * @format float
       */
      fin_budget_3year?: number;
      /**
       * @format float
       */
      fin_budget_2year?: number;
      /**
       * @format float
       */
      fin_budget_1year?: number;
      /**
       * @format float
       */
      fin_budget_current_year?: number;
      /**
       * @format float
       */
      ha_restored_total?: number;
      /**
       * @format float
       */
      ha_restored_3year?: number;
      relevant_experience_years?: number;
      trees_grown_total?: number;
      trees_grown_3year?: number;
      tree_care_approach?: string;
      ft_permanent_employees?: number;
      pt_permanent_employees?: number;
      temp_employees?: number;
      female_employees?: number;
      male_employees?: number;
      young_employees?: number;
      additional_funding_details?: string;
      community_experience?: string;
      total_engaged_community_members_3yr?: number;
      percent_engaged_women_3yr?: number;
      percent_engaged_men_3yr?: number;
      percent_engaged_under_35_3yr?: number;
      percent_engaged_over_35_3yr?: number;
      percent_engaged_smallholder_3yr?: number;
      total_trees_grown?: number;
      avg_tree_survival_rate?: number;
      tree_maintenance_aftercare_approach?: string;
      restored_areas_description?: string;
      monitoring_evaluation_experience?: string;
      funding_history?: string;
      engagement_farmers?: string[];
      engagement_women?: string[];
      engagement_youth?: string[];
      engagement_non_youth?: string[];
      tree_restoration_practices?: string[];
      business_model?: string;
      subtype?: string;
      organisation_revenue_this_year?: number;
      shapefiles?: {
        uuid?: string;
        shapefileable_type?: string;
        shapefileable_id?: number;
        geojson?: string;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      bank_statements?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      previous_annual_reports?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      logo?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      reference?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_2year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_last_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_this_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_next_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      legal_registration?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
    };
    planting_start_date?: string;
    framework_key?: string;
    framework_uuid?: string;
    has_monitoring_data?: boolean;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminProjectsVariables = {
  queryParams?: GetV2AdminProjectsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminProjects = (variables: GetV2AdminProjectsVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminProjectsResponse, GetV2AdminProjectsError, undefined, {}, GetV2AdminProjectsQueryParams, {}>({
    url: "/v2/admin/projects",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminProjects = <TData = GetV2AdminProjectsResponse>(
  variables: GetV2AdminProjectsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminProjectsResponse, GetV2AdminProjectsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminProjectsResponse, GetV2AdminProjectsError, TData>(
    queryKeyFn({ path: "/v2/admin/projects", operationId: "getV2AdminProjects", variables }),
    ({ signal }) => fetchGetV2AdminProjects({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ProjectsUUIDPathParams = {
  uuid: string;
};

export type GetV2ProjectsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDResponse = {
  data?: {
    id?: string;
    uuid?: string;
    status?: string;
    organisation?: {
      uuid?: string;
      type?: string;
      private?: boolean;
      name?: string;
      phone?: string;
      currency?: string;
      states?: string[];
      loan_status_types?: string[];
      land_systems?: string[];
      fund_utilisation?: string[];
      detailed_intervention_types?: string[];
      account_number_1?: string;
      account_number_2?: string;
      approach_of_marginalized_communities?: string;
      community_engagement_numbers_marginalized?: string;
      founding_date?: string;
      description?: string;
      leadership_team?: string;
      countries?: string[];
      languages?: string[];
      project_pitches?: {
        id?: string;
        uuid?: string;
        status?: string;
        readable_status?: string;
        organisation_id?: string;
        funding_programmes?: {
          id?: number;
          uuid?: string;
          name?: string;
          description?: string;
          read_more_url?: string;
          organisation_types?: string[];
          location?: string;
          status?: string;
        };
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_name?: string;
        how_discovered?: string;
        project_objectives?: string;
        project_country?: string[];
        project_county_district?: string;
        restoration_intervention_types?: string[];
        land_systems?: string[];
        tree_restoration_practices?: string[];
        total_hectares?: number;
        project_budget?: number;
        total_trees?: number;
        capacity_building_needs?: string[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        restoration_photos?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        proof_of_land_tenure_mou?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        detailed_project_budget?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        expected_active_restoration_start_date?: string;
        expected_active_restoration_end_date?: string;
        description_of_project_timeline?: string;
        proj_partner_info?: string;
        land_tenure_proj_area?: string[];
        landholder_comm_engage?: string;
        proj_success_risks?: string;
        monitor_eval_plan?: string;
        proj_boundary?: string;
        sustainable_dev_goals?: string[];
        proj_area_description?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_sites?: number;
        environmental_goals?: string;
        main_degradation_causes?: string;
        seedlings_source?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_nurseries?: number;
        curr_land_degradation?: string;
        proj_impact_socieconom?: string;
        proj_impact_foodsec?: string;
        proj_impact_watersec?: string;
        proj_impact_jobtypes?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        num_jobs_created?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_men?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_18to35?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_older35?: number;
        proj_beneficiaries?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_small?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_large?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_youth?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_classes?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_tribes?: number;
        monitoring_evaluation_plan?: string;
        main_causes_of_degradation?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      web_url?: string;
      facebook_url?: string;
      instagram_url?: string;
      linkedin_url?: string;
      twitter_url?: string;
      hq_street_1?: string;
      hq_street_2?: string;
      hq_city?: string;
      hq_state?: string;
      hq_zipcode?: string;
      hq_country?: string;
      fin_start_month?: number;
      /**
       * @format float
       */
      fin_budget_3year?: number;
      /**
       * @format float
       */
      fin_budget_2year?: number;
      /**
       * @format float
       */
      fin_budget_1year?: number;
      /**
       * @format float
       */
      fin_budget_current_year?: number;
      /**
       * @format float
       */
      ha_restored_total?: number;
      /**
       * @format float
       */
      ha_restored_3year?: number;
      relevant_experience_years?: number;
      trees_grown_total?: number;
      trees_grown_3year?: number;
      tree_care_approach?: string;
      ft_permanent_employees?: number;
      pt_permanent_employees?: number;
      temp_employees?: number;
      female_employees?: number;
      male_employees?: number;
      young_employees?: number;
      additional_funding_details?: string;
      community_experience?: string;
      total_engaged_community_members_3yr?: number;
      percent_engaged_women_3yr?: number;
      percent_engaged_men_3yr?: number;
      percent_engaged_under_35_3yr?: number;
      percent_engaged_over_35_3yr?: number;
      percent_engaged_smallholder_3yr?: number;
      total_trees_grown?: number;
      avg_tree_survival_rate?: number;
      tree_maintenance_aftercare_approach?: string;
      restored_areas_description?: string;
      monitoring_evaluation_experience?: string;
      funding_history?: string;
      engagement_farmers?: string[];
      engagement_women?: string[];
      engagement_youth?: string[];
      engagement_non_youth?: string[];
      tree_restoration_practices?: string[];
      business_model?: string;
      subtype?: string;
      organisation_revenue_this_year?: number;
      shapefiles?: {
        uuid?: string;
        shapefileable_type?: string;
        shapefileable_id?: number;
        geojson?: string;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      bank_statements?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      previous_annual_reports?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      logo?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      reference?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_2year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_last_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_this_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_next_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      legal_registration?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
    };
    application?: {
      uuid?: string;
      form_submissions?: {
        id?: string;
        uuid?: string;
        name?: string;
        form?: {
          id?: number;
          uuid?: string;
          type?: string;
          version?: number;
          title?: string;
          subtitle?: string;
          description?: string;
          framework_key?: string;
          duration?: string;
          deadline_at?: string;
          documentation?: string;
          documentation_label?: string;
          submission_message?: string;
          published?: boolean;
          stage_id?: string;
          options_other?: boolean;
          form_sections?: {
            order?: number;
            form_id?: number;
            form_questions?: {
              id?: number;
              uuid?: string;
              form_section_id?: number;
              label?: string;
              validation?: string[];
              parent_id?: string;
              linked_field_key?: string;
              children?: Record<string, any>[];
              multichoice?: boolean;
              order?: number;
              options?: {
                id?: number;
                uuid?: string;
                form_question_id?: number;
                label?: string;
                order?: number;
                created_at?: string;
                updated_at?: string;
                deleted_at?: string;
              }[];
              table_headers?: {
                id?: number;
                uuid?: string;
                form_question_id?: number;
                label?: string;
                order?: number;
                created_at?: string;
                updated_at?: string;
                deleted_at?: string;
              }[];
              additional_text?: string;
              additional_url?: string;
              show_on_parent_condition?: boolean;
              input_type?:
                | "date"
                | "text"
                | "long-text"
                | "select"
                | "checkboxes"
                | "radio"
                | "number"
                | "image"
                | "file"
                | "conditional";
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          /**
           * this is a list of key value pairs eg. slug: name
           */
          tags?: string[];
          updated_by?: number;
          deleted_at?: string;
          created_at?: string;
          updated_at?: string;
        };
        stage?: {
          uuid?: string;
          name?: string;
          status?: string;
          readable_status?: string;
        };
        answers?: string;
        status?: string;
        readable_status?: string;
        audits?: {
          id?: number;
          event?: string;
          user_id?: number;
          user_uuid?: string;
          old_values?: Record<string, any>;
          new_values?: Record<string, any>;
          created_at?: string;
          updated_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg slug: name
         */
        tags?: string[];
        project_pitch_uuid?: string;
        updated_by?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      current_submission?: {
        id?: string;
        uuid?: string;
        name?: string;
        form?: {
          id?: number;
          uuid?: string;
          type?: string;
          version?: number;
          title?: string;
          subtitle?: string;
          description?: string;
          framework_key?: string;
          duration?: string;
          deadline_at?: string;
          documentation?: string;
          documentation_label?: string;
          submission_message?: string;
          published?: boolean;
          stage_id?: string;
          options_other?: boolean;
          form_sections?: {
            order?: number;
            form_id?: number;
            form_questions?: {
              id?: number;
              uuid?: string;
              form_section_id?: number;
              label?: string;
              validation?: string[];
              parent_id?: string;
              linked_field_key?: string;
              children?: Record<string, any>[];
              multichoice?: boolean;
              order?: number;
              options?: {
                id?: number;
                uuid?: string;
                form_question_id?: number;
                label?: string;
                order?: number;
                created_at?: string;
                updated_at?: string;
                deleted_at?: string;
              }[];
              table_headers?: {
                id?: number;
                uuid?: string;
                form_question_id?: number;
                label?: string;
                order?: number;
                created_at?: string;
                updated_at?: string;
                deleted_at?: string;
              }[];
              additional_text?: string;
              additional_url?: string;
              show_on_parent_condition?: boolean;
              input_type?:
                | "date"
                | "text"
                | "long-text"
                | "select"
                | "checkboxes"
                | "radio"
                | "number"
                | "image"
                | "file"
                | "conditional";
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          /**
           * this is a list of key value pairs eg. slug: name
           */
          tags?: string[];
          updated_by?: number;
          deleted_at?: string;
          created_at?: string;
          updated_at?: string;
        };
        stage?: {
          uuid?: string;
          name?: string;
          status?: string;
          readable_status?: string;
        };
        answers?: string;
        status?: string;
        readable_status?: string;
        audits?: {
          id?: number;
          event?: string;
          user_id?: number;
          user_uuid?: string;
          old_values?: Record<string, any>;
          new_values?: Record<string, any>;
          created_at?: string;
          updated_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg slug: name
         */
        tags?: string[];
        project_pitch_uuid?: string;
        updated_by?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      funding_programme?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        location?: string;
        read_more_url?: string;
        framework_key?: string;
        status?: string;
        organisation_types?: string[];
        stages?: {
          id?: number;
          uuid?: string;
          status?: string;
          deadline_at?: string;
          readable_status?: string;
          funding_programme_id?: number;
          name?: string;
          order?: number;
          forms?: {
            id?: number;
            uuid?: string;
            type?: string;
            version?: number;
            title?: string;
            subtitle?: string;
            description?: string;
            framework_key?: string;
            duration?: string;
            deadline_at?: string;
            documentation?: string;
            documentation_label?: string;
            submission_message?: string;
            published?: boolean;
            stage_id?: string;
            options_other?: boolean;
            form_sections?: {
              order?: number;
              form_id?: number;
              form_questions?: {
                id?: number;
                uuid?: string;
                form_section_id?: number;
                label?: string;
                validation?: string[];
                parent_id?: string;
                linked_field_key?: string;
                children?: Record<string, any>[];
                multichoice?: boolean;
                order?: number;
                options?: {
                  id?: number;
                  uuid?: string;
                  form_question_id?: number;
                  label?: string;
                  order?: number;
                  created_at?: string;
                  updated_at?: string;
                  deleted_at?: string;
                }[];
                table_headers?: {
                  id?: number;
                  uuid?: string;
                  form_question_id?: number;
                  label?: string;
                  order?: number;
                  created_at?: string;
                  updated_at?: string;
                  deleted_at?: string;
                }[];
                additional_text?: string;
                additional_url?: string;
                show_on_parent_condition?: boolean;
                input_type?:
                  | "date"
                  | "text"
                  | "long-text"
                  | "select"
                  | "checkboxes"
                  | "radio"
                  | "number"
                  | "image"
                  | "file"
                  | "conditional";
                created_at?: string;
                updated_at?: string;
                deleted_at?: string;
              }[];
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            /**
             * this is a list of key value pairs eg. slug: name
             */
            tags?: string[];
            updated_by?: number;
            deleted_at?: string;
            created_at?: string;
            updated_at?: string;
          };
          deleted_at?: string;
          created_at?: string;
          updated_at?: string;
        }[];
        organisations?: {
          uuid?: string;
          name?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      organisation?: {
        uuid?: string;
        status?: string;
        readable_status?: string;
        type?: string;
        private?: boolean;
        name?: string;
        phone?: string;
        founding_date?: string;
        description?: string;
        countries?: string[];
        languages?: string[];
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_pitches?: {
          id?: string;
          uuid?: string;
          status?: string;
          readable_status?: string;
          organisation_id?: string;
          funding_programmes?: {
            id?: number;
            uuid?: string;
            name?: string;
            description?: string;
            read_more_url?: string;
            organisation_types?: string[];
            location?: string;
            status?: string;
          };
          tree_species?: {
            uuid?: string;
            name?: string;
            amount?: number;
            type?: string;
            collection?: string;
          }[];
          project_name?: string;
          how_discovered?: string;
          project_objectives?: string;
          project_country?: string[];
          project_county_district?: string;
          restoration_intervention_types?: string[];
          land_systems?: string[];
          tree_restoration_practices?: string[];
          total_hectares?: number;
          project_budget?: number;
          total_trees?: number;
          capacity_building_needs?: string[];
          additional?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          restoration_photos?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          cover?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          proof_of_land_tenure_mou?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          detailed_project_budget?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          expected_active_restoration_start_date?: string;
          expected_active_restoration_end_date?: string;
          description_of_project_timeline?: string;
          proj_partner_info?: string;
          land_tenure_proj_area?: string[];
          landholder_comm_engage?: string;
          proj_success_risks?: string;
          monitor_eval_plan?: string;
          proj_boundary?: string;
          sustainable_dev_goals?: string[];
          proj_area_description?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          proposed_num_sites?: number;
          environmental_goals?: string;
          main_degradation_causes?: string;
          seedlings_source?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          proposed_num_nurseries?: number;
          curr_land_degradation?: string;
          proj_impact_socieconom?: string;
          proj_impact_foodsec?: string;
          proj_impact_watersec?: string;
          proj_impact_jobtypes?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          num_jobs_created?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_men?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_women?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_18to35?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_older35?: number;
          proj_beneficiaries?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_women?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_small?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_large?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_youth?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_scheduled_classes?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_scheduled_tribes?: number;
          monitoring_evaluation_plan?: string;
          main_causes_of_degradation?: string;
          deleted_at?: string;
          created_at?: string;
          updated_at?: string;
        }[];
        web_url?: string;
        facebook_url?: string;
        instagram_url?: string;
        linkedin_url?: string;
        twitter_url?: string;
        hq_street_1?: string;
        hq_street_2?: string;
        hq_city?: string;
        hq_state?: string;
        hq_zipcode?: string;
        hq_country?: string;
        fin_start_month?: number;
        /**
         * @format float
         */
        fin_budget_3year?: number;
        /**
         * @format float
         */
        fin_budget_2year?: number;
        /**
         * @format float
         */
        fin_budget_1year?: number;
        /**
         * @format float
         */
        fin_budget_current_year?: number;
        /**
         * @format float
         */
        ha_restored_total?: number;
        /**
         * @format float
         */
        ha_restored_3year?: number;
        relevant_experience_years?: number;
        trees_grown_total?: number;
        trees_grown_3year?: number;
        tree_care_approach?: string;
        ft_permanent_employees?: number;
        pt_permanent_employees?: number;
        temp_employees?: number;
        female_employees?: number;
        male_employees?: number;
        young_employees?: number;
        additional_funding_details?: string;
        community_experience?: string;
        total_engaged_community_members_3yr?: number;
        percent_engaged_women_3yr?: number;
        percent_engaged_men_3yr?: number;
        percent_engaged_under_35_3yr?: number;
        percent_engaged_over_35_3yr?: number;
        percent_engaged_smallholder_3yr?: number;
        total_trees_grown?: number;
        avg_tree_survival_rate?: number;
        tree_maintenance_aftercare_approach?: string;
        restored_areas_description?: string;
        monitoring_evaluation_experience?: string;
        funding_history?: string;
        shapefiles?: {
          uuid?: string;
          shapefileable_type?: string;
          shapefileable_id?: number;
          geojson?: string;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        bank_statements?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        previous_annual_reports?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        logo?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        reference?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_2year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_last_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_this_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_next_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        legal_registration?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        created_at?: string;
        updated_at?: string;
      };
      /**
       * @format date-time
       */
      created_at?: string;
      /**
       * @format date-time
       */
      updated_at?: string;
    };
    planting_start_date?: string;
    framework_key?: string;
    framework_uuid?: string;
    has_monitoring_data?: boolean;
  }[];
};

export type GetV2ProjectsUUIDVariables = {
  pathParams: GetV2ProjectsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectsUUID = (variables: GetV2ProjectsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2ProjectsUUIDResponse, GetV2ProjectsUUIDError, undefined, {}, {}, GetV2ProjectsUUIDPathParams>({
    url: "/v2/projects/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ProjectsUUID = <TData = GetV2ProjectsUUIDResponse>(
  variables: GetV2ProjectsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectsUUIDResponse, GetV2ProjectsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectsUUIDResponse, GetV2ProjectsUUIDError, TData>(
    queryKeyFn({ path: "/v2/projects/{UUID}", operationId: "getV2ProjectsUUID", variables }),
    ({ signal }) => fetchGetV2ProjectsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2ProjectsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2ProjectsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2ProjectsUUIDVariables = {
  pathParams: DeleteV2ProjectsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2ProjectsUUID = (variables: DeleteV2ProjectsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2ProjectsUUIDError, undefined, {}, {}, DeleteV2ProjectsUUIDPathParams>({
    url: "/v2/projects/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2ProjectsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2ProjectsUUIDError, DeleteV2ProjectsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2ProjectsUUIDError, DeleteV2ProjectsUUIDVariables>(
    (variables: DeleteV2ProjectsUUIDVariables) => fetchDeleteV2ProjectsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ProjectsUUIDSitesPathParams = {
  uuid: string;
};

export type GetV2ProjectsUUIDSitesQueryParams = {
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-name
   */
  sort?: string;
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2ProjectsUUIDSitesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDSitesResponse = {
  data?: {
    uuid?: string;
    name?: string;
    framework_key?: string;
    description?: string;
    control_site?: number;
    status?: string;
    readable_status?: string;
    number_of_trees_planted?: number;
    start_date?: string;
    created_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2ProjectsUUIDSitesVariables = {
  pathParams: GetV2ProjectsUUIDSitesPathParams;
  queryParams?: GetV2ProjectsUUIDSitesQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Filters : status  |  Available Searches: name  |  Available Sort Options: name, status, number_of_trees_planted, created_at, updated_at
 */
export const fetchGetV2ProjectsUUIDSites = (variables: GetV2ProjectsUUIDSitesVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2ProjectsUUIDSitesResponse,
    GetV2ProjectsUUIDSitesError,
    undefined,
    {},
    GetV2ProjectsUUIDSitesQueryParams,
    GetV2ProjectsUUIDSitesPathParams
  >({ url: "/v2/projects/{uuid}/sites", method: "get", ...variables, signal });

/**
 * Available Filters : status  |  Available Searches: name  |  Available Sort Options: name, status, number_of_trees_planted, created_at, updated_at
 */
export const useGetV2ProjectsUUIDSites = <TData = GetV2ProjectsUUIDSitesResponse>(
  variables: GetV2ProjectsUUIDSitesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectsUUIDSitesResponse, GetV2ProjectsUUIDSitesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectsUUIDSitesResponse, GetV2ProjectsUUIDSitesError, TData>(
    queryKeyFn({ path: "/v2/projects/{UUID}/sites", operationId: "getV2ProjectsUUIDSites", variables }),
    ({ signal }) => fetchGetV2ProjectsUUIDSites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ProjectsUUIDNurseriesPathParams = {
  uuid: string;
};

export type GetV2ProjectsUUIDNurseriesQueryParams = {
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-name
   */
  sort?: string;
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2ProjectsUUIDNurseriesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDNurseriesResponse = {
  data?: {
    uuid?: string;
    name?: string;
    project?: {
      id?: string;
      uuid?: string;
      status?: string;
      name?: string;
      organisation?: {
        uuid?: string;
        type?: string;
        private?: boolean;
        name?: string;
        phone?: string;
        currency?: string;
        states?: string[];
        loan_status_types?: string[];
        land_systems?: string[];
        fund_utilisation?: string[];
        detailed_intervention_types?: string[];
        account_number_1?: string;
        account_number_2?: string;
        approach_of_marginalized_communities?: string;
        community_engagement_numbers_marginalized?: string;
        founding_date?: string;
        description?: string;
        leadership_team?: string;
        countries?: string[];
        languages?: string[];
        project_pitches?: {
          id?: string;
          uuid?: string;
          status?: string;
          readable_status?: string;
          organisation_id?: string;
          funding_programmes?: {
            id?: number;
            uuid?: string;
            name?: string;
            description?: string;
            read_more_url?: string;
            organisation_types?: string[];
            location?: string;
            status?: string;
          };
          tree_species?: {
            uuid?: string;
            name?: string;
            amount?: number;
            type?: string;
            collection?: string;
          }[];
          project_name?: string;
          how_discovered?: string;
          project_objectives?: string;
          project_country?: string[];
          project_county_district?: string;
          restoration_intervention_types?: string[];
          land_systems?: string[];
          tree_restoration_practices?: string[];
          total_hectares?: number;
          project_budget?: number;
          total_trees?: number;
          capacity_building_needs?: string[];
          additional?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          restoration_photos?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          cover?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          proof_of_land_tenure_mou?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          detailed_project_budget?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          expected_active_restoration_start_date?: string;
          expected_active_restoration_end_date?: string;
          description_of_project_timeline?: string;
          proj_partner_info?: string;
          land_tenure_proj_area?: string[];
          landholder_comm_engage?: string;
          proj_success_risks?: string;
          monitor_eval_plan?: string;
          proj_boundary?: string;
          sustainable_dev_goals?: string[];
          proj_area_description?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          proposed_num_sites?: number;
          environmental_goals?: string;
          main_degradation_causes?: string;
          seedlings_source?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          proposed_num_nurseries?: number;
          curr_land_degradation?: string;
          proj_impact_socieconom?: string;
          proj_impact_foodsec?: string;
          proj_impact_watersec?: string;
          proj_impact_jobtypes?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          num_jobs_created?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_men?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_women?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_18to35?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_older35?: number;
          proj_beneficiaries?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_women?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_small?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_large?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_youth?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_scheduled_classes?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_scheduled_tribes?: number;
          monitoring_evaluation_plan?: string;
          main_causes_of_degradation?: string;
          deleted_at?: string;
          created_at?: string;
          updated_at?: string;
        }[];
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        web_url?: string;
        facebook_url?: string;
        instagram_url?: string;
        linkedin_url?: string;
        twitter_url?: string;
        hq_street_1?: string;
        hq_street_2?: string;
        hq_city?: string;
        hq_state?: string;
        hq_zipcode?: string;
        hq_country?: string;
        fin_start_month?: number;
        /**
         * @format float
         */
        fin_budget_3year?: number;
        /**
         * @format float
         */
        fin_budget_2year?: number;
        /**
         * @format float
         */
        fin_budget_1year?: number;
        /**
         * @format float
         */
        fin_budget_current_year?: number;
        /**
         * @format float
         */
        ha_restored_total?: number;
        /**
         * @format float
         */
        ha_restored_3year?: number;
        relevant_experience_years?: number;
        trees_grown_total?: number;
        trees_grown_3year?: number;
        tree_care_approach?: string;
        ft_permanent_employees?: number;
        pt_permanent_employees?: number;
        temp_employees?: number;
        female_employees?: number;
        male_employees?: number;
        young_employees?: number;
        additional_funding_details?: string;
        community_experience?: string;
        total_engaged_community_members_3yr?: number;
        percent_engaged_women_3yr?: number;
        percent_engaged_men_3yr?: number;
        percent_engaged_under_35_3yr?: number;
        percent_engaged_over_35_3yr?: number;
        percent_engaged_smallholder_3yr?: number;
        total_trees_grown?: number;
        avg_tree_survival_rate?: number;
        tree_maintenance_aftercare_approach?: string;
        restored_areas_description?: string;
        monitoring_evaluation_experience?: string;
        funding_history?: string;
        engagement_farmers?: string[];
        engagement_women?: string[];
        engagement_youth?: string[];
        engagement_non_youth?: string[];
        tree_restoration_practices?: string[];
        business_model?: string;
        subtype?: string;
        organisation_revenue_this_year?: number;
        shapefiles?: {
          uuid?: string;
          shapefileable_type?: string;
          shapefileable_id?: number;
          geojson?: string;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        bank_statements?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        previous_annual_reports?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        logo?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        reference?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_2year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_last_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_this_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_next_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        legal_registration?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg slug: name
         */
        tags?: string[];
      };
      planting_start_date?: string;
      framework_key?: string;
      framework_uuid?: string;
      has_monitoring_data?: boolean;
    };
    establishment_date?: string;
    framework_key?: string;
    framework_uuid?: string;
    status?: string;
    readable_status?: string;
    start_date?: string;
    created_date?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2ProjectsUUIDNurseriesVariables = {
  pathParams: GetV2ProjectsUUIDNurseriesPathParams;
  queryParams?: GetV2ProjectsUUIDNurseriesQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Filters : status  |  Available Searches: name  |  Available Sort Options: name, status, created_at, updated_at
 */
export const fetchGetV2ProjectsUUIDNurseries = (variables: GetV2ProjectsUUIDNurseriesVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2ProjectsUUIDNurseriesResponse,
    GetV2ProjectsUUIDNurseriesError,
    undefined,
    {},
    GetV2ProjectsUUIDNurseriesQueryParams,
    GetV2ProjectsUUIDNurseriesPathParams
  >({ url: "/v2/projects/{uuid}/nurseries", method: "get", ...variables, signal });

/**
 * Available Filters : status  |  Available Searches: name  |  Available Sort Options: name, status, created_at, updated_at
 */
export const useGetV2ProjectsUUIDNurseries = <TData = GetV2ProjectsUUIDNurseriesResponse>(
  variables: GetV2ProjectsUUIDNurseriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectsUUIDNurseriesResponse, GetV2ProjectsUUIDNurseriesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectsUUIDNurseriesResponse, GetV2ProjectsUUIDNurseriesError, TData>(
    queryKeyFn({ path: "/v2/projects/{UUID}/nurseries", operationId: "getV2ProjectsUUIDNurseries", variables }),
    ({ signal }) => fetchGetV2ProjectsUUIDNurseries({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ProjectsUUIDTasksPathParams = {
  uuid: string;
};

export type GetV2ProjectsUUIDTasksQueryParams = {
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2ProjectsUUIDTasksError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDTasksResponse = {
  data?: {
    uuid?: string;
    project?: Record<string, any>;
    period_key?: string;
    status?: string;
    readable_status?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2ProjectsUUIDTasksVariables = {
  pathParams: GetV2ProjectsUUIDTasksPathParams;
  queryParams?: GetV2ProjectsUUIDTasksQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Sort : period_key (year-month) and status
 */
export const fetchGetV2ProjectsUUIDTasks = (variables: GetV2ProjectsUUIDTasksVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2ProjectsUUIDTasksResponse,
    GetV2ProjectsUUIDTasksError,
    undefined,
    {},
    GetV2ProjectsUUIDTasksQueryParams,
    GetV2ProjectsUUIDTasksPathParams
  >({ url: "/v2/projects/{uuid}/tasks", method: "get", ...variables, signal });

/**
 * Available Sort : period_key (year-month) and status
 */
export const useGetV2ProjectsUUIDTasks = <TData = GetV2ProjectsUUIDTasksResponse>(
  variables: GetV2ProjectsUUIDTasksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectsUUIDTasksResponse, GetV2ProjectsUUIDTasksError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectsUUIDTasksResponse, GetV2ProjectsUUIDTasksError, TData>(
    queryKeyFn({ path: "/v2/projects/{UUID}/tasks", operationId: "getV2ProjectsUUIDTasks", variables }),
    ({ signal }) => fetchGetV2ProjectsUUIDTasks({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2OrganisationsUUIDTasksPathParams = {
  uuid: string;
};

export type GetV2OrganisationsUUIDTasksQueryParams = {
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2OrganisationsUUIDTasksError = Fetcher.ErrorWrapper<undefined>;

export type GetV2OrganisationsUUIDTasksResponse = {
  data?: {
    uuid?: string;
    project?: Record<string, any>;
    period_key?: string;
    status?: string;
    readable_status?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2OrganisationsUUIDTasksVariables = {
  pathParams: GetV2OrganisationsUUIDTasksPathParams;
  queryParams?: GetV2OrganisationsUUIDTasksQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Sort : period_key (year-month) and status
 */
export const fetchGetV2OrganisationsUUIDTasks = (
  variables: GetV2OrganisationsUUIDTasksVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2OrganisationsUUIDTasksResponse,
    GetV2OrganisationsUUIDTasksError,
    undefined,
    {},
    GetV2OrganisationsUUIDTasksQueryParams,
    GetV2OrganisationsUUIDTasksPathParams
  >({ url: "/v2/organisations/{uuid}/tasks", method: "get", ...variables, signal });

/**
 * Available Sort : period_key (year-month) and status
 */
export const useGetV2OrganisationsUUIDTasks = <TData = GetV2OrganisationsUUIDTasksResponse>(
  variables: GetV2OrganisationsUUIDTasksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2OrganisationsUUIDTasksResponse, GetV2OrganisationsUUIDTasksError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2OrganisationsUUIDTasksResponse, GetV2OrganisationsUUIDTasksError, TData>(
    queryKeyFn({ path: "/v2/organisations/{UUID}/tasks", operationId: "getV2OrganisationsUUIDTasks", variables }),
    ({ signal }) => fetchGetV2OrganisationsUUIDTasks({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2TasksUUIDPathParams = {
  uuid: string;
};

export type GetV2TasksUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2TasksUUIDResponse = {
  data?: {
    uuid?: string;
    project?: Record<string, any>;
    period_key?: string;
    status?: string;
    readable_status?: string;
  }[];
};

export type GetV2TasksUUIDVariables = {
  pathParams: GetV2TasksUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2TasksUUID = (variables: GetV2TasksUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2TasksUUIDResponse, GetV2TasksUUIDError, undefined, {}, {}, GetV2TasksUUIDPathParams>({
    url: "/v2/tasks/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2TasksUUID = <TData = GetV2TasksUUIDResponse>(
  variables: GetV2TasksUUIDVariables,
  options?: Omit<reactQuery.UseQueryOptions<GetV2TasksUUIDResponse, GetV2TasksUUIDError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2TasksUUIDResponse, GetV2TasksUUIDError, TData>(
    queryKeyFn({ path: "/v2/tasks/{UUID}", operationId: "getV2TasksUUID", variables }),
    ({ signal }) => fetchGetV2TasksUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2TasksUUIDReportsPathParams = {
  uuid: string;
};

export type GetV2TasksUUIDReportsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2TasksUUIDReportsResponse = {
  data?: {
    uuid?: number;
    type?: string;
    status?: string;
    /**
     * @format date-time
     */
    due_at?: string;
    title?: string;
    report_title?: string;
    update_request_status?: string;
    /**
     * @format date-time
     */
    submitted_at?: string;
    parent_name?: string;
  }[];
};

export type GetV2TasksUUIDReportsVariables = {
  pathParams: GetV2TasksUUIDReportsPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Sort : period_key (year-month) and status
 */
export const fetchGetV2TasksUUIDReports = (variables: GetV2TasksUUIDReportsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2TasksUUIDReportsResponse,
    GetV2TasksUUIDReportsError,
    undefined,
    {},
    {},
    GetV2TasksUUIDReportsPathParams
  >({ url: "/v2/tasks/{uuid}/reports", method: "get", ...variables, signal });

/**
 * Available Sort : period_key (year-month) and status
 */
export const useGetV2TasksUUIDReports = <TData = GetV2TasksUUIDReportsResponse>(
  variables: GetV2TasksUUIDReportsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2TasksUUIDReportsResponse, GetV2TasksUUIDReportsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2TasksUUIDReportsResponse, GetV2TasksUUIDReportsError, TData>(
    queryKeyFn({ path: "/v2/tasks/{UUID}/reports", operationId: "getV2TasksUUIDReports", variables }),
    ({ signal }) => fetchGetV2TasksUUIDReports({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2TasksUUIDSubmitPathParams = {
  uuid: string;
};

export type PutV2TasksUUIDSubmitError = Fetcher.ErrorWrapper<undefined>;

export type PutV2TasksUUIDSubmitVariables = {
  pathParams: PutV2TasksUUIDSubmitPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2TasksUUIDSubmit = (variables: PutV2TasksUUIDSubmitVariables, signal?: AbortSignal) =>
  apiFetch<undefined, PutV2TasksUUIDSubmitError, undefined, {}, {}, PutV2TasksUUIDSubmitPathParams>({
    url: "/v2/tasks/{uuid}/submit",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2TasksUUIDSubmit = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PutV2TasksUUIDSubmitError, PutV2TasksUUIDSubmitVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2TasksUUIDSubmitError, PutV2TasksUUIDSubmitVariables>(
    (variables: PutV2TasksUUIDSubmitVariables) => fetchPutV2TasksUUIDSubmit({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ENTITYUUIDPathParams = {
  /**
   * allowed values projects/sites/nurseries/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2ENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ENTITYUUIDResponse = {
  data?: Record<string, any>;
};

export type GetV2ENTITYUUIDVariables = {
  pathParams: GetV2ENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ENTITYUUID = (variables: GetV2ENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2ENTITYUUIDResponse, GetV2ENTITYUUIDError, undefined, {}, {}, GetV2ENTITYUUIDPathParams>({
    url: "/v2/{entity}/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ENTITYUUID = <TData = GetV2ENTITYUUIDResponse>(
  variables: GetV2ENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ENTITYUUIDResponse, GetV2ENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ENTITYUUIDResponse, GetV2ENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/{ENTITY}/{UUID}", operationId: "getV2ENTITYUUID", variables }),
    ({ signal }) => fetchGetV2ENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FormsSitesUUIDPathParams = {
  uuid: string;
};

export type GetV2FormsSitesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsSitesUUIDResponse = {
  data?: {
    uuid?: string;
    name?: string;
    status?: string;
    form?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    answers?: {
      question_id?: number;
      value?: string;
      options?: string[];
    }[];
  }[];
};

export type GetV2FormsSitesUUIDVariables = {
  pathParams: GetV2FormsSitesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsSitesUUID = (variables: GetV2FormsSitesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2FormsSitesUUIDResponse, GetV2FormsSitesUUIDError, undefined, {}, {}, GetV2FormsSitesUUIDPathParams>({
    url: "/v2/forms/sites/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2FormsSitesUUID = <TData = GetV2FormsSitesUUIDResponse>(
  variables: GetV2FormsSitesUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FormsSitesUUIDResponse, GetV2FormsSitesUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsSitesUUIDResponse, GetV2FormsSitesUUIDError, TData>(
    queryKeyFn({ path: "/v2/forms/sites/{UUID}", operationId: "getV2FormsSitesUUID", variables }),
    ({ signal }) => fetchGetV2FormsSitesUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminProjectPitchesExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminProjectPitchesExportVariables = ApiContext["fetcherOptions"];

export const fetchGetV2AdminProjectPitchesExport = (
  variables: GetV2AdminProjectPitchesExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<Record<string, any>, GetV2AdminProjectPitchesExportError, undefined, {}, {}, {}>({
    url: "/v2/admin/project-pitches/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminProjectPitchesExport = <TData = Record<string, any>>(
  variables: GetV2AdminProjectPitchesExportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Record<string, any>, GetV2AdminProjectPitchesExportError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Record<string, any>, GetV2AdminProjectPitchesExportError, TData>(
    queryKeyFn({ path: "/v2/admin/project-pitches/export", operationId: "getV2AdminProjectPitchesExport", variables }),
    ({ signal }) => fetchGetV2AdminProjectPitchesExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ProjectPitchesQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2ProjectPitchesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectPitchesResponse = {
  data?: {
    id?: string;
    uuid?: string;
    status?: string;
    readable_status?: string;
    organisation_id?: string;
    funding_programmes?: {
      id?: number;
      uuid?: string;
      name?: string;
      description?: string;
      read_more_url?: string;
      organisation_types?: string[];
      location?: string;
      status?: string;
    };
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_name?: string;
    how_discovered?: string;
    project_objectives?: string;
    project_country?: string[];
    project_county_district?: string;
    restoration_intervention_types?: string[];
    land_systems?: string[];
    tree_restoration_practices?: string[];
    total_hectares?: number;
    project_budget?: number;
    total_trees?: number;
    capacity_building_needs?: string[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    restoration_photos?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    proof_of_land_tenure_mou?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    detailed_project_budget?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    expected_active_restoration_start_date?: string;
    expected_active_restoration_end_date?: string;
    description_of_project_timeline?: string;
    proj_partner_info?: string;
    land_tenure_proj_area?: string[];
    landholder_comm_engage?: string;
    proj_success_risks?: string;
    monitor_eval_plan?: string;
    proj_boundary?: string;
    sustainable_dev_goals?: string[];
    proj_area_description?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_sites?: number;
    environmental_goals?: string;
    main_degradation_causes?: string;
    seedlings_source?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_nurseries?: number;
    curr_land_degradation?: string;
    proj_impact_socieconom?: string;
    proj_impact_foodsec?: string;
    proj_impact_watersec?: string;
    proj_impact_jobtypes?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    num_jobs_created?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_men?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_18to35?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_older35?: number;
    proj_beneficiaries?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_small?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_large?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_youth?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_classes?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_tribes?: number;
    monitoring_evaluation_plan?: string;
    main_causes_of_degradation?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2ProjectPitchesVariables = {
  queryParams?: GetV2ProjectPitchesQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectPitches = (variables: GetV2ProjectPitchesVariables, signal?: AbortSignal) =>
  apiFetch<GetV2ProjectPitchesResponse, GetV2ProjectPitchesError, undefined, {}, GetV2ProjectPitchesQueryParams, {}>({
    url: "/v2/project-pitches",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ProjectPitches = <TData = GetV2ProjectPitchesResponse>(
  variables: GetV2ProjectPitchesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectPitchesResponse, GetV2ProjectPitchesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectPitchesResponse, GetV2ProjectPitchesError, TData>(
    queryKeyFn({ path: "/v2/project-pitches", operationId: "getV2ProjectPitches", variables }),
    ({ signal }) => fetchGetV2ProjectPitches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2ProjectPitchesError = Fetcher.ErrorWrapper<undefined>;

export type PostV2ProjectPitchesResponse = {
  id?: string;
  uuid?: string;
  status?: string;
  readable_status?: string;
  organisation_id?: string;
  funding_programmes?: {
    id?: number;
    uuid?: string;
    name?: string;
    description?: string;
    read_more_url?: string;
    organisation_types?: string[];
    location?: string;
    status?: string;
  };
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  project_name?: string;
  how_discovered?: string;
  project_objectives?: string;
  project_country?: string[];
  project_county_district?: string;
  restoration_intervention_types?: string[];
  land_systems?: string[];
  tree_restoration_practices?: string[];
  total_hectares?: number;
  project_budget?: number;
  total_trees?: number;
  capacity_building_needs?: string[];
  additional?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  restoration_photos?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  proof_of_land_tenure_mou?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  detailed_project_budget?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  expected_active_restoration_start_date?: string;
  expected_active_restoration_end_date?: string;
  description_of_project_timeline?: string;
  proj_partner_info?: string;
  land_tenure_proj_area?: string[];
  landholder_comm_engage?: string;
  proj_success_risks?: string;
  monitor_eval_plan?: string;
  proj_boundary?: string;
  sustainable_dev_goals?: string[];
  proj_area_description?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_sites?: number;
  environmental_goals?: string;
  main_degradation_causes?: string;
  seedlings_source?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_nurseries?: number;
  curr_land_degradation?: string;
  proj_impact_socieconom?: string;
  proj_impact_foodsec?: string;
  proj_impact_watersec?: string;
  proj_impact_jobtypes?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  num_jobs_created?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_men?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_18to35?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_older35?: number;
  proj_beneficiaries?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_small?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_large?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_youth?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_classes?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_tribes?: number;
  monitoring_evaluation_plan?: string;
  main_causes_of_degradation?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PostV2ProjectPitchesRequestBody = {
  organisation_id?: string;
  project_name?: string;
  project_objectives?: string;
  how_discovered?: string;
  project_country?: string[];
  project_county_district?: string;
  land_systems?: string[];
  tree_restoration_practices?: string[];
  restoration_intervention_types?: string[];
  capacity_building_needs?: string[];
  total_trees?: number;
  total_hectares?: number;
  project_budget?: number;
  expected_active_restoration_start_date?: string;
  expected_active_restoration_end_date?: string;
  description_of_project_timeline?: string;
  proj_partner_info?: string;
  land_tenure_proj_area?: string[];
  landholder_comm_engage?: string;
  proj_success_risks?: string;
  monitor_eval_plan?: string;
  proj_boundary?: string;
  sustainable_dev_goals?: string[];
  proj_area_description?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_sites?: number;
  environmental_goals?: string;
  main_degradation_causes?: string;
  seedlings_source?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_nurseries?: number;
  curr_land_degradation?: string;
  proj_impact_socieconom?: string;
  proj_impact_foodsec?: string;
  proj_impact_watersec?: string;
  proj_impact_jobtypes?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  num_jobs_created?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_men?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_18to35?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_older35?: number;
  proj_beneficiaries?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_small?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_large?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_youth?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_classes?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_tribes?: number;
  monitoring_evaluation_plan?: string;
  main_causes_of_degradation?: string;
};

export type PostV2ProjectPitchesVariables = {
  body?: PostV2ProjectPitchesRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2ProjectPitches = (variables: PostV2ProjectPitchesVariables, signal?: AbortSignal) =>
  apiFetch<PostV2ProjectPitchesResponse, PostV2ProjectPitchesError, PostV2ProjectPitchesRequestBody, {}, {}, {}>({
    url: "/v2/project-pitches",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2ProjectPitches = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2ProjectPitchesResponse,
      PostV2ProjectPitchesError,
      PostV2ProjectPitchesVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2ProjectPitchesResponse, PostV2ProjectPitchesError, PostV2ProjectPitchesVariables>(
    (variables: PostV2ProjectPitchesVariables) => fetchPostV2ProjectPitches({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ProjectPitchesUUIDPathParams = {
  uuid: string;
};

export type GetV2ProjectPitchesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectPitchesUUIDResponse = {
  id?: string;
  uuid?: string;
  status?: string;
  readable_status?: string;
  organisation_id?: string;
  funding_programmes?: {
    id?: number;
    uuid?: string;
    name?: string;
    description?: string;
    read_more_url?: string;
    organisation_types?: string[];
    location?: string;
    status?: string;
  };
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  project_name?: string;
  how_discovered?: string;
  project_objectives?: string;
  project_country?: string[];
  project_county_district?: string;
  restoration_intervention_types?: string[];
  land_systems?: string[];
  tree_restoration_practices?: string[];
  total_hectares?: number;
  project_budget?: number;
  total_trees?: number;
  capacity_building_needs?: string[];
  additional?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  restoration_photos?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  proof_of_land_tenure_mou?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  detailed_project_budget?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  expected_active_restoration_start_date?: string;
  expected_active_restoration_end_date?: string;
  description_of_project_timeline?: string;
  proj_partner_info?: string;
  land_tenure_proj_area?: string[];
  landholder_comm_engage?: string;
  proj_success_risks?: string;
  monitor_eval_plan?: string;
  proj_boundary?: string;
  sustainable_dev_goals?: string[];
  proj_area_description?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_sites?: number;
  environmental_goals?: string;
  main_degradation_causes?: string;
  seedlings_source?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_nurseries?: number;
  curr_land_degradation?: string;
  proj_impact_socieconom?: string;
  proj_impact_foodsec?: string;
  proj_impact_watersec?: string;
  proj_impact_jobtypes?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  num_jobs_created?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_men?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_18to35?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_older35?: number;
  proj_beneficiaries?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_small?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_large?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_youth?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_classes?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_tribes?: number;
  monitoring_evaluation_plan?: string;
  main_causes_of_degradation?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type GetV2ProjectPitchesUUIDVariables = {
  pathParams: GetV2ProjectPitchesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectPitchesUUID = (variables: GetV2ProjectPitchesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2ProjectPitchesUUIDResponse,
    GetV2ProjectPitchesUUIDError,
    undefined,
    {},
    {},
    GetV2ProjectPitchesUUIDPathParams
  >({ url: "/v2/project-pitches/{uuid}", method: "get", ...variables, signal });

export const useGetV2ProjectPitchesUUID = <TData = GetV2ProjectPitchesUUIDResponse>(
  variables: GetV2ProjectPitchesUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectPitchesUUIDResponse, GetV2ProjectPitchesUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectPitchesUUIDResponse, GetV2ProjectPitchesUUIDError, TData>(
    queryKeyFn({ path: "/v2/project-pitches/{UUID}", operationId: "getV2ProjectPitchesUUID", variables }),
    ({ signal }) => fetchGetV2ProjectPitchesUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchV2ProjectPitchesUUIDPathParams = {
  uuid: string;
};

export type PatchV2ProjectPitchesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2ProjectPitchesUUIDResponse = {
  id?: string;
  uuid?: string;
  status?: string;
  readable_status?: string;
  organisation_id?: string;
  funding_programmes?: {
    id?: number;
    uuid?: string;
    name?: string;
    description?: string;
    read_more_url?: string;
    organisation_types?: string[];
    location?: string;
    status?: string;
  };
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  project_name?: string;
  how_discovered?: string;
  project_objectives?: string;
  project_country?: string[];
  project_county_district?: string;
  restoration_intervention_types?: string[];
  land_systems?: string[];
  tree_restoration_practices?: string[];
  total_hectares?: number;
  project_budget?: number;
  total_trees?: number;
  capacity_building_needs?: string[];
  additional?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  restoration_photos?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  proof_of_land_tenure_mou?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  detailed_project_budget?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  expected_active_restoration_start_date?: string;
  expected_active_restoration_end_date?: string;
  description_of_project_timeline?: string;
  proj_partner_info?: string;
  land_tenure_proj_area?: string[];
  landholder_comm_engage?: string;
  proj_success_risks?: string;
  monitor_eval_plan?: string;
  proj_boundary?: string;
  sustainable_dev_goals?: string[];
  proj_area_description?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_sites?: number;
  environmental_goals?: string;
  main_degradation_causes?: string;
  seedlings_source?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_nurseries?: number;
  curr_land_degradation?: string;
  proj_impact_socieconom?: string;
  proj_impact_foodsec?: string;
  proj_impact_watersec?: string;
  proj_impact_jobtypes?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  num_jobs_created?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_men?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_18to35?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_older35?: number;
  proj_beneficiaries?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_small?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_large?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_youth?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_classes?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_tribes?: number;
  monitoring_evaluation_plan?: string;
  main_causes_of_degradation?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PatchV2ProjectPitchesUUIDRequestBody = {
  funding_programme_id?: number;
  project_name?: string;
  project_objectives?: string;
  project_county_district?: string;
  how_discovered?: string;
  land_systems?: string[];
  tree_restoration_practices?: string[];
  project_budget?: number;
  project_country?: string[];
  restoration_intervention_types?: string[];
  capacity_building_needs?: string[];
  total_hectares?: number;
  total_trees?: number;
  expected_active_restoration_start_date?: string;
  expected_active_restoration_end_date?: string;
  description_of_project_timeline?: string;
  proj_partner_info?: string;
  land_tenure_proj_area?: string[];
  landholder_comm_engage?: string;
  proj_success_risks?: string;
  monitor_eval_plan?: string;
  proj_boundary?: string;
  sustainable_dev_goals?: string[];
  proj_area_description?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_sites?: number;
  environmental_goals?: string;
  main_degradation_causes?: string;
  seedlings_source?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_nurseries?: number;
  curr_land_degradation?: string;
  proj_impact_socieconom?: string;
  proj_impact_foodsec?: string;
  proj_impact_watersec?: string;
  proj_impact_jobtypes?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  num_jobs_created?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_men?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_18to35?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_older35?: number;
  proj_beneficiaries?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_small?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_large?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_youth?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_classes?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_tribes?: number;
  monitoring_evaluation_plan?: string;
  main_causes_of_degradation?: string;
};

export type PatchV2ProjectPitchesUUIDVariables = {
  body?: PatchV2ProjectPitchesUUIDRequestBody;
  pathParams: PatchV2ProjectPitchesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2ProjectPitchesUUID = (variables: PatchV2ProjectPitchesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PatchV2ProjectPitchesUUIDResponse,
    PatchV2ProjectPitchesUUIDError,
    PatchV2ProjectPitchesUUIDRequestBody,
    {},
    {},
    PatchV2ProjectPitchesUUIDPathParams
  >({ url: "/v2/project-pitches/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2ProjectPitchesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2ProjectPitchesUUIDResponse,
      PatchV2ProjectPitchesUUIDError,
      PatchV2ProjectPitchesUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2ProjectPitchesUUIDResponse,
    PatchV2ProjectPitchesUUIDError,
    PatchV2ProjectPitchesUUIDVariables
  >(
    (variables: PatchV2ProjectPitchesUUIDVariables) =>
      fetchPatchV2ProjectPitchesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2ProjectPitchesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2ProjectPitchesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2ProjectPitchesUUIDVariables = {
  pathParams: DeleteV2ProjectPitchesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2ProjectPitchesUUID = (variables: DeleteV2ProjectPitchesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2ProjectPitchesUUIDError, undefined, {}, {}, DeleteV2ProjectPitchesUUIDPathParams>({
    url: "/v2/project-pitches/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2ProjectPitchesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2ProjectPitchesUUIDError, DeleteV2ProjectPitchesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2ProjectPitchesUUIDError, DeleteV2ProjectPitchesUUIDVariables>(
    (variables: DeleteV2ProjectPitchesUUIDVariables) =>
      fetchDeleteV2ProjectPitchesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2ProjectPitchesSubmitUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2ProjectPitchesSubmitUUIDVariables = ApiContext["fetcherOptions"];

export const fetchPutV2ProjectPitchesSubmitUUID = (
  variables: PutV2ProjectPitchesSubmitUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PutV2ProjectPitchesSubmitUUIDError, undefined, {}, {}, {}>({
    url: "/v2/project-pitches/submit/{uuid}",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2ProjectPitchesSubmitUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PutV2ProjectPitchesSubmitUUIDError,
      PutV2ProjectPitchesSubmitUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2ProjectPitchesSubmitUUIDError, PutV2ProjectPitchesSubmitUUIDVariables>(
    (variables: PutV2ProjectPitchesSubmitUUIDVariables) =>
      fetchPutV2ProjectPitchesSubmitUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ProjectPitchesUUIDSubmissionsPathParams = {
  uuid: string;
};

export type GetV2ProjectPitchesUUIDSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectPitchesUUIDSubmissionsResponse = {
  data?: {
    id?: string;
    uuid?: string;
    name?: string;
    form?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    stage?: {
      uuid?: string;
      name?: string;
      status?: string;
      readable_status?: string;
    };
    answers?: string;
    status?: string;
    readable_status?: string;
    audits?: {
      id?: number;
      event?: string;
      user_id?: number;
      user_uuid?: string;
      old_values?: Record<string, any>;
      new_values?: Record<string, any>;
      created_at?: string;
      updated_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
    project_pitch_uuid?: string;
    updated_by?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
};

export type GetV2ProjectPitchesUUIDSubmissionsVariables = {
  pathParams: GetV2ProjectPitchesUUIDSubmissionsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectPitchesUUIDSubmissions = (
  variables: GetV2ProjectPitchesUUIDSubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2ProjectPitchesUUIDSubmissionsResponse,
    GetV2ProjectPitchesUUIDSubmissionsError,
    undefined,
    {},
    {},
    GetV2ProjectPitchesUUIDSubmissionsPathParams
  >({ url: "/v2/project-pitches/{uuid}/submissions", method: "get", ...variables, signal });

export const useGetV2ProjectPitchesUUIDSubmissions = <TData = GetV2ProjectPitchesUUIDSubmissionsResponse>(
  variables: GetV2ProjectPitchesUUIDSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2ProjectPitchesUUIDSubmissionsResponse,
      GetV2ProjectPitchesUUIDSubmissionsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetV2ProjectPitchesUUIDSubmissionsResponse,
    GetV2ProjectPitchesUUIDSubmissionsError,
    TData
  >(
    queryKeyFn({
      path: "/v2/project-pitches/{UUID}/submissions",
      operationId: "getV2ProjectPitchesUUIDSubmissions",
      variables
    }),
    ({ signal }) => fetchGetV2ProjectPitchesUUIDSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFormsSubmissionsUUIDPathParams = {
  uuid: string;
};

export type GetV2AdminFormsSubmissionsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsSubmissionsUUIDResponse = {
  id?: string;
  uuid?: string;
  name?: string;
  form?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  stage?: {
    uuid?: string;
    name?: string;
    status?: string;
    readable_status?: string;
  };
  answers?: string;
  status?: string;
  readable_status?: string;
  audits?: {
    id?: number;
    event?: string;
    user_id?: number;
    user_uuid?: string;
    old_values?: Record<string, any>;
    new_values?: Record<string, any>;
    created_at?: string;
    updated_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
  project_pitch_uuid?: string;
  updated_by?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type GetV2AdminFormsSubmissionsUUIDVariables = {
  pathParams: GetV2AdminFormsSubmissionsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsSubmissionsUUID = (
  variables: GetV2AdminFormsSubmissionsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2AdminFormsSubmissionsUUIDResponse,
    GetV2AdminFormsSubmissionsUUIDError,
    undefined,
    {},
    {},
    GetV2AdminFormsSubmissionsUUIDPathParams
  >({ url: "/v2/admin/forms/submissions/{uuid}", method: "get", ...variables, signal });

export const useGetV2AdminFormsSubmissionsUUID = <TData = GetV2AdminFormsSubmissionsUUIDResponse>(
  variables: GetV2AdminFormsSubmissionsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFormsSubmissionsUUIDResponse, GetV2AdminFormsSubmissionsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFormsSubmissionsUUIDResponse, GetV2AdminFormsSubmissionsUUIDError, TData>(
    queryKeyFn({
      path: "/v2/admin/forms/submissions/{UUID}",
      operationId: "getV2AdminFormsSubmissionsUUID",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsSubmissionsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2AdminFormsSubmissionsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminFormsSubmissionsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFormsSubmissionsUUIDVariables = {
  pathParams: DeleteV2AdminFormsSubmissionsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFormsSubmissionsUUID = (
  variables: DeleteV2AdminFormsSubmissionsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminFormsSubmissionsUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminFormsSubmissionsUUIDPathParams
  >({ url: "/v2/admin/forms/submissions/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminFormsSubmissionsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminFormsSubmissionsUUIDError,
      DeleteV2AdminFormsSubmissionsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminFormsSubmissionsUUIDError,
    DeleteV2AdminFormsSubmissionsUUIDVariables
  >(
    (variables: DeleteV2AdminFormsSubmissionsUUIDVariables) =>
      fetchDeleteV2AdminFormsSubmissionsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminFormsSubmissionsUUIDExportPathParams = {
  uuid: string;
};

export type GetV2AdminFormsSubmissionsUUIDExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsSubmissionsUUIDExportVariables = {
  pathParams: GetV2AdminFormsSubmissionsUUIDExportPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsSubmissionsUUIDExport = (
  variables: GetV2AdminFormsSubmissionsUUIDExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Record<string, any>,
    GetV2AdminFormsSubmissionsUUIDExportError,
    undefined,
    {},
    {},
    GetV2AdminFormsSubmissionsUUIDExportPathParams
  >({ url: "/v2/admin/forms/submissions/{uuid}/export", method: "get", ...variables, signal });

export const useGetV2AdminFormsSubmissionsUUIDExport = <TData = Record<string, any>>(
  variables: GetV2AdminFormsSubmissionsUUIDExportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Record<string, any>, GetV2AdminFormsSubmissionsUUIDExportError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Record<string, any>, GetV2AdminFormsSubmissionsUUIDExportError, TData>(
    queryKeyFn({
      path: "/v2/admin/forms/submissions/{UUID}/export",
      operationId: "getV2AdminFormsSubmissionsUUIDExport",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsSubmissionsUUIDExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFormsSubmissionsQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminFormsSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsSubmissionsResponse = {
  data?: {
    id?: string;
    uuid?: string;
    name?: string;
    form?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    stage?: {
      uuid?: string;
      name?: string;
      status?: string;
      readable_status?: string;
    };
    answers?: string;
    status?: string;
    readable_status?: string;
    audits?: {
      id?: number;
      event?: string;
      user_id?: number;
      user_uuid?: string;
      old_values?: Record<string, any>;
      new_values?: Record<string, any>;
      created_at?: string;
      updated_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
    project_pitch_uuid?: string;
    updated_by?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2AdminFormsSubmissionsVariables = {
  queryParams?: GetV2AdminFormsSubmissionsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsSubmissions = (variables: GetV2AdminFormsSubmissionsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminFormsSubmissionsResponse,
    GetV2AdminFormsSubmissionsError,
    undefined,
    {},
    GetV2AdminFormsSubmissionsQueryParams,
    {}
  >({ url: "/v2/admin/forms/submissions", method: "get", ...variables, signal });

export const useGetV2AdminFormsSubmissions = <TData = GetV2AdminFormsSubmissionsResponse>(
  variables: GetV2AdminFormsSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFormsSubmissionsResponse, GetV2AdminFormsSubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFormsSubmissionsResponse, GetV2AdminFormsSubmissionsError, TData>(
    queryKeyFn({ path: "/v2/admin/forms/submissions", operationId: "getV2AdminFormsSubmissions", variables }),
    ({ signal }) => fetchGetV2AdminFormsSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FormsMySubmissionsQueryParams = {
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2FormsMySubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsMySubmissionsResponse = {
  data?: {
    id?: string;
    uuid?: string;
    name?: string;
    form?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    stage?: {
      uuid?: string;
      name?: string;
      status?: string;
      readable_status?: string;
    };
    answers?: string;
    status?: string;
    readable_status?: string;
    audits?: {
      id?: number;
      event?: string;
      user_id?: number;
      user_uuid?: string;
      old_values?: Record<string, any>;
      new_values?: Record<string, any>;
      created_at?: string;
      updated_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
    project_pitch_uuid?: string;
    updated_by?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2FormsMySubmissionsVariables = {
  queryParams?: GetV2FormsMySubmissionsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsMySubmissions = (variables: GetV2FormsMySubmissionsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2FormsMySubmissionsResponse,
    GetV2FormsMySubmissionsError,
    undefined,
    {},
    GetV2FormsMySubmissionsQueryParams,
    {}
  >({ url: "/v2/forms/my/submissions", method: "get", ...variables, signal });

export const useGetV2FormsMySubmissions = <TData = GetV2FormsMySubmissionsResponse>(
  variables: GetV2FormsMySubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FormsMySubmissionsResponse, GetV2FormsMySubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsMySubmissionsResponse, GetV2FormsMySubmissionsError, TData>(
    queryKeyFn({ path: "/v2/forms/my/submissions", operationId: "getV2FormsMySubmissions", variables }),
    ({ signal }) => fetchGetV2FormsMySubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FormsUUIDPathParams = {
  uuid: string;
};

export type GetV2FormsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsUUIDResponse = {
  id?: number;
  uuid?: string;
  type?: string;
  version?: number;
  title?: string;
  subtitle?: string;
  description?: string;
  framework_key?: string;
  duration?: string;
  deadline_at?: string;
  documentation?: string;
  documentation_label?: string;
  submission_message?: string;
  published?: boolean;
  stage_id?: string;
  options_other?: boolean;
  form_sections?: {
    order?: number;
    form_id?: number;
    form_questions?: {
      id?: number;
      uuid?: string;
      form_section_id?: number;
      label?: string;
      validation?: string[];
      parent_id?: string;
      linked_field_key?: string;
      children?: Record<string, any>[];
      multichoice?: boolean;
      order?: number;
      options?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      table_headers?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      additional_text?: string;
      additional_url?: string;
      show_on_parent_condition?: boolean;
      input_type?:
        | "date"
        | "text"
        | "long-text"
        | "select"
        | "checkboxes"
        | "radio"
        | "number"
        | "image"
        | "file"
        | "conditional";
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg. slug: name
   */
  tags?: string[];
  updated_by?: number;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type GetV2FormsUUIDVariables = {
  pathParams: GetV2FormsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsUUID = (variables: GetV2FormsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2FormsUUIDResponse, GetV2FormsUUIDError, undefined, {}, {}, GetV2FormsUUIDPathParams>({
    url: "/v2/forms/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2FormsUUID = <TData = GetV2FormsUUIDResponse>(
  variables: GetV2FormsUUIDVariables,
  options?: Omit<reactQuery.UseQueryOptions<GetV2FormsUUIDResponse, GetV2FormsUUIDError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsUUIDResponse, GetV2FormsUUIDError, TData>(
    queryKeyFn({ path: "/v2/forms/{UUID}", operationId: "getV2FormsUUID", variables }),
    ({ signal }) => fetchGetV2FormsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2AdminFundingProgrammeStageError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminFundingProgrammeStageResponse = {
  id?: number;
  uuid?: string;
  status?: string;
  deadline_at?: string;
  readable_status?: string;
  funding_programme_id?: number;
  name?: string;
  order?: number;
  forms?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PostV2AdminFundingProgrammeStageVariables = {
  body?: RequestBodies.PostV2AdminFundingProgrammeStageBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminFundingProgrammeStage = (
  variables: PostV2AdminFundingProgrammeStageVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2AdminFundingProgrammeStageResponse,
    PostV2AdminFundingProgrammeStageError,
    RequestBodies.PostV2AdminFundingProgrammeStageBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/funding-programme/stage", method: "post", ...variables, signal });

export const usePostV2AdminFundingProgrammeStage = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2AdminFundingProgrammeStageResponse,
      PostV2AdminFundingProgrammeStageError,
      PostV2AdminFundingProgrammeStageVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2AdminFundingProgrammeStageResponse,
    PostV2AdminFundingProgrammeStageError,
    PostV2AdminFundingProgrammeStageVariables
  >(
    (variables: PostV2AdminFundingProgrammeStageVariables) =>
      fetchPostV2AdminFundingProgrammeStage({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminFundingProgrammeStageUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFundingProgrammeStageUUIDResponse = {
  id?: number;
  uuid?: string;
  status?: string;
  deadline_at?: string;
  readable_status?: string;
  funding_programme_id?: number;
  name?: string;
  order?: number;
  forms?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type DeleteV2AdminFundingProgrammeStageUUIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFundingProgrammeStageUUID = (
  variables: DeleteV2AdminFundingProgrammeStageUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    DeleteV2AdminFundingProgrammeStageUUIDResponse,
    DeleteV2AdminFundingProgrammeStageUUIDError,
    undefined,
    {},
    {},
    {}
  >({ url: "/v2/admin/funding-programme/stage/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminFundingProgrammeStageUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2AdminFundingProgrammeStageUUIDResponse,
      DeleteV2AdminFundingProgrammeStageUUIDError,
      DeleteV2AdminFundingProgrammeStageUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2AdminFundingProgrammeStageUUIDResponse,
    DeleteV2AdminFundingProgrammeStageUUIDError,
    DeleteV2AdminFundingProgrammeStageUUIDVariables
  >(
    (variables: DeleteV2AdminFundingProgrammeStageUUIDVariables) =>
      fetchDeleteV2AdminFundingProgrammeStageUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AdminFundingProgrammeStageUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFundingProgrammeStageUUIDResponse = {
  id?: number;
  uuid?: string;
  status?: string;
  deadline_at?: string;
  readable_status?: string;
  funding_programme_id?: number;
  name?: string;
  order?: number;
  forms?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PatchV2AdminFundingProgrammeStageUUIDVariables = {
  body?: RequestBodies.PostV2AdminFundingProgrammeStageBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFundingProgrammeStageUUID = (
  variables: PatchV2AdminFundingProgrammeStageUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PatchV2AdminFundingProgrammeStageUUIDResponse,
    PatchV2AdminFundingProgrammeStageUUIDError,
    RequestBodies.PostV2AdminFundingProgrammeStageBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/funding-programme/stage/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2AdminFundingProgrammeStageUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2AdminFundingProgrammeStageUUIDResponse,
      PatchV2AdminFundingProgrammeStageUUIDError,
      PatchV2AdminFundingProgrammeStageUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2AdminFundingProgrammeStageUUIDResponse,
    PatchV2AdminFundingProgrammeStageUUIDError,
    PatchV2AdminFundingProgrammeStageUUIDVariables
  >(
    (variables: PatchV2AdminFundingProgrammeStageUUIDVariables) =>
      fetchPatchV2AdminFundingProgrammeStageUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FundingProgrammeQueryParams = {
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2FundingProgrammeError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FundingProgrammeResponse = {
  data?: {
    id?: number;
    uuid?: string;
    name?: string;
    description?: string;
    location?: string;
    read_more_url?: string;
    framework_key?: string;
    status?: string;
    organisation_types?: string[];
    stages?: {
      id?: number;
      uuid?: string;
      status?: string;
      deadline_at?: string;
      readable_status?: string;
      funding_programme_id?: number;
      name?: string;
      order?: number;
      forms?: {
        id?: number;
        uuid?: string;
        type?: string;
        version?: number;
        title?: string;
        subtitle?: string;
        description?: string;
        framework_key?: string;
        duration?: string;
        deadline_at?: string;
        documentation?: string;
        documentation_label?: string;
        submission_message?: string;
        published?: boolean;
        stage_id?: string;
        options_other?: boolean;
        form_sections?: {
          order?: number;
          form_id?: number;
          form_questions?: {
            id?: number;
            uuid?: string;
            form_section_id?: number;
            label?: string;
            validation?: string[];
            parent_id?: string;
            linked_field_key?: string;
            children?: Record<string, any>[];
            multichoice?: boolean;
            order?: number;
            options?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            table_headers?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            additional_text?: string;
            additional_url?: string;
            show_on_parent_condition?: boolean;
            input_type?:
              | "date"
              | "text"
              | "long-text"
              | "select"
              | "checkboxes"
              | "radio"
              | "number"
              | "image"
              | "file"
              | "conditional";
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        updated_by?: number;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    organisations?: {
      uuid?: string;
      name?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2FundingProgrammeVariables = {
  queryParams?: GetV2FundingProgrammeQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FundingProgramme = (variables: GetV2FundingProgrammeVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2FundingProgrammeResponse,
    GetV2FundingProgrammeError,
    undefined,
    {},
    GetV2FundingProgrammeQueryParams,
    {}
  >({ url: "/v2/funding-programme", method: "get", ...variables, signal });

export const useGetV2FundingProgramme = <TData = GetV2FundingProgrammeResponse>(
  variables: GetV2FundingProgrammeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FundingProgrammeResponse, GetV2FundingProgrammeError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FundingProgrammeResponse, GetV2FundingProgrammeError, TData>(
    queryKeyFn({ path: "/v2/funding-programme", operationId: "getV2FundingProgramme", variables }),
    ({ signal }) => fetchGetV2FundingProgramme({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFundingProgrammeQueryParams = {
  /**
   * page number you want results from
   */
  page?: number;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
};

export type GetV2AdminFundingProgrammeError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFundingProgrammeResponse = {
  data?: {
    id?: number;
    uuid?: string;
    name?: string;
    description?: string;
    location?: string;
    read_more_url?: string;
    framework_key?: string;
    status?: string;
    organisation_types?: string[];
    stages?: {
      id?: number;
      uuid?: string;
      status?: string;
      deadline_at?: string;
      readable_status?: string;
      funding_programme_id?: number;
      name?: string;
      order?: number;
      forms?: {
        id?: number;
        uuid?: string;
        type?: string;
        version?: number;
        title?: string;
        subtitle?: string;
        description?: string;
        framework_key?: string;
        duration?: string;
        deadline_at?: string;
        documentation?: string;
        documentation_label?: string;
        submission_message?: string;
        published?: boolean;
        stage_id?: string;
        options_other?: boolean;
        form_sections?: {
          order?: number;
          form_id?: number;
          form_questions?: {
            id?: number;
            uuid?: string;
            form_section_id?: number;
            label?: string;
            validation?: string[];
            parent_id?: string;
            linked_field_key?: string;
            children?: Record<string, any>[];
            multichoice?: boolean;
            order?: number;
            options?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            table_headers?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            additional_text?: string;
            additional_url?: string;
            show_on_parent_condition?: boolean;
            input_type?:
              | "date"
              | "text"
              | "long-text"
              | "select"
              | "checkboxes"
              | "radio"
              | "number"
              | "image"
              | "file"
              | "conditional";
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        updated_by?: number;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    organisations?: {
      uuid?: string;
      name?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2AdminFundingProgrammeVariables = {
  queryParams?: GetV2AdminFundingProgrammeQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFundingProgramme = (variables: GetV2AdminFundingProgrammeVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminFundingProgrammeResponse,
    GetV2AdminFundingProgrammeError,
    undefined,
    {},
    GetV2AdminFundingProgrammeQueryParams,
    {}
  >({ url: "/v2/admin/funding-programme", method: "get", ...variables, signal });

export const useGetV2AdminFundingProgramme = <TData = GetV2AdminFundingProgrammeResponse>(
  variables: GetV2AdminFundingProgrammeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFundingProgrammeResponse, GetV2AdminFundingProgrammeError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFundingProgrammeResponse, GetV2AdminFundingProgrammeError, TData>(
    queryKeyFn({ path: "/v2/admin/funding-programme", operationId: "getV2AdminFundingProgramme", variables }),
    ({ signal }) => fetchGetV2AdminFundingProgramme({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2AdminFundingProgrammeError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminFundingProgrammeResponse = {
  id?: number;
  uuid?: string;
  name?: string;
  description?: string;
  location?: string;
  read_more_url?: string;
  framework_key?: string;
  status?: string;
  organisation_types?: string[];
  stages?: {
    id?: number;
    uuid?: string;
    status?: string;
    deadline_at?: string;
    readable_status?: string;
    funding_programme_id?: number;
    name?: string;
    order?: number;
    forms?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  organisations?: {
    uuid?: string;
    name?: string;
  }[];
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PostV2AdminFundingProgrammeVariables = {
  body?: RequestBodies.PostV2FundingProgrammeBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminFundingProgramme = (
  variables: PostV2AdminFundingProgrammeVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2AdminFundingProgrammeResponse,
    PostV2AdminFundingProgrammeError,
    RequestBodies.PostV2FundingProgrammeBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/funding-programme", method: "post", ...variables, signal });

export const usePostV2AdminFundingProgramme = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2AdminFundingProgrammeResponse,
      PostV2AdminFundingProgrammeError,
      PostV2AdminFundingProgrammeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2AdminFundingProgrammeResponse,
    PostV2AdminFundingProgrammeError,
    PostV2AdminFundingProgrammeVariables
  >(
    (variables: PostV2AdminFundingProgrammeVariables) =>
      fetchPostV2AdminFundingProgramme({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FundingProgrammeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FundingProgrammeUUIDResponse = {
  id?: number;
  uuid?: string;
  name?: string;
  description?: string;
  location?: string;
  read_more_url?: string;
  framework_key?: string;
  status?: string;
  organisation_types?: string[];
  stages?: {
    id?: number;
    uuid?: string;
    status?: string;
    deadline_at?: string;
    readable_status?: string;
    funding_programme_id?: number;
    name?: string;
    order?: number;
    forms?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  organisations?: {
    uuid?: string;
    name?: string;
  }[];
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type GetV2FundingProgrammeUUIDVariables = {
  body?: RequestBodies.GetV2FundingProgrammeIDBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FundingProgrammeUUID = (variables: GetV2FundingProgrammeUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2FundingProgrammeUUIDResponse,
    GetV2FundingProgrammeUUIDError,
    RequestBodies.GetV2FundingProgrammeIDBody,
    {},
    {},
    {}
  >({ url: "/v2/funding-programme/{uuid}", method: "get", ...variables, signal });

export const useGetV2FundingProgrammeUUID = <TData = GetV2FundingProgrammeUUIDResponse>(
  variables: GetV2FundingProgrammeUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FundingProgrammeUUIDResponse, GetV2FundingProgrammeUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FundingProgrammeUUIDResponse, GetV2FundingProgrammeUUIDError, TData>(
    queryKeyFn({ path: "/v2/funding-programme/{UUID}", operationId: "getV2FundingProgrammeUUID", variables }),
    ({ signal }) => fetchGetV2FundingProgrammeUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFundingProgrammeUUIDPathParams = {
  uuid: string;
};

export type GetV2AdminFundingProgrammeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFundingProgrammeUUIDResponse = {
  id?: number;
  uuid?: string;
  name?: string;
  description?: string;
  location?: string;
  read_more_url?: string;
  framework_key?: string;
  status?: string;
  organisation_types?: string[];
  stages?: {
    id?: number;
    uuid?: string;
    status?: string;
    deadline_at?: string;
    readable_status?: string;
    funding_programme_id?: number;
    name?: string;
    order?: number;
    forms?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  organisations?: {
    uuid?: string;
    name?: string;
  }[];
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type GetV2AdminFundingProgrammeUUIDVariables = {
  body?: RequestBodies.GetV2FundingProgrammeIDBody;
  pathParams: GetV2AdminFundingProgrammeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFundingProgrammeUUID = (
  variables: GetV2AdminFundingProgrammeUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2AdminFundingProgrammeUUIDResponse,
    GetV2AdminFundingProgrammeUUIDError,
    RequestBodies.GetV2FundingProgrammeIDBody,
    {},
    {},
    GetV2AdminFundingProgrammeUUIDPathParams
  >({ url: "/v2/admin/funding-programme/{uuid}", method: "get", ...variables, signal });

export const useGetV2AdminFundingProgrammeUUID = <TData = GetV2AdminFundingProgrammeUUIDResponse>(
  variables: GetV2AdminFundingProgrammeUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFundingProgrammeUUIDResponse, GetV2AdminFundingProgrammeUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFundingProgrammeUUIDResponse, GetV2AdminFundingProgrammeUUIDError, TData>(
    queryKeyFn({
      path: "/v2/admin/funding-programme/{UUID}",
      operationId: "getV2AdminFundingProgrammeUUID",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFundingProgrammeUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2AdminFundingProgrammeUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminFundingProgrammeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminFundingProgrammeUUIDResponse = {
  id?: number;
  uuid?: string;
  name?: string;
  description?: string;
  location?: string;
  read_more_url?: string;
  framework_key?: string;
  status?: string;
  organisation_types?: string[];
  stages?: {
    id?: number;
    uuid?: string;
    status?: string;
    deadline_at?: string;
    readable_status?: string;
    funding_programme_id?: number;
    name?: string;
    order?: number;
    forms?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  organisations?: {
    uuid?: string;
    name?: string;
  }[];
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PutV2AdminFundingProgrammeUUIDVariables = {
  body?: RequestBodies.PostV2FundingProgrammeBody;
  pathParams: PutV2AdminFundingProgrammeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminFundingProgrammeUUID = (
  variables: PutV2AdminFundingProgrammeUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2AdminFundingProgrammeUUIDResponse,
    PutV2AdminFundingProgrammeUUIDError,
    RequestBodies.PostV2FundingProgrammeBody,
    {},
    {},
    PutV2AdminFundingProgrammeUUIDPathParams
  >({ url: "/v2/admin/funding-programme/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminFundingProgrammeUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2AdminFundingProgrammeUUIDResponse,
      PutV2AdminFundingProgrammeUUIDError,
      PutV2AdminFundingProgrammeUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2AdminFundingProgrammeUUIDResponse,
    PutV2AdminFundingProgrammeUUIDError,
    PutV2AdminFundingProgrammeUUIDVariables
  >(
    (variables: PutV2AdminFundingProgrammeUUIDVariables) =>
      fetchPutV2AdminFundingProgrammeUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminFundingProgrammeUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminFundingProgrammeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFundingProgrammeUUIDVariables = {
  pathParams: DeleteV2AdminFundingProgrammeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFundingProgrammeUUID = (
  variables: DeleteV2AdminFundingProgrammeUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminFundingProgrammeUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminFundingProgrammeUUIDPathParams
  >({ url: "/v2/admin/funding-programme/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminFundingProgrammeUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminFundingProgrammeUUIDError,
      DeleteV2AdminFundingProgrammeUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminFundingProgrammeUUIDError,
    DeleteV2AdminFundingProgrammeUUIDVariables
  >(
    (variables: DeleteV2AdminFundingProgrammeUUIDVariables) =>
      fetchDeleteV2AdminFundingProgrammeUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AdminFundingProgrammeUUIDStatusError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFundingProgrammeUUIDStatusResponse = {
  status?: string;
};

export type PatchV2AdminFundingProgrammeUUIDStatusVariables = ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFundingProgrammeUUIDStatus = (
  variables: PatchV2AdminFundingProgrammeUUIDStatusVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PatchV2AdminFundingProgrammeUUIDStatusResponse,
    PatchV2AdminFundingProgrammeUUIDStatusError,
    undefined,
    {},
    {},
    {}
  >({ url: "/v2/admin/funding-programme/{uuid}/status", method: "patch", ...variables, signal });

export const usePatchV2AdminFundingProgrammeUUIDStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2AdminFundingProgrammeUUIDStatusResponse,
      PatchV2AdminFundingProgrammeUUIDStatusError,
      PatchV2AdminFundingProgrammeUUIDStatusVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2AdminFundingProgrammeUUIDStatusResponse,
    PatchV2AdminFundingProgrammeUUIDStatusError,
    PatchV2AdminFundingProgrammeUUIDStatusVariables
  >(
    (variables: PatchV2AdminFundingProgrammeUUIDStatusVariables) =>
      fetchPatchV2AdminFundingProgrammeUUIDStatus({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FundingProgrammeStageQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2FundingProgrammeStageError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FundingProgrammeStageResponse = {
  data?: {
    id?: number;
    uuid?: string;
    status?: string;
    deadline_at?: string;
    readable_status?: string;
    funding_programme_id?: number;
    name?: string;
    order?: number;
    forms?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2FundingProgrammeStageVariables = {
  queryParams?: GetV2FundingProgrammeStageQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FundingProgrammeStage = (variables: GetV2FundingProgrammeStageVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2FundingProgrammeStageResponse,
    GetV2FundingProgrammeStageError,
    undefined,
    {},
    GetV2FundingProgrammeStageQueryParams,
    {}
  >({ url: "/v2/funding-programme/stage", method: "get", ...variables, signal });

export const useGetV2FundingProgrammeStage = <TData = GetV2FundingProgrammeStageResponse>(
  variables: GetV2FundingProgrammeStageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FundingProgrammeStageResponse, GetV2FundingProgrammeStageError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FundingProgrammeStageResponse, GetV2FundingProgrammeStageError, TData>(
    queryKeyFn({ path: "/v2/funding-programme/stage", operationId: "getV2FundingProgrammeStage", variables }),
    ({ signal }) => fetchGetV2FundingProgrammeStage({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchV2AdminFundingProgrammeStageUUIDStatusError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFundingProgrammeStageUUIDStatusResponse = {
  id?: number;
  uuid?: string;
  status?: string;
  deadline_at?: string;
  readable_status?: string;
  funding_programme_id?: number;
  name?: string;
  order?: number;
  forms?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PatchV2AdminFundingProgrammeStageUUIDStatusVariables = ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFundingProgrammeStageUUIDStatus = (
  variables: PatchV2AdminFundingProgrammeStageUUIDStatusVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PatchV2AdminFundingProgrammeStageUUIDStatusResponse,
    PatchV2AdminFundingProgrammeStageUUIDStatusError,
    undefined,
    {},
    {},
    {}
  >({ url: "/v2/admin/funding-programme/stage/{uuid}/status", method: "patch", ...variables, signal });

export const usePatchV2AdminFundingProgrammeStageUUIDStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2AdminFundingProgrammeStageUUIDStatusResponse,
      PatchV2AdminFundingProgrammeStageUUIDStatusError,
      PatchV2AdminFundingProgrammeStageUUIDStatusVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2AdminFundingProgrammeStageUUIDStatusResponse,
    PatchV2AdminFundingProgrammeStageUUIDStatusError,
    PatchV2AdminFundingProgrammeStageUUIDStatusVariables
  >(
    (variables: PatchV2AdminFundingProgrammeStageUUIDStatusVariables) =>
      fetchPatchV2AdminFundingProgrammeStageUUIDStatus({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FundingProgrammeStageUUIDPathParams = {
  uuid: string;
};

export type GetV2FundingProgrammeStageUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FundingProgrammeStageUUIDResponse = {
  id?: number;
  uuid?: string;
  status?: string;
  deadline_at?: string;
  readable_status?: string;
  funding_programme_id?: number;
  name?: string;
  order?: number;
  forms?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type GetV2FundingProgrammeStageUUIDVariables = {
  pathParams: GetV2FundingProgrammeStageUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FundingProgrammeStageUUID = (
  variables: GetV2FundingProgrammeStageUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2FundingProgrammeStageUUIDResponse,
    GetV2FundingProgrammeStageUUIDError,
    undefined,
    {},
    {},
    GetV2FundingProgrammeStageUUIDPathParams
  >({ url: "/v2/funding-programme/stage/{uuid}", method: "get", ...variables, signal });

export const useGetV2FundingProgrammeStageUUID = <TData = GetV2FundingProgrammeStageUUIDResponse>(
  variables: GetV2FundingProgrammeStageUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FundingProgrammeStageUUIDResponse, GetV2FundingProgrammeStageUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FundingProgrammeStageUUIDResponse, GetV2FundingProgrammeStageUUIDError, TData>(
    queryKeyFn({
      path: "/v2/funding-programme/stage/{UUID}",
      operationId: "getV2FundingProgrammeStageUUID",
      variables
    }),
    ({ signal }) => fetchGetV2FundingProgrammeStageUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchV2AdminFormsSubmissionsUUIDStatusError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFormsSubmissionsUUIDStatusResponse = {
  id?: string;
  uuid?: string;
  name?: string;
  form?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  stage?: {
    uuid?: string;
    name?: string;
    status?: string;
    readable_status?: string;
  };
  answers?: string;
  status?: string;
  readable_status?: string;
  audits?: {
    id?: number;
    event?: string;
    user_id?: number;
    user_uuid?: string;
    old_values?: Record<string, any>;
    new_values?: Record<string, any>;
    created_at?: string;
    updated_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
  project_pitch_uuid?: string;
  updated_by?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PatchV2AdminFormsSubmissionsUUIDStatusRequestBody = {
  feedback?: string;
  status?: "started" | "awaiting-approval" | "approved" | "requires-more-information" | "rejected";
};

export type PatchV2AdminFormsSubmissionsUUIDStatusVariables = {
  body?: PatchV2AdminFormsSubmissionsUUIDStatusRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFormsSubmissionsUUIDStatus = (
  variables: PatchV2AdminFormsSubmissionsUUIDStatusVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PatchV2AdminFormsSubmissionsUUIDStatusResponse,
    PatchV2AdminFormsSubmissionsUUIDStatusError,
    PatchV2AdminFormsSubmissionsUUIDStatusRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/forms/submissions/{uuid}/status", method: "patch", ...variables, signal });

export const usePatchV2AdminFormsSubmissionsUUIDStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2AdminFormsSubmissionsUUIDStatusResponse,
      PatchV2AdminFormsSubmissionsUUIDStatusError,
      PatchV2AdminFormsSubmissionsUUIDStatusVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2AdminFormsSubmissionsUUIDStatusResponse,
    PatchV2AdminFormsSubmissionsUUIDStatusError,
    PatchV2AdminFormsSubmissionsUUIDStatusVariables
  >(
    (variables: PatchV2AdminFormsSubmissionsUUIDStatusVariables) =>
      fetchPatchV2AdminFormsSubmissionsUUIDStatus({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2FormsSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FormsSubmissionsResponse = {
  id?: string;
  uuid?: string;
  name?: string;
  form?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  stage?: {
    uuid?: string;
    name?: string;
    status?: string;
    readable_status?: string;
  };
  answers?: string;
  status?: string;
  readable_status?: string;
  audits?: {
    id?: number;
    event?: string;
    user_id?: number;
    user_uuid?: string;
    old_values?: Record<string, any>;
    new_values?: Record<string, any>;
    created_at?: string;
    updated_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
  project_pitch_uuid?: string;
  updated_by?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PostV2FormsSubmissionsRequestBody = {
  form_uuid?: string;
  project_pitch_uuid?: string;
};

export type PostV2FormsSubmissionsVariables = {
  body?: PostV2FormsSubmissionsRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FormsSubmissions = (variables: PostV2FormsSubmissionsVariables, signal?: AbortSignal) =>
  apiFetch<PostV2FormsSubmissionsResponse, PostV2FormsSubmissionsError, PostV2FormsSubmissionsRequestBody, {}, {}, {}>({
    url: "/v2/forms/submissions",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2FormsSubmissions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2FormsSubmissionsResponse,
      PostV2FormsSubmissionsError,
      PostV2FormsSubmissionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2FormsSubmissionsResponse,
    PostV2FormsSubmissionsError,
    PostV2FormsSubmissionsVariables
  >(
    (variables: PostV2FormsSubmissionsVariables) => fetchPostV2FormsSubmissions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FormsSubmissionsUUIDPathParams = {
  uuid: string;
};

export type GetV2FormsSubmissionsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsSubmissionsUUIDResponse = {
  id?: string;
  uuid?: string;
  name?: string;
  form?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  stage?: {
    uuid?: string;
    name?: string;
    status?: string;
    readable_status?: string;
  };
  answers?: string;
  status?: string;
  readable_status?: string;
  audits?: {
    id?: number;
    event?: string;
    user_id?: number;
    user_uuid?: string;
    old_values?: Record<string, any>;
    new_values?: Record<string, any>;
    created_at?: string;
    updated_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
  project_pitch_uuid?: string;
  updated_by?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type GetV2FormsSubmissionsUUIDVariables = {
  pathParams: GetV2FormsSubmissionsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsSubmissionsUUID = (variables: GetV2FormsSubmissionsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2FormsSubmissionsUUIDResponse,
    GetV2FormsSubmissionsUUIDError,
    undefined,
    {},
    {},
    GetV2FormsSubmissionsUUIDPathParams
  >({ url: "/v2/forms/submissions/{uuid}", method: "get", ...variables, signal });

export const useGetV2FormsSubmissionsUUID = <TData = GetV2FormsSubmissionsUUIDResponse>(
  variables: GetV2FormsSubmissionsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FormsSubmissionsUUIDResponse, GetV2FormsSubmissionsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsSubmissionsUUIDResponse, GetV2FormsSubmissionsUUIDError, TData>(
    queryKeyFn({ path: "/v2/forms/submissions/{UUID}", operationId: "getV2FormsSubmissionsUUID", variables }),
    ({ signal }) => fetchGetV2FormsSubmissionsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchV2FormsSubmissionsUUIDPathParams = {
  uuid: string;
};

export type PatchV2FormsSubmissionsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2FormsSubmissionsUUIDResponse = {
  id?: string;
  uuid?: string;
  name?: string;
  form?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  stage?: {
    uuid?: string;
    name?: string;
    status?: string;
    readable_status?: string;
  };
  answers?: string;
  status?: string;
  readable_status?: string;
  audits?: {
    id?: number;
    event?: string;
    user_id?: number;
    user_uuid?: string;
    old_values?: Record<string, any>;
    new_values?: Record<string, any>;
    created_at?: string;
    updated_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
  project_pitch_uuid?: string;
  updated_by?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PatchV2FormsSubmissionsUUIDRequestBody = {
  status?: string;
  answers?: {
    question_id?: number;
    value?: string;
    options?: string[];
  }[];
};

export type PatchV2FormsSubmissionsUUIDVariables = {
  body?: PatchV2FormsSubmissionsUUIDRequestBody;
  pathParams: PatchV2FormsSubmissionsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2FormsSubmissionsUUID = (
  variables: PatchV2FormsSubmissionsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PatchV2FormsSubmissionsUUIDResponse,
    PatchV2FormsSubmissionsUUIDError,
    PatchV2FormsSubmissionsUUIDRequestBody,
    {},
    {},
    PatchV2FormsSubmissionsUUIDPathParams
  >({ url: "/v2/forms/submissions/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2FormsSubmissionsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2FormsSubmissionsUUIDResponse,
      PatchV2FormsSubmissionsUUIDError,
      PatchV2FormsSubmissionsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2FormsSubmissionsUUIDResponse,
    PatchV2FormsSubmissionsUUIDError,
    PatchV2FormsSubmissionsUUIDVariables
  >(
    (variables: PatchV2FormsSubmissionsUUIDVariables) =>
      fetchPatchV2FormsSubmissionsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2FormsSubmissionsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2FormsSubmissionsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2FormsSubmissionsUUIDVariables = {
  pathParams: DeleteV2FormsSubmissionsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2FormsSubmissionsUUID = (
  variables: DeleteV2FormsSubmissionsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteV2FormsSubmissionsUUIDError, undefined, {}, {}, DeleteV2FormsSubmissionsUUIDPathParams>({
    url: "/v2/forms/submissions/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2FormsSubmissionsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2FormsSubmissionsUUIDError, DeleteV2FormsSubmissionsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2FormsSubmissionsUUIDError, DeleteV2FormsSubmissionsUUIDVariables>(
    (variables: DeleteV2FormsSubmissionsUUIDVariables) =>
      fetchDeleteV2FormsSubmissionsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2FormsSubmissionsUUIDNextStagePathParams = {
  uuid: string;
};

export type PostV2FormsSubmissionsUUIDNextStageError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FormsSubmissionsUUIDNextStageResponse = {
  id?: string;
  uuid?: string;
  name?: string;
  form?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  stage?: {
    uuid?: string;
    name?: string;
    status?: string;
    readable_status?: string;
  };
  answers?: string;
  status?: string;
  readable_status?: string;
  audits?: {
    id?: number;
    event?: string;
    user_id?: number;
    user_uuid?: string;
    old_values?: Record<string, any>;
    new_values?: Record<string, any>;
    created_at?: string;
    updated_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
  project_pitch_uuid?: string;
  updated_by?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PostV2FormsSubmissionsUUIDNextStageVariables = {
  pathParams: PostV2FormsSubmissionsUUIDNextStagePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FormsSubmissionsUUIDNextStage = (
  variables: PostV2FormsSubmissionsUUIDNextStageVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2FormsSubmissionsUUIDNextStageResponse,
    PostV2FormsSubmissionsUUIDNextStageError,
    undefined,
    {},
    {},
    PostV2FormsSubmissionsUUIDNextStagePathParams
  >({ url: "/v2/forms/submissions/{uuid}/next-stage", method: "post", ...variables, signal });

export const usePostV2FormsSubmissionsUUIDNextStage = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2FormsSubmissionsUUIDNextStageResponse,
      PostV2FormsSubmissionsUUIDNextStageError,
      PostV2FormsSubmissionsUUIDNextStageVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2FormsSubmissionsUUIDNextStageResponse,
    PostV2FormsSubmissionsUUIDNextStageError,
    PostV2FormsSubmissionsUUIDNextStageVariables
  >(
    (variables: PostV2FormsSubmissionsUUIDNextStageVariables) =>
      fetchPostV2FormsSubmissionsUUIDNextStage({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2FormsSubmissionsSubmitUUIDPathParams = {
  uuid: string;
};

export type PutV2FormsSubmissionsSubmitUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2FormsSubmissionsSubmitUUIDResponse = {
  id?: string;
  uuid?: string;
  name?: string;
  form?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  stage?: {
    uuid?: string;
    name?: string;
    status?: string;
    readable_status?: string;
  };
  answers?: string;
  status?: string;
  readable_status?: string;
  audits?: {
    id?: number;
    event?: string;
    user_id?: number;
    user_uuid?: string;
    old_values?: Record<string, any>;
    new_values?: Record<string, any>;
    created_at?: string;
    updated_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
  project_pitch_uuid?: string;
  updated_by?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PutV2FormsSubmissionsSubmitUUIDVariables = {
  pathParams: PutV2FormsSubmissionsSubmitUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2FormsSubmissionsSubmitUUID = (
  variables: PutV2FormsSubmissionsSubmitUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2FormsSubmissionsSubmitUUIDResponse,
    PutV2FormsSubmissionsSubmitUUIDError,
    undefined,
    {},
    {},
    PutV2FormsSubmissionsSubmitUUIDPathParams
  >({ url: "/v2/forms/submissions/submit/{uuid}", method: "put", ...variables, signal });

export const usePutV2FormsSubmissionsSubmitUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2FormsSubmissionsSubmitUUIDResponse,
      PutV2FormsSubmissionsSubmitUUIDError,
      PutV2FormsSubmissionsSubmitUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2FormsSubmissionsSubmitUUIDResponse,
    PutV2FormsSubmissionsSubmitUUIDError,
    PutV2FormsSubmissionsSubmitUUIDVariables
  >(
    (variables: PutV2FormsSubmissionsSubmitUUIDVariables) =>
      fetchPutV2FormsSubmissionsSubmitUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2MyBannersError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2MyBannersResponse = {
  id?: number;
  uuid?: string;
  role?: string;
  job_role?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  phone_number?: string;
  whatsapp_phone?: string;
  organisation?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  };
  /**
   * @format date-time
   */
  last_logged_in_at?: string;
  /**
   * @format date-time
   */
  email_address_verified_at?: string;
  verified?: boolean;
  /**
   * @format date-time
   */
  date_added?: string;
  banners?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
  /**
   * @format date-time
   */
  created_at?: string;
};

export type PatchV2MyBannersRequestBody = {
  banners?: Record<string, any>[];
};

export type PatchV2MyBannersVariables = {
  body?: PatchV2MyBannersRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2MyBanners = (variables: PatchV2MyBannersVariables, signal?: AbortSignal) =>
  apiFetch<PatchV2MyBannersResponse, PatchV2MyBannersError, PatchV2MyBannersRequestBody, {}, {}, {}>({
    url: "/v2/my/banners",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2MyBanners = (
  options?: Omit<
    reactQuery.UseMutationOptions<PatchV2MyBannersResponse, PatchV2MyBannersError, PatchV2MyBannersVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PatchV2MyBannersResponse, PatchV2MyBannersError, PatchV2MyBannersVariables>(
    (variables: PatchV2MyBannersVariables) => fetchPatchV2MyBanners({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminFormsApplicationsQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminFormsApplicationsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsApplicationsResponse = {
  data?: {
    uuid?: string;
    form_submissions?: {
      id?: string;
      uuid?: string;
      name?: string;
      form?: {
        id?: number;
        uuid?: string;
        type?: string;
        version?: number;
        title?: string;
        subtitle?: string;
        description?: string;
        framework_key?: string;
        duration?: string;
        deadline_at?: string;
        documentation?: string;
        documentation_label?: string;
        submission_message?: string;
        published?: boolean;
        stage_id?: string;
        options_other?: boolean;
        form_sections?: {
          order?: number;
          form_id?: number;
          form_questions?: {
            id?: number;
            uuid?: string;
            form_section_id?: number;
            label?: string;
            validation?: string[];
            parent_id?: string;
            linked_field_key?: string;
            children?: Record<string, any>[];
            multichoice?: boolean;
            order?: number;
            options?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            table_headers?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            additional_text?: string;
            additional_url?: string;
            show_on_parent_condition?: boolean;
            input_type?:
              | "date"
              | "text"
              | "long-text"
              | "select"
              | "checkboxes"
              | "radio"
              | "number"
              | "image"
              | "file"
              | "conditional";
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        updated_by?: number;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      stage?: {
        uuid?: string;
        name?: string;
        status?: string;
        readable_status?: string;
      };
      answers?: string;
      status?: string;
      readable_status?: string;
      audits?: {
        id?: number;
        event?: string;
        user_id?: number;
        user_uuid?: string;
        old_values?: Record<string, any>;
        new_values?: Record<string, any>;
        created_at?: string;
        updated_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
      project_pitch_uuid?: string;
      updated_by?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    current_submission?: {
      id?: string;
      uuid?: string;
      name?: string;
      form?: {
        id?: number;
        uuid?: string;
        type?: string;
        version?: number;
        title?: string;
        subtitle?: string;
        description?: string;
        framework_key?: string;
        duration?: string;
        deadline_at?: string;
        documentation?: string;
        documentation_label?: string;
        submission_message?: string;
        published?: boolean;
        stage_id?: string;
        options_other?: boolean;
        form_sections?: {
          order?: number;
          form_id?: number;
          form_questions?: {
            id?: number;
            uuid?: string;
            form_section_id?: number;
            label?: string;
            validation?: string[];
            parent_id?: string;
            linked_field_key?: string;
            children?: Record<string, any>[];
            multichoice?: boolean;
            order?: number;
            options?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            table_headers?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            additional_text?: string;
            additional_url?: string;
            show_on_parent_condition?: boolean;
            input_type?:
              | "date"
              | "text"
              | "long-text"
              | "select"
              | "checkboxes"
              | "radio"
              | "number"
              | "image"
              | "file"
              | "conditional";
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        updated_by?: number;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      stage?: {
        uuid?: string;
        name?: string;
        status?: string;
        readable_status?: string;
      };
      answers?: string;
      status?: string;
      readable_status?: string;
      audits?: {
        id?: number;
        event?: string;
        user_id?: number;
        user_uuid?: string;
        old_values?: Record<string, any>;
        new_values?: Record<string, any>;
        created_at?: string;
        updated_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
      project_pitch_uuid?: string;
      updated_by?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    funding_programme_name?: number;
    funding_programme_uuid?: string;
    funding_programme_status?: string;
    organisation_name?: string;
    organisation_uuid?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2AdminFormsApplicationsVariables = {
  queryParams?: GetV2AdminFormsApplicationsQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Filters : funding_programme_uuid,current_stage, current_submission_status (Current stage is the stage uuid) Available Sorts : created_at, updated_at, organisation_name, funding_programme_name, organisation_name (Prefix with a '-' for descending
 */
export const fetchGetV2AdminFormsApplications = (
  variables: GetV2AdminFormsApplicationsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2AdminFormsApplicationsResponse,
    GetV2AdminFormsApplicationsError,
    undefined,
    {},
    GetV2AdminFormsApplicationsQueryParams,
    {}
  >({ url: "/v2/admin/forms/applications", method: "get", ...variables, signal });

/**
 * Available Filters : funding_programme_uuid,current_stage, current_submission_status (Current stage is the stage uuid) Available Sorts : created_at, updated_at, organisation_name, funding_programme_name, organisation_name (Prefix with a '-' for descending
 */
export const useGetV2AdminFormsApplications = <TData = GetV2AdminFormsApplicationsResponse>(
  variables: GetV2AdminFormsApplicationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFormsApplicationsResponse, GetV2AdminFormsApplicationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFormsApplicationsResponse, GetV2AdminFormsApplicationsError, TData>(
    queryKeyFn({ path: "/v2/admin/forms/applications", operationId: "getV2AdminFormsApplications", variables }),
    ({ signal }) => fetchGetV2AdminFormsApplications({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFormsApplicationsUUIDPathParams = {
  uuid: string;
};

export type GetV2AdminFormsApplicationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsApplicationsUUIDResponse = {
  uuid?: string;
  form_submissions?: {
    id?: string;
    uuid?: string;
    name?: string;
    form?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    stage?: {
      uuid?: string;
      name?: string;
      status?: string;
      readable_status?: string;
    };
    answers?: string;
    status?: string;
    readable_status?: string;
    audits?: {
      id?: number;
      event?: string;
      user_id?: number;
      user_uuid?: string;
      old_values?: Record<string, any>;
      new_values?: Record<string, any>;
      created_at?: string;
      updated_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
    project_pitch_uuid?: string;
    updated_by?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  current_submission?: {
    id?: string;
    uuid?: string;
    name?: string;
    form?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    stage?: {
      uuid?: string;
      name?: string;
      status?: string;
      readable_status?: string;
    };
    answers?: string;
    status?: string;
    readable_status?: string;
    audits?: {
      id?: number;
      event?: string;
      user_id?: number;
      user_uuid?: string;
      old_values?: Record<string, any>;
      new_values?: Record<string, any>;
      created_at?: string;
      updated_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
    project_pitch_uuid?: string;
    updated_by?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  funding_programme?: {
    id?: number;
    uuid?: string;
    name?: string;
    description?: string;
    location?: string;
    read_more_url?: string;
    framework_key?: string;
    status?: string;
    organisation_types?: string[];
    stages?: {
      id?: number;
      uuid?: string;
      status?: string;
      deadline_at?: string;
      readable_status?: string;
      funding_programme_id?: number;
      name?: string;
      order?: number;
      forms?: {
        id?: number;
        uuid?: string;
        type?: string;
        version?: number;
        title?: string;
        subtitle?: string;
        description?: string;
        framework_key?: string;
        duration?: string;
        deadline_at?: string;
        documentation?: string;
        documentation_label?: string;
        submission_message?: string;
        published?: boolean;
        stage_id?: string;
        options_other?: boolean;
        form_sections?: {
          order?: number;
          form_id?: number;
          form_questions?: {
            id?: number;
            uuid?: string;
            form_section_id?: number;
            label?: string;
            validation?: string[];
            parent_id?: string;
            linked_field_key?: string;
            children?: Record<string, any>[];
            multichoice?: boolean;
            order?: number;
            options?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            table_headers?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            additional_text?: string;
            additional_url?: string;
            show_on_parent_condition?: boolean;
            input_type?:
              | "date"
              | "text"
              | "long-text"
              | "select"
              | "checkboxes"
              | "radio"
              | "number"
              | "image"
              | "file"
              | "conditional";
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        updated_by?: number;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    organisations?: {
      uuid?: string;
      name?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  organisation?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  };
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
};

export type GetV2AdminFormsApplicationsUUIDVariables = {
  pathParams: GetV2AdminFormsApplicationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsApplicationsUUID = (
  variables: GetV2AdminFormsApplicationsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2AdminFormsApplicationsUUIDResponse,
    GetV2AdminFormsApplicationsUUIDError,
    undefined,
    {},
    {},
    GetV2AdminFormsApplicationsUUIDPathParams
  >({ url: "/v2/admin/forms/applications/{uuid}", method: "get", ...variables, signal });

export const useGetV2AdminFormsApplicationsUUID = <TData = GetV2AdminFormsApplicationsUUIDResponse>(
  variables: GetV2AdminFormsApplicationsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFormsApplicationsUUIDResponse, GetV2AdminFormsApplicationsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFormsApplicationsUUIDResponse, GetV2AdminFormsApplicationsUUIDError, TData>(
    queryKeyFn({
      path: "/v2/admin/forms/applications/{UUID}",
      operationId: "getV2AdminFormsApplicationsUUID",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsApplicationsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2AdminFormsApplicationsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminFormsApplicationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFormsApplicationsUUIDVariables = {
  pathParams: DeleteV2AdminFormsApplicationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFormsApplicationsUUID = (
  variables: DeleteV2AdminFormsApplicationsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminFormsApplicationsUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminFormsApplicationsUUIDPathParams
  >({ url: "/v2/admin/forms/applications/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminFormsApplicationsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminFormsApplicationsUUIDError,
      DeleteV2AdminFormsApplicationsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminFormsApplicationsUUIDError,
    DeleteV2AdminFormsApplicationsUUIDVariables
  >(
    (variables: DeleteV2AdminFormsApplicationsUUIDVariables) =>
      fetchDeleteV2AdminFormsApplicationsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminFormsApplicationsUUIDExportPathParams = {
  uuid: string;
};

export type GetV2AdminFormsApplicationsUUIDExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsApplicationsUUIDExportVariables = {
  pathParams: GetV2AdminFormsApplicationsUUIDExportPathParams;
} & ApiContext["fetcherOptions"];

/**
 * The UUID provided is the Funding Programme ID that the applications are for
 */
export const fetchGetV2AdminFormsApplicationsUUIDExport = (
  variables: GetV2AdminFormsApplicationsUUIDExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    GetV2AdminFormsApplicationsUUIDExportError,
    undefined,
    {},
    {},
    GetV2AdminFormsApplicationsUUIDExportPathParams
  >({ url: "/v2/admin/forms/applications/{uuid}/export", method: "get", ...variables, signal });

/**
 * The UUID provided is the Funding Programme ID that the applications are for
 */
export const useGetV2AdminFormsApplicationsUUIDExport = <TData = undefined>(
  variables: GetV2AdminFormsApplicationsUUIDExportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetV2AdminFormsApplicationsUUIDExportError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetV2AdminFormsApplicationsUUIDExportError, TData>(
    queryKeyFn({
      path: "/v2/admin/forms/applications/{UUID}/export",
      operationId: "getV2AdminFormsApplicationsUUIDExport",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsApplicationsUUIDExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2MyApplicationsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2MyApplicationsResponse = {
  data?: {
    uuid?: string;
    form_submissions?: {
      id?: string;
      uuid?: string;
      name?: string;
      form?: {
        id?: number;
        uuid?: string;
        type?: string;
        version?: number;
        title?: string;
        subtitle?: string;
        description?: string;
        framework_key?: string;
        duration?: string;
        deadline_at?: string;
        documentation?: string;
        documentation_label?: string;
        submission_message?: string;
        published?: boolean;
        stage_id?: string;
        options_other?: boolean;
        form_sections?: {
          order?: number;
          form_id?: number;
          form_questions?: {
            id?: number;
            uuid?: string;
            form_section_id?: number;
            label?: string;
            validation?: string[];
            parent_id?: string;
            linked_field_key?: string;
            children?: Record<string, any>[];
            multichoice?: boolean;
            order?: number;
            options?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            table_headers?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            additional_text?: string;
            additional_url?: string;
            show_on_parent_condition?: boolean;
            input_type?:
              | "date"
              | "text"
              | "long-text"
              | "select"
              | "checkboxes"
              | "radio"
              | "number"
              | "image"
              | "file"
              | "conditional";
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        updated_by?: number;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      stage?: {
        uuid?: string;
        name?: string;
        status?: string;
        readable_status?: string;
      };
      answers?: string;
      status?: string;
      readable_status?: string;
      audits?: {
        id?: number;
        event?: string;
        user_id?: number;
        user_uuid?: string;
        old_values?: Record<string, any>;
        new_values?: Record<string, any>;
        created_at?: string;
        updated_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
      project_pitch_uuid?: string;
      updated_by?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    current_submission?: {
      id?: string;
      uuid?: string;
      name?: string;
      form?: {
        id?: number;
        uuid?: string;
        type?: string;
        version?: number;
        title?: string;
        subtitle?: string;
        description?: string;
        framework_key?: string;
        duration?: string;
        deadline_at?: string;
        documentation?: string;
        documentation_label?: string;
        submission_message?: string;
        published?: boolean;
        stage_id?: string;
        options_other?: boolean;
        form_sections?: {
          order?: number;
          form_id?: number;
          form_questions?: {
            id?: number;
            uuid?: string;
            form_section_id?: number;
            label?: string;
            validation?: string[];
            parent_id?: string;
            linked_field_key?: string;
            children?: Record<string, any>[];
            multichoice?: boolean;
            order?: number;
            options?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            table_headers?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            additional_text?: string;
            additional_url?: string;
            show_on_parent_condition?: boolean;
            input_type?:
              | "date"
              | "text"
              | "long-text"
              | "select"
              | "checkboxes"
              | "radio"
              | "number"
              | "image"
              | "file"
              | "conditional";
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        updated_by?: number;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      stage?: {
        uuid?: string;
        name?: string;
        status?: string;
        readable_status?: string;
      };
      answers?: string;
      status?: string;
      readable_status?: string;
      audits?: {
        id?: number;
        event?: string;
        user_id?: number;
        user_uuid?: string;
        old_values?: Record<string, any>;
        new_values?: Record<string, any>;
        created_at?: string;
        updated_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
      project_pitch_uuid?: string;
      updated_by?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    funding_programme_name?: number;
    funding_programme_uuid?: string;
    funding_programme_status?: string;
    organisation_name?: string;
    organisation_uuid?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2MyApplicationsVariables = ApiContext["fetcherOptions"];

export const fetchGetV2MyApplications = (variables: GetV2MyApplicationsVariables, signal?: AbortSignal) =>
  apiFetch<GetV2MyApplicationsResponse, GetV2MyApplicationsError, undefined, {}, {}, {}>({
    url: "/v2/my/applications",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2MyApplications = <TData = GetV2MyApplicationsResponse>(
  variables: GetV2MyApplicationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2MyApplicationsResponse, GetV2MyApplicationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2MyApplicationsResponse, GetV2MyApplicationsError, TData>(
    queryKeyFn({ path: "/v2/my/applications", operationId: "getV2MyApplications", variables }),
    ({ signal }) => fetchGetV2MyApplications({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ApplicationsUUIDPathParams = {
  uuid: string;
};

export type GetV2ApplicationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ApplicationsUUIDResponse = {
  uuid?: string;
  form_submissions?: {
    id?: string;
    uuid?: string;
    name?: string;
    form?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    stage?: {
      uuid?: string;
      name?: string;
      status?: string;
      readable_status?: string;
    };
    answers?: string;
    status?: string;
    readable_status?: string;
    audits?: {
      id?: number;
      event?: string;
      user_id?: number;
      user_uuid?: string;
      old_values?: Record<string, any>;
      new_values?: Record<string, any>;
      created_at?: string;
      updated_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
    project_pitch_uuid?: string;
    updated_by?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  current_submission?: {
    id?: string;
    uuid?: string;
    name?: string;
    form?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    stage?: {
      uuid?: string;
      name?: string;
      status?: string;
      readable_status?: string;
    };
    answers?: string;
    status?: string;
    readable_status?: string;
    audits?: {
      id?: number;
      event?: string;
      user_id?: number;
      user_uuid?: string;
      old_values?: Record<string, any>;
      new_values?: Record<string, any>;
      created_at?: string;
      updated_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
    project_pitch_uuid?: string;
    updated_by?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  funding_programme?: {
    id?: number;
    uuid?: string;
    name?: string;
    description?: string;
    location?: string;
    read_more_url?: string;
    framework_key?: string;
    status?: string;
    organisation_types?: string[];
    stages?: {
      id?: number;
      uuid?: string;
      status?: string;
      deadline_at?: string;
      readable_status?: string;
      funding_programme_id?: number;
      name?: string;
      order?: number;
      forms?: {
        id?: number;
        uuid?: string;
        type?: string;
        version?: number;
        title?: string;
        subtitle?: string;
        description?: string;
        framework_key?: string;
        duration?: string;
        deadline_at?: string;
        documentation?: string;
        documentation_label?: string;
        submission_message?: string;
        published?: boolean;
        stage_id?: string;
        options_other?: boolean;
        form_sections?: {
          order?: number;
          form_id?: number;
          form_questions?: {
            id?: number;
            uuid?: string;
            form_section_id?: number;
            label?: string;
            validation?: string[];
            parent_id?: string;
            linked_field_key?: string;
            children?: Record<string, any>[];
            multichoice?: boolean;
            order?: number;
            options?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            table_headers?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            additional_text?: string;
            additional_url?: string;
            show_on_parent_condition?: boolean;
            input_type?:
              | "date"
              | "text"
              | "long-text"
              | "select"
              | "checkboxes"
              | "radio"
              | "number"
              | "image"
              | "file"
              | "conditional";
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        updated_by?: number;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    organisations?: {
      uuid?: string;
      name?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  organisation?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  };
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
};

export type GetV2ApplicationsUUIDVariables = {
  pathParams: GetV2ApplicationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ApplicationsUUID = (variables: GetV2ApplicationsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2ApplicationsUUIDResponse,
    GetV2ApplicationsUUIDError,
    undefined,
    {},
    {},
    GetV2ApplicationsUUIDPathParams
  >({ url: "/v2/applications/{uuid}", method: "get", ...variables, signal });

export const useGetV2ApplicationsUUID = <TData = GetV2ApplicationsUUIDResponse>(
  variables: GetV2ApplicationsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ApplicationsUUIDResponse, GetV2ApplicationsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ApplicationsUUIDResponse, GetV2ApplicationsUUIDError, TData>(
    queryKeyFn({ path: "/v2/applications/{UUID}", operationId: "getV2ApplicationsUUID", variables }),
    ({ signal }) => fetchGetV2ApplicationsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ApplicationsUUIDExportPathParams = {
  uuid: string;
};

export type GetV2ApplicationsUUIDExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ApplicationsUUIDExportVariables = {
  pathParams: GetV2ApplicationsUUIDExportPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ApplicationsUUIDExport = (
  variables: GetV2ApplicationsUUIDExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetV2ApplicationsUUIDExportError, undefined, {}, {}, GetV2ApplicationsUUIDExportPathParams>({
    url: "/v2/applications/{uuid}/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ApplicationsUUIDExport = <TData = undefined>(
  variables: GetV2ApplicationsUUIDExportVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetV2ApplicationsUUIDExportError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetV2ApplicationsUUIDExportError, TData>(
    queryKeyFn({ path: "/v2/applications/{UUID}/export", operationId: "getV2ApplicationsUUIDExport", variables }),
    ({ signal }) => fetchGetV2ApplicationsUUIDExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2AdminNurseriesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminNurseriesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminNurseriesUUIDVariables = {
  pathParams: DeleteV2AdminNurseriesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminNurseriesUUID = (variables: DeleteV2AdminNurseriesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2AdminNurseriesUUIDError, undefined, {}, {}, DeleteV2AdminNurseriesUUIDPathParams>({
    url: "/v2/admin/nurseries/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminNurseriesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2AdminNurseriesUUIDError, DeleteV2AdminNurseriesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2AdminNurseriesUUIDError, DeleteV2AdminNurseriesUUIDVariables>(
    (variables: DeleteV2AdminNurseriesUUIDVariables) =>
      fetchDeleteV2AdminNurseriesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminNurseryReportsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminNurseryReportsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminNurseryReportsUUIDVariables = {
  pathParams: DeleteV2AdminNurseryReportsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminNurseryReportsUUID = (
  variables: DeleteV2AdminNurseryReportsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminNurseryReportsUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminNurseryReportsUUIDPathParams
  >({ url: "/v2/admin/nursery-reports/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminNurseryReportsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminNurseryReportsUUIDError,
      DeleteV2AdminNurseryReportsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminNurseryReportsUUIDError,
    DeleteV2AdminNurseryReportsUUIDVariables
  >(
    (variables: DeleteV2AdminNurseryReportsUUIDVariables) =>
      fetchDeleteV2AdminNurseryReportsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminSitesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminSitesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminSitesUUIDVariables = {
  pathParams: DeleteV2AdminSitesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminSitesUUID = (variables: DeleteV2AdminSitesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2AdminSitesUUIDError, undefined, {}, {}, DeleteV2AdminSitesUUIDPathParams>({
    url: "/v2/admin/sites/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminSitesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2AdminSitesUUIDError, DeleteV2AdminSitesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2AdminSitesUUIDError, DeleteV2AdminSitesUUIDVariables>(
    (variables: DeleteV2AdminSitesUUIDVariables) => fetchDeleteV2AdminSitesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminSiteReportsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminSiteReportsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminSiteReportsUUIDVariables = {
  pathParams: DeleteV2AdminSiteReportsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminSiteReportsUUID = (
  variables: DeleteV2AdminSiteReportsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteV2AdminSiteReportsUUIDError, undefined, {}, {}, DeleteV2AdminSiteReportsUUIDPathParams>({
    url: "/v2/admin/site-reports/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminSiteReportsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2AdminSiteReportsUUIDError, DeleteV2AdminSiteReportsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2AdminSiteReportsUUIDError, DeleteV2AdminSiteReportsUUIDVariables>(
    (variables: DeleteV2AdminSiteReportsUUIDVariables) =>
      fetchDeleteV2AdminSiteReportsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2AdminSiteMonitoringsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminSiteMonitoringsResponse = {
  uuid?: string;
  status?: string;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  /**
   * @format date
   */
  measurement_date?: string;
  /**
   * @format date-time
   */
  last_updated?: string;
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
};

export type PostV2AdminSiteMonitoringsRequestBody = {
  site_uuid?: string;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  /**
   * @format date
   */
  measurement_date?: string;
};

export type PostV2AdminSiteMonitoringsVariables = {
  body?: PostV2AdminSiteMonitoringsRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminSiteMonitorings = (variables: PostV2AdminSiteMonitoringsVariables, signal?: AbortSignal) =>
  apiFetch<
    PostV2AdminSiteMonitoringsResponse,
    PostV2AdminSiteMonitoringsError,
    PostV2AdminSiteMonitoringsRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/site-monitorings", method: "post", ...variables, signal });

export const usePostV2AdminSiteMonitorings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2AdminSiteMonitoringsResponse,
      PostV2AdminSiteMonitoringsError,
      PostV2AdminSiteMonitoringsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2AdminSiteMonitoringsResponse,
    PostV2AdminSiteMonitoringsError,
    PostV2AdminSiteMonitoringsVariables
  >(
    (variables: PostV2AdminSiteMonitoringsVariables) =>
      fetchPostV2AdminSiteMonitorings({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2AdminSiteMonitoringsUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminSiteMonitoringsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminSiteMonitoringsUUIDResponse = {
  uuid?: string;
  status?: string;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  /**
   * @format date
   */
  measurement_date?: string;
  /**
   * @format date-time
   */
  last_updated?: string;
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
};

export type PutV2AdminSiteMonitoringsUUIDRequestBody = {
  status?: string;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  /**
   * @format date
   */
  measurement_date?: string;
};

export type PutV2AdminSiteMonitoringsUUIDVariables = {
  body?: PutV2AdminSiteMonitoringsUUIDRequestBody;
  pathParams: PutV2AdminSiteMonitoringsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminSiteMonitoringsUUID = (
  variables: PutV2AdminSiteMonitoringsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2AdminSiteMonitoringsUUIDResponse,
    PutV2AdminSiteMonitoringsUUIDError,
    PutV2AdminSiteMonitoringsUUIDRequestBody,
    {},
    {},
    PutV2AdminSiteMonitoringsUUIDPathParams
  >({ url: "/v2/admin/site-monitorings/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminSiteMonitoringsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2AdminSiteMonitoringsUUIDResponse,
      PutV2AdminSiteMonitoringsUUIDError,
      PutV2AdminSiteMonitoringsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2AdminSiteMonitoringsUUIDResponse,
    PutV2AdminSiteMonitoringsUUIDError,
    PutV2AdminSiteMonitoringsUUIDVariables
  >(
    (variables: PutV2AdminSiteMonitoringsUUIDVariables) =>
      fetchPutV2AdminSiteMonitoringsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminSiteMonitoringsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminSiteMonitoringsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminSiteMonitoringsUUIDVariables = {
  pathParams: DeleteV2AdminSiteMonitoringsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminSiteMonitoringsUUID = (
  variables: DeleteV2AdminSiteMonitoringsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminSiteMonitoringsUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminSiteMonitoringsUUIDPathParams
  >({ url: "/v2/admin/site-monitorings/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminSiteMonitoringsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminSiteMonitoringsUUIDError,
      DeleteV2AdminSiteMonitoringsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminSiteMonitoringsUUIDError,
    DeleteV2AdminSiteMonitoringsUUIDVariables
  >(
    (variables: DeleteV2AdminSiteMonitoringsUUIDVariables) =>
      fetchDeleteV2AdminSiteMonitoringsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminProjectsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminProjectsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminProjectsUUIDVariables = {
  pathParams: DeleteV2AdminProjectsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminProjectsUUID = (variables: DeleteV2AdminProjectsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2AdminProjectsUUIDError, undefined, {}, {}, DeleteV2AdminProjectsUUIDPathParams>({
    url: "/v2/admin/projects/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminProjectsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2AdminProjectsUUIDError, DeleteV2AdminProjectsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2AdminProjectsUUIDError, DeleteV2AdminProjectsUUIDVariables>(
    (variables: DeleteV2AdminProjectsUUIDVariables) =>
      fetchDeleteV2AdminProjectsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminProjectReportsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminProjectReportsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminProjectReportsUUIDVariables = {
  pathParams: DeleteV2AdminProjectReportsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminProjectReportsUUID = (
  variables: DeleteV2AdminProjectReportsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminProjectReportsUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminProjectReportsUUIDPathParams
  >({ url: "/v2/admin/project-reports/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminProjectReportsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminProjectReportsUUIDError,
      DeleteV2AdminProjectReportsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminProjectReportsUUIDError,
    DeleteV2AdminProjectReportsUUIDVariables
  >(
    (variables: DeleteV2AdminProjectReportsUUIDVariables) =>
      fetchDeleteV2AdminProjectReportsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2AdminProjectMonitoringsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminProjectMonitoringsResponse = {
  uuid?: string;
  status?: string;
  total_hectares?: number;
  ha_mangrove?: number;
  ha_assisted?: number;
  ha_agroforestry?: number;
  ha_reforestation?: number;
  ha_peatland?: number;
  ha_riparian?: number;
  ha_enrichment?: number;
  ha_nucleation?: number;
  ha_silvopasture?: number;
  ha_direct?: number;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  tree_cover_loss?: number;
  carbon_benefits?: number;
  number_of_esrp?: number;
  field_tree_regenerated?: number;
  field_tree_survival_percent?: number;
  /**
   * @format date
   */
  start_date?: string;
  /**
   * @format date
   */
  end_date?: string;
  /**
   * @format date-time
   */
  last_updated?: string;
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
};

export type PostV2AdminProjectMonitoringsRequestBody = {
  project_uuid?: string;
  total_hectares?: number;
  ha_mangrove?: number;
  ha_assisted?: number;
  ha_agroforestry?: number;
  ha_reforestation?: number;
  ha_peatland?: number;
  ha_riparian?: number;
  ha_enrichment?: number;
  ha_nucleation?: number;
  ha_silvopasture?: number;
  ha_direct?: number;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  tree_cover_loss?: number;
  carbon_benefits?: number;
  number_of_esrp?: number;
  field_tree_regenerated?: number;
  field_tree_survival_percent?: number;
  /**
   * @format date
   */
  start_date?: string;
  /**
   * @format date
   */
  end_date?: string;
};

export type PostV2AdminProjectMonitoringsVariables = {
  body?: PostV2AdminProjectMonitoringsRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminProjectMonitorings = (
  variables: PostV2AdminProjectMonitoringsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2AdminProjectMonitoringsResponse,
    PostV2AdminProjectMonitoringsError,
    PostV2AdminProjectMonitoringsRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/project-monitorings", method: "post", ...variables, signal });

export const usePostV2AdminProjectMonitorings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2AdminProjectMonitoringsResponse,
      PostV2AdminProjectMonitoringsError,
      PostV2AdminProjectMonitoringsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2AdminProjectMonitoringsResponse,
    PostV2AdminProjectMonitoringsError,
    PostV2AdminProjectMonitoringsVariables
  >(
    (variables: PostV2AdminProjectMonitoringsVariables) =>
      fetchPostV2AdminProjectMonitorings({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2AdminProjectMonitoringsUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminProjectMonitoringsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminProjectMonitoringsUUIDResponse = {
  uuid?: string;
  status?: string;
  total_hectares?: number;
  ha_mangrove?: number;
  ha_assisted?: number;
  ha_agroforestry?: number;
  ha_reforestation?: number;
  ha_peatland?: number;
  ha_riparian?: number;
  ha_enrichment?: number;
  ha_nucleation?: number;
  ha_silvopasture?: number;
  ha_direct?: number;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  tree_cover_loss?: number;
  carbon_benefits?: number;
  number_of_esrp?: number;
  field_tree_regenerated?: number;
  field_tree_survival_percent?: number;
  /**
   * @format date
   */
  start_date?: string;
  /**
   * @format date
   */
  end_date?: string;
  /**
   * @format date-time
   */
  last_updated?: string;
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
};

export type PutV2AdminProjectMonitoringsUUIDRequestBody = {
  status?: string;
  total_hectares?: number;
  ha_mangrove?: number;
  ha_assisted?: number;
  ha_agroforestry?: number;
  ha_reforestation?: number;
  ha_peatland?: number;
  ha_riparian?: number;
  ha_enrichment?: number;
  ha_nucleation?: number;
  ha_silvopasture?: number;
  ha_direct?: number;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  tree_cover_loss?: number;
  carbon_benefits?: number;
  number_of_esrp?: number;
  field_tree_regenerated?: number;
  field_tree_survival_percent?: number;
  /**
   * @format date
   */
  start_date?: string;
  /**
   * @format date
   */
  end_date?: string;
};

export type PutV2AdminProjectMonitoringsUUIDVariables = {
  body?: PutV2AdminProjectMonitoringsUUIDRequestBody;
  pathParams: PutV2AdminProjectMonitoringsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminProjectMonitoringsUUID = (
  variables: PutV2AdminProjectMonitoringsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2AdminProjectMonitoringsUUIDResponse,
    PutV2AdminProjectMonitoringsUUIDError,
    PutV2AdminProjectMonitoringsUUIDRequestBody,
    {},
    {},
    PutV2AdminProjectMonitoringsUUIDPathParams
  >({ url: "/v2/admin/project-monitorings/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminProjectMonitoringsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2AdminProjectMonitoringsUUIDResponse,
      PutV2AdminProjectMonitoringsUUIDError,
      PutV2AdminProjectMonitoringsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2AdminProjectMonitoringsUUIDResponse,
    PutV2AdminProjectMonitoringsUUIDError,
    PutV2AdminProjectMonitoringsUUIDVariables
  >(
    (variables: PutV2AdminProjectMonitoringsUUIDVariables) =>
      fetchPutV2AdminProjectMonitoringsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminProjectMonitoringsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminProjectMonitoringsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminProjectMonitoringsUUIDVariables = {
  pathParams: DeleteV2AdminProjectMonitoringsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminProjectMonitoringsUUID = (
  variables: DeleteV2AdminProjectMonitoringsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminProjectMonitoringsUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminProjectMonitoringsUUIDPathParams
  >({ url: "/v2/admin/project-monitorings/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminProjectMonitoringsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminProjectMonitoringsUUIDError,
      DeleteV2AdminProjectMonitoringsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminProjectMonitoringsUUIDError,
    DeleteV2AdminProjectMonitoringsUUIDVariables
  >(
    (variables: DeleteV2AdminProjectMonitoringsUUIDVariables) =>
      fetchDeleteV2AdminProjectMonitoringsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetAuthLogoutError = Fetcher.ErrorWrapper<undefined>;

export type GetAuthLogoutVariables = ApiContext["fetcherOptions"];

export const fetchGetAuthLogout = (variables: GetAuthLogoutVariables, signal?: AbortSignal) =>
  apiFetch<Record<string, any>, GetAuthLogoutError, undefined, {}, {}, {}>({
    url: "/auth/logout",
    method: "get",
    ...variables,
    signal
  });

export const useGetAuthLogout = <TData = Record<string, any>>(
  variables: GetAuthLogoutVariables,
  options?: Omit<reactQuery.UseQueryOptions<Record<string, any>, GetAuthLogoutError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Record<string, any>, GetAuthLogoutError, TData>(
    queryKeyFn({ path: "/auth/logout", operationId: "getAuthLogout", variables }),
    ({ signal }) => fetchGetAuthLogout({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetAuthMeError = Fetcher.ErrorWrapper<undefined>;

export type GetAuthMeResponse = {
  uuid?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  /**
   * @format date-time
   */
  email_address_verified_at?: string;
  role?: string;
  locale?: string;
  organisation?: {
    uuid?: string;
    name?: string;
    status?: string;
    readable_status?: string;
    users_status?: string;
    type?: string;
    created_at?: string;
    updated_at?: string;
  };
  frameworks?: {
    name?: string;
    slug?: string;
  }[];
};

export type GetAuthMeVariables = ApiContext["fetcherOptions"];

export const fetchGetAuthMe = (variables: GetAuthMeVariables, signal?: AbortSignal) =>
  apiFetch<GetAuthMeResponse, GetAuthMeError, undefined, {}, {}, {}>({
    url: "/auth/me",
    method: "get",
    ...variables,
    signal
  });

export const useGetAuthMe = <TData = GetAuthMeResponse>(
  variables: GetAuthMeVariables,
  options?: Omit<reactQuery.UseQueryOptions<GetAuthMeResponse, GetAuthMeError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetAuthMeResponse, GetAuthMeError, TData>(
    queryKeyFn({ path: "/auth/me", operationId: "getAuthMe", variables }),
    ({ signal }) => fetchGetAuthMe({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostAuthLoginError = Fetcher.ErrorWrapper<undefined>;

export type PostAuthLoginResponse = {
  token?: string;
};

export type PostAuthLoginRequestBody = {
  /**
   * @format email
   */
  email_address?: string;
  password?: string;
};

export type PostAuthLoginVariables = {
  body?: PostAuthLoginRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostAuthLogin = (variables: PostAuthLoginVariables, signal?: AbortSignal) =>
  apiFetch<PostAuthLoginResponse, PostAuthLoginError, PostAuthLoginRequestBody, {}, {}, {}>({
    url: "/auth/login",
    method: "post",
    ...variables,
    signal
  });

export const usePostAuthLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<PostAuthLoginResponse, PostAuthLoginError, PostAuthLoginVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostAuthLoginResponse, PostAuthLoginError, PostAuthLoginVariables>(
    (variables: PostAuthLoginVariables) => fetchPostAuthLogin({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminFormsSubmissionsExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsSubmissionsExportVariables = ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsSubmissionsExport = (
  variables: GetV2AdminFormsSubmissionsExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<Record<string, any>, GetV2AdminFormsSubmissionsExportError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms/submissions/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminFormsSubmissionsExport = <TData = Record<string, any>>(
  variables: GetV2AdminFormsSubmissionsExportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Record<string, any>, GetV2AdminFormsSubmissionsExportError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Record<string, any>, GetV2AdminFormsSubmissionsExportError, TData>(
    queryKeyFn({
      path: "/v2/admin/forms/submissions/export",
      operationId: "getV2AdminFormsSubmissionsExport",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsSubmissionsExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FormsOptionLabelsQueryParams = {
  /**
   * the option keys you want to retrieve
   */
  keys?: string;
  /**
   * the language to use for the label translation
   */
  lang?: string;
};

export type GetV2FormsOptionLabelsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsOptionLabelsResponse = {
  uuid?: string;
  name?: string;
  input_type?: string;
  model_key?: string;
  option_list_key?: string;
  options?: string[];
};

export type GetV2FormsOptionLabelsVariables = {
  queryParams?: GetV2FormsOptionLabelsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsOptionLabels = (variables: GetV2FormsOptionLabelsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2FormsOptionLabelsResponse,
    GetV2FormsOptionLabelsError,
    undefined,
    {},
    GetV2FormsOptionLabelsQueryParams,
    {}
  >({ url: "/v2/forms/option-labels", method: "get", ...variables, signal });

export const useGetV2FormsOptionLabels = <TData = GetV2FormsOptionLabelsResponse>(
  variables: GetV2FormsOptionLabelsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FormsOptionLabelsResponse, GetV2FormsOptionLabelsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsOptionLabelsResponse, GetV2FormsOptionLabelsError, TData>(
    queryKeyFn({ path: "/v2/forms/option-labels", operationId: "getV2FormsOptionLabels", variables }),
    ({ signal }) => fetchGetV2FormsOptionLabels({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchAuthChangeError = Fetcher.ErrorWrapper<undefined>;

export type PatchAuthChangeRequestBody = {
  token?: string;
  password?: string;
};

export type PatchAuthChangeVariables = {
  body?: PatchAuthChangeRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchAuthChange = (variables: PatchAuthChangeVariables, signal?: AbortSignal) =>
  apiFetch<Record<string, any>, PatchAuthChangeError, PatchAuthChangeRequestBody, {}, {}, {}>({
    url: "/auth/change",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchAuthChange = (
  options?: Omit<
    reactQuery.UseMutationOptions<Record<string, any>, PatchAuthChangeError, PatchAuthChangeVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Record<string, any>, PatchAuthChangeError, PatchAuthChangeVariables>(
    (variables: PatchAuthChangeVariables) => fetchPatchAuthChange({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostAuthResetError = Fetcher.ErrorWrapper<undefined>;

export type PostAuthResetRequestBody = {
  email_address?: string;
  callback_url?: string;
};

export type PostAuthResetVariables = {
  body?: PostAuthResetRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostAuthReset = (variables: PostAuthResetVariables, signal?: AbortSignal) =>
  apiFetch<Record<string, any>, PostAuthResetError, PostAuthResetRequestBody, {}, {}, {}>({
    url: "/auth/reset",
    method: "post",
    ...variables,
    signal
  });

export const usePostAuthReset = (
  options?: Omit<
    reactQuery.UseMutationOptions<Record<string, any>, PostAuthResetError, PostAuthResetVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Record<string, any>, PostAuthResetError, PostAuthResetVariables>(
    (variables: PostAuthResetVariables) => fetchPostAuthReset({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AuthVerifyError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AuthVerifyVariables = {
  body?: RequestBodies.PatchV2AuthVerifyBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AuthVerify = (variables: PatchV2AuthVerifyVariables, signal?: AbortSignal) =>
  apiFetch<Record<string, any>, PatchV2AuthVerifyError, RequestBodies.PatchV2AuthVerifyBody, {}, {}, {}>({
    url: "/v2/auth/verify",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2AuthVerify = (
  options?: Omit<
    reactQuery.UseMutationOptions<Record<string, any>, PatchV2AuthVerifyError, PatchV2AuthVerifyVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Record<string, any>, PatchV2AuthVerifyError, PatchV2AuthVerifyVariables>(
    (variables: PatchV2AuthVerifyVariables) => fetchPatchV2AuthVerify({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchAuthVerifyError = Fetcher.ErrorWrapper<undefined>;

export type PatchAuthVerifyVariables = {
  body?: RequestBodies.PatchV2AuthVerifyBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchAuthVerify = (variables: PatchAuthVerifyVariables, signal?: AbortSignal) =>
  apiFetch<Record<string, any>, PatchAuthVerifyError, RequestBodies.PatchV2AuthVerifyBody, {}, {}, {}>({
    url: "/auth/verify",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchAuthVerify = (
  options?: Omit<
    reactQuery.UseMutationOptions<Record<string, any>, PatchAuthVerifyError, PatchAuthVerifyVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Record<string, any>, PatchAuthVerifyError, PatchAuthVerifyVariables>(
    (variables: PatchAuthVerifyVariables) => fetchPatchAuthVerify({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2UsersResendError = Fetcher.ErrorWrapper<undefined>;

export type PostV2UsersResendRequestBody = {
  callback_url?: string;
  email_address?: string;
};

export type PostV2UsersResendVariables = {
  body?: PostV2UsersResendRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2UsersResend = (variables: PostV2UsersResendVariables, signal?: AbortSignal) =>
  apiFetch<Record<string, any>, PostV2UsersResendError, PostV2UsersResendRequestBody, {}, {}, {}>({
    url: "/v2/users/resend",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2UsersResend = (
  options?: Omit<
    reactQuery.UseMutationOptions<Record<string, any>, PostV2UsersResendError, PostV2UsersResendVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Record<string, any>, PostV2UsersResendError, PostV2UsersResendVariables>(
    (variables: PostV2UsersResendVariables) => fetchPostV2UsersResend({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2SitesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2SitesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2SitesUUIDVariables = {
  pathParams: DeleteV2SitesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2SitesUUID = (variables: DeleteV2SitesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2SitesUUIDError, undefined, {}, {}, DeleteV2SitesUUIDPathParams>({
    url: "/v2/sites/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2SitesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2SitesUUIDError, DeleteV2SitesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2SitesUUIDError, DeleteV2SitesUUIDVariables>(
    (variables: DeleteV2SitesUUIDVariables) => fetchDeleteV2SitesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2SitesUUIDPathParams = {
  uuid: string;
};

export type GetV2SitesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2SitesUUIDResponse = {
  data?: {
    id?: string;
    uuid?: string;
    status?: string;
    framework_key?: string;
    framework_uuid?: string;
    has_monitoring_data?: boolean;
    organisation?: {
      uuid?: string;
      type?: string;
      private?: boolean;
      name?: string;
      phone?: string;
      currency?: string;
      states?: string[];
      loan_status_types?: string[];
      land_systems?: string[];
      fund_utilisation?: string[];
      detailed_intervention_types?: string[];
      account_number_1?: string;
      account_number_2?: string;
      approach_of_marginalized_communities?: string;
      community_engagement_numbers_marginalized?: string;
      founding_date?: string;
      description?: string;
      leadership_team?: string;
      countries?: string[];
      languages?: string[];
      project_pitches?: {
        id?: string;
        uuid?: string;
        status?: string;
        readable_status?: string;
        organisation_id?: string;
        funding_programmes?: {
          id?: number;
          uuid?: string;
          name?: string;
          description?: string;
          read_more_url?: string;
          organisation_types?: string[];
          location?: string;
          status?: string;
        };
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_name?: string;
        how_discovered?: string;
        project_objectives?: string;
        project_country?: string[];
        project_county_district?: string;
        restoration_intervention_types?: string[];
        land_systems?: string[];
        tree_restoration_practices?: string[];
        total_hectares?: number;
        project_budget?: number;
        total_trees?: number;
        capacity_building_needs?: string[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        restoration_photos?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        proof_of_land_tenure_mou?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        detailed_project_budget?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        expected_active_restoration_start_date?: string;
        expected_active_restoration_end_date?: string;
        description_of_project_timeline?: string;
        proj_partner_info?: string;
        land_tenure_proj_area?: string[];
        landholder_comm_engage?: string;
        proj_success_risks?: string;
        monitor_eval_plan?: string;
        proj_boundary?: string;
        sustainable_dev_goals?: string[];
        proj_area_description?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_sites?: number;
        environmental_goals?: string;
        main_degradation_causes?: string;
        seedlings_source?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_nurseries?: number;
        curr_land_degradation?: string;
        proj_impact_socieconom?: string;
        proj_impact_foodsec?: string;
        proj_impact_watersec?: string;
        proj_impact_jobtypes?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        num_jobs_created?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_men?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_18to35?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_older35?: number;
        proj_beneficiaries?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_small?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_large?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_youth?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_classes?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_tribes?: number;
        monitoring_evaluation_plan?: string;
        main_causes_of_degradation?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      web_url?: string;
      facebook_url?: string;
      instagram_url?: string;
      linkedin_url?: string;
      twitter_url?: string;
      hq_street_1?: string;
      hq_street_2?: string;
      hq_city?: string;
      hq_state?: string;
      hq_zipcode?: string;
      hq_country?: string;
      fin_start_month?: number;
      /**
       * @format float
       */
      fin_budget_3year?: number;
      /**
       * @format float
       */
      fin_budget_2year?: number;
      /**
       * @format float
       */
      fin_budget_1year?: number;
      /**
       * @format float
       */
      fin_budget_current_year?: number;
      /**
       * @format float
       */
      ha_restored_total?: number;
      /**
       * @format float
       */
      ha_restored_3year?: number;
      relevant_experience_years?: number;
      trees_grown_total?: number;
      trees_grown_3year?: number;
      tree_care_approach?: string;
      ft_permanent_employees?: number;
      pt_permanent_employees?: number;
      temp_employees?: number;
      female_employees?: number;
      male_employees?: number;
      young_employees?: number;
      additional_funding_details?: string;
      community_experience?: string;
      total_engaged_community_members_3yr?: number;
      percent_engaged_women_3yr?: number;
      percent_engaged_men_3yr?: number;
      percent_engaged_under_35_3yr?: number;
      percent_engaged_over_35_3yr?: number;
      percent_engaged_smallholder_3yr?: number;
      total_trees_grown?: number;
      avg_tree_survival_rate?: number;
      tree_maintenance_aftercare_approach?: string;
      restored_areas_description?: string;
      monitoring_evaluation_experience?: string;
      funding_history?: string;
      engagement_farmers?: string[];
      engagement_women?: string[];
      engagement_youth?: string[];
      engagement_non_youth?: string[];
      tree_restoration_practices?: string[];
      business_model?: string;
      subtype?: string;
      organisation_revenue_this_year?: number;
      shapefiles?: {
        uuid?: string;
        shapefileable_type?: string;
        shapefileable_id?: number;
        geojson?: string;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      bank_statements?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      previous_annual_reports?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      logo?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      reference?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_2year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_last_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_this_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_next_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      legal_registration?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
    };
  }[];
};

export type GetV2SitesUUIDVariables = {
  pathParams: GetV2SitesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2SitesUUID = (variables: GetV2SitesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2SitesUUIDResponse, GetV2SitesUUIDError, undefined, {}, {}, GetV2SitesUUIDPathParams>({
    url: "/v2/sites/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2SitesUUID = <TData = GetV2SitesUUIDResponse>(
  variables: GetV2SitesUUIDVariables,
  options?: Omit<reactQuery.UseQueryOptions<GetV2SitesUUIDResponse, GetV2SitesUUIDError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2SitesUUIDResponse, GetV2SitesUUIDError, TData>(
    queryKeyFn({ path: "/v2/sites/{UUID}", operationId: "getV2SitesUUID", variables }),
    ({ signal }) => fetchGetV2SitesUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2SiteMonitoringsUUIDPathParams = {
  uuid: string;
};

export type GetV2SiteMonitoringsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2SiteMonitoringsUUIDResponse = {
  uuid?: string;
  status?: string;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  /**
   * @format date
   */
  measurement_date?: string;
  /**
   * @format date-time
   */
  last_updated?: string;
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
};

export type GetV2SiteMonitoringsUUIDVariables = {
  pathParams: GetV2SiteMonitoringsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2SiteMonitoringsUUID = (variables: GetV2SiteMonitoringsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2SiteMonitoringsUUIDResponse,
    GetV2SiteMonitoringsUUIDError,
    undefined,
    {},
    {},
    GetV2SiteMonitoringsUUIDPathParams
  >({ url: "/v2/site-monitorings/{uuid}", method: "get", ...variables, signal });

export const useGetV2SiteMonitoringsUUID = <TData = GetV2SiteMonitoringsUUIDResponse>(
  variables: GetV2SiteMonitoringsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2SiteMonitoringsUUIDResponse, GetV2SiteMonitoringsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2SiteMonitoringsUUIDResponse, GetV2SiteMonitoringsUUIDError, TData>(
    queryKeyFn({ path: "/v2/site-monitorings/{UUID}", operationId: "getV2SiteMonitoringsUUID", variables }),
    ({ signal }) => fetchGetV2SiteMonitoringsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2SitesUUIDMonitoringsPathParams = {
  uuid: string;
};

export type GetV2SitesUUIDMonitoringsQueryParams = {
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2SitesUUIDMonitoringsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2SitesUUIDMonitoringsResponse = {
  data?: {
    uuid?: string;
    status?: string;
    tree_count?: number;
    tree_cover?: number;
    field_tree_count?: number;
    /**
     * @format date
     */
    measurement_date?: string;
    /**
     * @format date-time
     */
    last_updated?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2SitesUUIDMonitoringsVariables = {
  pathParams: GetV2SitesUUIDMonitoringsPathParams;
  queryParams?: GetV2SitesUUIDMonitoringsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2SitesUUIDMonitorings = (variables: GetV2SitesUUIDMonitoringsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2SitesUUIDMonitoringsResponse,
    GetV2SitesUUIDMonitoringsError,
    undefined,
    {},
    GetV2SitesUUIDMonitoringsQueryParams,
    GetV2SitesUUIDMonitoringsPathParams
  >({ url: "/v2/sites/{uuid}/monitorings", method: "get", ...variables, signal });

export const useGetV2SitesUUIDMonitorings = <TData = GetV2SitesUUIDMonitoringsResponse>(
  variables: GetV2SitesUUIDMonitoringsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2SitesUUIDMonitoringsResponse, GetV2SitesUUIDMonitoringsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2SitesUUIDMonitoringsResponse, GetV2SitesUUIDMonitoringsError, TData>(
    queryKeyFn({ path: "/v2/sites/{UUID}/monitorings", operationId: "getV2SitesUUIDMonitorings", variables }),
    ({ signal }) => fetchGetV2SitesUUIDMonitorings({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ProjectsUUIDMonitoringsPathParams = {
  uuid: string;
};

export type GetV2ProjectsUUIDMonitoringsQueryParams = {
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2ProjectsUUIDMonitoringsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDMonitoringsResponse = {
  data?: {
    uuid?: string;
    status?: string;
    total_hectares?: number;
    ha_mangrove?: number;
    ha_assisted?: number;
    ha_agroforestry?: number;
    ha_reforestation?: number;
    ha_peatland?: number;
    ha_riparian?: number;
    ha_enrichment?: number;
    ha_nucleation?: number;
    ha_silvopasture?: number;
    ha_direct?: number;
    tree_count?: number;
    tree_cover?: number;
    field_tree_count?: number;
    tree_cover_loss?: number;
    carbon_benefits?: number;
    number_of_esrp?: number;
    field_tree_regenerated?: number;
    field_tree_survival_percent?: number;
    /**
     * @format date
     */
    start_date?: string;
    /**
     * @format date
     */
    end_date?: string;
    /**
     * @format date-time
     */
    last_updated?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2ProjectsUUIDMonitoringsVariables = {
  pathParams: GetV2ProjectsUUIDMonitoringsPathParams;
  queryParams?: GetV2ProjectsUUIDMonitoringsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectsUUIDMonitorings = (
  variables: GetV2ProjectsUUIDMonitoringsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2ProjectsUUIDMonitoringsResponse,
    GetV2ProjectsUUIDMonitoringsError,
    undefined,
    {},
    GetV2ProjectsUUIDMonitoringsQueryParams,
    GetV2ProjectsUUIDMonitoringsPathParams
  >({ url: "/v2/projects/{uuid}/monitorings", method: "get", ...variables, signal });

export const useGetV2ProjectsUUIDMonitorings = <TData = GetV2ProjectsUUIDMonitoringsResponse>(
  variables: GetV2ProjectsUUIDMonitoringsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectsUUIDMonitoringsResponse, GetV2ProjectsUUIDMonitoringsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectsUUIDMonitoringsResponse, GetV2ProjectsUUIDMonitoringsError, TData>(
    queryKeyFn({ path: "/v2/projects/{UUID}/monitorings", operationId: "getV2ProjectsUUIDMonitorings", variables }),
    ({ signal }) => fetchGetV2ProjectsUUIDMonitorings({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2ProjectsUUIDInvitePathParams = {
  uuid: string;
};

export type PostV2ProjectsUUIDInviteError = Fetcher.ErrorWrapper<undefined>;

export type PostV2ProjectsUUIDInviteResponse = {
  id?: number;
  uuid?: string;
  project_id?: number;
  email_address?: string;
  /**
   * @format datetime
   */
  accepted_at?: string;
  /**
   * @format datetime
   */
  created_at?: string;
};

export type PostV2ProjectsUUIDInviteRequestBody = {
  email_address?: string;
};

export type PostV2ProjectsUUIDInviteVariables = {
  body?: PostV2ProjectsUUIDInviteRequestBody;
  pathParams: PostV2ProjectsUUIDInvitePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2ProjectsUUIDInvite = (variables: PostV2ProjectsUUIDInviteVariables, signal?: AbortSignal) =>
  apiFetch<
    PostV2ProjectsUUIDInviteResponse,
    PostV2ProjectsUUIDInviteError,
    PostV2ProjectsUUIDInviteRequestBody,
    {},
    {},
    PostV2ProjectsUUIDInvitePathParams
  >({ url: "/v2/projects/{uuid}/invite", method: "post", ...variables, signal });

export const usePostV2ProjectsUUIDInvite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2ProjectsUUIDInviteResponse,
      PostV2ProjectsUUIDInviteError,
      PostV2ProjectsUUIDInviteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2ProjectsUUIDInviteResponse,
    PostV2ProjectsUUIDInviteError,
    PostV2ProjectsUUIDInviteVariables
  >(
    (variables: PostV2ProjectsUUIDInviteVariables) =>
      fetchPostV2ProjectsUUIDInvite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2ProjectsInviteAcceptError = Fetcher.ErrorWrapper<undefined>;

export type PostV2ProjectsInviteAcceptResponse = {
  id?: number;
  uuid?: string;
  project_id?: number;
  email_address?: string;
  /**
   * @format datetime
   */
  accepted_at?: string;
  /**
   * @format datetime
   */
  created_at?: string;
};

export type PostV2ProjectsInviteAcceptRequestBody = {
  token: string;
};

export type PostV2ProjectsInviteAcceptVariables = {
  body: PostV2ProjectsInviteAcceptRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2ProjectsInviteAccept = (variables: PostV2ProjectsInviteAcceptVariables, signal?: AbortSignal) =>
  apiFetch<
    PostV2ProjectsInviteAcceptResponse,
    PostV2ProjectsInviteAcceptError,
    PostV2ProjectsInviteAcceptRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/projects/invite/accept", method: "post", ...variables, signal });

export const usePostV2ProjectsInviteAccept = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2ProjectsInviteAcceptResponse,
      PostV2ProjectsInviteAcceptError,
      PostV2ProjectsInviteAcceptVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2ProjectsInviteAcceptResponse,
    PostV2ProjectsInviteAcceptError,
    PostV2ProjectsInviteAcceptVariables
  >(
    (variables: PostV2ProjectsInviteAcceptVariables) =>
      fetchPostV2ProjectsInviteAccept({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2ProjectsUUIDManagersPathParams = {
  uuid: string;
};

export type PostV2ProjectsUUIDManagersError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: {
        detail?: string;
      };
    }
  | {
      status: 422;
      payload: {
        detail?: string;
      };
    }
>;

export type PostV2ProjectsUUIDManagersResponse = {
  uuid?: string;
  role?: string;
  job_role?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  /**
   * allowed values Pending|Accepted
   */
  status?: string;
};

export type PostV2ProjectsUUIDManagersRequestBody = {
  email_address: string;
};

export type PostV2ProjectsUUIDManagersVariables = {
  body: PostV2ProjectsUUIDManagersRequestBody;
  pathParams: PostV2ProjectsUUIDManagersPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2ProjectsUUIDManagers = (variables: PostV2ProjectsUUIDManagersVariables, signal?: AbortSignal) =>
  apiFetch<
    PostV2ProjectsUUIDManagersResponse,
    PostV2ProjectsUUIDManagersError,
    PostV2ProjectsUUIDManagersRequestBody,
    {},
    {},
    PostV2ProjectsUUIDManagersPathParams
  >({ url: "/v2/projects/{uuid}/managers", method: "post", ...variables, signal });

export const usePostV2ProjectsUUIDManagers = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2ProjectsUUIDManagersResponse,
      PostV2ProjectsUUIDManagersError,
      PostV2ProjectsUUIDManagersVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2ProjectsUUIDManagersResponse,
    PostV2ProjectsUUIDManagersError,
    PostV2ProjectsUUIDManagersVariables
  >(
    (variables: PostV2ProjectsUUIDManagersVariables) =>
      fetchPostV2ProjectsUUIDManagers({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ProjectsUUIDManagersPathParams = {
  uuid: string;
};

export type GetV2ProjectsUUIDManagersError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDManagersResponse = {
  uuid?: string;
  role?: string;
  job_role?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  /**
   * allowed values Pending|Accepted
   */
  status?: string;
}[];

export type GetV2ProjectsUUIDManagersVariables = {
  pathParams: GetV2ProjectsUUIDManagersPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectsUUIDManagers = (variables: GetV2ProjectsUUIDManagersVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2ProjectsUUIDManagersResponse,
    GetV2ProjectsUUIDManagersError,
    undefined,
    {},
    {},
    GetV2ProjectsUUIDManagersPathParams
  >({ url: "/v2/projects/{uuid}/managers", method: "get", ...variables, signal });

export const useGetV2ProjectsUUIDManagers = <TData = GetV2ProjectsUUIDManagersResponse>(
  variables: GetV2ProjectsUUIDManagersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectsUUIDManagersResponse, GetV2ProjectsUUIDManagersError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectsUUIDManagersResponse, GetV2ProjectsUUIDManagersError, TData>(
    queryKeyFn({ path: "/v2/projects/{UUID}/managers", operationId: "getV2ProjectsUUIDManagers", variables }),
    ({ signal }) => fetchGetV2ProjectsUUIDManagers({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2ProjectsUUIDManagersUSERUUIDPathParams = {
  uuid: string;
  userUuid: string;
};

export type DeleteV2ProjectsUUIDManagersUSERUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2ProjectsUUIDManagersUSERUUIDVariables = {
  pathParams: DeleteV2ProjectsUUIDManagersUSERUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2ProjectsUUIDManagersUSERUUID = (
  variables: DeleteV2ProjectsUUIDManagersUSERUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2ProjectsUUIDManagersUSERUUIDError,
    undefined,
    {},
    {},
    DeleteV2ProjectsUUIDManagersUSERUUIDPathParams
  >({ url: "/v2/projects/{uuid}/managers/{userUuid}", method: "delete", ...variables, signal });

export const useDeleteV2ProjectsUUIDManagersUSERUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2ProjectsUUIDManagersUSERUUIDError,
      DeleteV2ProjectsUUIDManagersUSERUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2ProjectsUUIDManagersUSERUUIDError,
    DeleteV2ProjectsUUIDManagersUSERUUIDVariables
  >(
    (variables: DeleteV2ProjectsUUIDManagersUSERUUIDVariables) =>
      fetchDeleteV2ProjectsUUIDManagersUSERUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2NurseriesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2NurseriesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2NurseriesUUIDVariables = {
  pathParams: DeleteV2NurseriesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2NurseriesUUID = (variables: DeleteV2NurseriesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2NurseriesUUIDError, undefined, {}, {}, DeleteV2NurseriesUUIDPathParams>({
    url: "/v2/nurseries/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2NurseriesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2NurseriesUUIDError, DeleteV2NurseriesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2NurseriesUUIDError, DeleteV2NurseriesUUIDVariables>(
    (variables: DeleteV2NurseriesUUIDVariables) => fetchDeleteV2NurseriesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminAuditsENTITYUUIDPathParams = {
  /**
   * allowed values project/site/nursery/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2AdminAuditsENTITYUUIDQueryParams = {
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminAuditsENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminAuditsENTITYUUIDResponse = {
  data?: {
    uuid?: string;
    name?: string;
    type?: number;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type GetV2AdminAuditsENTITYUUIDVariables = {
  pathParams: GetV2AdminAuditsENTITYUUIDPathParams;
  queryParams?: GetV2AdminAuditsENTITYUUIDQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminAuditsENTITYUUID = (variables: GetV2AdminAuditsENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminAuditsENTITYUUIDResponse,
    GetV2AdminAuditsENTITYUUIDError,
    undefined,
    {},
    GetV2AdminAuditsENTITYUUIDQueryParams,
    GetV2AdminAuditsENTITYUUIDPathParams
  >({ url: "/v2/admin/audits/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2AdminAuditsENTITYUUID = <TData = GetV2AdminAuditsENTITYUUIDResponse>(
  variables: GetV2AdminAuditsENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminAuditsENTITYUUIDResponse, GetV2AdminAuditsENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminAuditsENTITYUUIDResponse, GetV2AdminAuditsENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/admin/audits/{ENTITY}/{UUID}", operationId: "getV2AdminAuditsENTITYUUID", variables }),
    ({ signal }) => fetchGetV2AdminAuditsENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2ExportImageError = Fetcher.ErrorWrapper<undefined>;

export type PostV2ExportImageRequestBody = {
  /**
   * The URL of the image to be downloaded.
   */
  uuid: string;
};

export type PostV2ExportImageVariables = {
  body: PostV2ExportImageRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2ExportImage = (variables: PostV2ExportImageVariables, signal?: AbortSignal) =>
  apiFetch<undefined, PostV2ExportImageError, PostV2ExportImageRequestBody, {}, {}, {}>({
    url: "/v2/export-image",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2ExportImage = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PostV2ExportImageError, PostV2ExportImageVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PostV2ExportImageError, PostV2ExportImageVariables>(
    (variables: PostV2ExportImageVariables) => fetchPostV2ExportImage({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2MediaUuidPathParams = {
  /**
   * UUID of the media to update
   */
  uuid: string;
};

export type PatchV2MediaUuidError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2MediaUuidResponse = {
  id?: number;
  model_id?: number;
  model_type?: string;
  collection_name?: string;
  name?: string;
  file_name?: string;
  mime_type?: string;
  disk?: string;
  size?: number;
  manipulations?: Record<string, any>;
  custom_properties?: Record<string, any>;
  responsive_images?: Record<string, any>;
  order_column?: number;
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
  description?: string;
  photographer?: string;
  is_public?: boolean;
  is_cover?: boolean;
};

export type PatchV2MediaUuidRequestBody = {
  /**
   * Name of the media
   */
  name?: string;
  /**
   * New description for the media
   */
  description?: string;
  /**
   * Name of the photographer
   */
  photographer?: string;
  /**
   * Whether the media is public or not
   */
  is_public?: boolean;
};

export type PatchV2MediaUuidVariables = {
  body?: PatchV2MediaUuidRequestBody;
  pathParams: PatchV2MediaUuidPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Update description, photographer, is_public, and is_cover attributes of a media item
 */
export const fetchPatchV2MediaUuid = (variables: PatchV2MediaUuidVariables, signal?: AbortSignal) =>
  apiFetch<
    PatchV2MediaUuidResponse,
    PatchV2MediaUuidError,
    PatchV2MediaUuidRequestBody,
    {},
    {},
    PatchV2MediaUuidPathParams
  >({ url: "/v2/media/{uuid}", method: "patch", ...variables, signal });

/**
 * Update description, photographer, is_public, and is_cover attributes of a media item
 */
export const usePatchV2MediaUuid = (
  options?: Omit<
    reactQuery.UseMutationOptions<PatchV2MediaUuidResponse, PatchV2MediaUuidError, PatchV2MediaUuidVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PatchV2MediaUuidResponse, PatchV2MediaUuidError, PatchV2MediaUuidVariables>(
    (variables: PatchV2MediaUuidVariables) => fetchPatchV2MediaUuid({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2MediaProjectProjectMediaUuidPathParams = {
  /**
   * The ID or UUID of the project.
   */
  project: string;
  /**
   * The UUID of the media item.
   */
  mediaUuid: string;
};

export type PatchV2MediaProjectProjectMediaUuidError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: {
        message?: string;
      };
    }
  | {
      status: 404;
      payload: {
        message?: string;
      };
    }
>;

export type PatchV2MediaProjectProjectMediaUuidResponse = {
  message?: string;
  mediaUuid?: string;
};

export type PatchV2MediaProjectProjectMediaUuidRequestBody = {
  /**
   * This allows PATCH requests via form submissions, used for Laravel.
   *
   * @example PATCH
   */
  _method?: string;
};

export type PatchV2MediaProjectProjectMediaUuidVariables = {
  body?: PatchV2MediaProjectProjectMediaUuidRequestBody;
  pathParams: PatchV2MediaProjectProjectMediaUuidPathParams;
} & ApiContext["fetcherOptions"];

/**
 * This endpoint allows you to update a specific media item's "is_cover" field to true.
 */
export const fetchPatchV2MediaProjectProjectMediaUuid = (
  variables: PatchV2MediaProjectProjectMediaUuidVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PatchV2MediaProjectProjectMediaUuidResponse,
    PatchV2MediaProjectProjectMediaUuidError,
    PatchV2MediaProjectProjectMediaUuidRequestBody,
    {},
    {},
    PatchV2MediaProjectProjectMediaUuidPathParams
  >({ url: "/v2/media/project/{project}/{mediaUuid}", method: "patch", ...variables, signal });

/**
 * This endpoint allows you to update a specific media item's "is_cover" field to true.
 */
export const usePatchV2MediaProjectProjectMediaUuid = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2MediaProjectProjectMediaUuidResponse,
      PatchV2MediaProjectProjectMediaUuidError,
      PatchV2MediaProjectProjectMediaUuidVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2MediaProjectProjectMediaUuidResponse,
    PatchV2MediaProjectProjectMediaUuidError,
    PatchV2MediaProjectProjectMediaUuidVariables
  >(
    (variables: PatchV2MediaProjectProjectMediaUuidVariables) =>
      fetchPatchV2MediaProjectProjectMediaUuid({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminENTITYExportFRAMEWORKPathParams = {
  /**
   * allowed values projects/sites/nurseries/project-reports/site-reports/nursery-reports
   */
  entity: string;
  /**
   * allowed values terrafund/ppc
   */
  framework: string;
};

export type GetV2AdminENTITYExportFRAMEWORKError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminENTITYExportFRAMEWORKVariables = {
  pathParams: GetV2AdminENTITYExportFRAMEWORKPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminENTITYExportFRAMEWORK = (
  variables: GetV2AdminENTITYExportFRAMEWORKVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetV2AdminENTITYExportFRAMEWORKError, undefined, {}, {}, GetV2AdminENTITYExportFRAMEWORKPathParams>({
    url: "/v2/admin/{entity}/export/{framework}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminENTITYExportFRAMEWORK = <TData = Blob>(
  variables: GetV2AdminENTITYExportFRAMEWORKVariables,
  options?: Omit<reactQuery.UseQueryOptions<Blob, GetV2AdminENTITYExportFRAMEWORKError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetV2AdminENTITYExportFRAMEWORKError, TData>(
    queryKeyFn({
      path: "/v2/admin/{ENTITY}/export/{FRAMEWORK}",
      operationId: "getV2AdminENTITYExportFRAMEWORK",
      variables
    }),
    ({ signal }) => fetchGetV2AdminENTITYExportFRAMEWORK({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ProjectsUUIDENTITYExportPathParams = {
  /**
   * allowed values sites|nurseries|project-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2ProjectsUUIDENTITYExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDENTITYExportVariables = {
  pathParams: GetV2ProjectsUUIDENTITYExportPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectsUUIDENTITYExport = (
  variables: GetV2ProjectsUUIDENTITYExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetV2ProjectsUUIDENTITYExportError, undefined, {}, {}, GetV2ProjectsUUIDENTITYExportPathParams>({
    url: "/v2/projects/{uuid}/{entity}/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ProjectsUUIDENTITYExport = <TData = Blob>(
  variables: GetV2ProjectsUUIDENTITYExportVariables,
  options?: Omit<reactQuery.UseQueryOptions<Blob, GetV2ProjectsUUIDENTITYExportError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetV2ProjectsUUIDENTITYExportError, TData>(
    queryKeyFn({
      path: "/v2/projects/{UUID}/{ENTITY}/export",
      operationId: "getV2ProjectsUUIDENTITYExport",
      variables
    }),
    ({ signal }) => fetchGetV2ProjectsUUIDENTITYExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ENTITYUUIDExportPathParams = {
  /**
   * allowed values sites|nurseries|projects|project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2ENTITYUUIDExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ENTITYUUIDExportVariables = {
  pathParams: GetV2ENTITYUUIDExportPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ENTITYUUIDExport = (variables: GetV2ENTITYUUIDExportVariables, signal?: AbortSignal) =>
  apiFetch<Blob, GetV2ENTITYUUIDExportError, undefined, {}, {}, GetV2ENTITYUUIDExportPathParams>({
    url: "/v2/{entity}/{uuid}/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ENTITYUUIDExport = <TData = Blob>(
  variables: GetV2ENTITYUUIDExportVariables,
  options?: Omit<reactQuery.UseQueryOptions<Blob, GetV2ENTITYUUIDExportError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetV2ENTITYUUIDExportError, TData>(
    queryKeyFn({ path: "/v2/{ENTITY}/{UUID}/export", operationId: "getV2ENTITYUUIDExport", variables }),
    ({ signal }) => fetchGetV2ENTITYUUIDExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2TerrafundValidationPolygonQueryParams = {
  /**
   * The UUID of the polygon
   */
  uuid: string;
};

export type PostV2TerrafundValidationPolygonError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundValidationPolygonResponse = {
  /**
   * The ID of the polygon
   */
  polygon_id?: string;
  /**
   * List of validation criteria
   */
  criteria_list?: {
    /**
     * The ID of the criteria
     */
    criteria_id?: number;
    /**
     * The latest created at timestamp of the criteria
     *
     * @format date-time
     */
    latest_created_at?: string;
    /**
     * Indicates if the criteria is valid or not (1 for valid, 0 for invalid)
     */
    valid?: number;
    /**
     * Extra information about the polygon validation
     */
    extra_info?: Record<string, any>;
  }[];
};

export type PostV2TerrafundValidationPolygonVariables = {
  queryParams: PostV2TerrafundValidationPolygonQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2TerrafundValidationPolygon = (
  variables: PostV2TerrafundValidationPolygonVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2TerrafundValidationPolygonResponse,
    PostV2TerrafundValidationPolygonError,
    undefined,
    {},
    PostV2TerrafundValidationPolygonQueryParams,
    {}
  >({ url: "/v2/terrafund/validation/polygon", method: "post", ...variables, signal });

export const usePostV2TerrafundValidationPolygon = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2TerrafundValidationPolygonResponse,
      PostV2TerrafundValidationPolygonError,
      PostV2TerrafundValidationPolygonVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2TerrafundValidationPolygonResponse,
    PostV2TerrafundValidationPolygonError,
    PostV2TerrafundValidationPolygonVariables
  >(
    (variables: PostV2TerrafundValidationPolygonVariables) =>
      fetchPostV2TerrafundValidationPolygon({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2TerrafundValidationCriteriaDataQueryParams = {
  /**
   * The UUID of the polygon
   */
  uuid: string;
};

export type GetV2TerrafundValidationCriteriaDataError = Fetcher.ErrorWrapper<undefined>;

export type GetV2TerrafundValidationCriteriaDataResponse = {
  /**
   * The ID of the polygon
   */
  polygon_id?: string;
  /**
   * List of validation criteria
   */
  criteria_list?: {
    /**
     * The ID of the criteria
     */
    criteria_id?: number;
    /**
     * The latest created at timestamp of the criteria
     *
     * @format date-time
     */
    latest_created_at?: string;
    /**
     * Indicates if the criteria is valid or not (1 for valid, 0 for invalid)
     */
    valid?: number;
    /**
     * Extra information about the polygon validation
     */
    extra_info?: Record<string, any>;
  }[];
};

export type GetV2TerrafundValidationCriteriaDataVariables = {
  queryParams: GetV2TerrafundValidationCriteriaDataQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2TerrafundValidationCriteriaData = (
  variables: GetV2TerrafundValidationCriteriaDataVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2TerrafundValidationCriteriaDataResponse,
    GetV2TerrafundValidationCriteriaDataError,
    undefined,
    {},
    GetV2TerrafundValidationCriteriaDataQueryParams,
    {}
  >({ url: "/v2/terrafund/validation/criteria-data", method: "get", ...variables, signal });

export const useGetV2TerrafundValidationCriteriaData = <TData = GetV2TerrafundValidationCriteriaDataResponse>(
  variables: GetV2TerrafundValidationCriteriaDataVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2TerrafundValidationCriteriaDataResponse,
      GetV2TerrafundValidationCriteriaDataError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetV2TerrafundValidationCriteriaDataResponse,
    GetV2TerrafundValidationCriteriaDataError,
    TData
  >(
    queryKeyFn({
      path: "/v2/terrafund/validation/criteria-data",
      operationId: "getV2TerrafundValidationCriteriaData",
      variables
    }),
    ({ signal }) => fetchGetV2TerrafundValidationCriteriaData({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2TerrafundValidationSitePolygonsQueryParams = {
  /**
   * The UUID of the polygon
   */
  uuid: string;
};

export type PostV2TerrafundValidationSitePolygonsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundValidationSitePolygonsResponse = {
  /**
   * A message indicating the completion of validation for all site polygons.
   */
  message?: string;
};

export type PostV2TerrafundValidationSitePolygonsVariables = {
  queryParams: PostV2TerrafundValidationSitePolygonsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2TerrafundValidationSitePolygons = (
  variables: PostV2TerrafundValidationSitePolygonsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2TerrafundValidationSitePolygonsResponse,
    PostV2TerrafundValidationSitePolygonsError,
    undefined,
    {},
    PostV2TerrafundValidationSitePolygonsQueryParams,
    {}
  >({ url: "/v2/terrafund/validation/sitePolygons", method: "post", ...variables, signal });

export const usePostV2TerrafundValidationSitePolygons = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2TerrafundValidationSitePolygonsResponse,
      PostV2TerrafundValidationSitePolygonsError,
      PostV2TerrafundValidationSitePolygonsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2TerrafundValidationSitePolygonsResponse,
    PostV2TerrafundValidationSitePolygonsError,
    PostV2TerrafundValidationSitePolygonsVariables
  >(
    (variables: PostV2TerrafundValidationSitePolygonsVariables) =>
      fetchPostV2TerrafundValidationSitePolygons({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2TerrafundValidationSiteQueryParams = {
  /**
   * The UUID of the polygon
   */
  uuid: string;
};

export type GetV2TerrafundValidationSiteError = Fetcher.ErrorWrapper<undefined>;

export type GetV2TerrafundValidationSiteResponse = {
  /**
   * The UUID of the polygon.
   */
  uuid?: string;
  /**
   * Indicates if the polygon is valid or not.
   */
  valid?: boolean;
  /**
   * Indicates if the polygon has been checked before or not.
   */
  checked?: boolean;
  /**
   * List of criteria that are not valid.
   */
  nonValidCriteria?: Record<string, any>[];
}[];

export type GetV2TerrafundValidationSiteVariables = {
  queryParams: GetV2TerrafundValidationSiteQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2TerrafundValidationSite = (
  variables: GetV2TerrafundValidationSiteVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2TerrafundValidationSiteResponse,
    GetV2TerrafundValidationSiteError,
    undefined,
    {},
    GetV2TerrafundValidationSiteQueryParams,
    {}
  >({ url: "/v2/terrafund/validation/site", method: "get", ...variables, signal });

export const useGetV2TerrafundValidationSite = <TData = GetV2TerrafundValidationSiteResponse>(
  variables: GetV2TerrafundValidationSiteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2TerrafundValidationSiteResponse, GetV2TerrafundValidationSiteError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2TerrafundValidationSiteResponse, GetV2TerrafundValidationSiteError, TData>(
    queryKeyFn({ path: "/v2/terrafund/validation/site", operationId: "getV2TerrafundValidationSite", variables }),
    ({ signal }) => fetchGetV2TerrafundValidationSite({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2GeometryValidateError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: {
    /**
     * This array is ordered in the same order as the original geometries. If a given geometry had no errors, an empty array is included in its spot.
     */
    errors?: {
      key?:
        | "SELF_INTERSECTION"
        | "COORDINATE_SYSTEM"
        | "SIZE_LIMIT"
        | "SPIKE"
        | "GEOMETRY_TYPE"
        | "TABLE_SCHEMA"
        | "DATA_COMPLETED";
      /**
       * Human readable string in English to describe the error.
       */
      message?: string;
      /**
       * A path string indicating where the error occurred.
       */
      field?: string;
    }[][];
  };
}>;

export type PostV2GeometryValidateResponse = {
  /**
   * An empty array on the OK response is included for ease of parsing on the client side.
   */
  errors?: any[];
};

export type PostV2GeometryValidateVariables = {
  body?: RequestBodies.PostV2GeometryValidateBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2GeometryValidate = (variables: PostV2GeometryValidateVariables, signal?: AbortSignal) =>
  apiFetch<
    PostV2GeometryValidateResponse,
    PostV2GeometryValidateError,
    RequestBodies.PostV2GeometryValidateBody,
    {},
    {},
    {}
  >({ url: "/v2/geometry/validate", method: "post", ...variables, signal });

export const usePostV2GeometryValidate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2GeometryValidateResponse,
      PostV2GeometryValidateError,
      PostV2GeometryValidateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2GeometryValidateResponse,
    PostV2GeometryValidateError,
    PostV2GeometryValidateVariables
  >(
    (variables: PostV2GeometryValidateVariables) => fetchPostV2GeometryValidate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2GeometryError = Fetcher.ErrorWrapper<undefined>;

export type PostV2GeometryResponse = {
  /**
   * The UUIDs generated by the system for the uploaded geometry at this index. For a polygon geometry, this
   * always be an array with 1 member. For Point geometry, there will be the same number of UUIDS associated as
   * there were Points in the request payload at this index, and the order will be the same.
   */
  polygon_uuids?: string[];
  /**
   * Mapping of polygon UUID to the errors associated with the polygon. The geometry was saved in the DB and must be updated instead of created once the issues are resolved.
   */
  errors?: {
    [key: string]: {
      key?:
        | "OVERLAPPING_POLYGON"
        | "SELF_INTERSECTION"
        | "COORDINATE_SYSTEM"
        | "SIZE_LIMIT"
        | "WITHIN_COUNTRY"
        | "SPIKE"
        | "GEOMETRY_TYPE"
        | "TOTAL_AREA_EXPECTED"
        | "TABLE_SCHEMA"
        | "DATA_COMPLETED";
      /**
       * Human readable string in English to describe the error.
       */
      message?: string;
    }[];
  };
}[];

export type PostV2GeometryVariables = {
  body?: RequestBodies.PostV2GeometryValidateBody;
} & ApiContext["fetcherOptions"];

/**
 * Takes an array of geometries and adds them to the sites indicated. For each geometry, it may either be a
 * single Polygon or it may be a FeatureCollection of Points.
 *
 * The response is an array of objects. Each index in the response corresponds to the geometry at the same index in the
 * request payload.
 */
export const fetchPostV2Geometry = (variables: PostV2GeometryVariables, signal?: AbortSignal) =>
  apiFetch<PostV2GeometryResponse, PostV2GeometryError, RequestBodies.PostV2GeometryValidateBody, {}, {}, {}>({
    url: "/v2/geometry",
    method: "post",
    ...variables,
    signal
  });

/**
 * Takes an array of geometries and adds them to the sites indicated. For each geometry, it may either be a
 * single Polygon or it may be a FeatureCollection of Points.
 *
 * The response is an array of objects. Each index in the response corresponds to the geometry at the same index in the
 * request payload.
 */
export const usePostV2Geometry = (
  options?: Omit<
    reactQuery.UseMutationOptions<PostV2GeometryResponse, PostV2GeometryError, PostV2GeometryVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2GeometryResponse, PostV2GeometryError, PostV2GeometryVariables>(
    (variables: PostV2GeometryVariables) => fetchPostV2Geometry({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2GeometryQueryParams = {
  ["uuids[]"]: string[];
};

export type DeleteV2GeometryError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2GeometryVariables = {
  queryParams: DeleteV2GeometryQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2Geometry = (variables: DeleteV2GeometryVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2GeometryError, undefined, {}, DeleteV2GeometryQueryParams, {}>({
    url: "/v2/geometry",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2Geometry = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2GeometryError, DeleteV2GeometryVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2GeometryError, DeleteV2GeometryVariables>(
    (variables: DeleteV2GeometryVariables) => fetchDeleteV2Geometry({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2GeometryUUIDPathParams = {
  uuid: string;
};

export type PutV2GeometryUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2GeometryUUIDResponse = {
  errors?: {
    key?:
      | "OVERLAPPING_POLYGON"
      | "SELF_INTERSECTION"
      | "COORDINATE_SYSTEM"
      | "SIZE_LIMIT"
      | "WITHIN_COUNTRY"
      | "SPIKE"
      | "GEOMETRY_TYPE"
      | "TOTAL_AREA_EXPECTED"
      | "TABLE_SCHEMA"
      | "DATA_COMPLETED";
    /**
     * Human readable string in English to describe the error.
     */
    message?: string;
  }[];
};

export type PutV2GeometryUUIDVariables = {
  body?: RequestBodies.PutV2GeometryBody;
  pathParams: PutV2GeometryUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2GeometryUUID = (variables: PutV2GeometryUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PutV2GeometryUUIDResponse,
    PutV2GeometryUUIDError,
    RequestBodies.PutV2GeometryBody,
    {},
    {},
    PutV2GeometryUUIDPathParams
  >({ url: "/v2/geometry/{uuid}", method: "put", ...variables, signal });

export const usePutV2GeometryUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<PutV2GeometryUUIDResponse, PutV2GeometryUUIDError, PutV2GeometryUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PutV2GeometryUUIDResponse, PutV2GeometryUUIDError, PutV2GeometryUUIDVariables>(
    (variables: PutV2GeometryUUIDVariables) => fetchPutV2GeometryUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2GeometryUUIDNewVersionPathParams = {
  uuid: string;
};

export type PostV2GeometryUUIDNewVersionError = Fetcher.ErrorWrapper<undefined>;

export type PostV2GeometryUUIDNewVersionResponse = {
  errors?: {
    key?:
      | "OVERLAPPING_POLYGON"
      | "SELF_INTERSECTION"
      | "COORDINATE_SYSTEM"
      | "SIZE_LIMIT"
      | "WITHIN_COUNTRY"
      | "SPIKE"
      | "GEOMETRY_TYPE"
      | "TOTAL_AREA_EXPECTED"
      | "TABLE_SCHEMA"
      | "DATA_COMPLETED";
    /**
     * Human readable string in English to describe the error.
     */
    message?: string;
  }[];
};

export type PostV2GeometryUUIDNewVersionVariables = {
  body?: RequestBodies.PutV2GeometryBody;
  pathParams: PostV2GeometryUUIDNewVersionPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2GeometryUUIDNewVersion = (
  variables: PostV2GeometryUUIDNewVersionVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2GeometryUUIDNewVersionResponse,
    PostV2GeometryUUIDNewVersionError,
    RequestBodies.PutV2GeometryBody,
    {},
    {},
    PostV2GeometryUUIDNewVersionPathParams
  >({ url: "/v2/geometry/{uuid}/new-version", method: "post", ...variables, signal });

export const usePostV2GeometryUUIDNewVersion = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2GeometryUUIDNewVersionResponse,
      PostV2GeometryUUIDNewVersionError,
      PostV2GeometryUUIDNewVersionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2GeometryUUIDNewVersionResponse,
    PostV2GeometryUUIDNewVersionError,
    PostV2GeometryUUIDNewVersionVariables
  >(
    (variables: PostV2GeometryUUIDNewVersionVariables) =>
      fetchPostV2GeometryUUIDNewVersion({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AuditStatusENTITYUUIDPathParams = {
  /**
   * allowed values project/site/site-polygon
   */
  entity: string;
  uuid: string;
};

export type GetV2AuditStatusENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AuditStatusENTITYUUIDResponse = {
  id?: string;
  uuid?: string;
  entity_name?: string;
  status?: string;
  comment?: string;
  first_name?: string;
  last_name?: string;
  type?: string;
  is_submitted?: boolean;
  is_active?: boolean;
  request_removed?: boolean;
  /**
   * @format date
   */
  date_created?: string;
  created_by?: string;
  attachments?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
}[];

export type GetV2AuditStatusENTITYUUIDVariables = {
  pathParams: GetV2AuditStatusENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AuditStatusENTITYUUID = (variables: GetV2AuditStatusENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AuditStatusENTITYUUIDResponse,
    GetV2AuditStatusENTITYUUIDError,
    undefined,
    {},
    {},
    GetV2AuditStatusENTITYUUIDPathParams
  >({ url: "/v2/audit-status/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2AuditStatusENTITYUUID = <TData = GetV2AuditStatusENTITYUUIDResponse>(
  variables: GetV2AuditStatusENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AuditStatusENTITYUUIDResponse, GetV2AuditStatusENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AuditStatusENTITYUUIDResponse, GetV2AuditStatusENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/audit-status/{ENTITY}/{UUID}", operationId: "getV2AuditStatusENTITYUUID", variables }),
    ({ signal }) => fetchGetV2AuditStatusENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2AuditStatusENTITYUUIDPathParams = {
  /**
   * allowed values project/site/site-polygon
   */
  entity: string;
  uuid: string;
};

export type PostV2AuditStatusENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AuditStatusENTITYUUIDResponse = {
  id?: string;
  uuid?: string;
  entity_name?: string;
  status?: string;
  comment?: string;
  first_name?: string;
  last_name?: string;
  type?: string;
  is_submitted?: boolean;
  is_active?: boolean;
  request_removed?: boolean;
  /**
   * @format date
   */
  date_created?: string;
  created_by?: string;
  attachments?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
};

export type PostV2AuditStatusENTITYUUIDRequestBody = {
  status?: string;
  comment?: string;
  type?: string;
  is_active?: boolean;
  request_removed?: boolean;
};

export type PostV2AuditStatusENTITYUUIDVariables = {
  body?: PostV2AuditStatusENTITYUUIDRequestBody;
  pathParams: PostV2AuditStatusENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AuditStatusENTITYUUID = (
  variables: PostV2AuditStatusENTITYUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2AuditStatusENTITYUUIDResponse,
    PostV2AuditStatusENTITYUUIDError,
    PostV2AuditStatusENTITYUUIDRequestBody,
    {},
    {},
    PostV2AuditStatusENTITYUUIDPathParams
  >({ url: "/v2/audit-status/{entity}/{uuid}", method: "post", ...variables, signal });

export const usePostV2AuditStatusENTITYUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2AuditStatusENTITYUUIDResponse,
      PostV2AuditStatusENTITYUUIDError,
      PostV2AuditStatusENTITYUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2AuditStatusENTITYUUIDResponse,
    PostV2AuditStatusENTITYUUIDError,
    PostV2AuditStatusENTITYUUIDVariables
  >(
    (variables: PostV2AuditStatusENTITYUUIDVariables) =>
      fetchPostV2AuditStatusENTITYUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2SitesSitePolygonPathParams = {
  /**
   * The ID of the site
   */
  site: string;
};

export type GetV2SitesSitePolygonError = Fetcher.ErrorWrapper<undefined>;

export type GetV2SitesSitePolygonResponse = {
  id?: number;
  uuid?: string;
  primary_uuid?: string;
  project_id?: string;
  proj_name?: string;
  org_name?: string;
  poly_id?: string;
  poly_name?: string;
  site_id?: string;
  site_name?: string;
  /**
   * @format date
   */
  plantstart?: string;
  /**
   * @format date
   */
  plantend?: string;
  practice?: string;
  target_sys?: string;
  distr?: string;
  num_trees?: number;
  /**
   * @format float
   */
  calc_area?: number;
  created_by?: string;
  last_modified_by?: string;
  /**
   * @format date-time
   */
  deleted_at?: string;
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
  status?: string;
  source?: string;
  country?: string;
  is_active?: boolean;
  version_name?: string;
}[];

export type GetV2SitesSitePolygonVariables = {
  pathParams: GetV2SitesSitePolygonPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2SitesSitePolygon = (variables: GetV2SitesSitePolygonVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2SitesSitePolygonResponse,
    GetV2SitesSitePolygonError,
    undefined,
    {},
    {},
    GetV2SitesSitePolygonPathParams
  >({ url: "/v2/sites/{site}/polygon", method: "get", ...variables, signal });

export const useGetV2SitesSitePolygon = <TData = GetV2SitesSitePolygonResponse>(
  variables: GetV2SitesSitePolygonVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2SitesSitePolygonResponse, GetV2SitesSitePolygonError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2SitesSitePolygonResponse, GetV2SitesSitePolygonError, TData>(
    queryKeyFn({ path: "/v2/sites/{site}/polygon", operationId: "getV2SitesSitePolygon", variables }),
    ({ signal }) => fetchGetV2SitesSitePolygon({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2SitesSiteBboxPathParams = {
  /**
   * The ID of the site
   */
  site: string;
};

export type GetV2SitesSiteBboxError = Fetcher.ErrorWrapper<undefined>;

export type GetV2SitesSiteBboxResponse = {
  bbox?: number[];
};

export type GetV2SitesSiteBboxVariables = {
  pathParams: GetV2SitesSiteBboxPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2SitesSiteBbox = (variables: GetV2SitesSiteBboxVariables, signal?: AbortSignal) =>
  apiFetch<GetV2SitesSiteBboxResponse, GetV2SitesSiteBboxError, undefined, {}, {}, GetV2SitesSiteBboxPathParams>({
    url: "/v2/sites/{site}/bbox",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2SitesSiteBbox = <TData = GetV2SitesSiteBboxResponse>(
  variables: GetV2SitesSiteBboxVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2SitesSiteBboxResponse, GetV2SitesSiteBboxError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2SitesSiteBboxResponse, GetV2SitesSiteBboxError, TData>(
    queryKeyFn({ path: "/v2/sites/{site}/bbox", operationId: "getV2SitesSiteBbox", variables }),
    ({ signal }) => fetchGetV2SitesSiteBbox({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2TerrafundSitePolygonUuidSiteUuidPathParams = {
  /**
   * The UUID of the polygon related
   */
  uuid: string;
  /**
   * The UUID of the site
   */
  siteUuid: string;
};

export type PostV2TerrafundSitePolygonUuidSiteUuidError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundSitePolygonUuidSiteUuidResponse = {
  /**
   * @example Site polygon created successfully
   */
  message?: string;
  /**
   * UUID of the created site polygon
   */
  uuid?: string;
  /**
   * Calculated area in hectares
   *
   * @format double
   */
  area?: number;
};

export type PostV2TerrafundSitePolygonUuidSiteUuidVariables = {
  body?: RequestBodies.Body;
  pathParams: PostV2TerrafundSitePolygonUuidSiteUuidPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2TerrafundSitePolygonUuidSiteUuid = (
  variables: PostV2TerrafundSitePolygonUuidSiteUuidVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2TerrafundSitePolygonUuidSiteUuidResponse,
    PostV2TerrafundSitePolygonUuidSiteUuidError,
    RequestBodies.Body,
    {},
    {},
    PostV2TerrafundSitePolygonUuidSiteUuidPathParams
  >({ url: "/v2/terrafund/site-polygon/{uuid}/{siteUuid}", method: "post", ...variables, signal });

export const usePostV2TerrafundSitePolygonUuidSiteUuid = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2TerrafundSitePolygonUuidSiteUuidResponse,
      PostV2TerrafundSitePolygonUuidSiteUuidError,
      PostV2TerrafundSitePolygonUuidSiteUuidVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2TerrafundSitePolygonUuidSiteUuidResponse,
    PostV2TerrafundSitePolygonUuidSiteUuidError,
    PostV2TerrafundSitePolygonUuidSiteUuidVariables
  >(
    (variables: PostV2TerrafundSitePolygonUuidSiteUuidVariables) =>
      fetchPostV2TerrafundSitePolygonUuidSiteUuid({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2TerrafundPolygonBboxUuidPathParams = {
  /**
   * The UUID of the polygon
   */
  uuid: string;
};

export type GetV2TerrafundPolygonBboxUuidError = Fetcher.ErrorWrapper<undefined>;

export type GetV2TerrafundPolygonBboxUuidResponse = {
  bbox?: number[];
};

export type GetV2TerrafundPolygonBboxUuidVariables = {
  pathParams: GetV2TerrafundPolygonBboxUuidPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2TerrafundPolygonBboxUuid = (
  variables: GetV2TerrafundPolygonBboxUuidVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2TerrafundPolygonBboxUuidResponse,
    GetV2TerrafundPolygonBboxUuidError,
    undefined,
    {},
    {},
    GetV2TerrafundPolygonBboxUuidPathParams
  >({ url: "/v2/terrafund/polygon/bbox/{uuid}", method: "get", ...variables, signal });

export const useGetV2TerrafundPolygonBboxUuid = <TData = GetV2TerrafundPolygonBboxUuidResponse>(
  variables: GetV2TerrafundPolygonBboxUuidVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2TerrafundPolygonBboxUuidResponse, GetV2TerrafundPolygonBboxUuidError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2TerrafundPolygonBboxUuidResponse, GetV2TerrafundPolygonBboxUuidError, TData>(
    queryKeyFn({ path: "/v2/terrafund/polygon/bbox/{uuid}", operationId: "getV2TerrafundPolygonBboxUuid", variables }),
    ({ signal }) => fetchGetV2TerrafundPolygonBboxUuid({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2TerrafundGeojsonCompleteQueryParams = {
  /**
   * UUID of the polygon geometry.
   */
  uuid: string;
};

export type GetV2TerrafundGeojsonCompleteError = Fetcher.ErrorWrapper<undefined>;

export type GetV2TerrafundGeojsonCompleteResponse = {
  type?: string;
  features?: {
    type?: string;
    geometry?: {
      type?: string;
      coordinates?: any[];
    };
    properties?: {
      poly_name?: string;
      plantstart?: string;
      plantend?: string;
      practice?: string;
      target_sys?: string;
      distr?: string;
      num_trees?: number;
    };
  }[];
};

export type GetV2TerrafundGeojsonCompleteVariables = {
  queryParams: GetV2TerrafundGeojsonCompleteQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Retrieve polygon geometry and properties as GeoJSON.
 */
export const fetchGetV2TerrafundGeojsonComplete = (
  variables: GetV2TerrafundGeojsonCompleteVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2TerrafundGeojsonCompleteResponse,
    GetV2TerrafundGeojsonCompleteError,
    undefined,
    {},
    GetV2TerrafundGeojsonCompleteQueryParams,
    {}
  >({ url: "/v2/terrafund/geojson/complete", method: "get", ...variables, signal });

/**
 * Retrieve polygon geometry and properties as GeoJSON.
 */
export const useGetV2TerrafundGeojsonComplete = <TData = GetV2TerrafundGeojsonCompleteResponse>(
  variables: GetV2TerrafundGeojsonCompleteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2TerrafundGeojsonCompleteResponse, GetV2TerrafundGeojsonCompleteError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2TerrafundGeojsonCompleteResponse, GetV2TerrafundGeojsonCompleteError, TData>(
    queryKeyFn({ path: "/v2/terrafund/geojson/complete", operationId: "getV2TerrafundGeojsonComplete", variables }),
    ({ signal }) => fetchGetV2TerrafundGeojsonComplete({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2TerrafundPolygonUuidPathParams = {
  /**
   * The UUID of the site polygon.
   */
  uuid: string;
};

export type GetV2TerrafundPolygonUuidError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: {
        /**
         * @example No site polygons found for the given UUID.
         */
        message?: string;
      };
    }
  | {
      status: 500;
      payload: {
        /**
         * @example An error message describing the issue.
         */
        message?: string;
      };
    }
>;

export type GetV2TerrafundPolygonUuidResponse = {
  site_polygon?: {
    calc_area?: number;
    /**
     * @format date-time
     */
    created_at?: string;
    created_by?: string | null;
    /**
     * @format date-time
     */
    deleted_at?: string | null;
    distr?: string | null;
    id?: number;
    last_modified_by?: string | null;
    num_trees?: number | null;
    /**
     * @format date
     */
    plantend?: string | null;
    /**
     * @format date
     */
    plantstart?: string;
    point_id?: string | null;
    poly_id?: string;
    poly_name?: string;
    practice?: string | null;
    site_id?: string | null;
    site_name?: string;
    status?: string;
    target_sys?: string | null;
    /**
     * @format date-time
     */
    updated_at?: string;
    uuid?: string;
  };
};

export type GetV2TerrafundPolygonUuidVariables = {
  pathParams: GetV2TerrafundPolygonUuidPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Retrieve site polygon data for the given UUID.
 */
export const fetchGetV2TerrafundPolygonUuid = (variables: GetV2TerrafundPolygonUuidVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2TerrafundPolygonUuidResponse,
    GetV2TerrafundPolygonUuidError,
    undefined,
    {},
    {},
    GetV2TerrafundPolygonUuidPathParams
  >({ url: "/v2/terrafund/polygon/{uuid}", method: "get", ...variables, signal });

/**
 * Retrieve site polygon data for the given UUID.
 */
export const useGetV2TerrafundPolygonUuid = <TData = GetV2TerrafundPolygonUuidResponse>(
  variables: GetV2TerrafundPolygonUuidVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2TerrafundPolygonUuidResponse, GetV2TerrafundPolygonUuidError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2TerrafundPolygonUuidResponse, GetV2TerrafundPolygonUuidError, TData>(
    queryKeyFn({ path: "/v2/terrafund/polygon/{uuid}", operationId: "getV2TerrafundPolygonUuid", variables }),
    ({ signal }) => fetchGetV2TerrafundPolygonUuid({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2TerrafundPolygonUuidPathParams = {
  /**
   * The UUID of the polygon geometry to update
   */
  uuid: string;
};

export type PutV2TerrafundPolygonUuidError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: {
        /**
         * @example No polygon geometry found for the given UUID.
         */
        message?: string;
      };
    }
  | {
      status: 500;
      payload: {
        /**
         * @example Internal Server Error
         */
        error?: string;
      };
    }
>;

export type PutV2TerrafundPolygonUuidResponse = {
  /**
   * @example Geometry updated successfully.
   */
  message?: string;
  /**
   * The updated geometry data
   */
  geometry?: Record<string, any>;
  uuid?: string;
};

export type PutV2TerrafundPolygonUuidRequestBody = {
  geometry?: string;
};

export type PutV2TerrafundPolygonUuidVariables = {
  body?: PutV2TerrafundPolygonUuidRequestBody;
  pathParams: PutV2TerrafundPolygonUuidPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2TerrafundPolygonUuid = (variables: PutV2TerrafundPolygonUuidVariables, signal?: AbortSignal) =>
  apiFetch<
    PutV2TerrafundPolygonUuidResponse,
    PutV2TerrafundPolygonUuidError,
    PutV2TerrafundPolygonUuidRequestBody,
    {},
    {},
    PutV2TerrafundPolygonUuidPathParams
  >({ url: "/v2/terrafund/polygon/{uuid}", method: "put", ...variables, signal });

export const usePutV2TerrafundPolygonUuid = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2TerrafundPolygonUuidResponse,
      PutV2TerrafundPolygonUuidError,
      PutV2TerrafundPolygonUuidVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2TerrafundPolygonUuidResponse,
    PutV2TerrafundPolygonUuidError,
    PutV2TerrafundPolygonUuidVariables
  >(
    (variables: PutV2TerrafundPolygonUuidVariables) =>
      fetchPutV2TerrafundPolygonUuid({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2TerrafundPolygonUuidPathParams = {
  /**
   * The UUID of the polygon geometry to delete
   */
  uuid: string;
};

export type DeleteV2TerrafundPolygonUuidError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2TerrafundPolygonUuidVariables = {
  pathParams: DeleteV2TerrafundPolygonUuidPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2TerrafundPolygonUuid = (
  variables: DeleteV2TerrafundPolygonUuidVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteV2TerrafundPolygonUuidError, undefined, {}, {}, DeleteV2TerrafundPolygonUuidPathParams>({
    url: "/v2/terrafund/polygon/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2TerrafundPolygonUuid = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2TerrafundPolygonUuidError, DeleteV2TerrafundPolygonUuidVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2TerrafundPolygonUuidError, DeleteV2TerrafundPolygonUuidVariables>(
    (variables: DeleteV2TerrafundPolygonUuidVariables) =>
      fetchDeleteV2TerrafundPolygonUuid({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2TerrafundGeojsonSiteQueryParams = {
  /**
   * UUID of the aite.
   */
  uuid: string;
};

export type GetV2TerrafundGeojsonSiteError = Fetcher.ErrorWrapper<undefined>;

export type GetV2TerrafundGeojsonSiteResponse = {
  type?: string;
};

export type GetV2TerrafundGeojsonSiteVariables = {
  queryParams: GetV2TerrafundGeojsonSiteQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2TerrafundGeojsonSite = (variables: GetV2TerrafundGeojsonSiteVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2TerrafundGeojsonSiteResponse,
    GetV2TerrafundGeojsonSiteError,
    undefined,
    {},
    GetV2TerrafundGeojsonSiteQueryParams,
    {}
  >({ url: "/v2/terrafund/geojson/site", method: "get", ...variables, signal });

export const useGetV2TerrafundGeojsonSite = <TData = GetV2TerrafundGeojsonSiteResponse>(
  variables: GetV2TerrafundGeojsonSiteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2TerrafundGeojsonSiteResponse, GetV2TerrafundGeojsonSiteError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2TerrafundGeojsonSiteResponse, GetV2TerrafundGeojsonSiteError, TData>(
    queryKeyFn({ path: "/v2/terrafund/geojson/site", operationId: "getV2TerrafundGeojsonSite", variables }),
    ({ signal }) => fetchGetV2TerrafundGeojsonSite({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2TerrafundPolygonError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundPolygonResponse = {
  uuid?: string;
};

export type PostV2TerrafundPolygonRequestBody = {
  geometry?: string;
};

export type PostV2TerrafundPolygonVariables = {
  body?: PostV2TerrafundPolygonRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2TerrafundPolygon = (variables: PostV2TerrafundPolygonVariables, signal?: AbortSignal) =>
  apiFetch<PostV2TerrafundPolygonResponse, PostV2TerrafundPolygonError, PostV2TerrafundPolygonRequestBody, {}, {}, {}>({
    url: "/v2/terrafund/polygon",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2TerrafundPolygon = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2TerrafundPolygonResponse,
      PostV2TerrafundPolygonError,
      PostV2TerrafundPolygonVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2TerrafundPolygonResponse,
    PostV2TerrafundPolygonError,
    PostV2TerrafundPolygonVariables
  >(
    (variables: PostV2TerrafundPolygonVariables) => fetchPostV2TerrafundPolygon({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2TerrafundUploadGeojsonError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundUploadGeojsonResponse = {
  message?: string;
  uuid?: string;
};

export type PostV2TerrafundUploadGeojsonRequestBody = {
  /**
   * The GeoJSON file to upload
   *
   * @format binary
   */
  file: Blob;
  /**
   * The UUID of the site associated with the GeoJSON file
   */
  uuid: string;
};

export type PostV2TerrafundUploadGeojsonVariables = {
  body: PostV2TerrafundUploadGeojsonRequestBody;
} & ApiContext["fetcherOptions"];

/**
 * Uploads a GeoJSON file, converts it to GeoJSON, and inserts it into the database.
 */
export const fetchPostV2TerrafundUploadGeojson = (
  variables: PostV2TerrafundUploadGeojsonVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2TerrafundUploadGeojsonResponse,
    PostV2TerrafundUploadGeojsonError,
    PostV2TerrafundUploadGeojsonRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/terrafund/upload-geojson", method: "post", ...variables, signal });

/**
 * Uploads a GeoJSON file, converts it to GeoJSON, and inserts it into the database.
 */
export const usePostV2TerrafundUploadGeojson = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2TerrafundUploadGeojsonResponse,
      PostV2TerrafundUploadGeojsonError,
      PostV2TerrafundUploadGeojsonVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2TerrafundUploadGeojsonResponse,
    PostV2TerrafundUploadGeojsonError,
    PostV2TerrafundUploadGeojsonVariables
  >(
    (variables: PostV2TerrafundUploadGeojsonVariables) =>
      fetchPostV2TerrafundUploadGeojson({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2TerrafundUploadShapefileError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundUploadShapefileResponse = {
  message?: string;
  uuid?: string;
};

export type PostV2TerrafundUploadShapefileRequestBody = {
  /**
   * The shapefile to upload
   *
   * @format binary
   */
  file: Blob;
  /**
   * The UUID of the site associated with the shapefile
   */
  uuid: string;
};

export type PostV2TerrafundUploadShapefileVariables = {
  body: PostV2TerrafundUploadShapefileRequestBody;
} & ApiContext["fetcherOptions"];

/**
 * Uploads a shapefile, converts it to GeoJSON, and inserts it into the database.
 */
export const fetchPostV2TerrafundUploadShapefile = (
  variables: PostV2TerrafundUploadShapefileVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2TerrafundUploadShapefileResponse,
    PostV2TerrafundUploadShapefileError,
    PostV2TerrafundUploadShapefileRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/terrafund/upload-shapefile", method: "post", ...variables, signal });

/**
 * Uploads a shapefile, converts it to GeoJSON, and inserts it into the database.
 */
export const usePostV2TerrafundUploadShapefile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2TerrafundUploadShapefileResponse,
      PostV2TerrafundUploadShapefileError,
      PostV2TerrafundUploadShapefileVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2TerrafundUploadShapefileResponse,
    PostV2TerrafundUploadShapefileError,
    PostV2TerrafundUploadShapefileVariables
  >(
    (variables: PostV2TerrafundUploadShapefileVariables) =>
      fetchPostV2TerrafundUploadShapefile({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2TerrafundUploadKmlError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundUploadKmlResponse = {
  message?: string;
  uuid?: string;
};

export type PostV2TerrafundUploadKmlRequestBody = {
  /**
   * The KML file to upload
   *
   * @format binary
   */
  file: Blob;
  /**
   * The UUID of the site associated with the KML file
   */
  uuid: string;
};

export type PostV2TerrafundUploadKmlVariables = {
  body: PostV2TerrafundUploadKmlRequestBody;
} & ApiContext["fetcherOptions"];

/**
 * Uploads a KML file, converts it to GeoJSON, and inserts it into the database.
 */
export const fetchPostV2TerrafundUploadKml = (variables: PostV2TerrafundUploadKmlVariables, signal?: AbortSignal) =>
  apiFetch<
    PostV2TerrafundUploadKmlResponse,
    PostV2TerrafundUploadKmlError,
    PostV2TerrafundUploadKmlRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/terrafund/upload-kml", method: "post", ...variables, signal });

/**
 * Uploads a KML file, converts it to GeoJSON, and inserts it into the database.
 */
export const usePostV2TerrafundUploadKml = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2TerrafundUploadKmlResponse,
      PostV2TerrafundUploadKmlError,
      PostV2TerrafundUploadKmlVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2TerrafundUploadKmlResponse,
    PostV2TerrafundUploadKmlError,
    PostV2TerrafundUploadKmlVariables
  >(
    (variables: PostV2TerrafundUploadKmlVariables) =>
      fetchPostV2TerrafundUploadKml({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2TerrafundUploadGeojsonValidateError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundUploadGeojsonValidateRequestBody = {
  /**
   * The GeoJSON file to test
   *
   * @format binary
   */
  file: Blob;
};

export type PostV2TerrafundUploadGeojsonValidateVariables = {
  body: PostV2TerrafundUploadGeojsonValidateRequestBody;
} & ApiContext["fetcherOptions"];

/**
 * Uploads a GeoJSON file, converts it to GeoJSON, and validate the polygons.
 */
export const fetchPostV2TerrafundUploadGeojsonValidate = (
  variables: PostV2TerrafundUploadGeojsonValidateVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Blob,
    PostV2TerrafundUploadGeojsonValidateError,
    PostV2TerrafundUploadGeojsonValidateRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/terrafund/upload-geojson-validate", method: "post", ...variables, signal });

/**
 * Uploads a GeoJSON file, converts it to GeoJSON, and validate the polygons.
 */
export const usePostV2TerrafundUploadGeojsonValidate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Blob,
      PostV2TerrafundUploadGeojsonValidateError,
      PostV2TerrafundUploadGeojsonValidateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Blob,
    PostV2TerrafundUploadGeojsonValidateError,
    PostV2TerrafundUploadGeojsonValidateVariables
  >(
    (variables: PostV2TerrafundUploadGeojsonValidateVariables) =>
      fetchPostV2TerrafundUploadGeojsonValidate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2TerrafundUploadShapefileValidateError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundUploadShapefileValidateRequestBody = {
  /**
   * The Shapefile file to test
   *
   * @format binary
   */
  file: Blob;
};

export type PostV2TerrafundUploadShapefileValidateVariables = {
  body: PostV2TerrafundUploadShapefileValidateRequestBody;
} & ApiContext["fetcherOptions"];

/**
 * Uploads a Shapefile file, converts it to GeoJSON, and validate the polygons.
 */
export const fetchPostV2TerrafundUploadShapefileValidate = (
  variables: PostV2TerrafundUploadShapefileValidateVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Blob,
    PostV2TerrafundUploadShapefileValidateError,
    PostV2TerrafundUploadShapefileValidateRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/terrafund/upload-shapefile-validate", method: "post", ...variables, signal });

/**
 * Uploads a Shapefile file, converts it to GeoJSON, and validate the polygons.
 */
export const usePostV2TerrafundUploadShapefileValidate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Blob,
      PostV2TerrafundUploadShapefileValidateError,
      PostV2TerrafundUploadShapefileValidateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Blob,
    PostV2TerrafundUploadShapefileValidateError,
    PostV2TerrafundUploadShapefileValidateVariables
  >(
    (variables: PostV2TerrafundUploadShapefileValidateVariables) =>
      fetchPostV2TerrafundUploadShapefileValidate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2TerrafundUploadKmlValidateError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundUploadKmlValidateRequestBody = {
  /**
   * The KML file to test
   *
   * @format binary
   */
  file: Blob;
};

export type PostV2TerrafundUploadKmlValidateVariables = {
  body: PostV2TerrafundUploadKmlValidateRequestBody;
} & ApiContext["fetcherOptions"];

/**
 * Uploads a KML file, converts it to GeoJSON, and validate the polygons.
 */
export const fetchPostV2TerrafundUploadKmlValidate = (
  variables: PostV2TerrafundUploadKmlValidateVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, PostV2TerrafundUploadKmlValidateError, PostV2TerrafundUploadKmlValidateRequestBody, {}, {}, {}>({
    url: "/v2/terrafund/upload-kml-validate",
    method: "post",
    ...variables,
    signal
  });

/**
 * Uploads a KML file, converts it to GeoJSON, and validate the polygons.
 */
export const usePostV2TerrafundUploadKmlValidate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Blob,
      PostV2TerrafundUploadKmlValidateError,
      PostV2TerrafundUploadKmlValidateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Blob, PostV2TerrafundUploadKmlValidateError, PostV2TerrafundUploadKmlValidateVariables>(
    (variables: PostV2TerrafundUploadKmlValidateVariables) =>
      fetchPostV2TerrafundUploadKmlValidate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2TerrafundUploadGeojsonProjectError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundUploadGeojsonProjectResponse = {
  message?: string;
  uuid?: string;
};

export type PostV2TerrafundUploadGeojsonProjectRequestBody = {
  /**
   * The GeoJSON file to upload
   *
   * @format binary
   */
  file: Blob;
  /**
   * The UUID of the entity associated with the GeoJSON file
   */
  entity_uuid: string;
  /**
   * The Enity Type of the entity associated with the GeoJSON file
   */
  entity_type: string;
};

export type PostV2TerrafundUploadGeojsonProjectVariables = {
  body: PostV2TerrafundUploadGeojsonProjectRequestBody;
} & ApiContext["fetcherOptions"];

/**
 * Uploads a GeoJSON file, converts it to GeoJSON, and inserts it into the database.
 */
export const fetchPostV2TerrafundUploadGeojsonProject = (
  variables: PostV2TerrafundUploadGeojsonProjectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2TerrafundUploadGeojsonProjectResponse,
    PostV2TerrafundUploadGeojsonProjectError,
    PostV2TerrafundUploadGeojsonProjectRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/terrafund/upload-geojson-project", method: "post", ...variables, signal });

/**
 * Uploads a GeoJSON file, converts it to GeoJSON, and inserts it into the database.
 */
export const usePostV2TerrafundUploadGeojsonProject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2TerrafundUploadGeojsonProjectResponse,
      PostV2TerrafundUploadGeojsonProjectError,
      PostV2TerrafundUploadGeojsonProjectVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2TerrafundUploadGeojsonProjectResponse,
    PostV2TerrafundUploadGeojsonProjectError,
    PostV2TerrafundUploadGeojsonProjectVariables
  >(
    (variables: PostV2TerrafundUploadGeojsonProjectVariables) =>
      fetchPostV2TerrafundUploadGeojsonProject({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2TerrafundUploadShapefileProjectError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundUploadShapefileProjectResponse = {
  message?: string;
  uuid?: string;
};

export type PostV2TerrafundUploadShapefileProjectRequestBody = {
  /**
   * The Shapefile to upload
   *
   * @format binary
   */
  file: Blob;
  /**
   * The UUID of the entity associated with the Shapefile
   */
  entity_uuid: string;
  /**
   * The Enity Type of the entity associated with the Shapefile
   */
  entity_type: string;
};

export type PostV2TerrafundUploadShapefileProjectVariables = {
  body: PostV2TerrafundUploadShapefileProjectRequestBody;
} & ApiContext["fetcherOptions"];

/**
 * Uploads a Shapefile, converts it to Shapefile, and inserts it into the database.
 */
export const fetchPostV2TerrafundUploadShapefileProject = (
  variables: PostV2TerrafundUploadShapefileProjectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2TerrafundUploadShapefileProjectResponse,
    PostV2TerrafundUploadShapefileProjectError,
    PostV2TerrafundUploadShapefileProjectRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/terrafund/upload-shapefile-project", method: "post", ...variables, signal });

/**
 * Uploads a Shapefile, converts it to Shapefile, and inserts it into the database.
 */
export const usePostV2TerrafundUploadShapefileProject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2TerrafundUploadShapefileProjectResponse,
      PostV2TerrafundUploadShapefileProjectError,
      PostV2TerrafundUploadShapefileProjectVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2TerrafundUploadShapefileProjectResponse,
    PostV2TerrafundUploadShapefileProjectError,
    PostV2TerrafundUploadShapefileProjectVariables
  >(
    (variables: PostV2TerrafundUploadShapefileProjectVariables) =>
      fetchPostV2TerrafundUploadShapefileProject({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2TerrafundUploadKmlProjectError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundUploadKmlProjectResponse = {
  message?: string;
  uuid?: string;
};

export type PostV2TerrafundUploadKmlProjectRequestBody = {
  /**
   * The KML file to upload
   *
   * @format binary
   */
  file: Blob;
  /**
   * The UUID of the entity associated with the KML file
   */
  entity_uuid: string;
  /**
   * The Enity Type of the entity associated with the KML file
   */
  entity_type: string;
};

export type PostV2TerrafundUploadKmlProjectVariables = {
  body: PostV2TerrafundUploadKmlProjectRequestBody;
} & ApiContext["fetcherOptions"];

/**
 * Uploads a KML file, converts it to KML, and inserts it into the database.
 */
export const fetchPostV2TerrafundUploadKmlProject = (
  variables: PostV2TerrafundUploadKmlProjectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2TerrafundUploadKmlProjectResponse,
    PostV2TerrafundUploadKmlProjectError,
    PostV2TerrafundUploadKmlProjectRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/terrafund/upload-kml-project", method: "post", ...variables, signal });

/**
 * Uploads a KML file, converts it to KML, and inserts it into the database.
 */
export const usePostV2TerrafundUploadKmlProject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2TerrafundUploadKmlProjectResponse,
      PostV2TerrafundUploadKmlProjectError,
      PostV2TerrafundUploadKmlProjectVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2TerrafundUploadKmlProjectResponse,
    PostV2TerrafundUploadKmlProjectError,
    PostV2TerrafundUploadKmlProjectVariables
  >(
    (variables: PostV2TerrafundUploadKmlProjectVariables) =>
      fetchPostV2TerrafundUploadKmlProject({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2TerrafundSitePolygonUuidPathParams = {
  /**
   * The UUID of the site polygon
   */
  uuid: string;
};

export type PutV2TerrafundSitePolygonUuidError = Fetcher.ErrorWrapper<undefined>;

export type PutV2TerrafundSitePolygonUuidResponse = {
  id?: number;
  uuid?: string;
  poly_name?: string;
  /**
   * @format date
   */
  plantstart?: string;
  /**
   * @format date
   */
  plantend?: string;
  practice?: string;
  target_sys?: string;
  distr?: string;
  num_trees?: number;
  /**
   * @format float
   */
  calc_area?: number;
  status?: string;
};

export type PutV2TerrafundSitePolygonUuidVariables = {
  body?: RequestBodies.Body;
  pathParams: PutV2TerrafundSitePolygonUuidPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2TerrafundSitePolygonUuid = (
  variables: PutV2TerrafundSitePolygonUuidVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2TerrafundSitePolygonUuidResponse,
    PutV2TerrafundSitePolygonUuidError,
    RequestBodies.Body,
    {},
    {},
    PutV2TerrafundSitePolygonUuidPathParams
  >({ url: "/v2/terrafund/site-polygon/{uuid}", method: "put", ...variables, signal });

export const usePutV2TerrafundSitePolygonUuid = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2TerrafundSitePolygonUuidResponse,
      PutV2TerrafundSitePolygonUuidError,
      PutV2TerrafundSitePolygonUuidVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2TerrafundSitePolygonUuidResponse,
    PutV2TerrafundSitePolygonUuidError,
    PutV2TerrafundSitePolygonUuidVariables
  >(
    (variables: PutV2TerrafundSitePolygonUuidVariables) =>
      fetchPutV2TerrafundSitePolygonUuid({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2TerrafundNewSitePolygonUuidNewVersionPathParams = {
  /**
   * The UUID of the site polygon
   */
  uuid: string;
};

export type PostV2TerrafundNewSitePolygonUuidNewVersionError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundNewSitePolygonUuidNewVersionResponse = {
  id?: number;
  uuid?: string;
  poly_name?: string;
  /**
   * @format date
   */
  plantstart?: string;
  /**
   * @format date
   */
  plantend?: string;
  practice?: string;
  target_sys?: string;
  distr?: string;
  num_trees?: number;
  /**
   * @format float
   */
  calc_area?: number;
  status?: string;
};

export type PostV2TerrafundNewSitePolygonUuidNewVersionVariables = {
  body?: RequestBodies.Body;
  pathParams: PostV2TerrafundNewSitePolygonUuidNewVersionPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2TerrafundNewSitePolygonUuidNewVersion = (
  variables: PostV2TerrafundNewSitePolygonUuidNewVersionVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2TerrafundNewSitePolygonUuidNewVersionResponse,
    PostV2TerrafundNewSitePolygonUuidNewVersionError,
    RequestBodies.Body,
    {},
    {},
    PostV2TerrafundNewSitePolygonUuidNewVersionPathParams
  >({ url: "/v2/terrafund/new-site-polygon/{uuid}/new-version", method: "post", ...variables, signal });

export const usePostV2TerrafundNewSitePolygonUuidNewVersion = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2TerrafundNewSitePolygonUuidNewVersionResponse,
      PostV2TerrafundNewSitePolygonUuidNewVersionError,
      PostV2TerrafundNewSitePolygonUuidNewVersionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2TerrafundNewSitePolygonUuidNewVersionResponse,
    PostV2TerrafundNewSitePolygonUuidNewVersionError,
    PostV2TerrafundNewSitePolygonUuidNewVersionVariables
  >(
    (variables: PostV2TerrafundNewSitePolygonUuidNewVersionVariables) =>
      fetchPostV2TerrafundNewSitePolygonUuidNewVersion({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2TerrafundProjectPolygonQueryParams = {
  /**
   * The UUID of the project polygon.
   */
  uuid: string;
  /**
   * The entity type of the project polygon.
   */
  entityType: string;
};

export type GetV2TerrafundProjectPolygonError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: {
        /**
         * @example No site polygons found for the given UUID.
         */
        message?: string;
      };
    }
  | {
      status: 500;
      payload: {
        /**
         * @example An error message describing the issue.
         */
        message?: string;
      };
    }
>;

export type GetV2TerrafundProjectPolygonResponse = {
  project_polygon?: {
    id?: number;
    uuid?: string;
    poly_uuid?: string;
    entity_type?: string;
    entity_id?: number;
    last_modified_by?: string;
    created_by?: string;
    /**
     * @format date-time
     */
    deleted_at?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
  };
};

export type GetV2TerrafundProjectPolygonVariables = {
  queryParams: GetV2TerrafundProjectPolygonQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Retrieve project polygon data for the given UUID.
 */
export const fetchGetV2TerrafundProjectPolygon = (
  variables: GetV2TerrafundProjectPolygonVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2TerrafundProjectPolygonResponse,
    GetV2TerrafundProjectPolygonError,
    undefined,
    {},
    GetV2TerrafundProjectPolygonQueryParams,
    {}
  >({ url: "/v2/terrafund/project-polygon", method: "get", ...variables, signal });

/**
 * Retrieve project polygon data for the given UUID.
 */
export const useGetV2TerrafundProjectPolygon = <TData = GetV2TerrafundProjectPolygonResponse>(
  variables: GetV2TerrafundProjectPolygonVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2TerrafundProjectPolygonResponse, GetV2TerrafundProjectPolygonError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2TerrafundProjectPolygonResponse, GetV2TerrafundProjectPolygonError, TData>(
    queryKeyFn({ path: "/v2/terrafund/project-polygon", operationId: "getV2TerrafundProjectPolygon", variables }),
    ({ signal }) => fetchGetV2TerrafundProjectPolygon({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2TerrafundProjectPolygonUuidPathParams = {
  /**
   * The UUID of the polygon geometry to delete
   */
  uuid: string;
};

export type DeleteV2TerrafundProjectPolygonUuidError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2TerrafundProjectPolygonUuidVariables = {
  pathParams: DeleteV2TerrafundProjectPolygonUuidPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2TerrafundProjectPolygonUuid = (
  variables: DeleteV2TerrafundProjectPolygonUuidVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2TerrafundProjectPolygonUuidError,
    undefined,
    {},
    {},
    DeleteV2TerrafundProjectPolygonUuidPathParams
  >({ url: "/v2/terrafund/project-polygon/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2TerrafundProjectPolygonUuid = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2TerrafundProjectPolygonUuidError,
      DeleteV2TerrafundProjectPolygonUuidVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2TerrafundProjectPolygonUuidError,
    DeleteV2TerrafundProjectPolygonUuidVariables
  >(
    (variables: DeleteV2TerrafundProjectPolygonUuidVariables) =>
      fetchDeleteV2TerrafundProjectPolygonUuid({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2TerrafundProjectPolygonUuidEntityUuidEntityTypePathParams = {
  /**
   * The UUID of the polygon related
   */
  uuid: string;
  /**
   * The UUID of the entity
   */
  entityUuid: string;
  /**
   * The type of the entity
   */
  entityType: string;
};

export type PostV2TerrafundProjectPolygonUuidEntityUuidEntityTypeError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundProjectPolygonUuidEntityUuidEntityTypeResponse = {
  /**
   * @example Project polygon created successfully
   */
  message?: string;
  /**
   * UUID of the created project polygon
   */
  uuid?: string;
};

export type PostV2TerrafundProjectPolygonUuidEntityUuidEntityTypeVariables = {
  pathParams: PostV2TerrafundProjectPolygonUuidEntityUuidEntityTypePathParams;
} & ApiContext["fetcherOptions"];

/**
 * Receives the uuid of the polygon, the uuid of the entity and the type of the entity and creates a relation between them.
 */
export const fetchPostV2TerrafundProjectPolygonUuidEntityUuidEntityType = (
  variables: PostV2TerrafundProjectPolygonUuidEntityUuidEntityTypeVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2TerrafundProjectPolygonUuidEntityUuidEntityTypeResponse,
    PostV2TerrafundProjectPolygonUuidEntityUuidEntityTypeError,
    undefined,
    {},
    {},
    PostV2TerrafundProjectPolygonUuidEntityUuidEntityTypePathParams
  >({ url: "/v2/terrafund/project-polygon/{uuid}/{entityUuid}/{entityType}", method: "post", ...variables, signal });

/**
 * Receives the uuid of the polygon, the uuid of the entity and the type of the entity and creates a relation between them.
 */
export const usePostV2TerrafundProjectPolygonUuidEntityUuidEntityType = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2TerrafundProjectPolygonUuidEntityUuidEntityTypeResponse,
      PostV2TerrafundProjectPolygonUuidEntityUuidEntityTypeError,
      PostV2TerrafundProjectPolygonUuidEntityUuidEntityTypeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2TerrafundProjectPolygonUuidEntityUuidEntityTypeResponse,
    PostV2TerrafundProjectPolygonUuidEntityUuidEntityTypeError,
    PostV2TerrafundProjectPolygonUuidEntityUuidEntityTypeVariables
  >(
    (variables: PostV2TerrafundProjectPolygonUuidEntityUuidEntityTypeVariables) =>
      fetchPostV2TerrafundProjectPolygonUuidEntityUuidEntityType({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2TerrafundProjectPolygonsError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2TerrafundProjectPolygonsResponse = {
  /**
   * Success message
   */
  message?: string;
  deleted?: {
    /**
     * UUID of the deleted polygon geometry
     */
    uuid?: string;
  }[];
  failed?: {
    /**
     * UUID of the polygon geometry that failed to delete
     */
    uuid?: string;
    /**
     * Error message for the failed deletion
     */
    error?: string;
  }[];
};

export type DeleteV2TerrafundProjectPolygonsRequestBody = {
  uuids?: string[];
};

export type DeleteV2TerrafundProjectPolygonsVariables = {
  body?: DeleteV2TerrafundProjectPolygonsRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2TerrafundProjectPolygons = (
  variables: DeleteV2TerrafundProjectPolygonsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    DeleteV2TerrafundProjectPolygonsResponse,
    DeleteV2TerrafundProjectPolygonsError,
    DeleteV2TerrafundProjectPolygonsRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/terrafund/project-polygons", method: "delete", ...variables, signal });

export const useDeleteV2TerrafundProjectPolygons = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2TerrafundProjectPolygonsResponse,
      DeleteV2TerrafundProjectPolygonsError,
      DeleteV2TerrafundProjectPolygonsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2TerrafundProjectPolygonsResponse,
    DeleteV2TerrafundProjectPolygonsError,
    DeleteV2TerrafundProjectPolygonsVariables
  >(
    (variables: DeleteV2TerrafundProjectPolygonsVariables) =>
      fetchDeleteV2TerrafundProjectPolygons({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2DashboardJobsCreatedQueryParams = {
  /**
   * Optional. Filter counts and metrics by country.
   */
  country?: string;
  /**
   * Optional. Filter counts and metrics by UUID.
   */
  uuid?: string;
};

export type GetV2DashboardJobsCreatedError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardJobsCreatedResponse = {
  data?: {
    totalJobsCreated?: number;
    forProfitJobsCreated?: number;
    nonProfitJobsCreated?: number;
    total_ft?: number;
    total_pt?: number;
    total_men?: number;
    total_pt_men?: number;
    total_ft_men?: number;
    total_women?: number;
    total_pt_women?: number;
    total_ft_women?: number;
    total_youth?: number;
    total_pt_youth?: number;
    total_ft_youth?: number;
    total_non_youth?: number;
    total_pt_non_youth?: number;
    total_ft_non_youth?: number;
  };
};

export type GetV2DashboardJobsCreatedVariables = {
  queryParams?: GetV2DashboardJobsCreatedQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2DashboardJobsCreated = (variables: GetV2DashboardJobsCreatedVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2DashboardJobsCreatedResponse,
    GetV2DashboardJobsCreatedError,
    undefined,
    {},
    GetV2DashboardJobsCreatedQueryParams,
    {}
  >({ url: "/v2/dashboard/jobs-created", method: "get", ...variables, signal });

export const useGetV2DashboardJobsCreated = <TData = GetV2DashboardJobsCreatedResponse>(
  variables: GetV2DashboardJobsCreatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2DashboardJobsCreatedResponse, GetV2DashboardJobsCreatedError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardJobsCreatedResponse, GetV2DashboardJobsCreatedError, TData>(
    queryKeyFn({ path: "/v2/dashboard/jobs-created", operationId: "getV2DashboardJobsCreated", variables }),
    ({ signal }) => fetchGetV2DashboardJobsCreated({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardRestorationStrategyQueryParams = {
  /**
   * Optional. Filter restoration strategy by country.
   */
  country?: string;
  /**
   * Optional. Filter restoration strategy by UUID.
   */
  uuid?: string;
};

export type GetV2DashboardRestorationStrategyError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardRestorationStrategyResponse = {
  restorationStrategies?: {
    ["direct-seeding"]?: number;
    ["tree-planting"]?: number;
    ["assisted-natural-regeneration"]?: number;
  };
  landUseTypes?: {
    agroforest?: number;
    ["open-natural-ecosystem"]?: number;
    mangrove?: number;
    ["natural-forest"]?: number;
    peatland?: number;
    ["riparian-area-or-wetland"]?: number;
    silvopasture?: number;
    ["urban-forest"]?: number;
    ["woodlot-or-plantation"]?: number;
  };
  landTenures?: {
    communal?: number;
    indigenous?: number;
    national_protected_area?: number;
    other?: number;
    private?: number;
    public?: number;
  };
};

export type GetV2DashboardRestorationStrategyVariables = {
  queryParams?: GetV2DashboardRestorationStrategyQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2DashboardRestorationStrategy = (
  variables: GetV2DashboardRestorationStrategyVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2DashboardRestorationStrategyResponse,
    GetV2DashboardRestorationStrategyError,
    undefined,
    {},
    GetV2DashboardRestorationStrategyQueryParams,
    {}
  >({ url: "/v2/dashboard/restoration-strategy", method: "get", ...variables, signal });

export const useGetV2DashboardRestorationStrategy = <TData = GetV2DashboardRestorationStrategyResponse>(
  variables: GetV2DashboardRestorationStrategyVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2DashboardRestorationStrategyResponse,
      GetV2DashboardRestorationStrategyError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardRestorationStrategyResponse, GetV2DashboardRestorationStrategyError, TData>(
    queryKeyFn({
      path: "/v2/dashboard/restoration-strategy",
      operationId: "getV2DashboardRestorationStrategy",
      variables
    }),
    ({ signal }) => fetchGetV2DashboardRestorationStrategy({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardTreeRestorationGoalQueryParams = {
  /**
   * Optional. Filter tree restoration goal by country.
   */
  country?: string;
  /**
   * Optional. Filter tree restoration goal by UUID.
   */
  uuid?: string;
};

export type GetV2DashboardTreeRestorationGoalError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardTreeRestorationGoalResponse = {
  forProfitTreeCount?: number;
  nonProfitTreeCount?: number;
  totalTreesGrownGoal?: number;
  treesUnderRestorationActualTotal?: {
    /**
     * @format date
     */
    dueDate?: string;
    treeSpeciesAmount?: number;
    treeSpeciesPercentage?: number;
  }[];
  treesUnderRestorationActualForProfit?: {
    /**
     * @format date
     */
    dueDate?: string;
    treeSpeciesAmount?: number;
    treeSpeciesPercentage?: number;
  }[];
  treesUnderRestorationActualNonProfit?: {
    /**
     * @format date
     */
    dueDate?: string;
    treeSpeciesAmount?: number;
    treeSpeciesPercentage?: number;
  }[];
  averageSurvivalRateTotal?: number;
  averageSurvivalRateForProfit?: number;
  averageSurvivalRateNonProfit?: number;
};

export type GetV2DashboardTreeRestorationGoalVariables = {
  queryParams?: GetV2DashboardTreeRestorationGoalQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2DashboardTreeRestorationGoal = (
  variables: GetV2DashboardTreeRestorationGoalVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2DashboardTreeRestorationGoalResponse,
    GetV2DashboardTreeRestorationGoalError,
    undefined,
    {},
    GetV2DashboardTreeRestorationGoalQueryParams,
    {}
  >({ url: "/v2/dashboard/tree-restoration-goal", method: "get", ...variables, signal });

export const useGetV2DashboardTreeRestorationGoal = <TData = GetV2DashboardTreeRestorationGoalResponse>(
  variables: GetV2DashboardTreeRestorationGoalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2DashboardTreeRestorationGoalResponse,
      GetV2DashboardTreeRestorationGoalError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardTreeRestorationGoalResponse, GetV2DashboardTreeRestorationGoalError, TData>(
    queryKeyFn({
      path: "/v2/dashboard/tree-restoration-goal",
      operationId: "getV2DashboardTreeRestorationGoal",
      variables
    }),
    ({ signal }) => fetchGetV2DashboardTreeRestorationGoal({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardProjectListExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardProjectListExportVariables = ApiContext["fetcherOptions"];

export const fetchGetV2DashboardProjectListExport = (
  variables: GetV2DashboardProjectListExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetV2DashboardProjectListExportError, undefined, {}, {}, {}>({
    url: "/v2/dashboard/project-list-export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2DashboardProjectListExport = <TData = undefined>(
  variables: GetV2DashboardProjectListExportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetV2DashboardProjectListExportError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetV2DashboardProjectListExportError, TData>(
    queryKeyFn({
      path: "/v2/dashboard/project-list-export",
      operationId: "getV2DashboardProjectListExport",
      variables
    }),
    ({ signal }) => fetchGetV2DashboardProjectListExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardGetPolygonsQueryParams = {
  /**
   * uuid for the given project
   */
  uuid?: string;
};

export type GetV2DashboardGetPolygonsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardGetPolygonsResponse = {
  data?: {
    uuid?: string;
    name?: string;
    /**
     * @format double
     */
    lat?: number;
    /**
     * @format double
     */
    long?: number;
  }[];
};

export type GetV2DashboardGetPolygonsVariables = {
  queryParams?: GetV2DashboardGetPolygonsQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * This endpoint returns all polygons by project uuid.
 */
export const fetchGetV2DashboardGetPolygons = (variables: GetV2DashboardGetPolygonsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2DashboardGetPolygonsResponse,
    GetV2DashboardGetPolygonsError,
    undefined,
    {},
    GetV2DashboardGetPolygonsQueryParams,
    {}
  >({ url: "/v2/dashboard/get-polygons", method: "get", ...variables, signal });

/**
 * This endpoint returns all polygons by project uuid.
 */
export const useGetV2DashboardGetPolygons = <TData = GetV2DashboardGetPolygonsResponse>(
  variables: GetV2DashboardGetPolygonsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2DashboardGetPolygonsResponse, GetV2DashboardGetPolygonsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardGetPolygonsResponse, GetV2DashboardGetPolygonsError, TData>(
    queryKeyFn({ path: "/v2/dashboard/get-polygons", operationId: "getV2DashboardGetPolygons", variables }),
    ({ signal }) => fetchGetV2DashboardGetPolygons({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardGetPolygonsStatusesQueryParams = {
  /**
   * uuid for the given project
   */
  uuid?: string;
};

export type GetV2DashboardGetPolygonsStatusesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardGetPolygonsStatusesResponse = {
  data?: any[];
};

export type GetV2DashboardGetPolygonsStatusesVariables = {
  queryParams?: GetV2DashboardGetPolygonsStatusesQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * This endpoint returns all polygons by project uuid.
 */
export const fetchGetV2DashboardGetPolygonsStatuses = (
  variables: GetV2DashboardGetPolygonsStatusesVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2DashboardGetPolygonsStatusesResponse,
    GetV2DashboardGetPolygonsStatusesError,
    undefined,
    {},
    GetV2DashboardGetPolygonsStatusesQueryParams,
    {}
  >({ url: "/v2/dashboard/get-polygons/statuses", method: "get", ...variables, signal });

/**
 * This endpoint returns all polygons by project uuid.
 */
export const useGetV2DashboardGetPolygonsStatuses = <TData = GetV2DashboardGetPolygonsStatusesResponse>(
  variables: GetV2DashboardGetPolygonsStatusesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2DashboardGetPolygonsStatusesResponse,
      GetV2DashboardGetPolygonsStatusesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardGetPolygonsStatusesResponse, GetV2DashboardGetPolygonsStatusesError, TData>(
    queryKeyFn({
      path: "/v2/dashboard/get-polygons/statuses",
      operationId: "getV2DashboardGetPolygonsStatuses",
      variables
    }),
    ({ signal }) => fetchGetV2DashboardGetPolygonsStatuses({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardGetBboxProjectQueryParams = {
  /**
   * UUID of the project
   */
  uuid: string;
};

export type GetV2DashboardGetBboxProjectError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardGetBboxProjectResponse = {
  bbox?: number[];
};

export type GetV2DashboardGetBboxProjectVariables = {
  queryParams: GetV2DashboardGetBboxProjectQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2DashboardGetBboxProject = (
  variables: GetV2DashboardGetBboxProjectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2DashboardGetBboxProjectResponse,
    GetV2DashboardGetBboxProjectError,
    undefined,
    {},
    GetV2DashboardGetBboxProjectQueryParams,
    {}
  >({ url: "/v2/dashboard/get-bbox-project", method: "get", ...variables, signal });

export const useGetV2DashboardGetBboxProject = <TData = GetV2DashboardGetBboxProjectResponse>(
  variables: GetV2DashboardGetBboxProjectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2DashboardGetBboxProjectResponse, GetV2DashboardGetBboxProjectError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardGetBboxProjectResponse, GetV2DashboardGetBboxProjectError, TData>(
    queryKeyFn({ path: "/v2/dashboard/get-bbox-project", operationId: "getV2DashboardGetBboxProject", variables }),
    ({ signal }) => fetchGetV2DashboardGetBboxProject({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardBboxProjectQueryParams = {
  /**
   * UUID of the project
   */
  uuid: string;
};

export type GetV2DashboardBboxProjectError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardBboxProjectResponse = {
  bbox?: number[];
};

export type GetV2DashboardBboxProjectVariables = {
  queryParams: GetV2DashboardBboxProjectQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2DashboardBboxProject = (variables: GetV2DashboardBboxProjectVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2DashboardBboxProjectResponse,
    GetV2DashboardBboxProjectError,
    undefined,
    {},
    GetV2DashboardBboxProjectQueryParams,
    {}
  >({ url: "/v2/dashboard/bbox/project", method: "get", ...variables, signal });

export const useGetV2DashboardBboxProject = <TData = GetV2DashboardBboxProjectResponse>(
  variables: GetV2DashboardBboxProjectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2DashboardBboxProjectResponse, GetV2DashboardBboxProjectError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardBboxProjectResponse, GetV2DashboardBboxProjectError, TData>(
    queryKeyFn({ path: "/v2/dashboard/bbox/project", operationId: "getV2DashboardBboxProject", variables }),
    ({ signal }) => fetchGetV2DashboardBboxProject({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardCountryCountryPathParams = {
  /**
   * ISO code of the country
   */
  country: string;
};

export type GetV2DashboardCountryCountryError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardCountryCountryResponse = {
  bbox?: number[];
};

export type GetV2DashboardCountryCountryVariables = {
  pathParams: GetV2DashboardCountryCountryPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2DashboardCountryCountry = (
  variables: GetV2DashboardCountryCountryVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2DashboardCountryCountryResponse,
    GetV2DashboardCountryCountryError,
    undefined,
    {},
    {},
    GetV2DashboardCountryCountryPathParams
  >({ url: "/v2/dashboard/country/{country}", method: "get", ...variables, signal });

export const useGetV2DashboardCountryCountry = <TData = GetV2DashboardCountryCountryResponse>(
  variables: GetV2DashboardCountryCountryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2DashboardCountryCountryResponse, GetV2DashboardCountryCountryError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardCountryCountryResponse, GetV2DashboardCountryCountryError, TData>(
    queryKeyFn({ path: "/v2/dashboard/country/{country}", operationId: "getV2DashboardCountryCountry", variables }),
    ({ signal }) => fetchGetV2DashboardCountryCountry({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardPolygonDataUuidPathParams = {
  /**
   * UUID of the polygon
   */
  uuid: string;
};

export type GetV2DashboardPolygonDataUuidError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardPolygonDataUuidResponse = {
  data?: {
    /**
     * Title of the data field
     */
    title?: string;
    /**
     * Value of the data field
     */
    value?: string;
    /**
     * Key of the data field
     */
    key?: string;
  }[];
};

export type GetV2DashboardPolygonDataUuidVariables = {
  pathParams: GetV2DashboardPolygonDataUuidPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2DashboardPolygonDataUuid = (
  variables: GetV2DashboardPolygonDataUuidVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2DashboardPolygonDataUuidResponse,
    GetV2DashboardPolygonDataUuidError,
    undefined,
    {},
    {},
    GetV2DashboardPolygonDataUuidPathParams
  >({ url: "/v2/dashboard/polygon-data/{uuid}", method: "get", ...variables, signal });

export const useGetV2DashboardPolygonDataUuid = <TData = GetV2DashboardPolygonDataUuidResponse>(
  variables: GetV2DashboardPolygonDataUuidVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2DashboardPolygonDataUuidResponse, GetV2DashboardPolygonDataUuidError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardPolygonDataUuidResponse, GetV2DashboardPolygonDataUuidError, TData>(
    queryKeyFn({ path: "/v2/dashboard/polygon-data/{uuid}", operationId: "getV2DashboardPolygonDataUuid", variables }),
    ({ signal }) => fetchGetV2DashboardPolygonDataUuid({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardProjectDataUuidPathParams = {
  /**
   * UUID of the project point
   */
  uuid: string;
};

export type GetV2DashboardProjectDataUuidError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardProjectDataUuidResponse = {
  data?: {
    /**
     * Title of the data field
     */
    title?: string;
    /**
     * Value of the data field
     */
    value?: string;
    /**
     * Key of the data field
     */
    key?: string;
  }[];
};

export type GetV2DashboardProjectDataUuidVariables = {
  pathParams: GetV2DashboardProjectDataUuidPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2DashboardProjectDataUuid = (
  variables: GetV2DashboardProjectDataUuidVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2DashboardProjectDataUuidResponse,
    GetV2DashboardProjectDataUuidError,
    undefined,
    {},
    {},
    GetV2DashboardProjectDataUuidPathParams
  >({ url: "/v2/dashboard/project-data/{uuid}", method: "get", ...variables, signal });

export const useGetV2DashboardProjectDataUuid = <TData = GetV2DashboardProjectDataUuidResponse>(
  variables: GetV2DashboardProjectDataUuidVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2DashboardProjectDataUuidResponse, GetV2DashboardProjectDataUuidError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardProjectDataUuidResponse, GetV2DashboardProjectDataUuidError, TData>(
    queryKeyFn({ path: "/v2/dashboard/project-data/{uuid}", operationId: "getV2DashboardProjectDataUuid", variables }),
    ({ signal }) => fetchGetV2DashboardProjectDataUuid({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardActiveProjectsQueryParams = {
  /**
   * Optional. Filter counts and metrics by country.
   */
  country?: string;
  /**
   * Optional. per_page to projects.
   */
  per_page?: string;
  /**
   * Optional. page to projects.
   */
  page?: string;
};

export type GetV2DashboardActiveProjectsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardActiveProjectsResponse = {
  data?: {
    uuid?: string;
    name?: string;
    organisation?: string;
    trees_under_restoration?: number;
    jobs_created?: number;
    volunteers?: number;
    beneficiaries?: number;
    survival_rate?: number;
    number_of_sites?: number;
    number_of_nurseries?: number;
    project_country?: string;
    country_slug?: string;
    number_of_trees_goal?: number;
    date_added?: string;
  }[];
  current_page?: number;
  per_page?: number;
  total?: number;
  last_page?: number;
};

export type GetV2DashboardActiveProjectsVariables = {
  queryParams?: GetV2DashboardActiveProjectsQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * This endpoint returns all projects and metrics related to name of project, name of organisation, trees under restoration, jobs created, volunteers, beneficiaries, survival rate, number of sites, number of nurseries, country, number of tree goal, and date added.
 */
export const fetchGetV2DashboardActiveProjects = (
  variables: GetV2DashboardActiveProjectsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2DashboardActiveProjectsResponse,
    GetV2DashboardActiveProjectsError,
    undefined,
    {},
    GetV2DashboardActiveProjectsQueryParams,
    {}
  >({ url: "/v2/dashboard/active-projects", method: "get", ...variables, signal });

/**
 * This endpoint returns all projects and metrics related to name of project, name of organisation, trees under restoration, jobs created, volunteers, beneficiaries, survival rate, number of sites, number of nurseries, country, number of tree goal, and date added.
 */
export const useGetV2DashboardActiveProjects = <TData = GetV2DashboardActiveProjectsResponse>(
  variables: GetV2DashboardActiveProjectsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2DashboardActiveProjectsResponse, GetV2DashboardActiveProjectsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardActiveProjectsResponse, GetV2DashboardActiveProjectsError, TData>(
    queryKeyFn({ path: "/v2/dashboard/active-projects", operationId: "getV2DashboardActiveProjects", variables }),
    ({ signal }) => fetchGetV2DashboardActiveProjects({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardVolunteersSurvivalRateQueryParams = {
  /**
   * Optional. Filter counts and metrics by country.
   */
  country?: string;
  /**
   * Optional. Filter counts and metrics by UUID.
   */
  uuid?: string;
};

export type GetV2DashboardVolunteersSurvivalRateError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardVolunteersSurvivalRateResponse = {
  data?: {
    /**
     * Total number of volunteers.
     */
    total_volunteers?: number;
    /**
     * Total number of male volunteers.
     */
    men_volunteers?: number;
    /**
     * Total number of female volunteers.
     */
    women_volunteers?: number;
    /**
     * Total number of youth volunteers.
     */
    youth_volunteers?: number;
    /**
     * Total number of non-youth volunteers.
     */
    non_youth_volunteers?: number;
    /**
     * Survival rate for non-profit entities.
     */
    non_profit_survival_rate?: number;
    /**
     * Survival rate for enterprise entities.
     */
    enterprise_survival_rate?: number;
    /**
     * number of sites.
     */
    number_of_sites?: number;
    /**
     * number of nurseries.
     */
    number_of_nurseries?: number;
  };
};

export type GetV2DashboardVolunteersSurvivalRateVariables = {
  queryParams?: GetV2DashboardVolunteersSurvivalRateQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * This endpoint returns counts and metrics related to non-profit, enterprise, entries, hectares restored, and trees restored.
 */
export const fetchGetV2DashboardVolunteersSurvivalRate = (
  variables: GetV2DashboardVolunteersSurvivalRateVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2DashboardVolunteersSurvivalRateResponse,
    GetV2DashboardVolunteersSurvivalRateError,
    undefined,
    {},
    GetV2DashboardVolunteersSurvivalRateQueryParams,
    {}
  >({ url: "/v2/dashboard/volunteers-survival-rate", method: "get", ...variables, signal });

/**
 * This endpoint returns counts and metrics related to non-profit, enterprise, entries, hectares restored, and trees restored.
 */
export const useGetV2DashboardVolunteersSurvivalRate = <TData = GetV2DashboardVolunteersSurvivalRateResponse>(
  variables: GetV2DashboardVolunteersSurvivalRateVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2DashboardVolunteersSurvivalRateResponse,
      GetV2DashboardVolunteersSurvivalRateError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetV2DashboardVolunteersSurvivalRateResponse,
    GetV2DashboardVolunteersSurvivalRateError,
    TData
  >(
    queryKeyFn({
      path: "/v2/dashboard/volunteers-survival-rate",
      operationId: "getV2DashboardVolunteersSurvivalRate",
      variables
    }),
    ({ signal }) => fetchGetV2DashboardVolunteersSurvivalRate({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardTotalSectionHeaderQueryParams = {
  /**
   * Optional. Filter counts and metrics by country.
   */
  country?: string;
};

export type GetV2DashboardTotalSectionHeaderError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardTotalSectionHeaderResponse = {
  data?: {
    /**
     * Total number of non profit projects.
     */
    total_non_profit_count?: number;
    /**
     * Total number of enterprise projects.
     */
    total_enterprise_count?: number;
    /**
     * Total number of jobs created.
     */
    total_entries?: number;
    /**
     * Total number of hectares restored.
     */
    total_hectares_restored?: number;
    /**
     * Total number of hectares restored goal.
     */
    total_hectares_restored_goal?: number;
    /**
     * Total number of trees restored.
     */
    total_trees_restored?: number;
    /**
     * Total number of trees restored goal.
     */
    total_trees_restored_goal?: number;
  };
};

export type GetV2DashboardTotalSectionHeaderVariables = {
  queryParams?: GetV2DashboardTotalSectionHeaderQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * This endpoint returns totals and metrics related to non-profit projects, enterprise projects, jobs created, hectares restored, trees restored, and trees restored goal.
 */
export const fetchGetV2DashboardTotalSectionHeader = (
  variables: GetV2DashboardTotalSectionHeaderVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2DashboardTotalSectionHeaderResponse,
    GetV2DashboardTotalSectionHeaderError,
    undefined,
    {},
    GetV2DashboardTotalSectionHeaderQueryParams,
    {}
  >({ url: "/v2/dashboard/total-section-header", method: "get", ...variables, signal });

/**
 * This endpoint returns totals and metrics related to non-profit projects, enterprise projects, jobs created, hectares restored, trees restored, and trees restored goal.
 */
export const useGetV2DashboardTotalSectionHeader = <TData = GetV2DashboardTotalSectionHeaderResponse>(
  variables: GetV2DashboardTotalSectionHeaderVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2DashboardTotalSectionHeaderResponse, GetV2DashboardTotalSectionHeaderError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardTotalSectionHeaderResponse, GetV2DashboardTotalSectionHeaderError, TData>(
    queryKeyFn({
      path: "/v2/dashboard/total-section-header",
      operationId: "getV2DashboardTotalSectionHeader",
      variables
    }),
    ({ signal }) => fetchGetV2DashboardTotalSectionHeader({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardActiveCountriesQueryParams = {
  /**
   * Optional. Filter counts and metrics by country.
   */
  country?: string;
  /**
   * Optional. Filter restoration strategy by UUID.
   */
  uuid?: string;
};

export type GetV2DashboardActiveCountriesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardActiveCountriesResponse = {
  data?: {
    country_slug?: string;
    country?: string;
    number_of_projects?: number;
    total_trees_planted?: number;
    total_jobs_created?: number;
    number_of_sites?: number;
    number_of_nurseries?: number;
  }[];
};

export type GetV2DashboardActiveCountriesVariables = {
  queryParams?: GetV2DashboardActiveCountriesQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * This endpoint returns all countries and metrics related to number of projects, trees planted, jobs created, number of sites, and number of nurseries.
 */
export const fetchGetV2DashboardActiveCountries = (
  variables: GetV2DashboardActiveCountriesVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2DashboardActiveCountriesResponse,
    GetV2DashboardActiveCountriesError,
    undefined,
    {},
    GetV2DashboardActiveCountriesQueryParams,
    {}
  >({ url: "/v2/dashboard/active-countries", method: "get", ...variables, signal });

/**
 * This endpoint returns all countries and metrics related to number of projects, trees planted, jobs created, number of sites, and number of nurseries.
 */
export const useGetV2DashboardActiveCountries = <TData = GetV2DashboardActiveCountriesResponse>(
  variables: GetV2DashboardActiveCountriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2DashboardActiveCountriesResponse, GetV2DashboardActiveCountriesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardActiveCountriesResponse, GetV2DashboardActiveCountriesError, TData>(
    queryKeyFn({ path: "/v2/dashboard/active-countries", operationId: "getV2DashboardActiveCountries", variables }),
    ({ signal }) => fetchGetV2DashboardActiveCountries({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardCountriesQueryParams = {
  /**
   * Optional. Filter counts and metrics by country.
   */
  country?: string;
};

export type GetV2DashboardCountriesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardCountriesResponse = {
  data?: {
    id?: number;
    country_slug?: string;
    data?: {
      label?: string;
      icon?: string;
    };
  }[];
};

export type GetV2DashboardCountriesVariables = {
  queryParams?: GetV2DashboardCountriesQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * This endpoint returns all countries and metrics related to id of country, country slug, label of country, and icon data.
 */
export const fetchGetV2DashboardCountries = (variables: GetV2DashboardCountriesVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2DashboardCountriesResponse,
    GetV2DashboardCountriesError,
    undefined,
    {},
    GetV2DashboardCountriesQueryParams,
    {}
  >({ url: "/v2/dashboard/countries", method: "get", ...variables, signal });

/**
 * This endpoint returns all countries and metrics related to id of country, country slug, label of country, and icon data.
 */
export const useGetV2DashboardCountries = <TData = GetV2DashboardCountriesResponse>(
  variables: GetV2DashboardCountriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2DashboardCountriesResponse, GetV2DashboardCountriesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardCountriesResponse, GetV2DashboardCountriesError, TData>(
    queryKeyFn({ path: "/v2/dashboard/countries", operationId: "getV2DashboardCountries", variables }),
    ({ signal }) => fetchGetV2DashboardCountries({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardGetProjectsQueryParams = {
  /**
   * Filter counts and metrics by country.
   */
  country?: string;
};

export type GetV2DashboardGetProjectsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardGetProjectsResponse = {
  data?: {
    uuid?: string;
    name?: string;
    /**
     * @format double
     */
    lat?: number;
    /**
     * @format double
     */
    long?: number;
  }[];
};

export type GetV2DashboardGetProjectsVariables = {
  queryParams?: GetV2DashboardGetProjectsQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * This endpoint returns all project location.
 */
export const fetchGetV2DashboardGetProjects = (variables: GetV2DashboardGetProjectsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2DashboardGetProjectsResponse,
    GetV2DashboardGetProjectsError,
    undefined,
    {},
    GetV2DashboardGetProjectsQueryParams,
    {}
  >({ url: "/v2/dashboard/get-projects", method: "get", ...variables, signal });

/**
 * This endpoint returns all project location.
 */
export const useGetV2DashboardGetProjects = <TData = GetV2DashboardGetProjectsResponse>(
  variables: GetV2DashboardGetProjectsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2DashboardGetProjectsResponse, GetV2DashboardGetProjectsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardGetProjectsResponse, GetV2DashboardGetProjectsError, TData>(
    queryKeyFn({ path: "/v2/dashboard/get-projects", operationId: "getV2DashboardGetProjects", variables }),
    ({ signal }) => fetchGetV2DashboardGetProjects({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardProjectDetailsProjectPathParams = {
  /**
   * Optional. Filter counts and metrics by UUID.
   */
  project: string;
};

export type GetV2DashboardProjectDetailsProjectError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardProjectDetailsProjectResponse = {
  data?: {
    name?: string;
    descriptionObjetive?: string;
    country?: string;
    organisation?: string;
    survivalRate?: number;
    countrySlug?: string;
    restorationStrategy?: {
      data?: string[];
    };
    targetLandUse?: {
      data?: string[];
    };
    landTenure?: {
      data?: string[];
    };
  };
};

export type GetV2DashboardProjectDetailsProjectVariables = {
  pathParams: GetV2DashboardProjectDetailsProjectPathParams;
} & ApiContext["fetcherOptions"];

/**
 * This endpoint return details to name of project, description objectives, restoration strategy, target land use type, and land tenure.
 */
export const fetchGetV2DashboardProjectDetailsProject = (
  variables: GetV2DashboardProjectDetailsProjectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2DashboardProjectDetailsProjectResponse,
    GetV2DashboardProjectDetailsProjectError,
    undefined,
    {},
    {},
    GetV2DashboardProjectDetailsProjectPathParams
  >({ url: "/v2/dashboard/project-details/{project}", method: "get", ...variables, signal });

/**
 * This endpoint return details to name of project, description objectives, restoration strategy, target land use type, and land tenure.
 */
export const useGetV2DashboardProjectDetailsProject = <TData = GetV2DashboardProjectDetailsProjectResponse>(
  variables: GetV2DashboardProjectDetailsProjectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2DashboardProjectDetailsProjectResponse,
      GetV2DashboardProjectDetailsProjectError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetV2DashboardProjectDetailsProjectResponse,
    GetV2DashboardProjectDetailsProjectError,
    TData
  >(
    queryKeyFn({
      path: "/v2/dashboard/project-details/{project}",
      operationId: "getV2DashboardProjectDetailsProject",
      variables
    }),
    ({ signal }) => fetchGetV2DashboardProjectDetailsProject({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2DashboardTopTreesPlantedQueryParams = {
  /**
   * Optional. Filter counts and metrics by country.
   */
  country?: string;
};

export type GetV2DashboardTopTreesPlantedError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardTopTreesPlantedResponse = {
  data?: {
    top_projects_most_planted_trees?: {
      project?: string;
      uuid?: string;
      trees_planted?: number;
    }[];
    top_tree_species_planted?: {
      name?: string;
      amount?: number;
    }[];
  };
};

export type GetV2DashboardTopTreesPlantedVariables = {
  queryParams?: GetV2DashboardTopTreesPlantedQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * This endpoint returns Tops and metrics related to projects and tree species.
 */
export const fetchGetV2DashboardTopTreesPlanted = (
  variables: GetV2DashboardTopTreesPlantedVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2DashboardTopTreesPlantedResponse,
    GetV2DashboardTopTreesPlantedError,
    undefined,
    {},
    GetV2DashboardTopTreesPlantedQueryParams,
    {}
  >({ url: "/v2/dashboard/top-trees-planted", method: "get", ...variables, signal });

/**
 * This endpoint returns Tops and metrics related to projects and tree species.
 */
export const useGetV2DashboardTopTreesPlanted = <TData = GetV2DashboardTopTreesPlantedResponse>(
  variables: GetV2DashboardTopTreesPlantedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2DashboardTopTreesPlantedResponse, GetV2DashboardTopTreesPlantedError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardTopTreesPlantedResponse, GetV2DashboardTopTreesPlantedError, TData>(
    queryKeyFn({ path: "/v2/dashboard/top-trees-planted", operationId: "getV2DashboardTopTreesPlanted", variables }),
    ({ signal }) => fetchGetV2DashboardTopTreesPlanted({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ProjectPipelineQueryParams = {
  /**
   * Optional. Filter counts and metrics by country.
   */
  country?: string;
};

export type GetV2ProjectPipelineError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectPipelineResponse = {
  data?: {
    name?: {
      name?: string;
      description?: string;
    };
    /**
     * @format date
     */
    date?: string;
    id?: number;
    submitted_by?: string;
    program?: string;
    cohort?: string;
    publish_for?: string;
    url?: string;
    /**
     * @format date
     */
    created_at?: string;
    /**
     * @format date
     */
    updated_at?: string;
  };
}[];

export type GetV2ProjectPipelineVariables = {
  queryParams?: GetV2ProjectPipelineQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectPipeline = (variables: GetV2ProjectPipelineVariables, signal?: AbortSignal) =>
  apiFetch<GetV2ProjectPipelineResponse, GetV2ProjectPipelineError, undefined, {}, GetV2ProjectPipelineQueryParams, {}>(
    { url: "/v2/project-pipeline", method: "get", ...variables, signal }
  );

export const useGetV2ProjectPipeline = <TData = GetV2ProjectPipelineResponse>(
  variables: GetV2ProjectPipelineVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectPipelineResponse, GetV2ProjectPipelineError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectPipelineResponse, GetV2ProjectPipelineError, TData>(
    queryKeyFn({ path: "/v2/project-pipeline", operationId: "getV2ProjectPipeline", variables }),
    ({ signal }) => fetchGetV2ProjectPipeline({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2ProjectPipelineQueryParams = {
  /**
   * Optional. Filter counts and metrics by country.
   */
  country?: string;
};

export type PostV2ProjectPipelineError = Fetcher.ErrorWrapper<undefined>;

export type PostV2ProjectPipelineResponse = {
  /**
   * @format date
   */
  date?: string;
  id?: number;
  submitted_by?: string;
  program?: string;
  cohort?: string;
  publish_for?: string;
  url?: string;
};

export type PostV2ProjectPipelineVariables = {
  body?: RequestBodies.PostV2FprojectPipelineBody;
  queryParams?: PostV2ProjectPipelineQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2ProjectPipeline = (variables: PostV2ProjectPipelineVariables, signal?: AbortSignal) =>
  apiFetch<
    PostV2ProjectPipelineResponse,
    PostV2ProjectPipelineError,
    RequestBodies.PostV2FprojectPipelineBody,
    {},
    PostV2ProjectPipelineQueryParams,
    {}
  >({ url: "/v2/project-pipeline", method: "post", ...variables, signal });

export const usePostV2ProjectPipeline = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2ProjectPipelineResponse,
      PostV2ProjectPipelineError,
      PostV2ProjectPipelineVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2ProjectPipelineResponse,
    PostV2ProjectPipelineError,
    PostV2ProjectPipelineVariables
  >(
    (variables: PostV2ProjectPipelineVariables) => fetchPostV2ProjectPipeline({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ProjectPipelineIdPathParams = {
  /**
   * show a specific project pipeline.
   */
  id: string;
};

export type GetV2ProjectPipelineIdError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectPipelineIdResponse = {
  data?: {
    name?: {
      name?: string;
      description?: string;
    };
    /**
     * @format date
     */
    date?: string;
    id?: number;
    submitted_by?: string;
    program?: string;
    cohort?: string;
    publish_for?: string;
    url?: string;
    /**
     * @format date
     */
    created_at?: string;
    /**
     * @format date
     */
    updated_at?: string;
  };
};

export type GetV2ProjectPipelineIdVariables = {
  pathParams: GetV2ProjectPipelineIdPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectPipelineId = (variables: GetV2ProjectPipelineIdVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2ProjectPipelineIdResponse,
    GetV2ProjectPipelineIdError,
    undefined,
    {},
    {},
    GetV2ProjectPipelineIdPathParams
  >({ url: "/v2/project-pipeline/{id}", method: "get", ...variables, signal });

export const useGetV2ProjectPipelineId = <TData = GetV2ProjectPipelineIdResponse>(
  variables: GetV2ProjectPipelineIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectPipelineIdResponse, GetV2ProjectPipelineIdError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectPipelineIdResponse, GetV2ProjectPipelineIdError, TData>(
    queryKeyFn({ path: "/v2/project-pipeline/{id}", operationId: "getV2ProjectPipelineId", variables }),
    ({ signal }) => fetchGetV2ProjectPipelineId({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2ProjectPipelineIdPathParams = {
  /**
   * edit a specific project pipeline.
   */
  id: string;
};

export type PutV2ProjectPipelineIdError = Fetcher.ErrorWrapper<undefined>;

export type PutV2ProjectPipelineIdResponse = {
  /**
   * @format date
   */
  date?: string;
  id?: number;
  submitted_by?: string;
  program?: string;
  cohort?: string;
  publish_for?: string;
  url?: string;
};

export type PutV2ProjectPipelineIdVariables = {
  body?: RequestBodies.PostV2FprojectPipelineBody;
  pathParams: PutV2ProjectPipelineIdPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2ProjectPipelineId = (variables: PutV2ProjectPipelineIdVariables, signal?: AbortSignal) =>
  apiFetch<
    PutV2ProjectPipelineIdResponse,
    PutV2ProjectPipelineIdError,
    RequestBodies.PostV2FprojectPipelineBody,
    {},
    {},
    PutV2ProjectPipelineIdPathParams
  >({ url: "/v2/project-pipeline/{id}", method: "put", ...variables, signal });

export const usePutV2ProjectPipelineId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2ProjectPipelineIdResponse,
      PutV2ProjectPipelineIdError,
      PutV2ProjectPipelineIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2ProjectPipelineIdResponse,
    PutV2ProjectPipelineIdError,
    PutV2ProjectPipelineIdVariables
  >(
    (variables: PutV2ProjectPipelineIdVariables) => fetchPutV2ProjectPipelineId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2ProjectPipelineIdPathParams = {
  /**
   * delete a specific project pipeline.
   */
  id: string;
};

export type DeleteV2ProjectPipelineIdError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2ProjectPipelineIdVariables = {
  pathParams: DeleteV2ProjectPipelineIdPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2ProjectPipelineId = (variables: DeleteV2ProjectPipelineIdVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2ProjectPipelineIdError, undefined, {}, {}, DeleteV2ProjectPipelineIdPathParams>({
    url: "/v2/project-pipeline/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2ProjectPipelineId = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2ProjectPipelineIdError, DeleteV2ProjectPipelineIdVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2ProjectPipelineIdError, DeleteV2ProjectPipelineIdVariables>(
    (variables: DeleteV2ProjectPipelineIdVariables) =>
      fetchDeleteV2ProjectPipelineId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2DashboardViewProjectUuidPathParams = {
  /**
   * UUID of the project
   */
  uuid: string;
};

export type GetV2DashboardViewProjectUuidError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DashboardViewProjectUuidResponse = {
  data?: {
    allowed?: boolean;
  };
};

export type GetV2DashboardViewProjectUuidVariables = {
  pathParams: GetV2DashboardViewProjectUuidPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2DashboardViewProjectUuid = (
  variables: GetV2DashboardViewProjectUuidVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2DashboardViewProjectUuidResponse,
    GetV2DashboardViewProjectUuidError,
    undefined,
    {},
    {},
    GetV2DashboardViewProjectUuidPathParams
  >({ url: "/v2/dashboard/view-project/{uuid}", method: "get", ...variables, signal });

export const useGetV2DashboardViewProjectUuid = <TData = GetV2DashboardViewProjectUuidResponse>(
  variables: GetV2DashboardViewProjectUuidVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2DashboardViewProjectUuidResponse, GetV2DashboardViewProjectUuidError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DashboardViewProjectUuidResponse, GetV2DashboardViewProjectUuidError, TData>(
    queryKeyFn({ path: "/v2/dashboard/view-project/{uuid}", operationId: "getV2DashboardViewProjectUuid", variables }),
    ({ signal }) => fetchGetV2DashboardViewProjectUuid({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2TerrafundPolygonGeojsonUuidPathParams = {
  /**
   * The UUID of the polygon geometry to retrieve.
   */
  uuid: string;
};

export type GetV2TerrafundPolygonGeojsonUuidError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: {
    /**
     * Error message indicating that no polygon geometry was found for the provided UUID.
     */
    message?: string;
  };
}>;

export type GetV2TerrafundPolygonGeojsonUuidResponse = {
  /**
   * The GeoJSON representation of the polygon geometry.
   */
  geojson?: Record<string, any>;
};

export type GetV2TerrafundPolygonGeojsonUuidVariables = {
  pathParams: GetV2TerrafundPolygonGeojsonUuidPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Retrieves the GeoJSON representation of a polygon geometry based on the provided UUID.
 */
export const fetchGetV2TerrafundPolygonGeojsonUuid = (
  variables: GetV2TerrafundPolygonGeojsonUuidVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2TerrafundPolygonGeojsonUuidResponse,
    GetV2TerrafundPolygonGeojsonUuidError,
    undefined,
    {},
    {},
    GetV2TerrafundPolygonGeojsonUuidPathParams
  >({ url: "/v2/terrafund/polygon/geojson/{uuid}", method: "get", ...variables, signal });

/**
 * Retrieves the GeoJSON representation of a polygon geometry based on the provided UUID.
 */
export const useGetV2TerrafundPolygonGeojsonUuid = <TData = GetV2TerrafundPolygonGeojsonUuidResponse>(
  variables: GetV2TerrafundPolygonGeojsonUuidVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2TerrafundPolygonGeojsonUuidResponse, GetV2TerrafundPolygonGeojsonUuidError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2TerrafundPolygonGeojsonUuidResponse, GetV2TerrafundPolygonGeojsonUuidError, TData>(
    queryKeyFn({
      path: "/v2/terrafund/polygon/geojson/{uuid}",
      operationId: "getV2TerrafundPolygonGeojsonUuid",
      variables
    }),
    ({ signal }) => fetchGetV2TerrafundPolygonGeojsonUuid({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2TypeEntityQueryParams = {
  /**
   * UUID of the entity
   */
  uuid: string;
  /**
   * type of the entity
   */
  type: string;
  /**
   * Comma-separated list of status values to filter by
   */
  status?: string;
  /**
   * Sort criteria in the format `sort[field]=direction`, e.g. `sort[poly_name]=asc or sort[status]=desc`
   */
  sort?: string;
};

export type GetV2TypeEntityError = Fetcher.ErrorWrapper<{
  status: 500;
  payload: {
    /**
     * Error message
     */
    error?: string;
  };
}>;

export type GetV2TypeEntityResponse = {
  /**
   * Type of the entity ('project', 'site', 'unknown')
   */
  type?: string;
  /**
   * UUID of the entity
   *
   * @format uuid
   */
  uuid?: string;
  polygonsData?: {
    id?: number;
    uuid?: string;
    primary_uuid?: string;
    project_id?: string;
    proj_name?: string;
    org_name?: string;
    poly_id?: string;
    poly_name?: string;
    site_id?: string;
    site_name?: string;
    /**
     * @format date
     */
    plantstart?: string;
    /**
     * @format date
     */
    plantend?: string;
    practice?: string;
    target_sys?: string;
    distr?: string;
    num_trees?: number;
    /**
     * @format float
     */
    calc_area?: number;
    created_by?: string;
    last_modified_by?: string;
    /**
     * @format date-time
     */
    deleted_at?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
    status?: string;
    source?: string;
    country?: string;
    is_active?: boolean;
    version_name?: string;
  }[];
  /**
   * Bounding box of the entity
   */
  bbox?: number[];
};

export type GetV2TypeEntityVariables = {
  queryParams: GetV2TypeEntityQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Determine the type of entity based on UUID.
 */
export const fetchGetV2TypeEntity = (variables: GetV2TypeEntityVariables, signal?: AbortSignal) =>
  apiFetch<GetV2TypeEntityResponse, GetV2TypeEntityError, undefined, {}, GetV2TypeEntityQueryParams, {}>({
    url: "/v2/type-entity",
    method: "get",
    ...variables,
    signal
  });

/**
 * Determine the type of entity based on UUID.
 */
export const useGetV2TypeEntity = <TData = GetV2TypeEntityResponse>(
  variables: GetV2TypeEntityVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2TypeEntityResponse, GetV2TypeEntityError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2TypeEntityResponse, GetV2TypeEntityError, TData>(
    queryKeyFn({ path: "/v2/type-entity", operationId: "getV2TypeEntity", variables }),
    ({ signal }) => fetchGetV2TypeEntity({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2ENTITYUUIDStatusPathParams = {
  /**
   * allowed values project/site/site-polygons
   */
  entity: string;
  uuid: string;
};

export type PutV2ENTITYUUIDStatusError = Fetcher.ErrorWrapper<undefined>;

export type PutV2ENTITYUUIDStatusVariables = {
  pathParams: PutV2ENTITYUUIDStatusPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2ENTITYUUIDStatus = (variables: PutV2ENTITYUUIDStatusVariables, signal?: AbortSignal) =>
  apiFetch<undefined, PutV2ENTITYUUIDStatusError, undefined, {}, {}, PutV2ENTITYUUIDStatusPathParams>({
    url: "/v2/{entity}/{uuid}/status",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2ENTITYUUIDStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PutV2ENTITYUUIDStatusError, PutV2ENTITYUUIDStatusVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2ENTITYUUIDStatusError, PutV2ENTITYUUIDStatusVariables>(
    (variables: PutV2ENTITYUUIDStatusVariables) => fetchPutV2ENTITYUUIDStatus({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2ENTITYUUIDIDDeletePathParams = {
  /**
   * allowed values project/site/site-polygons
   */
  entity: string;
  uuid: string;
  /**
   * allowed values uuid/id
   */
  id: string;
};

export type DeleteV2ENTITYUUIDIDDeleteError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2ENTITYUUIDIDDeleteVariables = {
  pathParams: DeleteV2ENTITYUUIDIDDeletePathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2ENTITYUUIDIDDelete = (variables: DeleteV2ENTITYUUIDIDDeleteVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2ENTITYUUIDIDDeleteError, undefined, {}, {}, DeleteV2ENTITYUUIDIDDeletePathParams>({
    url: "/v2/{entity}/{uuid}/{id}/delete",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2ENTITYUUIDIDDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2ENTITYUUIDIDDeleteError, DeleteV2ENTITYUUIDIDDeleteVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2ENTITYUUIDIDDeleteError, DeleteV2ENTITYUUIDIDDeleteVariables>(
    (variables: DeleteV2ENTITYUUIDIDDeleteVariables) =>
      fetchDeleteV2ENTITYUUIDIDDelete({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ProjectsUUIDSitePolygonsAllPathParams = {
  uuid: string;
};

export type GetV2ProjectsUUIDSitePolygonsAllError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDSitePolygonsAllResponse = {
  id?: number;
  uuid?: string;
  poly_name?: string;
  status?: string;
  /**
   * @format date-time
   */
  date_created?: string;
  created_by?: string;
}[];

export type GetV2ProjectsUUIDSitePolygonsAllVariables = {
  pathParams: GetV2ProjectsUUIDSitePolygonsAllPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectsUUIDSitePolygonsAll = (
  variables: GetV2ProjectsUUIDSitePolygonsAllVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2ProjectsUUIDSitePolygonsAllResponse,
    GetV2ProjectsUUIDSitePolygonsAllError,
    undefined,
    {},
    {},
    GetV2ProjectsUUIDSitePolygonsAllPathParams
  >({ url: "/v2/projects/{uuid}/site-polygons/all", method: "get", ...variables, signal });

export const useGetV2ProjectsUUIDSitePolygonsAll = <TData = GetV2ProjectsUUIDSitePolygonsAllResponse>(
  variables: GetV2ProjectsUUIDSitePolygonsAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectsUUIDSitePolygonsAllResponse, GetV2ProjectsUUIDSitePolygonsAllError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectsUUIDSitePolygonsAllResponse, GetV2ProjectsUUIDSitePolygonsAllError, TData>(
    queryKeyFn({
      path: "/v2/projects/{UUID}/site-polygons/all",
      operationId: "getV2ProjectsUUIDSitePolygonsAll",
      variables
    }),
    ({ signal }) => fetchGetV2ProjectsUUIDSitePolygonsAll({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2SitesSiteCheckApprovePathParams = {
  site: string;
};

export type GetV2SitesSiteCheckApproveError = Fetcher.ErrorWrapper<undefined>;

export type GetV2SitesSiteCheckApproveResponse = {
  data?: {
    can_approve?: boolean;
  };
};

export type GetV2SitesSiteCheckApproveVariables = {
  pathParams: GetV2SitesSiteCheckApprovePathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2SitesSiteCheckApprove = (variables: GetV2SitesSiteCheckApproveVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2SitesSiteCheckApproveResponse,
    GetV2SitesSiteCheckApproveError,
    undefined,
    {},
    {},
    GetV2SitesSiteCheckApprovePathParams
  >({ url: "/v2/sites/{site}/check-approve", method: "get", ...variables, signal });

export const useGetV2SitesSiteCheckApprove = <TData = GetV2SitesSiteCheckApproveResponse>(
  variables: GetV2SitesSiteCheckApproveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2SitesSiteCheckApproveResponse, GetV2SitesSiteCheckApproveError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2SitesSiteCheckApproveResponse, GetV2SitesSiteCheckApproveError, TData>(
    queryKeyFn({ path: "/v2/sites/{site}/check-approve", operationId: "getV2SitesSiteCheckApprove", variables }),
    ({ signal }) => fetchGetV2SitesSiteCheckApprove({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2SitePolygonStatusBulkError = Fetcher.ErrorWrapper<undefined>;

export type PutV2SitePolygonStatusBulkResponse = {
  data?: {
    id?: number;
    uuid?: string;
    primary_uuid?: string;
    project_id?: string;
    proj_name?: string;
    org_name?: string;
    poly_id?: string;
    poly_name?: string;
    site_id?: string;
    site_name?: string;
    /**
     * @format date
     */
    plantstart?: string;
    /**
     * @format date
     */
    plantend?: string;
    practice?: string;
    target_sys?: string;
    distr?: string;
    num_trees?: number;
    /**
     * @format float
     */
    calc_area?: number;
    created_by?: string;
    last_modified_by?: string;
    /**
     * @format date-time
     */
    deleted_at?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
    status?: string;
    source?: string;
    country?: string;
    is_active?: boolean;
    version_name?: string;
  }[];
};

export type PutV2SitePolygonStatusBulkRequestBody = {
  comment?: string;
  updatePolygons?: {
    uuid?: string;
    status?: string;
  }[];
};

export type PutV2SitePolygonStatusBulkVariables = {
  body?: PutV2SitePolygonStatusBulkRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPutV2SitePolygonStatusBulk = (variables: PutV2SitePolygonStatusBulkVariables, signal?: AbortSignal) =>
  apiFetch<
    PutV2SitePolygonStatusBulkResponse,
    PutV2SitePolygonStatusBulkError,
    PutV2SitePolygonStatusBulkRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/site-polygon/status/bulk", method: "put", ...variables, signal });

export const usePutV2SitePolygonStatusBulk = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2SitePolygonStatusBulkResponse,
      PutV2SitePolygonStatusBulkError,
      PutV2SitePolygonStatusBulkVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2SitePolygonStatusBulkResponse,
    PutV2SitePolygonStatusBulkError,
    PutV2SitePolygonStatusBulkVariables
  >(
    (variables: PutV2SitePolygonStatusBulkVariables) =>
      fetchPutV2SitePolygonStatusBulk({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2SitePolygonUuidPathParams = {
  /**
   * The UUID of the site polygon
   *
   * @format uuid
   */
  uuid: string;
};

export type GetV2SitePolygonUuidError = Fetcher.ErrorWrapper<undefined>;

export type GetV2SitePolygonUuidResponse = {
  data?: {
    id?: number;
    uuid?: string;
    primary_uuid?: string;
    project_id?: string;
    proj_name?: string;
    org_name?: string;
    poly_id?: string;
    poly_name?: string;
    site_id?: string;
    site_name?: string;
    /**
     * @format date
     */
    plantstart?: string;
    /**
     * @format date
     */
    plantend?: string;
    practice?: string;
    target_sys?: string;
    distr?: string;
    num_trees?: number;
    /**
     * @format float
     */
    calc_area?: number;
    created_by?: string;
    last_modified_by?: string;
    /**
     * @format date-time
     */
    deleted_at?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
    status?: string;
    source?: string;
    country?: string;
    is_active?: boolean;
    version_name?: string;
  };
};

export type GetV2SitePolygonUuidVariables = {
  pathParams: GetV2SitePolygonUuidPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2SitePolygonUuid = (variables: GetV2SitePolygonUuidVariables, signal?: AbortSignal) =>
  apiFetch<GetV2SitePolygonUuidResponse, GetV2SitePolygonUuidError, undefined, {}, {}, GetV2SitePolygonUuidPathParams>({
    url: "/v2/site-polygon/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2SitePolygonUuid = <TData = GetV2SitePolygonUuidResponse>(
  variables: GetV2SitePolygonUuidVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2SitePolygonUuidResponse, GetV2SitePolygonUuidError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2SitePolygonUuidResponse, GetV2SitePolygonUuidError, TData>(
    queryKeyFn({ path: "/v2/site-polygon/{uuid}", operationId: "getV2SitePolygonUuid", variables }),
    ({ signal }) => fetchGetV2SitePolygonUuid({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2SitePolygonUuidVersionsPathParams = {
  /**
   * The UUID of the site polygon
   *
   * @format uuid
   */
  uuid: string;
};

export type GetV2SitePolygonUuidVersionsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2SitePolygonUuidVersionsResponse = {
  data?: {
    id?: number;
    uuid?: string;
    primary_uuid?: string;
    project_id?: string;
    proj_name?: string;
    org_name?: string;
    poly_id?: string;
    poly_name?: string;
    site_id?: string;
    site_name?: string;
    /**
     * @format date
     */
    plantstart?: string;
    /**
     * @format date
     */
    plantend?: string;
    practice?: string;
    target_sys?: string;
    distr?: string;
    num_trees?: number;
    /**
     * @format float
     */
    calc_area?: number;
    created_by?: string;
    last_modified_by?: string;
    /**
     * @format date-time
     */
    deleted_at?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
    status?: string;
    source?: string;
    country?: string;
    is_active?: boolean;
    version_name?: string;
  }[];
};

export type GetV2SitePolygonUuidVersionsVariables = {
  pathParams: GetV2SitePolygonUuidVersionsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2SitePolygonUuidVersions = (
  variables: GetV2SitePolygonUuidVersionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2SitePolygonUuidVersionsResponse,
    GetV2SitePolygonUuidVersionsError,
    undefined,
    {},
    {},
    GetV2SitePolygonUuidVersionsPathParams
  >({ url: "/v2/site-polygon/{uuid}/versions", method: "get", ...variables, signal });

export const useGetV2SitePolygonUuidVersions = <TData = GetV2SitePolygonUuidVersionsResponse>(
  variables: GetV2SitePolygonUuidVersionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2SitePolygonUuidVersionsResponse, GetV2SitePolygonUuidVersionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2SitePolygonUuidVersionsResponse, GetV2SitePolygonUuidVersionsError, TData>(
    queryKeyFn({ path: "/v2/site-polygon/{uuid}/versions", operationId: "getV2SitePolygonUuidVersions", variables }),
    ({ signal }) => fetchGetV2SitePolygonUuidVersions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2SitePolygonUuidNewVersionPathParams = {
  /**
   * The UUID of the site polygon
   *
   * @format uuid
   */
  uuid: string;
};

export type PostV2SitePolygonUuidNewVersionError = Fetcher.ErrorWrapper<undefined>;

export type PostV2SitePolygonUuidNewVersionResponse = {
  data?: {
    id?: number;
    uuid?: string;
    primary_uuid?: string;
    project_id?: string;
    proj_name?: string;
    org_name?: string;
    poly_id?: string;
    poly_name?: string;
    site_id?: string;
    site_name?: string;
    /**
     * @format date
     */
    plantstart?: string;
    /**
     * @format date
     */
    plantend?: string;
    practice?: string;
    target_sys?: string;
    distr?: string;
    num_trees?: number;
    /**
     * @format float
     */
    calc_area?: number;
    created_by?: string;
    last_modified_by?: string;
    /**
     * @format date-time
     */
    deleted_at?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
    status?: string;
    source?: string;
    country?: string;
    is_active?: boolean;
    version_name?: string;
  };
};

export type PostV2SitePolygonUuidNewVersionVariables = {
  pathParams: PostV2SitePolygonUuidNewVersionPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2SitePolygonUuidNewVersion = (
  variables: PostV2SitePolygonUuidNewVersionVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2SitePolygonUuidNewVersionResponse,
    PostV2SitePolygonUuidNewVersionError,
    undefined,
    {},
    {},
    PostV2SitePolygonUuidNewVersionPathParams
  >({ url: "/v2/site-polygon/{uuid}/new-version", method: "post", ...variables, signal });

export const usePostV2SitePolygonUuidNewVersion = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2SitePolygonUuidNewVersionResponse,
      PostV2SitePolygonUuidNewVersionError,
      PostV2SitePolygonUuidNewVersionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2SitePolygonUuidNewVersionResponse,
    PostV2SitePolygonUuidNewVersionError,
    PostV2SitePolygonUuidNewVersionVariables
  >(
    (variables: PostV2SitePolygonUuidNewVersionVariables) =>
      fetchPostV2SitePolygonUuidNewVersion({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2SitePolygonUuidMakeActivePathParams = {
  /**
   * The UUID of the site polygon
   *
   * @format uuid
   */
  uuid: string;
};

export type PutV2SitePolygonUuidMakeActiveError = Fetcher.ErrorWrapper<undefined>;

export type PutV2SitePolygonUuidMakeActiveResponse = {
  data?: {
    id?: number;
    uuid?: string;
    primary_uuid?: string;
    project_id?: string;
    proj_name?: string;
    org_name?: string;
    poly_id?: string;
    poly_name?: string;
    site_id?: string;
    site_name?: string;
    /**
     * @format date
     */
    plantstart?: string;
    /**
     * @format date
     */
    plantend?: string;
    practice?: string;
    target_sys?: string;
    distr?: string;
    num_trees?: number;
    /**
     * @format float
     */
    calc_area?: number;
    created_by?: string;
    last_modified_by?: string;
    /**
     * @format date-time
     */
    deleted_at?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
    status?: string;
    source?: string;
    country?: string;
    is_active?: boolean;
    version_name?: string;
  };
};

export type PutV2SitePolygonUuidMakeActiveVariables = {
  pathParams: PutV2SitePolygonUuidMakeActivePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2SitePolygonUuidMakeActive = (
  variables: PutV2SitePolygonUuidMakeActiveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2SitePolygonUuidMakeActiveResponse,
    PutV2SitePolygonUuidMakeActiveError,
    undefined,
    {},
    {},
    PutV2SitePolygonUuidMakeActivePathParams
  >({ url: "/v2/site-polygon/{uuid}/make-active", method: "put", ...variables, signal });

export const usePutV2SitePolygonUuidMakeActive = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2SitePolygonUuidMakeActiveResponse,
      PutV2SitePolygonUuidMakeActiveError,
      PutV2SitePolygonUuidMakeActiveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2SitePolygonUuidMakeActiveResponse,
    PutV2SitePolygonUuidMakeActiveError,
    PutV2SitePolygonUuidMakeActiveVariables
  >(
    (variables: PutV2SitePolygonUuidMakeActiveVariables) =>
      fetchPutV2SitePolygonUuidMakeActive({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2UsersLocaleError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2UsersLocaleResponse = {
  message?: string;
};

export type PatchV2UsersLocaleRequestBody = {
  locale?: string;
};

export type PatchV2UsersLocaleVariables = {
  body?: PatchV2UsersLocaleRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2UsersLocale = (variables: PatchV2UsersLocaleVariables, signal?: AbortSignal) =>
  apiFetch<PatchV2UsersLocaleResponse, PatchV2UsersLocaleError, PatchV2UsersLocaleRequestBody, {}, {}, {}>({
    url: "/v2/users/locale",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2UsersLocale = (
  options?: Omit<
    reactQuery.UseMutationOptions<PatchV2UsersLocaleResponse, PatchV2UsersLocaleError, PatchV2UsersLocaleVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PatchV2UsersLocaleResponse, PatchV2UsersLocaleError, PatchV2UsersLocaleVariables>(
    (variables: PatchV2UsersLocaleVariables) => fetchPatchV2UsersLocale({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2TerrafundClipPolygonsPolygonUuidPathParams = {
  /**
   * The UUID of the polygon to clip polygons for.
   */
  uuid: string;
};

export type PostV2TerrafundClipPolygonsPolygonUuidError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundClipPolygonsPolygonUuidResponse = {
  updated_polygons?: {
    uuid?: string;
    poly_name?: string;
  }[];
};

export type PostV2TerrafundClipPolygonsPolygonUuidVariables = {
  pathParams: PostV2TerrafundClipPolygonsPolygonUuidPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Clips overlapping polygons based on the provided polygon UUID and returns the updated polygons.
 */
export const fetchPostV2TerrafundClipPolygonsPolygonUuid = (
  variables: PostV2TerrafundClipPolygonsPolygonUuidVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2TerrafundClipPolygonsPolygonUuidResponse,
    PostV2TerrafundClipPolygonsPolygonUuidError,
    undefined,
    {},
    {},
    PostV2TerrafundClipPolygonsPolygonUuidPathParams
  >({ url: "/v2/terrafund/clip-polygons/polygon/{uuid}", method: "post", ...variables, signal });

/**
 * Clips overlapping polygons based on the provided polygon UUID and returns the updated polygons.
 */
export const usePostV2TerrafundClipPolygonsPolygonUuid = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2TerrafundClipPolygonsPolygonUuidResponse,
      PostV2TerrafundClipPolygonsPolygonUuidError,
      PostV2TerrafundClipPolygonsPolygonUuidVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2TerrafundClipPolygonsPolygonUuidResponse,
    PostV2TerrafundClipPolygonsPolygonUuidError,
    PostV2TerrafundClipPolygonsPolygonUuidVariables
  >(
    (variables: PostV2TerrafundClipPolygonsPolygonUuidVariables) =>
      fetchPostV2TerrafundClipPolygonsPolygonUuid({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2TerrafundClipPolygonsSiteUuidPathParams = {
  /**
   * The UUID of the site to clip polygons for.
   */
  uuid: string;
};

export type PostV2TerrafundClipPolygonsSiteUuidError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TerrafundClipPolygonsSiteUuidResponse = {
  updated_polygons?: {
    uuid?: string;
    poly_name?: string;
  }[];
};

export type PostV2TerrafundClipPolygonsSiteUuidVariables = {
  pathParams: PostV2TerrafundClipPolygonsSiteUuidPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Clips overlapping polygons based on the provided site UUID and returns the updated polygons.
 */
export const fetchPostV2TerrafundClipPolygonsSiteUuid = (
  variables: PostV2TerrafundClipPolygonsSiteUuidVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2TerrafundClipPolygonsSiteUuidResponse,
    PostV2TerrafundClipPolygonsSiteUuidError,
    undefined,
    {},
    {},
    PostV2TerrafundClipPolygonsSiteUuidPathParams
  >({ url: "/v2/terrafund/clip-polygons/site/{uuid}", method: "post", ...variables, signal });

/**
 * Clips overlapping polygons based on the provided site UUID and returns the updated polygons.
 */
export const usePostV2TerrafundClipPolygonsSiteUuid = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2TerrafundClipPolygonsSiteUuidResponse,
      PostV2TerrafundClipPolygonsSiteUuidError,
      PostV2TerrafundClipPolygonsSiteUuidVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2TerrafundClipPolygonsSiteUuidResponse,
    PostV2TerrafundClipPolygonsSiteUuidError,
    PostV2TerrafundClipPolygonsSiteUuidVariables
  >(
    (variables: PostV2TerrafundClipPolygonsSiteUuidVariables) =>
      fetchPostV2TerrafundClipPolygonsSiteUuid({ ...fetcherOptions, ...variables }),
    options
  );
};

export type QueryOperation =
  | {
      path: "/v2/tree-species/{entity}/{UUID}";
      operationId: "getV2TreeSpeciesEntityUUID";
      variables: GetV2TreeSpeciesEntityUUIDVariables;
    }
  | {
      path: "/v2/admin/projects/multi";
      operationId: "getV2AdminProjectsMulti";
      variables: GetV2AdminProjectsMultiVariables;
    }
  | {
      path: "/v2/admin/nurseries/multi";
      operationId: "getV2AdminNurseriesMulti";
      variables: GetV2AdminNurseriesMultiVariables;
    }
  | {
      path: "/v2/admin/sites/multi";
      operationId: "getV2AdminSitesMulti";
      variables: GetV2AdminSitesMultiVariables;
    }
  | {
      path: "/v2/projects/{UUID}/partners";
      operationId: "getV2ProjectsUUIDPartners";
      variables: GetV2ProjectsUUIDPartnersVariables;
    }
  | {
      path: "/v2/my/projects";
      operationId: "getV2MyProjects";
      variables: GetV2MyProjectsVariables;
    }
  | {
      path: "/v2/my/actions";
      operationId: "getV2MyActions";
      variables: GetV2MyActionsVariables;
    }
  | {
      path: "/v2/{ENTITY}/{UUID}/reports";
      operationId: "getV2ENTITYUUIDReports";
      variables: GetV2ENTITYUUIDReportsVariables;
    }
  | {
      path: "/v2/admin/nursery-reports";
      operationId: "getV2AdminNurseryReports";
      variables: GetV2AdminNurseryReportsVariables;
    }
  | {
      path: "/v2/admin/site-reports";
      operationId: "getV2AdminSiteReports";
      variables: GetV2AdminSiteReportsVariables;
    }
  | {
      path: "/v2/admin/project-reports";
      operationId: "getV2AdminProjectReports";
      variables: GetV2AdminProjectReportsVariables;
    }
  | {
      path: "/v2/admin/tasks";
      operationId: "getV2AdminTasks";
      variables: GetV2AdminTasksVariables;
    }
  | {
      path: "/v2/admin/nurseries";
      operationId: "getV2AdminNurseries";
      variables: GetV2AdminNurseriesVariables;
    }
  | {
      path: "/v2/admin/forms";
      operationId: "getV2AdminForms";
      variables: GetV2AdminFormsVariables;
    }
  | {
      path: "/v2/admin/reporting-frameworks";
      operationId: "getV2AdminReportingFrameworks";
      variables: GetV2AdminReportingFrameworksVariables;
    }
  | {
      path: "/v2/reporting-frameworks/access-code/{ACCESS_CODE}";
      operationId: "getV2ReportingFrameworksAccessCodeACCESSCODE";
      variables: GetV2ReportingFrameworksAccessCodeACCESSCODEVariables;
    }
  | {
      path: "/v2/reporting-frameworks/{UUID}";
      operationId: "getV2ReportingFrameworksUUID";
      variables: GetV2ReportingFrameworksUUIDVariables;
    }
  | {
      path: "/v2/forms/{ENTITY}/{UUID}";
      operationId: "getV2FormsENTITYUUID";
      variables: GetV2FormsENTITYUUIDVariables;
    }
  | {
      path: "/v2/projects/{UUID}/site-polygons";
      operationId: "getV2ProjectsUUIDSitePolygons";
      variables: GetV2ProjectsUUIDSitePolygonsVariables;
    }
  | {
      path: "/v2/admin/update-requests/";
      operationId: "getV2AdminUpdateRequests";
      variables: GetV2AdminUpdateRequestsVariables;
    }
  | {
      path: "/v2/update-requests/{UUID}";
      operationId: "getV2UpdateRequestsUUID";
      variables: GetV2UpdateRequestsUUIDVariables;
    }
  | {
      path: "/v2/update-requests/{ENTITY}/{UUID}";
      operationId: "getV2UpdateRequestsENTITYUUID";
      variables: GetV2UpdateRequestsENTITYUUIDVariables;
    }
  | {
      path: "/v2/workdays/{ENTITY}/{UUID}";
      operationId: "getV2WorkdaysENTITYUUID";
      variables: GetV2WorkdaysENTITYUUIDVariables;
    }
  | {
      path: "/v2/stratas/{ENTITY}/{UUID}";
      operationId: "getV2StratasENTITYUUID";
      variables: GetV2StratasENTITYUUIDVariables;
    }
  | {
      path: "/v2/seedings/{ENTITY}/{UUID}";
      operationId: "getV2SeedingsENTITYUUID";
      variables: GetV2SeedingsENTITYUUIDVariables;
    }
  | {
      path: "/v2/disturbances/{ENTITY}/{UUID}";
      operationId: "getV2DisturbancesENTITYUUID";
      variables: GetV2DisturbancesENTITYUUIDVariables;
    }
  | {
      path: "/v2/invasives/{ENTITY}/{UUID}";
      operationId: "getV2InvasivesENTITYUUID";
      variables: GetV2InvasivesENTITYUUIDVariables;
    }
  | {
      path: "/v2/forms";
      operationId: "getV2Forms";
      variables: GetV2FormsVariables;
    }
  | {
      path: "/v2/forms/linked-field-listing";
      operationId: "getV2FormsLinkedFieldListing";
      variables: GetV2FormsLinkedFieldListingVariables;
    }
  | {
      path: "/v2/admin/forms/common-options/{BUCKET}";
      operationId: "getV2AdminFormsCommonOptionsBUCKET";
      variables: GetV2AdminFormsCommonOptionsBUCKETVariables;
    }
  | {
      path: "/v2/admin/organisations";
      operationId: "getV2AdminOrganisations";
      variables: GetV2AdminOrganisationsVariables;
    }
  | {
      path: "/v2/admin/organisations/multi";
      operationId: "getV2AdminOrganisationsMulti";
      variables: GetV2AdminOrganisationsMultiVariables;
    }
  | {
      path: "/v2/admin/organisations/{UUID}";
      operationId: "getV2AdminOrganisationsUUID";
      variables: GetV2AdminOrganisationsUUIDVariables;
    }
  | {
      path: "/v2/admin/organisations/export";
      operationId: "getV2AdminOrganisationsExport";
      variables: GetV2AdminOrganisationsExportVariables;
    }
  | {
      path: "/v2/organisations/{UUID}";
      operationId: "getV2OrganisationsUUID";
      variables: GetV2OrganisationsUUIDVariables;
    }
  | {
      path: "/v2/organisations/listing";
      operationId: "getV2OrganisationsListing";
      variables: GetV2OrganisationsListingVariables;
    }
  | {
      path: "/v2/organisations/user-requests/{UUID}";
      operationId: "getV2OrganisationsUserRequestsUUID";
      variables: GetV2OrganisationsUserRequestsUUIDVariables;
    }
  | {
      path: "/v2/organisations/approved-users/{UUID}";
      operationId: "getV2OrganisationsApprovedUsersUUID";
      variables: GetV2OrganisationsApprovedUsersUUIDVariables;
    }
  | {
      path: "/v2/admin/users";
      operationId: "getV2AdminUsers";
      variables: GetV2AdminUsersVariables;
    }
  | {
      path: "/v2/admin/users/users-organisation-list/{UUID}";
      operationId: "getV2AdminUsersUsersOrganisationListUUID";
      variables: GetV2AdminUsersUsersOrganisationListUUIDVariables;
    }
  | {
      path: "/v2/admin/users/{UUID}";
      operationId: "getV2AdminUsersUUID";
      variables: GetV2AdminUsersUUIDVariables;
    }
  | {
      path: "/v2/admin/users/multi";
      operationId: "getV2AdminUsersMulti";
      variables: GetV2AdminUsersMultiVariables;
    }
  | {
      path: "/v2/admin/users/export";
      operationId: "getV2AdminUsersExport";
      variables: GetV2AdminUsersExportVariables;
    }
  | {
      path: "/v2/{MODEL}/{UUID}/files";
      operationId: "getV2MODELUUIDFiles";
      variables: GetV2MODELUUIDFilesVariables;
    }
  | {
      path: "/v2/{MODEL}/{UUID}/image/locations";
      operationId: "getV2MODELUUIDImageLocations";
      variables: GetV2MODELUUIDImageLocationsVariables;
    }
  | {
      path: "/v2/admin/sites";
      operationId: "getV2AdminSites";
      variables: GetV2AdminSitesVariables;
    }
  | {
      path: "/v2/admin/project-pitches";
      operationId: "getV2AdminProjectPitches";
      variables: GetV2AdminProjectPitchesVariables;
    }
  | {
      path: "/v2/admin/projects";
      operationId: "getV2AdminProjects";
      variables: GetV2AdminProjectsVariables;
    }
  | {
      path: "/v2/projects/{UUID}";
      operationId: "getV2ProjectsUUID";
      variables: GetV2ProjectsUUIDVariables;
    }
  | {
      path: "/v2/projects/{UUID}/sites";
      operationId: "getV2ProjectsUUIDSites";
      variables: GetV2ProjectsUUIDSitesVariables;
    }
  | {
      path: "/v2/projects/{UUID}/nurseries";
      operationId: "getV2ProjectsUUIDNurseries";
      variables: GetV2ProjectsUUIDNurseriesVariables;
    }
  | {
      path: "/v2/projects/{UUID}/tasks";
      operationId: "getV2ProjectsUUIDTasks";
      variables: GetV2ProjectsUUIDTasksVariables;
    }
  | {
      path: "/v2/organisations/{UUID}/tasks";
      operationId: "getV2OrganisationsUUIDTasks";
      variables: GetV2OrganisationsUUIDTasksVariables;
    }
  | {
      path: "/v2/tasks/{UUID}";
      operationId: "getV2TasksUUID";
      variables: GetV2TasksUUIDVariables;
    }
  | {
      path: "/v2/tasks/{UUID}/reports";
      operationId: "getV2TasksUUIDReports";
      variables: GetV2TasksUUIDReportsVariables;
    }
  | {
      path: "/v2/{ENTITY}/{UUID}";
      operationId: "getV2ENTITYUUID";
      variables: GetV2ENTITYUUIDVariables;
    }
  | {
      path: "/v2/forms/sites/{UUID}";
      operationId: "getV2FormsSitesUUID";
      variables: GetV2FormsSitesUUIDVariables;
    }
  | {
      path: "/v2/admin/project-pitches/export";
      operationId: "getV2AdminProjectPitchesExport";
      variables: GetV2AdminProjectPitchesExportVariables;
    }
  | {
      path: "/v2/project-pitches";
      operationId: "getV2ProjectPitches";
      variables: GetV2ProjectPitchesVariables;
    }
  | {
      path: "/v2/project-pitches/{UUID}";
      operationId: "getV2ProjectPitchesUUID";
      variables: GetV2ProjectPitchesUUIDVariables;
    }
  | {
      path: "/v2/project-pitches/{UUID}/submissions";
      operationId: "getV2ProjectPitchesUUIDSubmissions";
      variables: GetV2ProjectPitchesUUIDSubmissionsVariables;
    }
  | {
      path: "/v2/admin/forms/submissions/{UUID}";
      operationId: "getV2AdminFormsSubmissionsUUID";
      variables: GetV2AdminFormsSubmissionsUUIDVariables;
    }
  | {
      path: "/v2/admin/forms/submissions/{UUID}/export";
      operationId: "getV2AdminFormsSubmissionsUUIDExport";
      variables: GetV2AdminFormsSubmissionsUUIDExportVariables;
    }
  | {
      path: "/v2/admin/forms/submissions";
      operationId: "getV2AdminFormsSubmissions";
      variables: GetV2AdminFormsSubmissionsVariables;
    }
  | {
      path: "/v2/forms/my/submissions";
      operationId: "getV2FormsMySubmissions";
      variables: GetV2FormsMySubmissionsVariables;
    }
  | {
      path: "/v2/forms/{UUID}";
      operationId: "getV2FormsUUID";
      variables: GetV2FormsUUIDVariables;
    }
  | {
      path: "/v2/funding-programme";
      operationId: "getV2FundingProgramme";
      variables: GetV2FundingProgrammeVariables;
    }
  | {
      path: "/v2/admin/funding-programme";
      operationId: "getV2AdminFundingProgramme";
      variables: GetV2AdminFundingProgrammeVariables;
    }
  | {
      path: "/v2/funding-programme/{UUID}";
      operationId: "getV2FundingProgrammeUUID";
      variables: GetV2FundingProgrammeUUIDVariables;
    }
  | {
      path: "/v2/admin/funding-programme/{UUID}";
      operationId: "getV2AdminFundingProgrammeUUID";
      variables: GetV2AdminFundingProgrammeUUIDVariables;
    }
  | {
      path: "/v2/funding-programme/stage";
      operationId: "getV2FundingProgrammeStage";
      variables: GetV2FundingProgrammeStageVariables;
    }
  | {
      path: "/v2/funding-programme/stage/{UUID}";
      operationId: "getV2FundingProgrammeStageUUID";
      variables: GetV2FundingProgrammeStageUUIDVariables;
    }
  | {
      path: "/v2/forms/submissions/{UUID}";
      operationId: "getV2FormsSubmissionsUUID";
      variables: GetV2FormsSubmissionsUUIDVariables;
    }
  | {
      path: "/v2/admin/forms/applications";
      operationId: "getV2AdminFormsApplications";
      variables: GetV2AdminFormsApplicationsVariables;
    }
  | {
      path: "/v2/admin/forms/applications/{UUID}";
      operationId: "getV2AdminFormsApplicationsUUID";
      variables: GetV2AdminFormsApplicationsUUIDVariables;
    }
  | {
      path: "/v2/admin/forms/applications/{UUID}/export";
      operationId: "getV2AdminFormsApplicationsUUIDExport";
      variables: GetV2AdminFormsApplicationsUUIDExportVariables;
    }
  | {
      path: "/v2/my/applications";
      operationId: "getV2MyApplications";
      variables: GetV2MyApplicationsVariables;
    }
  | {
      path: "/v2/applications/{UUID}";
      operationId: "getV2ApplicationsUUID";
      variables: GetV2ApplicationsUUIDVariables;
    }
  | {
      path: "/v2/applications/{UUID}/export";
      operationId: "getV2ApplicationsUUIDExport";
      variables: GetV2ApplicationsUUIDExportVariables;
    }
  | {
      path: "/auth/logout";
      operationId: "getAuthLogout";
      variables: GetAuthLogoutVariables;
    }
  | {
      path: "/auth/me";
      operationId: "getAuthMe";
      variables: GetAuthMeVariables;
    }
  | {
      path: "/v2/admin/forms/submissions/export";
      operationId: "getV2AdminFormsSubmissionsExport";
      variables: GetV2AdminFormsSubmissionsExportVariables;
    }
  | {
      path: "/v2/forms/option-labels";
      operationId: "getV2FormsOptionLabels";
      variables: GetV2FormsOptionLabelsVariables;
    }
  | {
      path: "/v2/sites/{UUID}";
      operationId: "getV2SitesUUID";
      variables: GetV2SitesUUIDVariables;
    }
  | {
      path: "/v2/site-monitorings/{UUID}";
      operationId: "getV2SiteMonitoringsUUID";
      variables: GetV2SiteMonitoringsUUIDVariables;
    }
  | {
      path: "/v2/sites/{UUID}/monitorings";
      operationId: "getV2SitesUUIDMonitorings";
      variables: GetV2SitesUUIDMonitoringsVariables;
    }
  | {
      path: "/v2/projects/{UUID}/monitorings";
      operationId: "getV2ProjectsUUIDMonitorings";
      variables: GetV2ProjectsUUIDMonitoringsVariables;
    }
  | {
      path: "/v2/projects/{UUID}/managers";
      operationId: "getV2ProjectsUUIDManagers";
      variables: GetV2ProjectsUUIDManagersVariables;
    }
  | {
      path: "/v2/admin/audits/{ENTITY}/{UUID}";
      operationId: "getV2AdminAuditsENTITYUUID";
      variables: GetV2AdminAuditsENTITYUUIDVariables;
    }
  | {
      path: "/v2/admin/{ENTITY}/export/{FRAMEWORK}";
      operationId: "getV2AdminENTITYExportFRAMEWORK";
      variables: GetV2AdminENTITYExportFRAMEWORKVariables;
    }
  | {
      path: "/v2/projects/{UUID}/{ENTITY}/export";
      operationId: "getV2ProjectsUUIDENTITYExport";
      variables: GetV2ProjectsUUIDENTITYExportVariables;
    }
  | {
      path: "/v2/{ENTITY}/{UUID}/export";
      operationId: "getV2ENTITYUUIDExport";
      variables: GetV2ENTITYUUIDExportVariables;
    }
  | {
      path: "/v2/terrafund/validation/criteria-data";
      operationId: "getV2TerrafundValidationCriteriaData";
      variables: GetV2TerrafundValidationCriteriaDataVariables;
    }
  | {
      path: "/v2/terrafund/validation/site";
      operationId: "getV2TerrafundValidationSite";
      variables: GetV2TerrafundValidationSiteVariables;
    }
  | {
      path: "/v2/audit-status/{ENTITY}/{UUID}";
      operationId: "getV2AuditStatusENTITYUUID";
      variables: GetV2AuditStatusENTITYUUIDVariables;
    }
  | {
      path: "/v2/sites/{site}/polygon";
      operationId: "getV2SitesSitePolygon";
      variables: GetV2SitesSitePolygonVariables;
    }
  | {
      path: "/v2/sites/{site}/bbox";
      operationId: "getV2SitesSiteBbox";
      variables: GetV2SitesSiteBboxVariables;
    }
  | {
      path: "/v2/terrafund/polygon/bbox/{uuid}";
      operationId: "getV2TerrafundPolygonBboxUuid";
      variables: GetV2TerrafundPolygonBboxUuidVariables;
    }
  | {
      path: "/v2/terrafund/geojson/complete";
      operationId: "getV2TerrafundGeojsonComplete";
      variables: GetV2TerrafundGeojsonCompleteVariables;
    }
  | {
      path: "/v2/terrafund/polygon/{uuid}";
      operationId: "getV2TerrafundPolygonUuid";
      variables: GetV2TerrafundPolygonUuidVariables;
    }
  | {
      path: "/v2/terrafund/geojson/site";
      operationId: "getV2TerrafundGeojsonSite";
      variables: GetV2TerrafundGeojsonSiteVariables;
    }
  | {
      path: "/v2/terrafund/project-polygon";
      operationId: "getV2TerrafundProjectPolygon";
      variables: GetV2TerrafundProjectPolygonVariables;
    }
  | {
      path: "/v2/dashboard/jobs-created";
      operationId: "getV2DashboardJobsCreated";
      variables: GetV2DashboardJobsCreatedVariables;
    }
  | {
      path: "/v2/dashboard/restoration-strategy";
      operationId: "getV2DashboardRestorationStrategy";
      variables: GetV2DashboardRestorationStrategyVariables;
    }
  | {
      path: "/v2/dashboard/tree-restoration-goal";
      operationId: "getV2DashboardTreeRestorationGoal";
      variables: GetV2DashboardTreeRestorationGoalVariables;
    }
  | {
      path: "/v2/dashboard/project-list-export";
      operationId: "getV2DashboardProjectListExport";
      variables: GetV2DashboardProjectListExportVariables;
    }
  | {
      path: "/v2/dashboard/get-polygons";
      operationId: "getV2DashboardGetPolygons";
      variables: GetV2DashboardGetPolygonsVariables;
    }
  | {
      path: "/v2/dashboard/get-polygons/statuses";
      operationId: "getV2DashboardGetPolygonsStatuses";
      variables: GetV2DashboardGetPolygonsStatusesVariables;
    }
  | {
      path: "/v2/dashboard/get-bbox-project";
      operationId: "getV2DashboardGetBboxProject";
      variables: GetV2DashboardGetBboxProjectVariables;
    }
  | {
      path: "/v2/dashboard/bbox/project";
      operationId: "getV2DashboardBboxProject";
      variables: GetV2DashboardBboxProjectVariables;
    }
  | {
      path: "/v2/dashboard/country/{country}";
      operationId: "getV2DashboardCountryCountry";
      variables: GetV2DashboardCountryCountryVariables;
    }
  | {
      path: "/v2/dashboard/polygon-data/{uuid}";
      operationId: "getV2DashboardPolygonDataUuid";
      variables: GetV2DashboardPolygonDataUuidVariables;
    }
  | {
      path: "/v2/dashboard/project-data/{uuid}";
      operationId: "getV2DashboardProjectDataUuid";
      variables: GetV2DashboardProjectDataUuidVariables;
    }
  | {
      path: "/v2/dashboard/active-projects";
      operationId: "getV2DashboardActiveProjects";
      variables: GetV2DashboardActiveProjectsVariables;
    }
  | {
      path: "/v2/dashboard/volunteers-survival-rate";
      operationId: "getV2DashboardVolunteersSurvivalRate";
      variables: GetV2DashboardVolunteersSurvivalRateVariables;
    }
  | {
      path: "/v2/dashboard/total-section-header";
      operationId: "getV2DashboardTotalSectionHeader";
      variables: GetV2DashboardTotalSectionHeaderVariables;
    }
  | {
      path: "/v2/dashboard/active-countries";
      operationId: "getV2DashboardActiveCountries";
      variables: GetV2DashboardActiveCountriesVariables;
    }
  | {
      path: "/v2/dashboard/countries";
      operationId: "getV2DashboardCountries";
      variables: GetV2DashboardCountriesVariables;
    }
  | {
      path: "/v2/dashboard/get-projects";
      operationId: "getV2DashboardGetProjects";
      variables: GetV2DashboardGetProjectsVariables;
    }
  | {
      path: "/v2/dashboard/project-details/{project}";
      operationId: "getV2DashboardProjectDetailsProject";
      variables: GetV2DashboardProjectDetailsProjectVariables;
    }
  | {
      path: "/v2/dashboard/top-trees-planted";
      operationId: "getV2DashboardTopTreesPlanted";
      variables: GetV2DashboardTopTreesPlantedVariables;
    }
  | {
      path: "/v2/project-pipeline";
      operationId: "getV2ProjectPipeline";
      variables: GetV2ProjectPipelineVariables;
    }
  | {
      path: "/v2/project-pipeline/{id}";
      operationId: "getV2ProjectPipelineId";
      variables: GetV2ProjectPipelineIdVariables;
    }
  | {
      path: "/v2/dashboard/view-project/{uuid}";
      operationId: "getV2DashboardViewProjectUuid";
      variables: GetV2DashboardViewProjectUuidVariables;
    }
  | {
      path: "/v2/terrafund/polygon/geojson/{uuid}";
      operationId: "getV2TerrafundPolygonGeojsonUuid";
      variables: GetV2TerrafundPolygonGeojsonUuidVariables;
    }
  | {
      path: "/v2/type-entity";
      operationId: "getV2TypeEntity";
      variables: GetV2TypeEntityVariables;
    }
  | {
      path: "/v2/projects/{UUID}/site-polygons/all";
      operationId: "getV2ProjectsUUIDSitePolygonsAll";
      variables: GetV2ProjectsUUIDSitePolygonsAllVariables;
    }
  | {
      path: "/v2/sites/{site}/check-approve";
      operationId: "getV2SitesSiteCheckApprove";
      variables: GetV2SitesSiteCheckApproveVariables;
    }
  | {
      path: "/v2/site-polygon/{uuid}";
      operationId: "getV2SitePolygonUuid";
      variables: GetV2SitePolygonUuidVariables;
    }
  | {
      path: "/v2/site-polygon/{uuid}/versions";
      operationId: "getV2SitePolygonUuidVersions";
      variables: GetV2SitePolygonUuidVersionsVariables;
    };
