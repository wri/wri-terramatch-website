/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as RequestBodies from "./apiRequestBodies";

export type GetV2TreeSpeciesEntityUUIDPathParams = {
  /**
   * allowed values project/site/nursery/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2TreeSpeciesEntityUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2TreeSpeciesEntityUUIDResponse = {
  data?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type GetV2TreeSpeciesEntityUUIDVariables = {
  pathParams: GetV2TreeSpeciesEntityUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2TreeSpeciesEntityUUID = (variables: GetV2TreeSpeciesEntityUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2TreeSpeciesEntityUUIDResponse,
    GetV2TreeSpeciesEntityUUIDError,
    undefined,
    {},
    {},
    GetV2TreeSpeciesEntityUUIDPathParams
  >({ url: "/v2/tree-species/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2TreeSpeciesEntityUUID = <TData = GetV2TreeSpeciesEntityUUIDResponse>(
  variables: GetV2TreeSpeciesEntityUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2TreeSpeciesEntityUUIDResponse, GetV2TreeSpeciesEntityUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2TreeSpeciesEntityUUIDResponse, GetV2TreeSpeciesEntityUUIDError, TData>(
    queryKeyFn({ path: "/v2/tree-species/{entity}/{UUID}", operationId: "getV2TreeSpeciesEntityUUID", variables }),
    ({ signal }) => fetchGetV2TreeSpeciesEntityUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminProjectsMultiQueryParams = {
  /**
   * comma separated list of values. eg ?ids=uuid1,uuid2
   */
  ids: string;
};

export type GetV2AdminProjectsMultiError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminProjectsMultiResponse = {
  id?: string;
  uuid?: string;
  status?: string;
  name?: string;
  organisation?: {
    uuid?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    currency?: string;
    states?: string[];
    loan_status_types?: string[];
    land_systems?: string[];
    fund_utilisation?: string[];
    detailed_intervention_types?: string[];
    account_number_1?: string;
    account_number_2?: string;
    approach_of_marginalized_communities?: string;
    community_engagement_numbers_marginalized?: string;
    founding_date?: string;
    description?: string;
    leadership_team?: string;
    countries?: string[];
    languages?: string[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    engagement_farmers?: string[];
    engagement_women?: string[];
    engagement_youth?: string[];
    engagement_non_youth?: string[];
    tree_restoration_practices?: string[];
    business_model?: string;
    subtype?: string;
    organisation_revenue_this_year?: number;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
  };
  planting_start_date?: string;
  framework_key?: string;
  framework_uuid?: string;
  has_monitoring_data?: boolean;
}[];

export type GetV2AdminProjectsMultiVariables = {
  queryParams: GetV2AdminProjectsMultiQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminProjectsMulti = (variables: GetV2AdminProjectsMultiVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminProjectsMultiResponse,
    GetV2AdminProjectsMultiError,
    undefined,
    {},
    GetV2AdminProjectsMultiQueryParams,
    {}
  >({ url: "/v2/admin/projects/multi", method: "get", ...variables, signal });

export const useGetV2AdminProjectsMulti = <TData = GetV2AdminProjectsMultiResponse>(
  variables: GetV2AdminProjectsMultiVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminProjectsMultiResponse, GetV2AdminProjectsMultiError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminProjectsMultiResponse, GetV2AdminProjectsMultiError, TData>(
    queryKeyFn({ path: "/v2/admin/projects/multi", operationId: "getV2AdminProjectsMulti", variables }),
    ({ signal }) => fetchGetV2AdminProjectsMulti({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminNurseriesMultiQueryParams = {
  /**
   * comma separated list of values. eg ?ids=uuid1,uuid2
   */
  ids: string;
};

export type GetV2AdminNurseriesMultiError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminNurseriesMultiResponse = {
  uuid?: string;
  name?: string;
  project?: {
    id?: string;
    uuid?: string;
    status?: string;
    name?: string;
    organisation?: {
      uuid?: string;
      type?: string;
      private?: boolean;
      name?: string;
      phone?: string;
      currency?: string;
      states?: string[];
      loan_status_types?: string[];
      land_systems?: string[];
      fund_utilisation?: string[];
      detailed_intervention_types?: string[];
      account_number_1?: string;
      account_number_2?: string;
      approach_of_marginalized_communities?: string;
      community_engagement_numbers_marginalized?: string;
      founding_date?: string;
      description?: string;
      leadership_team?: string;
      countries?: string[];
      languages?: string[];
      project_pitches?: {
        id?: string;
        uuid?: string;
        status?: string;
        readable_status?: string;
        organisation_id?: string;
        funding_programmes?: {
          id?: number;
          uuid?: string;
          name?: string;
          description?: string;
          read_more_url?: string;
          organisation_types?: string[];
          location?: string;
          status?: string;
        };
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_name?: string;
        how_discovered?: string;
        project_objectives?: string;
        project_country?: string[];
        project_county_district?: string;
        restoration_intervention_types?: string[];
        land_systems?: string[];
        tree_restoration_practices?: string[];
        total_hectares?: number;
        project_budget?: number;
        total_trees?: number;
        capacity_building_needs?: string[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        restoration_photos?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        proof_of_land_tenure_mou?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        detailed_project_budget?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        expected_active_restoration_start_date?: string;
        expected_active_restoration_end_date?: string;
        description_of_project_timeline?: string;
        proj_partner_info?: string;
        land_tenure_proj_area?: string[];
        landholder_comm_engage?: string;
        proj_success_risks?: string;
        monitor_eval_plan?: string;
        proj_boundary?: string;
        sustainable_dev_goals?: string[];
        proj_area_description?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_sites?: number;
        environmental_goals?: string;
        main_degradation_causes?: string;
        seedlings_source?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_nurseries?: number;
        curr_land_degradation?: string;
        proj_impact_socieconom?: string;
        proj_impact_foodsec?: string;
        proj_impact_watersec?: string;
        proj_impact_jobtypes?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        num_jobs_created?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_men?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_18to35?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_older35?: number;
        proj_beneficiaries?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_small?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_large?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_youth?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_classes?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_tribes?: number;
        monitoring_evaluation_plan?: string;
        main_causes_of_degradation?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      web_url?: string;
      facebook_url?: string;
      instagram_url?: string;
      linkedin_url?: string;
      twitter_url?: string;
      hq_street_1?: string;
      hq_street_2?: string;
      hq_city?: string;
      hq_state?: string;
      hq_zipcode?: string;
      hq_country?: string;
      fin_start_month?: number;
      /**
       * @format float
       */
      fin_budget_3year?: number;
      /**
       * @format float
       */
      fin_budget_2year?: number;
      /**
       * @format float
       */
      fin_budget_1year?: number;
      /**
       * @format float
       */
      fin_budget_current_year?: number;
      /**
       * @format float
       */
      ha_restored_total?: number;
      /**
       * @format float
       */
      ha_restored_3year?: number;
      relevant_experience_years?: number;
      trees_grown_total?: number;
      trees_grown_3year?: number;
      tree_care_approach?: string;
      ft_permanent_employees?: number;
      pt_permanent_employees?: number;
      temp_employees?: number;
      female_employees?: number;
      male_employees?: number;
      young_employees?: number;
      additional_funding_details?: string;
      community_experience?: string;
      total_engaged_community_members_3yr?: number;
      percent_engaged_women_3yr?: number;
      percent_engaged_men_3yr?: number;
      percent_engaged_under_35_3yr?: number;
      percent_engaged_over_35_3yr?: number;
      percent_engaged_smallholder_3yr?: number;
      total_trees_grown?: number;
      avg_tree_survival_rate?: number;
      tree_maintenance_aftercare_approach?: string;
      restored_areas_description?: string;
      monitoring_evaluation_experience?: string;
      funding_history?: string;
      engagement_farmers?: string[];
      engagement_women?: string[];
      engagement_youth?: string[];
      engagement_non_youth?: string[];
      tree_restoration_practices?: string[];
      business_model?: string;
      subtype?: string;
      organisation_revenue_this_year?: number;
      shapefiles?: {
        uuid?: string;
        shapefileable_type?: string;
        shapefileable_id?: number;
        geojson?: string;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      bank_statements?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      previous_annual_reports?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      logo?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      reference?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_2year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_last_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_this_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_next_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      legal_registration?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
    };
    planting_start_date?: string;
    framework_key?: string;
    framework_uuid?: string;
    has_monitoring_data?: boolean;
  };
  framework_key?: string;
  framework_uuid?: string;
  status?: string;
  readable_status?: string;
}[];

export type GetV2AdminNurseriesMultiVariables = {
  queryParams: GetV2AdminNurseriesMultiQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminNurseriesMulti = (variables: GetV2AdminNurseriesMultiVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminNurseriesMultiResponse,
    GetV2AdminNurseriesMultiError,
    undefined,
    {},
    GetV2AdminNurseriesMultiQueryParams,
    {}
  >({ url: "/v2/admin/nurseries/multi", method: "get", ...variables, signal });

export const useGetV2AdminNurseriesMulti = <TData = GetV2AdminNurseriesMultiResponse>(
  variables: GetV2AdminNurseriesMultiVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminNurseriesMultiResponse, GetV2AdminNurseriesMultiError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminNurseriesMultiResponse, GetV2AdminNurseriesMultiError, TData>(
    queryKeyFn({ path: "/v2/admin/nurseries/multi", operationId: "getV2AdminNurseriesMulti", variables }),
    ({ signal }) => fetchGetV2AdminNurseriesMulti({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminSitesMultiQueryParams = {
  /**
   * comma separated list of values. eg ?ids=uuid1,uuid2
   */
  ids: string;
};

export type GetV2AdminSitesMultiError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminSitesMultiResponse = {
  uuid?: string;
  name?: string;
  project?: {
    id?: string;
    uuid?: string;
    status?: string;
    name?: string;
    organisation?: {
      uuid?: string;
      type?: string;
      private?: boolean;
      name?: string;
      phone?: string;
      currency?: string;
      states?: string[];
      loan_status_types?: string[];
      land_systems?: string[];
      fund_utilisation?: string[];
      detailed_intervention_types?: string[];
      account_number_1?: string;
      account_number_2?: string;
      approach_of_marginalized_communities?: string;
      community_engagement_numbers_marginalized?: string;
      founding_date?: string;
      description?: string;
      leadership_team?: string;
      countries?: string[];
      languages?: string[];
      project_pitches?: {
        id?: string;
        uuid?: string;
        status?: string;
        readable_status?: string;
        organisation_id?: string;
        funding_programmes?: {
          id?: number;
          uuid?: string;
          name?: string;
          description?: string;
          read_more_url?: string;
          organisation_types?: string[];
          location?: string;
          status?: string;
        };
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_name?: string;
        how_discovered?: string;
        project_objectives?: string;
        project_country?: string[];
        project_county_district?: string;
        restoration_intervention_types?: string[];
        land_systems?: string[];
        tree_restoration_practices?: string[];
        total_hectares?: number;
        project_budget?: number;
        total_trees?: number;
        capacity_building_needs?: string[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        restoration_photos?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        proof_of_land_tenure_mou?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        detailed_project_budget?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        expected_active_restoration_start_date?: string;
        expected_active_restoration_end_date?: string;
        description_of_project_timeline?: string;
        proj_partner_info?: string;
        land_tenure_proj_area?: string[];
        landholder_comm_engage?: string;
        proj_success_risks?: string;
        monitor_eval_plan?: string;
        proj_boundary?: string;
        sustainable_dev_goals?: string[];
        proj_area_description?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_sites?: number;
        environmental_goals?: string;
        main_degradation_causes?: string;
        seedlings_source?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_nurseries?: number;
        curr_land_degradation?: string;
        proj_impact_socieconom?: string;
        proj_impact_foodsec?: string;
        proj_impact_watersec?: string;
        proj_impact_jobtypes?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        num_jobs_created?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_men?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_18to35?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_older35?: number;
        proj_beneficiaries?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_small?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_large?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_youth?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_classes?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_tribes?: number;
        monitoring_evaluation_plan?: string;
        main_causes_of_degradation?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      web_url?: string;
      facebook_url?: string;
      instagram_url?: string;
      linkedin_url?: string;
      twitter_url?: string;
      hq_street_1?: string;
      hq_street_2?: string;
      hq_city?: string;
      hq_state?: string;
      hq_zipcode?: string;
      hq_country?: string;
      fin_start_month?: number;
      /**
       * @format float
       */
      fin_budget_3year?: number;
      /**
       * @format float
       */
      fin_budget_2year?: number;
      /**
       * @format float
       */
      fin_budget_1year?: number;
      /**
       * @format float
       */
      fin_budget_current_year?: number;
      /**
       * @format float
       */
      ha_restored_total?: number;
      /**
       * @format float
       */
      ha_restored_3year?: number;
      relevant_experience_years?: number;
      trees_grown_total?: number;
      trees_grown_3year?: number;
      tree_care_approach?: string;
      ft_permanent_employees?: number;
      pt_permanent_employees?: number;
      temp_employees?: number;
      female_employees?: number;
      male_employees?: number;
      young_employees?: number;
      additional_funding_details?: string;
      community_experience?: string;
      total_engaged_community_members_3yr?: number;
      percent_engaged_women_3yr?: number;
      percent_engaged_men_3yr?: number;
      percent_engaged_under_35_3yr?: number;
      percent_engaged_over_35_3yr?: number;
      percent_engaged_smallholder_3yr?: number;
      total_trees_grown?: number;
      avg_tree_survival_rate?: number;
      tree_maintenance_aftercare_approach?: string;
      restored_areas_description?: string;
      monitoring_evaluation_experience?: string;
      funding_history?: string;
      engagement_farmers?: string[];
      engagement_women?: string[];
      engagement_youth?: string[];
      engagement_non_youth?: string[];
      tree_restoration_practices?: string[];
      business_model?: string;
      subtype?: string;
      organisation_revenue_this_year?: number;
      shapefiles?: {
        uuid?: string;
        shapefileable_type?: string;
        shapefileable_id?: number;
        geojson?: string;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      bank_statements?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      previous_annual_reports?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      logo?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      reference?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_2year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_last_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_this_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_next_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      legal_registration?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
    };
    planting_start_date?: string;
    framework_key?: string;
    framework_uuid?: string;
    has_monitoring_data?: boolean;
  };
  framework_key?: string;
  framework_uuid?: string;
  status?: string;
  readable_status?: string;
  has_monitoring_data?: boolean;
}[];

export type GetV2AdminSitesMultiVariables = {
  queryParams: GetV2AdminSitesMultiQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminSitesMulti = (variables: GetV2AdminSitesMultiVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminSitesMultiResponse, GetV2AdminSitesMultiError, undefined, {}, GetV2AdminSitesMultiQueryParams, {}>(
    { url: "/v2/admin/sites/multi", method: "get", ...variables, signal }
  );

export const useGetV2AdminSitesMulti = <TData = GetV2AdminSitesMultiResponse>(
  variables: GetV2AdminSitesMultiVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminSitesMultiResponse, GetV2AdminSitesMultiError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminSitesMultiResponse, GetV2AdminSitesMultiError, TData>(
    queryKeyFn({ path: "/v2/admin/sites/multi", operationId: "getV2AdminSitesMulti", variables }),
    ({ signal }) => fetchGetV2AdminSitesMulti({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostUsersError = Fetcher.ErrorWrapper<undefined>;

export type PostUsersResponse = {
  id?: number;
  organisation_id?: number;
  organisation_name?: string;
  my_organisation?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  };
  my_monitoring_organisations?: {
    uuid?: string;
    status?: string;
    users_status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  }[];
  first_name?: string;
  last_name?: string;
  email_address?: string;
  /**
   * @format date-time
   */
  email_address_verified_at?: string;
  role?: string;
  /**
   * @format date-time
   */
  last_logged_in_at?: string;
  job_role?: string;
  facebook?: string;
  twitter?: string;
  instagram?: string;
  linkedin?: string;
  avatar?: string;
  phone_number?: string;
  whatsapp_phone?: string;
  has_ppc_projects?: boolean;
  has_terrafund_projects?: boolean;
};

export type PostUsersRequestBody = {
  first_name?: string;
  last_name?: string;
  email_address?: string;
  password?: string;
  job_role?: string;
  facebook?: string;
  twitter?: string;
  instagram?: string;
  linkedin?: string;
  phone_number?: string;
  whatsapp_phone?: string;
  callback_url?: string;
};

export type PostUsersVariables = {
  body?: PostUsersRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostUsers = (variables: PostUsersVariables, signal?: AbortSignal) =>
  apiFetch<PostUsersResponse, PostUsersError, PostUsersRequestBody, {}, {}, {}>({
    url: "/users",
    method: "post",
    ...variables,
    signal
  });

export const usePostUsers = (
  options?: Omit<reactQuery.UseMutationOptions<PostUsersResponse, PostUsersError, PostUsersVariables>, "mutationFn">
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostUsersResponse, PostUsersError, PostUsersVariables>(
    (variables: PostUsersVariables) => fetchPostUsers({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ProjectsUUIDPartnersPathParams = {
  uuid: string;
};

export type GetV2ProjectsUUIDPartnersError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDPartnersResponse = {
  uuid?: string;
  user_type?: string;
  job_role?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  /**
   * allowed values Pending|Accepted
   */
  status?: string;
}[];

export type GetV2ProjectsUUIDPartnersVariables = {
  pathParams: GetV2ProjectsUUIDPartnersPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectsUUIDPartners = (variables: GetV2ProjectsUUIDPartnersVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2ProjectsUUIDPartnersResponse,
    GetV2ProjectsUUIDPartnersError,
    undefined,
    {},
    {},
    GetV2ProjectsUUIDPartnersPathParams
  >({ url: "/v2/projects/{uuid}/partners", method: "get", ...variables, signal });

export const useGetV2ProjectsUUIDPartners = <TData = GetV2ProjectsUUIDPartnersResponse>(
  variables: GetV2ProjectsUUIDPartnersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectsUUIDPartnersResponse, GetV2ProjectsUUIDPartnersError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectsUUIDPartnersResponse, GetV2ProjectsUUIDPartnersError, TData>(
    queryKeyFn({ path: "/v2/projects/{UUID}/partners", operationId: "getV2ProjectsUUIDPartners", variables }),
    ({ signal }) => fetchGetV2ProjectsUUIDPartners({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2MyProjectsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2MyProjectsResponse = {
  id?: string;
  uuid?: string;
  status?: string;
  name?: string;
  organisation?: {
    uuid?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    currency?: string;
    states?: string[];
    loan_status_types?: string[];
    land_systems?: string[];
    fund_utilisation?: string[];
    detailed_intervention_types?: string[];
    account_number_1?: string;
    account_number_2?: string;
    approach_of_marginalized_communities?: string;
    community_engagement_numbers_marginalized?: string;
    founding_date?: string;
    description?: string;
    leadership_team?: string;
    countries?: string[];
    languages?: string[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    engagement_farmers?: string[];
    engagement_women?: string[];
    engagement_youth?: string[];
    engagement_non_youth?: string[];
    tree_restoration_practices?: string[];
    business_model?: string;
    subtype?: string;
    organisation_revenue_this_year?: number;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
  };
  planting_start_date?: string;
  framework_key?: string;
  framework_uuid?: string;
  has_monitoring_data?: boolean;
}[];

export type GetV2MyProjectsVariables = ApiContext["fetcherOptions"];

export const fetchGetV2MyProjects = (variables: GetV2MyProjectsVariables, signal?: AbortSignal) =>
  apiFetch<GetV2MyProjectsResponse, GetV2MyProjectsError, undefined, {}, {}, {}>({
    url: "/v2/my/projects",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2MyProjects = <TData = GetV2MyProjectsResponse>(
  variables: GetV2MyProjectsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2MyProjectsResponse, GetV2MyProjectsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2MyProjectsResponse, GetV2MyProjectsError, TData>(
    queryKeyFn({ path: "/v2/my/projects", operationId: "getV2MyProjects", variables }),
    ({ signal }) => fetchGetV2MyProjects({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2MyActionsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2MyActionsResponse = {
  data?: {
    uuid?: string;
    status?: string;
    type?: string;
    subtype?: string;
    title?: string;
    sub_title?: string;
    text?: string;
    key?: string;
    /**
     * one of Project|ProjectReport|Site|SiteReport|Nursery|NurseryReport|UpdateRequest
     */
    targetable_type?: string;
    targetable_id?: number;
    /**
     * contains the “Lite” objects for the model involved with the Action
     */
    target?: Record<string, any>;
    organisation_id?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
};

export type GetV2MyActionsVariables = ApiContext["fetcherOptions"];

export const fetchGetV2MyActions = (variables: GetV2MyActionsVariables, signal?: AbortSignal) =>
  apiFetch<GetV2MyActionsResponse, GetV2MyActionsError, undefined, {}, {}, {}>({
    url: "/v2/my/actions",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2MyActions = <TData = GetV2MyActionsResponse>(
  variables: GetV2MyActionsVariables,
  options?: Omit<reactQuery.UseQueryOptions<GetV2MyActionsResponse, GetV2MyActionsError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2MyActionsResponse, GetV2MyActionsError, TData>(
    queryKeyFn({ path: "/v2/my/actions", operationId: "getV2MyActions", variables }),
    ({ signal }) => fetchGetV2MyActions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2MyActionsUUIDCompletePathParams = {
  uuid: string;
};

export type PutV2MyActionsUUIDCompleteError = Fetcher.ErrorWrapper<undefined>;

export type PutV2MyActionsUUIDCompleteResponse = {
  uuid?: string;
  status?: string;
  type?: string;
  subtype?: string;
  title?: string;
  sub_title?: string;
  text?: string;
  key?: string;
  /**
   * one of Project|ProjectReport|Site|SiteReport|Nursery|NurseryReport|UpdateRequest
   */
  targetable_type?: string;
  targetable_id?: number;
  /**
   * contains the “Lite” objects for the model involved with the Action
   */
  target?: Record<string, any>;
  organisation_id?: number;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PutV2MyActionsUUIDCompleteVariables = {
  pathParams: PutV2MyActionsUUIDCompletePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2MyActionsUUIDComplete = (variables: PutV2MyActionsUUIDCompleteVariables, signal?: AbortSignal) =>
  apiFetch<
    PutV2MyActionsUUIDCompleteResponse,
    PutV2MyActionsUUIDCompleteError,
    undefined,
    {},
    {},
    PutV2MyActionsUUIDCompletePathParams
  >({ url: "/v2/my/actions/{uuid}/complete", method: "put", ...variables, signal });

export const usePutV2MyActionsUUIDComplete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2MyActionsUUIDCompleteResponse,
      PutV2MyActionsUUIDCompleteError,
      PutV2MyActionsUUIDCompleteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2MyActionsUUIDCompleteResponse,
    PutV2MyActionsUUIDCompleteError,
    PutV2MyActionsUUIDCompleteVariables
  >(
    (variables: PutV2MyActionsUUIDCompleteVariables) =>
      fetchPutV2MyActionsUUIDComplete({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2ENTITYUUIDNothingToReportPathParams = {
  /**
   * allowed values are project-reports, site-reports, nursery-reports
   */
  entity: string;
  uuid: string;
};

export type PutV2ENTITYUUIDNothingToReportError = Fetcher.ErrorWrapper<undefined>;

export type PutV2ENTITYUUIDNothingToReportVariables = {
  pathParams: PutV2ENTITYUUIDNothingToReportPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2ENTITYUUIDNothingToReport = (
  variables: PutV2ENTITYUUIDNothingToReportVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PutV2ENTITYUUIDNothingToReportError, undefined, {}, {}, PutV2ENTITYUUIDNothingToReportPathParams>(
    { url: "/v2/{entity}/{uuid}/nothing-to-report", method: "put", ...variables, signal }
  );

export const usePutV2ENTITYUUIDNothingToReport = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PutV2ENTITYUUIDNothingToReportError,
      PutV2ENTITYUUIDNothingToReportVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    PutV2ENTITYUUIDNothingToReportError,
    PutV2ENTITYUUIDNothingToReportVariables
  >(
    (variables: PutV2ENTITYUUIDNothingToReportVariables) =>
      fetchPutV2ENTITYUUIDNothingToReport({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ENTITYUUIDReportsPathParams = {
  /**
   * allowed values are projects, sites, nurserys
   */
  entity: string;
  uuid: string;
};

export type GetV2ENTITYUUIDReportsQueryParams = {
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-name
   */
  sort?: string;
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2ENTITYUUIDReportsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ENTITYUUIDReportsResponse = {
  data?: Record<string, any>[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2ENTITYUUIDReportsVariables = {
  pathParams: GetV2ENTITYUUIDReportsPathParams;
  queryParams?: GetV2ENTITYUUIDReportsQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Filters : status  |  Available Searches: name  |  Available Sort Options: name, status, created_at, updated_at
 */
export const fetchGetV2ENTITYUUIDReports = (variables: GetV2ENTITYUUIDReportsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2ENTITYUUIDReportsResponse,
    GetV2ENTITYUUIDReportsError,
    undefined,
    {},
    GetV2ENTITYUUIDReportsQueryParams,
    GetV2ENTITYUUIDReportsPathParams
  >({ url: "/v2/{entity}/{uuid}/reports", method: "get", ...variables, signal });

/**
 * Available Filters : status  |  Available Searches: name  |  Available Sort Options: name, status, created_at, updated_at
 */
export const useGetV2ENTITYUUIDReports = <TData = GetV2ENTITYUUIDReportsResponse>(
  variables: GetV2ENTITYUUIDReportsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ENTITYUUIDReportsResponse, GetV2ENTITYUUIDReportsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ENTITYUUIDReportsResponse, GetV2ENTITYUUIDReportsError, TData>(
    queryKeyFn({ path: "/v2/{ENTITY}/{UUID}/reports", operationId: "getV2ENTITYUUIDReports", variables }),
    ({ signal }) => fetchGetV2ENTITYUUIDReports({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminNurseryReportsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminNurseryReportsResponse = {
  data?: {
    uuid?: string;
    framework_key?: string;
    framework_uuid?: string;
    status?: number;
    readable_status?: string;
    title?: string;
    due_at?: string;
    date_submitted?: string;
    organisation?: {
      uuid?: string;
      type?: string;
      private?: boolean;
      name?: string;
      phone?: string;
      currency?: string;
      states?: string[];
      loan_status_types?: string[];
      land_systems?: string[];
      fund_utilisation?: string[];
      detailed_intervention_types?: string[];
      account_number_1?: string;
      account_number_2?: string;
      approach_of_marginalized_communities?: string;
      community_engagement_numbers_marginalized?: string;
      founding_date?: string;
      description?: string;
      leadership_team?: string;
      countries?: string[];
      languages?: string[];
      project_pitches?: {
        id?: string;
        uuid?: string;
        status?: string;
        readable_status?: string;
        organisation_id?: string;
        funding_programmes?: {
          id?: number;
          uuid?: string;
          name?: string;
          description?: string;
          read_more_url?: string;
          organisation_types?: string[];
          location?: string;
          status?: string;
        };
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_name?: string;
        how_discovered?: string;
        project_objectives?: string;
        project_country?: string[];
        project_county_district?: string;
        restoration_intervention_types?: string[];
        land_systems?: string[];
        tree_restoration_practices?: string[];
        total_hectares?: number;
        project_budget?: number;
        total_trees?: number;
        capacity_building_needs?: string[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        restoration_photos?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        proof_of_land_tenure_mou?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        detailed_project_budget?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        expected_active_restoration_start_date?: string;
        expected_active_restoration_end_date?: string;
        description_of_project_timeline?: string;
        proj_partner_info?: string;
        land_tenure_proj_area?: string[];
        landholder_comm_engage?: string;
        proj_success_risks?: string;
        monitor_eval_plan?: string;
        proj_boundary?: string;
        sustainable_dev_goals?: string[];
        proj_area_description?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_sites?: number;
        environmental_goals?: string;
        main_degradation_causes?: string;
        seedlings_source?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_nurseries?: number;
        curr_land_degradation?: string;
        proj_impact_socieconom?: string;
        proj_impact_foodsec?: string;
        proj_impact_watersec?: string;
        proj_impact_jobtypes?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        num_jobs_created?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_men?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_18to35?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_older35?: number;
        proj_beneficiaries?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_small?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_large?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_youth?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_classes?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_tribes?: number;
        monitoring_evaluation_plan?: string;
        main_causes_of_degradation?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      web_url?: string;
      facebook_url?: string;
      instagram_url?: string;
      linkedin_url?: string;
      twitter_url?: string;
      hq_street_1?: string;
      hq_street_2?: string;
      hq_city?: string;
      hq_state?: string;
      hq_zipcode?: string;
      hq_country?: string;
      fin_start_month?: number;
      /**
       * @format float
       */
      fin_budget_3year?: number;
      /**
       * @format float
       */
      fin_budget_2year?: number;
      /**
       * @format float
       */
      fin_budget_1year?: number;
      /**
       * @format float
       */
      fin_budget_current_year?: number;
      /**
       * @format float
       */
      ha_restored_total?: number;
      /**
       * @format float
       */
      ha_restored_3year?: number;
      relevant_experience_years?: number;
      trees_grown_total?: number;
      trees_grown_3year?: number;
      tree_care_approach?: string;
      ft_permanent_employees?: number;
      pt_permanent_employees?: number;
      temp_employees?: number;
      female_employees?: number;
      male_employees?: number;
      young_employees?: number;
      additional_funding_details?: string;
      community_experience?: string;
      total_engaged_community_members_3yr?: number;
      percent_engaged_women_3yr?: number;
      percent_engaged_men_3yr?: number;
      percent_engaged_under_35_3yr?: number;
      percent_engaged_over_35_3yr?: number;
      percent_engaged_smallholder_3yr?: number;
      total_trees_grown?: number;
      avg_tree_survival_rate?: number;
      tree_maintenance_aftercare_approach?: string;
      restored_areas_description?: string;
      monitoring_evaluation_experience?: string;
      funding_history?: string;
      engagement_farmers?: string[];
      engagement_women?: string[];
      engagement_youth?: string[];
      engagement_non_youth?: string[];
      tree_restoration_practices?: string[];
      business_model?: string;
      subtype?: string;
      organisation_revenue_this_year?: number;
      shapefiles?: {
        uuid?: string;
        shapefileable_type?: string;
        shapefileable_id?: number;
        geojson?: string;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      bank_statements?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      previous_annual_reports?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      logo?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      reference?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_2year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_last_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_this_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_next_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      legal_registration?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
    };
    project?: {
      id?: string;
      uuid?: string;
      status?: string;
      name?: string;
      organisation?: {
        uuid?: string;
        type?: string;
        private?: boolean;
        name?: string;
        phone?: string;
        currency?: string;
        states?: string[];
        loan_status_types?: string[];
        land_systems?: string[];
        fund_utilisation?: string[];
        detailed_intervention_types?: string[];
        account_number_1?: string;
        account_number_2?: string;
        approach_of_marginalized_communities?: string;
        community_engagement_numbers_marginalized?: string;
        founding_date?: string;
        description?: string;
        leadership_team?: string;
        countries?: string[];
        languages?: string[];
        project_pitches?: {
          id?: string;
          uuid?: string;
          status?: string;
          readable_status?: string;
          organisation_id?: string;
          funding_programmes?: {
            id?: number;
            uuid?: string;
            name?: string;
            description?: string;
            read_more_url?: string;
            organisation_types?: string[];
            location?: string;
            status?: string;
          };
          tree_species?: {
            uuid?: string;
            name?: string;
            amount?: number;
            type?: string;
            collection?: string;
          }[];
          project_name?: string;
          how_discovered?: string;
          project_objectives?: string;
          project_country?: string[];
          project_county_district?: string;
          restoration_intervention_types?: string[];
          land_systems?: string[];
          tree_restoration_practices?: string[];
          total_hectares?: number;
          project_budget?: number;
          total_trees?: number;
          capacity_building_needs?: string[];
          additional?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          restoration_photos?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          cover?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          proof_of_land_tenure_mou?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          detailed_project_budget?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          expected_active_restoration_start_date?: string;
          expected_active_restoration_end_date?: string;
          description_of_project_timeline?: string;
          proj_partner_info?: string;
          land_tenure_proj_area?: string[];
          landholder_comm_engage?: string;
          proj_success_risks?: string;
          monitor_eval_plan?: string;
          proj_boundary?: string;
          sustainable_dev_goals?: string[];
          proj_area_description?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          proposed_num_sites?: number;
          environmental_goals?: string;
          main_degradation_causes?: string;
          seedlings_source?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          proposed_num_nurseries?: number;
          curr_land_degradation?: string;
          proj_impact_socieconom?: string;
          proj_impact_foodsec?: string;
          proj_impact_watersec?: string;
          proj_impact_jobtypes?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          num_jobs_created?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_men?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_women?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_18to35?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_older35?: number;
          proj_beneficiaries?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_women?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_small?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_large?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_youth?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_scheduled_classes?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_scheduled_tribes?: number;
          monitoring_evaluation_plan?: string;
          main_causes_of_degradation?: string;
          deleted_at?: string;
          created_at?: string;
          updated_at?: string;
        }[];
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        web_url?: string;
        facebook_url?: string;
        instagram_url?: string;
        linkedin_url?: string;
        twitter_url?: string;
        hq_street_1?: string;
        hq_street_2?: string;
        hq_city?: string;
        hq_state?: string;
        hq_zipcode?: string;
        hq_country?: string;
        fin_start_month?: number;
        /**
         * @format float
         */
        fin_budget_3year?: number;
        /**
         * @format float
         */
        fin_budget_2year?: number;
        /**
         * @format float
         */
        fin_budget_1year?: number;
        /**
         * @format float
         */
        fin_budget_current_year?: number;
        /**
         * @format float
         */
        ha_restored_total?: number;
        /**
         * @format float
         */
        ha_restored_3year?: number;
        relevant_experience_years?: number;
        trees_grown_total?: number;
        trees_grown_3year?: number;
        tree_care_approach?: string;
        ft_permanent_employees?: number;
        pt_permanent_employees?: number;
        temp_employees?: number;
        female_employees?: number;
        male_employees?: number;
        young_employees?: number;
        additional_funding_details?: string;
        community_experience?: string;
        total_engaged_community_members_3yr?: number;
        percent_engaged_women_3yr?: number;
        percent_engaged_men_3yr?: number;
        percent_engaged_under_35_3yr?: number;
        percent_engaged_over_35_3yr?: number;
        percent_engaged_smallholder_3yr?: number;
        total_trees_grown?: number;
        avg_tree_survival_rate?: number;
        tree_maintenance_aftercare_approach?: string;
        restored_areas_description?: string;
        monitoring_evaluation_experience?: string;
        funding_history?: string;
        engagement_farmers?: string[];
        engagement_women?: string[];
        engagement_youth?: string[];
        engagement_non_youth?: string[];
        tree_restoration_practices?: string[];
        business_model?: string;
        subtype?: string;
        organisation_revenue_this_year?: number;
        shapefiles?: {
          uuid?: string;
          shapefileable_type?: string;
          shapefileable_id?: number;
          geojson?: string;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        bank_statements?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        previous_annual_reports?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        logo?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        reference?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_2year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_last_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_this_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_next_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        legal_registration?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg slug: name
         */
        tags?: string[];
      };
      planting_start_date?: string;
      framework_key?: string;
      framework_uuid?: string;
      has_monitoring_data?: boolean;
    };
    nursery?: {
      uuid?: string;
      name?: string;
      project?: {
        id?: string;
        uuid?: string;
        status?: string;
        name?: string;
        organisation?: {
          uuid?: string;
          type?: string;
          private?: boolean;
          name?: string;
          phone?: string;
          currency?: string;
          states?: string[];
          loan_status_types?: string[];
          land_systems?: string[];
          fund_utilisation?: string[];
          detailed_intervention_types?: string[];
          account_number_1?: string;
          account_number_2?: string;
          approach_of_marginalized_communities?: string;
          community_engagement_numbers_marginalized?: string;
          founding_date?: string;
          description?: string;
          leadership_team?: string;
          countries?: string[];
          languages?: string[];
          project_pitches?: {
            id?: string;
            uuid?: string;
            status?: string;
            readable_status?: string;
            organisation_id?: string;
            funding_programmes?: {
              id?: number;
              uuid?: string;
              name?: string;
              description?: string;
              read_more_url?: string;
              organisation_types?: string[];
              location?: string;
              status?: string;
            };
            tree_species?: {
              uuid?: string;
              name?: string;
              amount?: number;
              type?: string;
              collection?: string;
            }[];
            project_name?: string;
            how_discovered?: string;
            project_objectives?: string;
            project_country?: string[];
            project_county_district?: string;
            restoration_intervention_types?: string[];
            land_systems?: string[];
            tree_restoration_practices?: string[];
            total_hectares?: number;
            project_budget?: number;
            total_trees?: number;
            capacity_building_needs?: string[];
            additional?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            }[];
            restoration_photos?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            }[];
            cover?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            };
            proof_of_land_tenure_mou?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            }[];
            detailed_project_budget?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            };
            expected_active_restoration_start_date?: string;
            expected_active_restoration_end_date?: string;
            description_of_project_timeline?: string;
            proj_partner_info?: string;
            land_tenure_proj_area?: string[];
            landholder_comm_engage?: string;
            proj_success_risks?: string;
            monitor_eval_plan?: string;
            proj_boundary?: string;
            sustainable_dev_goals?: string[];
            proj_area_description?: string;
            /**
             * @minimum 0
             * @maximum 4294967295
             */
            proposed_num_sites?: number;
            environmental_goals?: string;
            main_degradation_causes?: string;
            seedlings_source?: string;
            /**
             * @minimum 0
             * @maximum 4294967295
             */
            proposed_num_nurseries?: number;
            curr_land_degradation?: string;
            proj_impact_socieconom?: string;
            proj_impact_foodsec?: string;
            proj_impact_watersec?: string;
            proj_impact_jobtypes?: string;
            /**
             * @minimum 0
             * @maximum 4294967295
             */
            num_jobs_created?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_employees_men?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_employees_women?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_employees_18to35?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_employees_older35?: number;
            proj_beneficiaries?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_women?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_small?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_large?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_youth?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_scheduled_classes?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_scheduled_tribes?: number;
            monitoring_evaluation_plan?: string;
            main_causes_of_degradation?: string;
            deleted_at?: string;
            created_at?: string;
            updated_at?: string;
          }[];
          tree_species?: {
            uuid?: string;
            name?: string;
            amount?: number;
            type?: string;
            collection?: string;
          }[];
          web_url?: string;
          facebook_url?: string;
          instagram_url?: string;
          linkedin_url?: string;
          twitter_url?: string;
          hq_street_1?: string;
          hq_street_2?: string;
          hq_city?: string;
          hq_state?: string;
          hq_zipcode?: string;
          hq_country?: string;
          fin_start_month?: number;
          /**
           * @format float
           */
          fin_budget_3year?: number;
          /**
           * @format float
           */
          fin_budget_2year?: number;
          /**
           * @format float
           */
          fin_budget_1year?: number;
          /**
           * @format float
           */
          fin_budget_current_year?: number;
          /**
           * @format float
           */
          ha_restored_total?: number;
          /**
           * @format float
           */
          ha_restored_3year?: number;
          relevant_experience_years?: number;
          trees_grown_total?: number;
          trees_grown_3year?: number;
          tree_care_approach?: string;
          ft_permanent_employees?: number;
          pt_permanent_employees?: number;
          temp_employees?: number;
          female_employees?: number;
          male_employees?: number;
          young_employees?: number;
          additional_funding_details?: string;
          community_experience?: string;
          total_engaged_community_members_3yr?: number;
          percent_engaged_women_3yr?: number;
          percent_engaged_men_3yr?: number;
          percent_engaged_under_35_3yr?: number;
          percent_engaged_over_35_3yr?: number;
          percent_engaged_smallholder_3yr?: number;
          total_trees_grown?: number;
          avg_tree_survival_rate?: number;
          tree_maintenance_aftercare_approach?: string;
          restored_areas_description?: string;
          monitoring_evaluation_experience?: string;
          funding_history?: string;
          engagement_farmers?: string[];
          engagement_women?: string[];
          engagement_youth?: string[];
          engagement_non_youth?: string[];
          tree_restoration_practices?: string[];
          business_model?: string;
          subtype?: string;
          organisation_revenue_this_year?: number;
          shapefiles?: {
            uuid?: string;
            shapefileable_type?: string;
            shapefileable_id?: number;
            geojson?: string;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          bank_statements?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          previous_annual_reports?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          logo?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          cover?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          reference?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          additional?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          op_budget_2year?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          op_budget_last_year?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          op_budget_this_year?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          op_budget_next_year?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          legal_registration?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          /**
           * this is a list of key value pairs eg slug: name
           */
          tags?: string[];
        };
        planting_start_date?: string;
        framework_key?: string;
        framework_uuid?: string;
        has_monitoring_data?: boolean;
      };
      framework_key?: string;
      framework_uuid?: string;
      status?: string;
      readable_status?: string;
    };
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminNurseryReportsVariables = {
  body?: RequestBodies.GetV2AdminNurseryReportsBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminNurseryReports = (variables: GetV2AdminNurseryReportsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminNurseryReportsResponse,
    GetV2AdminNurseryReportsError,
    RequestBodies.GetV2AdminNurseryReportsBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/nursery-reports", method: "get", ...variables, signal });

export const useGetV2AdminNurseryReports = <TData = GetV2AdminNurseryReportsResponse>(
  variables: GetV2AdminNurseryReportsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminNurseryReportsResponse, GetV2AdminNurseryReportsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminNurseryReportsResponse, GetV2AdminNurseryReportsError, TData>(
    queryKeyFn({ path: "/v2/admin/nursery-reports", operationId: "getV2AdminNurseryReports", variables }),
    ({ signal }) => fetchGetV2AdminNurseryReports({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminSiteReportsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminSiteReportsResponse = {
  data?: {
    uuid?: string;
    framework_key?: string;
    framework_uuid?: string;
    status?: number;
    readable_status?: string;
    title?: string;
    due_at?: string;
    date_submitted?: string;
    organisation?: {
      uuid?: string;
      type?: string;
      private?: boolean;
      name?: string;
      phone?: string;
      currency?: string;
      states?: string[];
      loan_status_types?: string[];
      land_systems?: string[];
      fund_utilisation?: string[];
      detailed_intervention_types?: string[];
      account_number_1?: string;
      account_number_2?: string;
      approach_of_marginalized_communities?: string;
      community_engagement_numbers_marginalized?: string;
      founding_date?: string;
      description?: string;
      leadership_team?: string;
      countries?: string[];
      languages?: string[];
      project_pitches?: {
        id?: string;
        uuid?: string;
        status?: string;
        readable_status?: string;
        organisation_id?: string;
        funding_programmes?: {
          id?: number;
          uuid?: string;
          name?: string;
          description?: string;
          read_more_url?: string;
          organisation_types?: string[];
          location?: string;
          status?: string;
        };
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_name?: string;
        how_discovered?: string;
        project_objectives?: string;
        project_country?: string[];
        project_county_district?: string;
        restoration_intervention_types?: string[];
        land_systems?: string[];
        tree_restoration_practices?: string[];
        total_hectares?: number;
        project_budget?: number;
        total_trees?: number;
        capacity_building_needs?: string[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        restoration_photos?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        proof_of_land_tenure_mou?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        detailed_project_budget?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        expected_active_restoration_start_date?: string;
        expected_active_restoration_end_date?: string;
        description_of_project_timeline?: string;
        proj_partner_info?: string;
        land_tenure_proj_area?: string[];
        landholder_comm_engage?: string;
        proj_success_risks?: string;
        monitor_eval_plan?: string;
        proj_boundary?: string;
        sustainable_dev_goals?: string[];
        proj_area_description?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_sites?: number;
        environmental_goals?: string;
        main_degradation_causes?: string;
        seedlings_source?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_nurseries?: number;
        curr_land_degradation?: string;
        proj_impact_socieconom?: string;
        proj_impact_foodsec?: string;
        proj_impact_watersec?: string;
        proj_impact_jobtypes?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        num_jobs_created?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_men?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_18to35?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_older35?: number;
        proj_beneficiaries?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_small?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_large?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_youth?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_classes?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_tribes?: number;
        monitoring_evaluation_plan?: string;
        main_causes_of_degradation?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      web_url?: string;
      facebook_url?: string;
      instagram_url?: string;
      linkedin_url?: string;
      twitter_url?: string;
      hq_street_1?: string;
      hq_street_2?: string;
      hq_city?: string;
      hq_state?: string;
      hq_zipcode?: string;
      hq_country?: string;
      fin_start_month?: number;
      /**
       * @format float
       */
      fin_budget_3year?: number;
      /**
       * @format float
       */
      fin_budget_2year?: number;
      /**
       * @format float
       */
      fin_budget_1year?: number;
      /**
       * @format float
       */
      fin_budget_current_year?: number;
      /**
       * @format float
       */
      ha_restored_total?: number;
      /**
       * @format float
       */
      ha_restored_3year?: number;
      relevant_experience_years?: number;
      trees_grown_total?: number;
      trees_grown_3year?: number;
      tree_care_approach?: string;
      ft_permanent_employees?: number;
      pt_permanent_employees?: number;
      temp_employees?: number;
      female_employees?: number;
      male_employees?: number;
      young_employees?: number;
      additional_funding_details?: string;
      community_experience?: string;
      total_engaged_community_members_3yr?: number;
      percent_engaged_women_3yr?: number;
      percent_engaged_men_3yr?: number;
      percent_engaged_under_35_3yr?: number;
      percent_engaged_over_35_3yr?: number;
      percent_engaged_smallholder_3yr?: number;
      total_trees_grown?: number;
      avg_tree_survival_rate?: number;
      tree_maintenance_aftercare_approach?: string;
      restored_areas_description?: string;
      monitoring_evaluation_experience?: string;
      funding_history?: string;
      engagement_farmers?: string[];
      engagement_women?: string[];
      engagement_youth?: string[];
      engagement_non_youth?: string[];
      tree_restoration_practices?: string[];
      business_model?: string;
      subtype?: string;
      organisation_revenue_this_year?: number;
      shapefiles?: {
        uuid?: string;
        shapefileable_type?: string;
        shapefileable_id?: number;
        geojson?: string;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      bank_statements?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      previous_annual_reports?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      logo?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      reference?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_2year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_last_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_this_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_next_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      legal_registration?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
    };
    project?: {
      id?: string;
      uuid?: string;
      status?: string;
      name?: string;
      organisation?: {
        uuid?: string;
        type?: string;
        private?: boolean;
        name?: string;
        phone?: string;
        currency?: string;
        states?: string[];
        loan_status_types?: string[];
        land_systems?: string[];
        fund_utilisation?: string[];
        detailed_intervention_types?: string[];
        account_number_1?: string;
        account_number_2?: string;
        approach_of_marginalized_communities?: string;
        community_engagement_numbers_marginalized?: string;
        founding_date?: string;
        description?: string;
        leadership_team?: string;
        countries?: string[];
        languages?: string[];
        project_pitches?: {
          id?: string;
          uuid?: string;
          status?: string;
          readable_status?: string;
          organisation_id?: string;
          funding_programmes?: {
            id?: number;
            uuid?: string;
            name?: string;
            description?: string;
            read_more_url?: string;
            organisation_types?: string[];
            location?: string;
            status?: string;
          };
          tree_species?: {
            uuid?: string;
            name?: string;
            amount?: number;
            type?: string;
            collection?: string;
          }[];
          project_name?: string;
          how_discovered?: string;
          project_objectives?: string;
          project_country?: string[];
          project_county_district?: string;
          restoration_intervention_types?: string[];
          land_systems?: string[];
          tree_restoration_practices?: string[];
          total_hectares?: number;
          project_budget?: number;
          total_trees?: number;
          capacity_building_needs?: string[];
          additional?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          restoration_photos?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          cover?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          proof_of_land_tenure_mou?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          detailed_project_budget?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          expected_active_restoration_start_date?: string;
          expected_active_restoration_end_date?: string;
          description_of_project_timeline?: string;
          proj_partner_info?: string;
          land_tenure_proj_area?: string[];
          landholder_comm_engage?: string;
          proj_success_risks?: string;
          monitor_eval_plan?: string;
          proj_boundary?: string;
          sustainable_dev_goals?: string[];
          proj_area_description?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          proposed_num_sites?: number;
          environmental_goals?: string;
          main_degradation_causes?: string;
          seedlings_source?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          proposed_num_nurseries?: number;
          curr_land_degradation?: string;
          proj_impact_socieconom?: string;
          proj_impact_foodsec?: string;
          proj_impact_watersec?: string;
          proj_impact_jobtypes?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          num_jobs_created?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_men?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_women?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_18to35?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_older35?: number;
          proj_beneficiaries?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_women?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_small?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_large?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_youth?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_scheduled_classes?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_scheduled_tribes?: number;
          monitoring_evaluation_plan?: string;
          main_causes_of_degradation?: string;
          deleted_at?: string;
          created_at?: string;
          updated_at?: string;
        }[];
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        web_url?: string;
        facebook_url?: string;
        instagram_url?: string;
        linkedin_url?: string;
        twitter_url?: string;
        hq_street_1?: string;
        hq_street_2?: string;
        hq_city?: string;
        hq_state?: string;
        hq_zipcode?: string;
        hq_country?: string;
        fin_start_month?: number;
        /**
         * @format float
         */
        fin_budget_3year?: number;
        /**
         * @format float
         */
        fin_budget_2year?: number;
        /**
         * @format float
         */
        fin_budget_1year?: number;
        /**
         * @format float
         */
        fin_budget_current_year?: number;
        /**
         * @format float
         */
        ha_restored_total?: number;
        /**
         * @format float
         */
        ha_restored_3year?: number;
        relevant_experience_years?: number;
        trees_grown_total?: number;
        trees_grown_3year?: number;
        tree_care_approach?: string;
        ft_permanent_employees?: number;
        pt_permanent_employees?: number;
        temp_employees?: number;
        female_employees?: number;
        male_employees?: number;
        young_employees?: number;
        additional_funding_details?: string;
        community_experience?: string;
        total_engaged_community_members_3yr?: number;
        percent_engaged_women_3yr?: number;
        percent_engaged_men_3yr?: number;
        percent_engaged_under_35_3yr?: number;
        percent_engaged_over_35_3yr?: number;
        percent_engaged_smallholder_3yr?: number;
        total_trees_grown?: number;
        avg_tree_survival_rate?: number;
        tree_maintenance_aftercare_approach?: string;
        restored_areas_description?: string;
        monitoring_evaluation_experience?: string;
        funding_history?: string;
        engagement_farmers?: string[];
        engagement_women?: string[];
        engagement_youth?: string[];
        engagement_non_youth?: string[];
        tree_restoration_practices?: string[];
        business_model?: string;
        subtype?: string;
        organisation_revenue_this_year?: number;
        shapefiles?: {
          uuid?: string;
          shapefileable_type?: string;
          shapefileable_id?: number;
          geojson?: string;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        bank_statements?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        previous_annual_reports?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        logo?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        reference?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_2year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_last_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_this_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_next_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        legal_registration?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg slug: name
         */
        tags?: string[];
      };
      planting_start_date?: string;
      framework_key?: string;
      framework_uuid?: string;
      has_monitoring_data?: boolean;
    };
    site?: {
      uuid?: string;
      name?: string;
      project?: {
        id?: string;
        uuid?: string;
        status?: string;
        name?: string;
        organisation?: {
          uuid?: string;
          type?: string;
          private?: boolean;
          name?: string;
          phone?: string;
          currency?: string;
          states?: string[];
          loan_status_types?: string[];
          land_systems?: string[];
          fund_utilisation?: string[];
          detailed_intervention_types?: string[];
          account_number_1?: string;
          account_number_2?: string;
          approach_of_marginalized_communities?: string;
          community_engagement_numbers_marginalized?: string;
          founding_date?: string;
          description?: string;
          leadership_team?: string;
          countries?: string[];
          languages?: string[];
          project_pitches?: {
            id?: string;
            uuid?: string;
            status?: string;
            readable_status?: string;
            organisation_id?: string;
            funding_programmes?: {
              id?: number;
              uuid?: string;
              name?: string;
              description?: string;
              read_more_url?: string;
              organisation_types?: string[];
              location?: string;
              status?: string;
            };
            tree_species?: {
              uuid?: string;
              name?: string;
              amount?: number;
              type?: string;
              collection?: string;
            }[];
            project_name?: string;
            how_discovered?: string;
            project_objectives?: string;
            project_country?: string[];
            project_county_district?: string;
            restoration_intervention_types?: string[];
            land_systems?: string[];
            tree_restoration_practices?: string[];
            total_hectares?: number;
            project_budget?: number;
            total_trees?: number;
            capacity_building_needs?: string[];
            additional?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            }[];
            restoration_photos?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            }[];
            cover?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            };
            proof_of_land_tenure_mou?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            }[];
            detailed_project_budget?: {
              uuid?: string;
              url?: string;
              thumb_url?: string;
              collection_name?: string;
              title?: string;
              file_name?: string;
              mime_type?: string;
              size?: number;
              lat?: number;
              lng?: number;
              is_public?: boolean;
              created_at?: string;
            };
            expected_active_restoration_start_date?: string;
            expected_active_restoration_end_date?: string;
            description_of_project_timeline?: string;
            proj_partner_info?: string;
            land_tenure_proj_area?: string[];
            landholder_comm_engage?: string;
            proj_success_risks?: string;
            monitor_eval_plan?: string;
            proj_boundary?: string;
            sustainable_dev_goals?: string[];
            proj_area_description?: string;
            /**
             * @minimum 0
             * @maximum 4294967295
             */
            proposed_num_sites?: number;
            environmental_goals?: string;
            main_degradation_causes?: string;
            seedlings_source?: string;
            /**
             * @minimum 0
             * @maximum 4294967295
             */
            proposed_num_nurseries?: number;
            curr_land_degradation?: string;
            proj_impact_socieconom?: string;
            proj_impact_foodsec?: string;
            proj_impact_watersec?: string;
            proj_impact_jobtypes?: string;
            /**
             * @minimum 0
             * @maximum 4294967295
             */
            num_jobs_created?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_employees_men?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_employees_women?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_employees_18to35?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_employees_older35?: number;
            proj_beneficiaries?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_women?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_small?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_large?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_youth?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_scheduled_classes?: number;
            /**
             * @minimum 0
             * @maximum 100
             */
            pct_beneficiaries_scheduled_tribes?: number;
            monitoring_evaluation_plan?: string;
            main_causes_of_degradation?: string;
            deleted_at?: string;
            created_at?: string;
            updated_at?: string;
          }[];
          tree_species?: {
            uuid?: string;
            name?: string;
            amount?: number;
            type?: string;
            collection?: string;
          }[];
          web_url?: string;
          facebook_url?: string;
          instagram_url?: string;
          linkedin_url?: string;
          twitter_url?: string;
          hq_street_1?: string;
          hq_street_2?: string;
          hq_city?: string;
          hq_state?: string;
          hq_zipcode?: string;
          hq_country?: string;
          fin_start_month?: number;
          /**
           * @format float
           */
          fin_budget_3year?: number;
          /**
           * @format float
           */
          fin_budget_2year?: number;
          /**
           * @format float
           */
          fin_budget_1year?: number;
          /**
           * @format float
           */
          fin_budget_current_year?: number;
          /**
           * @format float
           */
          ha_restored_total?: number;
          /**
           * @format float
           */
          ha_restored_3year?: number;
          relevant_experience_years?: number;
          trees_grown_total?: number;
          trees_grown_3year?: number;
          tree_care_approach?: string;
          ft_permanent_employees?: number;
          pt_permanent_employees?: number;
          temp_employees?: number;
          female_employees?: number;
          male_employees?: number;
          young_employees?: number;
          additional_funding_details?: string;
          community_experience?: string;
          total_engaged_community_members_3yr?: number;
          percent_engaged_women_3yr?: number;
          percent_engaged_men_3yr?: number;
          percent_engaged_under_35_3yr?: number;
          percent_engaged_over_35_3yr?: number;
          percent_engaged_smallholder_3yr?: number;
          total_trees_grown?: number;
          avg_tree_survival_rate?: number;
          tree_maintenance_aftercare_approach?: string;
          restored_areas_description?: string;
          monitoring_evaluation_experience?: string;
          funding_history?: string;
          engagement_farmers?: string[];
          engagement_women?: string[];
          engagement_youth?: string[];
          engagement_non_youth?: string[];
          tree_restoration_practices?: string[];
          business_model?: string;
          subtype?: string;
          organisation_revenue_this_year?: number;
          shapefiles?: {
            uuid?: string;
            shapefileable_type?: string;
            shapefileable_id?: number;
            geojson?: string;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          bank_statements?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          previous_annual_reports?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          logo?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          cover?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          reference?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          additional?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          op_budget_2year?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          op_budget_last_year?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          op_budget_this_year?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          op_budget_next_year?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          legal_registration?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          /**
           * this is a list of key value pairs eg slug: name
           */
          tags?: string[];
        };
        planting_start_date?: string;
        framework_key?: string;
        framework_uuid?: string;
        has_monitoring_data?: boolean;
      };
      framework_key?: string;
      framework_uuid?: string;
      status?: string;
      readable_status?: string;
      has_monitoring_data?: boolean;
    };
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminSiteReportsVariables = {
  body?: RequestBodies.GetV2AdminNurseryReportsBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminSiteReports = (variables: GetV2AdminSiteReportsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminSiteReportsResponse,
    GetV2AdminSiteReportsError,
    RequestBodies.GetV2AdminNurseryReportsBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/site-reports", method: "get", ...variables, signal });

export const useGetV2AdminSiteReports = <TData = GetV2AdminSiteReportsResponse>(
  variables: GetV2AdminSiteReportsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminSiteReportsResponse, GetV2AdminSiteReportsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminSiteReportsResponse, GetV2AdminSiteReportsError, TData>(
    queryKeyFn({ path: "/v2/admin/site-reports", operationId: "getV2AdminSiteReports", variables }),
    ({ signal }) => fetchGetV2AdminSiteReports({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminProjectReportsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminProjectReportsResponse = {
  data?: {
    uuid?: string;
    framework_key?: string;
    status?: number;
    readable_status?: string;
    title?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminProjectReportsVariables = {
  body?: RequestBodies.GetV2AdminNurseryReportsBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminProjectReports = (variables: GetV2AdminProjectReportsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminProjectReportsResponse,
    GetV2AdminProjectReportsError,
    RequestBodies.GetV2AdminNurseryReportsBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/project-reports", method: "get", ...variables, signal });

export const useGetV2AdminProjectReports = <TData = GetV2AdminProjectReportsResponse>(
  variables: GetV2AdminProjectReportsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminProjectReportsResponse, GetV2AdminProjectReportsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminProjectReportsResponse, GetV2AdminProjectReportsError, TData>(
    queryKeyFn({ path: "/v2/admin/project-reports", operationId: "getV2AdminProjectReports", variables }),
    ({ signal }) => fetchGetV2AdminProjectReports({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminTasksError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminTasksResponse = {
  data?: {
    uuid?: string;
    project?: Record<string, any>;
    period_key?: string;
    status?: string;
    readable_status?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminTasksVariables = {
  body?: RequestBodies.GetV2AdminNurseryReportsBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminTasks = (variables: GetV2AdminTasksVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminTasksResponse, GetV2AdminTasksError, RequestBodies.GetV2AdminNurseryReportsBody, {}, {}, {}>({
    url: "/v2/admin/tasks",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminTasks = <TData = GetV2AdminTasksResponse>(
  variables: GetV2AdminTasksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminTasksResponse, GetV2AdminTasksError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminTasksResponse, GetV2AdminTasksError, TData>(
    queryKeyFn({ path: "/v2/admin/tasks", operationId: "getV2AdminTasks", variables }),
    ({ signal }) => fetchGetV2AdminTasks({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminNurseriesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminNurseriesResponse = {
  data?: {
    uuid?: string;
    framework_key?: string;
    framework_uuid?: string;
    status?: number;
    readable_status?: string;
    type?: string;
    establishment_date?: string;
    start_date?: string;
    seedling_grown?: number;
    planting_contribution?: string;
    organisation?: {
      uuid?: string;
      type?: string;
      private?: boolean;
      name?: string;
      phone?: string;
      currency?: string;
      states?: string[];
      loan_status_types?: string[];
      land_systems?: string[];
      fund_utilisation?: string[];
      detailed_intervention_types?: string[];
      account_number_1?: string;
      account_number_2?: string;
      approach_of_marginalized_communities?: string;
      community_engagement_numbers_marginalized?: string;
      founding_date?: string;
      description?: string;
      leadership_team?: string;
      countries?: string[];
      languages?: string[];
      project_pitches?: {
        id?: string;
        uuid?: string;
        status?: string;
        readable_status?: string;
        organisation_id?: string;
        funding_programmes?: {
          id?: number;
          uuid?: string;
          name?: string;
          description?: string;
          read_more_url?: string;
          organisation_types?: string[];
          location?: string;
          status?: string;
        };
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_name?: string;
        how_discovered?: string;
        project_objectives?: string;
        project_country?: string[];
        project_county_district?: string;
        restoration_intervention_types?: string[];
        land_systems?: string[];
        tree_restoration_practices?: string[];
        total_hectares?: number;
        project_budget?: number;
        total_trees?: number;
        capacity_building_needs?: string[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        restoration_photos?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        proof_of_land_tenure_mou?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        detailed_project_budget?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        expected_active_restoration_start_date?: string;
        expected_active_restoration_end_date?: string;
        description_of_project_timeline?: string;
        proj_partner_info?: string;
        land_tenure_proj_area?: string[];
        landholder_comm_engage?: string;
        proj_success_risks?: string;
        monitor_eval_plan?: string;
        proj_boundary?: string;
        sustainable_dev_goals?: string[];
        proj_area_description?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_sites?: number;
        environmental_goals?: string;
        main_degradation_causes?: string;
        seedlings_source?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_nurseries?: number;
        curr_land_degradation?: string;
        proj_impact_socieconom?: string;
        proj_impact_foodsec?: string;
        proj_impact_watersec?: string;
        proj_impact_jobtypes?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        num_jobs_created?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_men?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_18to35?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_older35?: number;
        proj_beneficiaries?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_small?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_large?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_youth?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_classes?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_tribes?: number;
        monitoring_evaluation_plan?: string;
        main_causes_of_degradation?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      web_url?: string;
      facebook_url?: string;
      instagram_url?: string;
      linkedin_url?: string;
      twitter_url?: string;
      hq_street_1?: string;
      hq_street_2?: string;
      hq_city?: string;
      hq_state?: string;
      hq_zipcode?: string;
      hq_country?: string;
      fin_start_month?: number;
      /**
       * @format float
       */
      fin_budget_3year?: number;
      /**
       * @format float
       */
      fin_budget_2year?: number;
      /**
       * @format float
       */
      fin_budget_1year?: number;
      /**
       * @format float
       */
      fin_budget_current_year?: number;
      /**
       * @format float
       */
      ha_restored_total?: number;
      /**
       * @format float
       */
      ha_restored_3year?: number;
      relevant_experience_years?: number;
      trees_grown_total?: number;
      trees_grown_3year?: number;
      tree_care_approach?: string;
      ft_permanent_employees?: number;
      pt_permanent_employees?: number;
      temp_employees?: number;
      female_employees?: number;
      male_employees?: number;
      young_employees?: number;
      additional_funding_details?: string;
      community_experience?: string;
      total_engaged_community_members_3yr?: number;
      percent_engaged_women_3yr?: number;
      percent_engaged_men_3yr?: number;
      percent_engaged_under_35_3yr?: number;
      percent_engaged_over_35_3yr?: number;
      percent_engaged_smallholder_3yr?: number;
      total_trees_grown?: number;
      avg_tree_survival_rate?: number;
      tree_maintenance_aftercare_approach?: string;
      restored_areas_description?: string;
      monitoring_evaluation_experience?: string;
      funding_history?: string;
      engagement_farmers?: string[];
      engagement_women?: string[];
      engagement_youth?: string[];
      engagement_non_youth?: string[];
      tree_restoration_practices?: string[];
      business_model?: string;
      subtype?: string;
      organisation_revenue_this_year?: number;
      shapefiles?: {
        uuid?: string;
        shapefileable_type?: string;
        shapefileable_id?: number;
        geojson?: string;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      bank_statements?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      previous_annual_reports?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      logo?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      reference?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_2year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_last_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_this_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_next_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      legal_registration?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
    };
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminNurseriesVariables = {
  body?: RequestBodies.GetV2AdminNurseryReportsBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminNurseries = (variables: GetV2AdminNurseriesVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminNurseriesResponse,
    GetV2AdminNurseriesError,
    RequestBodies.GetV2AdminNurseryReportsBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/nurseries", method: "get", ...variables, signal });

export const useGetV2AdminNurseries = <TData = GetV2AdminNurseriesResponse>(
  variables: GetV2AdminNurseriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminNurseriesResponse, GetV2AdminNurseriesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminNurseriesResponse, GetV2AdminNurseriesError, TData>(
    queryKeyFn({ path: "/v2/admin/nurseries", operationId: "getV2AdminNurseries", variables }),
    ({ signal }) => fetchGetV2AdminNurseries({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2AdminFormsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminFormsResponse = {
  type?: string;
  title?: string;
  subtitle?: string;
  description?: string;
  deadline_at?: string;
  documentation?: string;
  documentation_label?: string;
  submission_message?: string;
  duration?: string;
  stage_id?: number;
  options_other?: boolean;
  /**
   * this is a list of key value pairs eg. slug: name
   */
  tags?: string[];
  form_sections?: {
    order?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    form_questions?: {
      additional_props?: Record<string, any>[];
      child_form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      table_headers?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      linked_field_key?: string;
      show_on_parent_condition?: boolean;
      input_type?:
        | "date"
        | "text"
        | "long-text"
        | "select"
        | "checkboxes"
        | "radio"
        | "number"
        | "image"
        | "file"
        | "conditional";
      label?: string;
      placeholder?: string;
      description?: string;
      validation?: Record<string, any>;
      multichoice?: boolean;
      order?: number;
      options_list?: string;
      options?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
  }[];
};

export type PostV2AdminFormsVariables = ApiContext["fetcherOptions"];

export const fetchPostV2AdminForms = (variables: PostV2AdminFormsVariables, signal?: AbortSignal) =>
  apiFetch<PostV2AdminFormsResponse, PostV2AdminFormsError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2AdminForms = (
  options?: Omit<
    reactQuery.UseMutationOptions<PostV2AdminFormsResponse, PostV2AdminFormsError, PostV2AdminFormsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2AdminFormsResponse, PostV2AdminFormsError, PostV2AdminFormsVariables>(
    (variables: PostV2AdminFormsVariables) => fetchPostV2AdminForms({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminFormsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsResponse = {
  data?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminFormsVariables = {
  body?: RequestBodies.GetV2AdminNurseryReportsBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminForms = (variables: GetV2AdminFormsVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminFormsResponse, GetV2AdminFormsError, RequestBodies.GetV2AdminNurseryReportsBody, {}, {}, {}>({
    url: "/v2/admin/forms",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminForms = <TData = GetV2AdminFormsResponse>(
  variables: GetV2AdminFormsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFormsResponse, GetV2AdminFormsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFormsResponse, GetV2AdminFormsError, TData>(
    queryKeyFn({ path: "/v2/admin/forms", operationId: "getV2AdminForms", variables }),
    ({ signal }) => fetchGetV2AdminForms({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminReportingFrameworksError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminReportingFrameworksResponse = {
  data?: {
    uuid?: string;
    name?: string;
    slug?: string;
    access_code?: string;
    project_form_uuid?: string;
    project_report_form_uuid?: string;
    site_form_uuid?: string;
    site_report_form_uuid?: string;
    nursery_form_uuid?: string;
    nursery_report_form_uuid?: string;
  }[];
};

export type GetV2AdminReportingFrameworksVariables = ApiContext["fetcherOptions"];

export const fetchGetV2AdminReportingFrameworks = (
  variables: GetV2AdminReportingFrameworksVariables,
  signal?: AbortSignal
) =>
  apiFetch<GetV2AdminReportingFrameworksResponse, GetV2AdminReportingFrameworksError, undefined, {}, {}, {}>({
    url: "/v2/admin/reporting-frameworks",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminReportingFrameworks = <TData = GetV2AdminReportingFrameworksResponse>(
  variables: GetV2AdminReportingFrameworksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminReportingFrameworksResponse, GetV2AdminReportingFrameworksError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminReportingFrameworksResponse, GetV2AdminReportingFrameworksError, TData>(
    queryKeyFn({ path: "/v2/admin/reporting-frameworks", operationId: "getV2AdminReportingFrameworks", variables }),
    ({ signal }) => fetchGetV2AdminReportingFrameworks({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2AdminReportingFrameworksError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminReportingFrameworksResponse = {
  uuid?: string;
  name?: string;
  slug?: string;
  access_code?: string;
  project_form_uuid?: string;
  project_report_form_uuid?: string;
  site_form_uuid?: string;
  site_report_form_uuid?: string;
  nursery_form_uuid?: string;
  nursery_report_form_uuid?: string;
};

export type PostV2AdminReportingFrameworksRequestBody = {
  name?: string;
  access_code?: string;
  project_form_uuid?: string;
  project_report_form_uuid?: string;
  site_form_uuid?: string;
  site_report_form_uuid?: string;
  nursery_form_uuid?: string;
  nursery_report_form_uuid?: string;
};

export type PostV2AdminReportingFrameworksVariables = {
  body?: PostV2AdminReportingFrameworksRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminReportingFrameworks = (
  variables: PostV2AdminReportingFrameworksVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2AdminReportingFrameworksResponse,
    PostV2AdminReportingFrameworksError,
    PostV2AdminReportingFrameworksRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/reporting-frameworks", method: "post", ...variables, signal });

export const usePostV2AdminReportingFrameworks = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2AdminReportingFrameworksResponse,
      PostV2AdminReportingFrameworksError,
      PostV2AdminReportingFrameworksVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2AdminReportingFrameworksResponse,
    PostV2AdminReportingFrameworksError,
    PostV2AdminReportingFrameworksVariables
  >(
    (variables: PostV2AdminReportingFrameworksVariables) =>
      fetchPostV2AdminReportingFrameworks({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2AdminReportingFrameworksUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminReportingFrameworksUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminReportingFrameworksUUIDResponse = {
  uuid?: string;
  name?: string;
  slug?: string;
  access_code?: string;
  project_form_uuid?: string;
  project_report_form_uuid?: string;
  site_form_uuid?: string;
  site_report_form_uuid?: string;
  nursery_form_uuid?: string;
  nursery_report_form_uuid?: string;
};

export type PutV2AdminReportingFrameworksUUIDRequestBody = {
  name?: string;
  access_code?: string;
  project_form_uuid?: string;
  project_report_form_uuid?: string;
  site_form_uuid?: string;
  site_report_form_uuid?: string;
  nursery_form_uuid?: string;
  nursery_report_form_uuid?: string;
};

export type PutV2AdminReportingFrameworksUUIDVariables = {
  body?: PutV2AdminReportingFrameworksUUIDRequestBody;
  pathParams: PutV2AdminReportingFrameworksUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminReportingFrameworksUUID = (
  variables: PutV2AdminReportingFrameworksUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2AdminReportingFrameworksUUIDResponse,
    PutV2AdminReportingFrameworksUUIDError,
    PutV2AdminReportingFrameworksUUIDRequestBody,
    {},
    {},
    PutV2AdminReportingFrameworksUUIDPathParams
  >({ url: "/v2/admin/reporting-frameworks/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminReportingFrameworksUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2AdminReportingFrameworksUUIDResponse,
      PutV2AdminReportingFrameworksUUIDError,
      PutV2AdminReportingFrameworksUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2AdminReportingFrameworksUUIDResponse,
    PutV2AdminReportingFrameworksUUIDError,
    PutV2AdminReportingFrameworksUUIDVariables
  >(
    (variables: PutV2AdminReportingFrameworksUUIDVariables) =>
      fetchPutV2AdminReportingFrameworksUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminReportingFrameworksUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminReportingFrameworksUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminReportingFrameworksUUIDResponse = {
  uuid?: string;
  name?: string;
  slug?: string;
  access_code?: string;
  project_form_uuid?: string;
  project_report_form_uuid?: string;
  site_form_uuid?: string;
  site_report_form_uuid?: string;
  nursery_form_uuid?: string;
  nursery_report_form_uuid?: string;
};

export type DeleteV2AdminReportingFrameworksUUIDVariables = {
  pathParams: DeleteV2AdminReportingFrameworksUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminReportingFrameworksUUID = (
  variables: DeleteV2AdminReportingFrameworksUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    DeleteV2AdminReportingFrameworksUUIDResponse,
    DeleteV2AdminReportingFrameworksUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminReportingFrameworksUUIDPathParams
  >({ url: "/v2/admin/reporting-frameworks/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminReportingFrameworksUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2AdminReportingFrameworksUUIDResponse,
      DeleteV2AdminReportingFrameworksUUIDError,
      DeleteV2AdminReportingFrameworksUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2AdminReportingFrameworksUUIDResponse,
    DeleteV2AdminReportingFrameworksUUIDError,
    DeleteV2AdminReportingFrameworksUUIDVariables
  >(
    (variables: DeleteV2AdminReportingFrameworksUUIDVariables) =>
      fetchDeleteV2AdminReportingFrameworksUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ReportingFrameworksAccessCodeACCESSCODEPathParams = {
  accessCode: string;
};

export type GetV2ReportingFrameworksAccessCodeACCESSCODEError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ReportingFrameworksAccessCodeACCESSCODEResponse = {
  uuid?: string;
  name?: string;
  slug?: string;
  access_code?: string;
  project_form_uuid?: string;
  project_report_form_uuid?: string;
  site_form_uuid?: string;
  site_report_form_uuid?: string;
  nursery_form_uuid?: string;
  nursery_report_form_uuid?: string;
};

export type GetV2ReportingFrameworksAccessCodeACCESSCODEVariables = {
  pathParams: GetV2ReportingFrameworksAccessCodeACCESSCODEPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ReportingFrameworksAccessCodeACCESSCODE = (
  variables: GetV2ReportingFrameworksAccessCodeACCESSCODEVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2ReportingFrameworksAccessCodeACCESSCODEResponse,
    GetV2ReportingFrameworksAccessCodeACCESSCODEError,
    undefined,
    {},
    {},
    GetV2ReportingFrameworksAccessCodeACCESSCODEPathParams
  >({ url: "/v2/reporting-frameworks/access-code/{accessCode}", method: "get", ...variables, signal });

export const useGetV2ReportingFrameworksAccessCodeACCESSCODE = <
  TData = GetV2ReportingFrameworksAccessCodeACCESSCODEResponse
>(
  variables: GetV2ReportingFrameworksAccessCodeACCESSCODEVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2ReportingFrameworksAccessCodeACCESSCODEResponse,
      GetV2ReportingFrameworksAccessCodeACCESSCODEError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetV2ReportingFrameworksAccessCodeACCESSCODEResponse,
    GetV2ReportingFrameworksAccessCodeACCESSCODEError,
    TData
  >(
    queryKeyFn({
      path: "/v2/reporting-frameworks/access-code/{ACCESS_CODE}",
      operationId: "getV2ReportingFrameworksAccessCodeACCESSCODE",
      variables
    }),
    ({ signal }) => fetchGetV2ReportingFrameworksAccessCodeACCESSCODE({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ReportingFrameworksUUIDPathParams = {
  uuid: string;
};

export type GetV2ReportingFrameworksUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ReportingFrameworksUUIDResponse = {
  uuid?: string;
  name?: string;
  slug?: string;
  access_code?: string;
  project_form_uuid?: string;
  project_report_form_uuid?: string;
  site_form_uuid?: string;
  site_report_form_uuid?: string;
  nursery_form_uuid?: string;
  nursery_report_form_uuid?: string;
};

export type GetV2ReportingFrameworksUUIDVariables = {
  pathParams: GetV2ReportingFrameworksUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ReportingFrameworksUUID = (
  variables: GetV2ReportingFrameworksUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2ReportingFrameworksUUIDResponse,
    GetV2ReportingFrameworksUUIDError,
    undefined,
    {},
    {},
    GetV2ReportingFrameworksUUIDPathParams
  >({ url: "/v2/reporting-frameworks/{uuid}", method: "get", ...variables, signal });

export const useGetV2ReportingFrameworksUUID = <TData = GetV2ReportingFrameworksUUIDResponse>(
  variables: GetV2ReportingFrameworksUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ReportingFrameworksUUIDResponse, GetV2ReportingFrameworksUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ReportingFrameworksUUIDResponse, GetV2ReportingFrameworksUUIDError, TData>(
    queryKeyFn({ path: "/v2/reporting-frameworks/{UUID}", operationId: "getV2ReportingFrameworksUUID", variables }),
    ({ signal }) => fetchGetV2ReportingFrameworksUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FormsENTITYUUIDPathParams = {
  /**
   * allowed values projects/sites/nurseries/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2FormsENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsENTITYUUIDResponse = {
  uuid?: string;
  name?: string;
  status?: string;
  form?: Record<string, any>;
  answers?: Record<string, any>;
};

export type GetV2FormsENTITYUUIDVariables = {
  pathParams: GetV2FormsENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsENTITYUUID = (variables: GetV2FormsENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2FormsENTITYUUIDResponse, GetV2FormsENTITYUUIDError, undefined, {}, {}, GetV2FormsENTITYUUIDPathParams>({
    url: "/v2/forms/{entity}/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2FormsENTITYUUID = <TData = GetV2FormsENTITYUUIDResponse>(
  variables: GetV2FormsENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FormsENTITYUUIDResponse, GetV2FormsENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsENTITYUUIDResponse, GetV2FormsENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/forms/{ENTITY}/{UUID}", operationId: "getV2FormsENTITYUUID", variables }),
    ({ signal }) => fetchGetV2FormsENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2FormsENTITYUUIDPathParams = {
  /**
   * allowed values projects/sites/nurseries/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type PutV2FormsENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2FormsENTITYUUIDResponse = {
  uuid?: string;
  name?: string;
  status?: string;
  form?: Record<string, any>;
  answers?: Record<string, any>;
};

export type PutV2FormsENTITYUUIDRequestBody = {
  name?: string;
  status?: string;
  answers?: Record<string, any>;
};

export type PutV2FormsENTITYUUIDVariables = {
  body?: PutV2FormsENTITYUUIDRequestBody;
  pathParams: PutV2FormsENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

/**
 * there is no need to provide which schema as it will use the current published one for this entity and framework
 */
export const fetchPutV2FormsENTITYUUID = (variables: PutV2FormsENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PutV2FormsENTITYUUIDResponse,
    PutV2FormsENTITYUUIDError,
    PutV2FormsENTITYUUIDRequestBody,
    {},
    {},
    PutV2FormsENTITYUUIDPathParams
  >({ url: "/v2/forms/{entity}/{uuid}", method: "put", ...variables, signal });

/**
 * there is no need to provide which schema as it will use the current published one for this entity and framework
 */
export const usePutV2FormsENTITYUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2FormsENTITYUUIDResponse,
      PutV2FormsENTITYUUIDError,
      PutV2FormsENTITYUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PutV2FormsENTITYUUIDResponse, PutV2FormsENTITYUUIDError, PutV2FormsENTITYUUIDVariables>(
    (variables: PutV2FormsENTITYUUIDVariables) => fetchPutV2FormsENTITYUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2FormsENTITYUUIDSubmitPathParams = {
  /**
   * allowed values projects/sites/nurseries/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type PutV2FormsENTITYUUIDSubmitError = Fetcher.ErrorWrapper<undefined>;

export type PutV2FormsENTITYUUIDSubmitResponse = {
  uuid?: string;
  name?: string;
  status?: string;
  form?: Record<string, any>;
  answers?: Record<string, any>;
};

export type PutV2FormsENTITYUUIDSubmitVariables = {
  pathParams: PutV2FormsENTITYUUIDSubmitPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2FormsENTITYUUIDSubmit = (variables: PutV2FormsENTITYUUIDSubmitVariables, signal?: AbortSignal) =>
  apiFetch<
    PutV2FormsENTITYUUIDSubmitResponse,
    PutV2FormsENTITYUUIDSubmitError,
    undefined,
    {},
    {},
    PutV2FormsENTITYUUIDSubmitPathParams
  >({ url: "/v2/forms/{entity}/{uuid}/submit", method: "put", ...variables, signal });

export const usePutV2FormsENTITYUUIDSubmit = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2FormsENTITYUUIDSubmitResponse,
      PutV2FormsENTITYUUIDSubmitError,
      PutV2FormsENTITYUUIDSubmitVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2FormsENTITYUUIDSubmitResponse,
    PutV2FormsENTITYUUIDSubmitError,
    PutV2FormsENTITYUUIDSubmitVariables
  >(
    (variables: PutV2FormsENTITYUUIDSubmitVariables) =>
      fetchPutV2FormsENTITYUUIDSubmit({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2FormsENTITYPathParams = {
  /**
   * allowed values projects/sites/nurseries
   */
  entity: string;
  /**
   * this is the uuid of the form
   */
  uuid: string;
};

export type PostV2FormsENTITYError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FormsENTITYResponse = {
  uuid?: string;
  name?: string;
  status?: string;
  form?: Record<string, any>;
  answers?: Record<string, any>;
};

export type PostV2FormsENTITYVariables = {
  body?: RequestBodies.PostV2FormsEntityFormUuidBody;
  pathParams: PostV2FormsENTITYPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FormsENTITY = (variables: PostV2FormsENTITYVariables, signal?: AbortSignal) =>
  apiFetch<
    PostV2FormsENTITYResponse,
    PostV2FormsENTITYError,
    RequestBodies.PostV2FormsEntityFormUuidBody,
    {},
    {},
    PostV2FormsENTITYPathParams
  >({ url: "/v2/forms/{entity}", method: "post", ...variables, signal });

export const usePostV2FormsENTITY = (
  options?: Omit<
    reactQuery.UseMutationOptions<PostV2FormsENTITYResponse, PostV2FormsENTITYError, PostV2FormsENTITYVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2FormsENTITYResponse, PostV2FormsENTITYError, PostV2FormsENTITYVariables>(
    (variables: PostV2FormsENTITYVariables) => fetchPostV2FormsENTITY({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2FormsProjectsUUIDPathParams = {
  /**
   * this is the uuid of the form
   */
  uuid: string;
};

export type PostV2FormsProjectsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FormsProjectsUUIDResponse = {
  uuid?: string;
  name?: string;
  status?: string;
  form?: Record<string, any>;
  answers?: Record<string, any>;
};

export type PostV2FormsProjectsUUIDVariables = {
  body?: RequestBodies.PostV2FormsEntityFormUuidBody;
  pathParams: PostV2FormsProjectsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FormsProjectsUUID = (variables: PostV2FormsProjectsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PostV2FormsProjectsUUIDResponse,
    PostV2FormsProjectsUUIDError,
    RequestBodies.PostV2FormsEntityFormUuidBody,
    {},
    {},
    PostV2FormsProjectsUUIDPathParams
  >({ url: "/v2/forms/projects/{uuid}", method: "post", ...variables, signal });

export const usePostV2FormsProjectsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2FormsProjectsUUIDResponse,
      PostV2FormsProjectsUUIDError,
      PostV2FormsProjectsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2FormsProjectsUUIDResponse,
    PostV2FormsProjectsUUIDError,
    PostV2FormsProjectsUUIDVariables
  >(
    (variables: PostV2FormsProjectsUUIDVariables) => fetchPostV2FormsProjectsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ProjectsUUIDSitePolygonsPathParams = {
  uuid: string;
};

export type GetV2ProjectsUUIDSitePolygonsQueryParams = {
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2ProjectsUUIDSitePolygonsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDSitePolygonsResponse = {
  data?: {
    uuid?: string;
    project?: Record<string, any>;
    period_key?: string;
    status?: string;
    readable_status?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2ProjectsUUIDSitePolygonsVariables = {
  pathParams: GetV2ProjectsUUIDSitePolygonsPathParams;
  queryParams?: GetV2ProjectsUUIDSitePolygonsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectsUUIDSitePolygons = (
  variables: GetV2ProjectsUUIDSitePolygonsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2ProjectsUUIDSitePolygonsResponse,
    GetV2ProjectsUUIDSitePolygonsError,
    undefined,
    {},
    GetV2ProjectsUUIDSitePolygonsQueryParams,
    GetV2ProjectsUUIDSitePolygonsPathParams
  >({ url: "/v2/projects/{uuid}/site-polygons", method: "get", ...variables, signal });

export const useGetV2ProjectsUUIDSitePolygons = <TData = GetV2ProjectsUUIDSitePolygonsResponse>(
  variables: GetV2ProjectsUUIDSitePolygonsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectsUUIDSitePolygonsResponse, GetV2ProjectsUUIDSitePolygonsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectsUUIDSitePolygonsResponse, GetV2ProjectsUUIDSitePolygonsError, TData>(
    queryKeyFn({ path: "/v2/projects/{UUID}/site-polygons", operationId: "getV2ProjectsUUIDSitePolygons", variables }),
    ({ signal }) => fetchGetV2ProjectsUUIDSitePolygons({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminUpdateRequestsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminUpdateRequestsResponse = {
  data?: {
    uuid?: string;
    framework_key?: string;
    status?: string;
    readable_status?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminUpdateRequestsVariables = {
  body?: RequestBodies.GetV2AdminNurseryReportsBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminUpdateRequests = (variables: GetV2AdminUpdateRequestsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminUpdateRequestsResponse,
    GetV2AdminUpdateRequestsError,
    RequestBodies.GetV2AdminNurseryReportsBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/update-requests/", method: "get", ...variables, signal });

export const useGetV2AdminUpdateRequests = <TData = GetV2AdminUpdateRequestsResponse>(
  variables: GetV2AdminUpdateRequestsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminUpdateRequestsResponse, GetV2AdminUpdateRequestsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminUpdateRequestsResponse, GetV2AdminUpdateRequestsError, TData>(
    queryKeyFn({ path: "/v2/admin/update-requests/", operationId: "getV2AdminUpdateRequests", variables }),
    ({ signal }) => fetchGetV2AdminUpdateRequests({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2AdminUpdateRequestsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminUpdateRequestsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminUpdateRequestsUUIDVariables = {
  pathParams: DeleteV2AdminUpdateRequestsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminUpdateRequestsUUID = (
  variables: DeleteV2AdminUpdateRequestsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminUpdateRequestsUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminUpdateRequestsUUIDPathParams
  >({ url: "/v2/admin/update-requests/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminUpdateRequestsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminUpdateRequestsUUIDError,
      DeleteV2AdminUpdateRequestsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminUpdateRequestsUUIDError,
    DeleteV2AdminUpdateRequestsUUIDVariables
  >(
    (variables: DeleteV2AdminUpdateRequestsUUIDVariables) =>
      fetchDeleteV2AdminUpdateRequestsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2AdminUpdateRequestsUUIDSTATUSPathParams = {
  uuid: string;
  /**
   * allowed values are approve, moreinfo
   */
  status: string;
};

export type PutV2AdminUpdateRequestsUUIDSTATUSError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminUpdateRequestsUUIDSTATUSResponse = {
  uuid?: string;
  framework_key?: string;
  status?: string;
  readable_status?: string;
  content?: string;
  comments?: string;
  project?: Record<string, any>;
  organisation?: Record<string, any>;
  created_by?: Record<string, any>;
};

export type PutV2AdminUpdateRequestsUUIDSTATUSVariables = {
  body?: RequestBodies.PutV2AdminUpdateRequestsUuidStatusBody;
  pathParams: PutV2AdminUpdateRequestsUUIDSTATUSPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminUpdateRequestsUUIDSTATUS = (
  variables: PutV2AdminUpdateRequestsUUIDSTATUSVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2AdminUpdateRequestsUUIDSTATUSResponse,
    PutV2AdminUpdateRequestsUUIDSTATUSError,
    RequestBodies.PutV2AdminUpdateRequestsUuidStatusBody,
    {},
    {},
    PutV2AdminUpdateRequestsUUIDSTATUSPathParams
  >({ url: "/v2/admin/update-requests/{uuid}/{status}", method: "put", ...variables, signal });

export const usePutV2AdminUpdateRequestsUUIDSTATUS = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2AdminUpdateRequestsUUIDSTATUSResponse,
      PutV2AdminUpdateRequestsUUIDSTATUSError,
      PutV2AdminUpdateRequestsUUIDSTATUSVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2AdminUpdateRequestsUUIDSTATUSResponse,
    PutV2AdminUpdateRequestsUUIDSTATUSError,
    PutV2AdminUpdateRequestsUUIDSTATUSVariables
  >(
    (variables: PutV2AdminUpdateRequestsUUIDSTATUSVariables) =>
      fetchPutV2AdminUpdateRequestsUUIDSTATUS({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2AdminENTITYUUIDSTATUSPathParams = {
  /**
   * allowed values are projects, project-reports, site, site-reports, nurseries, nursery-reports
   */
  entity: string;
  uuid: string;
  /**
   * allowed values are approve, moreinfo
   */
  status: string;
};

export type PutV2AdminENTITYUUIDSTATUSError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminENTITYUUIDSTATUSVariables = {
  body?: RequestBodies.PutV2AdminUpdateRequestsUuidStatusBody;
  pathParams: PutV2AdminENTITYUUIDSTATUSPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminENTITYUUIDSTATUS = (variables: PutV2AdminENTITYUUIDSTATUSVariables, signal?: AbortSignal) =>
  apiFetch<
    undefined,
    PutV2AdminENTITYUUIDSTATUSError,
    RequestBodies.PutV2AdminUpdateRequestsUuidStatusBody,
    {},
    {},
    PutV2AdminENTITYUUIDSTATUSPathParams
  >({ url: "/v2/admin/{entity}/{uuid}/{status}", method: "put", ...variables, signal });

export const usePutV2AdminENTITYUUIDSTATUS = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PutV2AdminENTITYUUIDSTATUSError, PutV2AdminENTITYUUIDSTATUSVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2AdminENTITYUUIDSTATUSError, PutV2AdminENTITYUUIDSTATUSVariables>(
    (variables: PutV2AdminENTITYUUIDSTATUSVariables) =>
      fetchPutV2AdminENTITYUUIDSTATUS({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2UpdateRequestsUUIDPathParams = {
  uuid: string;
};

export type GetV2UpdateRequestsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2UpdateRequestsUUIDResponse = {
  uuid?: string;
  framework_key?: string;
  status?: string;
  readable_status?: string;
  content?: string;
  comments?: string;
  project?: Record<string, any>;
  organisation?: Record<string, any>;
  created_by?: Record<string, any>;
};

export type GetV2UpdateRequestsUUIDVariables = {
  pathParams: GetV2UpdateRequestsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2UpdateRequestsUUID = (variables: GetV2UpdateRequestsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2UpdateRequestsUUIDResponse,
    GetV2UpdateRequestsUUIDError,
    undefined,
    {},
    {},
    GetV2UpdateRequestsUUIDPathParams
  >({ url: "/v2/update-requests/{uuid}", method: "get", ...variables, signal });

export const useGetV2UpdateRequestsUUID = <TData = GetV2UpdateRequestsUUIDResponse>(
  variables: GetV2UpdateRequestsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2UpdateRequestsUUIDResponse, GetV2UpdateRequestsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2UpdateRequestsUUIDResponse, GetV2UpdateRequestsUUIDError, TData>(
    queryKeyFn({ path: "/v2/update-requests/{UUID}", operationId: "getV2UpdateRequestsUUID", variables }),
    ({ signal }) => fetchGetV2UpdateRequestsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2UpdateRequestsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2UpdateRequestsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2UpdateRequestsUUIDVariables = {
  pathParams: DeleteV2UpdateRequestsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2UpdateRequestsUUID = (variables: DeleteV2UpdateRequestsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2UpdateRequestsUUIDError, undefined, {}, {}, DeleteV2UpdateRequestsUUIDPathParams>({
    url: "/v2/update-requests/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2UpdateRequestsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2UpdateRequestsUUIDError, DeleteV2UpdateRequestsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2UpdateRequestsUUIDError, DeleteV2UpdateRequestsUUIDVariables>(
    (variables: DeleteV2UpdateRequestsUUIDVariables) =>
      fetchDeleteV2UpdateRequestsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2UpdateRequestsENTITYUUIDPathParams = {
  /**
   * available options are project, site, nursery, project-report, site-report, nursery-report
   */
  entity: string;
  uuid: string;
};

export type GetV2UpdateRequestsENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2UpdateRequestsENTITYUUIDResponse = {
  uuid?: string;
  framework_key?: string;
  status?: string;
  readable_status?: string;
  content?: string;
  comments?: string;
  project?: Record<string, any>;
  organisation?: Record<string, any>;
  created_by?: Record<string, any>;
};

export type GetV2UpdateRequestsENTITYUUIDVariables = {
  pathParams: GetV2UpdateRequestsENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2UpdateRequestsENTITYUUID = (
  variables: GetV2UpdateRequestsENTITYUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2UpdateRequestsENTITYUUIDResponse,
    GetV2UpdateRequestsENTITYUUIDError,
    undefined,
    {},
    {},
    GetV2UpdateRequestsENTITYUUIDPathParams
  >({ url: "/v2/update-requests/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2UpdateRequestsENTITYUUID = <TData = GetV2UpdateRequestsENTITYUUIDResponse>(
  variables: GetV2UpdateRequestsENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2UpdateRequestsENTITYUUIDResponse, GetV2UpdateRequestsENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2UpdateRequestsENTITYUUIDResponse, GetV2UpdateRequestsENTITYUUIDError, TData>(
    queryKeyFn({
      path: "/v2/update-requests/{ENTITY}/{UUID}",
      operationId: "getV2UpdateRequestsENTITYUUID",
      variables
    }),
    ({ signal }) => fetchGetV2UpdateRequestsENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2WorkdaysError = Fetcher.ErrorWrapper<undefined>;

export type PostV2WorkdaysResponse = {
  uuid?: string;
  amount?: number;
  collection?: string;
  gender?: string;
  age?: string;
  ethnicity?: string;
  indigeneity?: string;
};

export type PostV2WorkdaysRequestBody = {
  model_type?: string;
  model_uuid?: string;
  amount?: number;
  collection?: string;
  gender?: string;
  age?: string;
  ethnicity?: string;
  indigeneity?: string;
};

export type PostV2WorkdaysVariables = {
  body?: PostV2WorkdaysRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2Workdays = (variables: PostV2WorkdaysVariables, signal?: AbortSignal) =>
  apiFetch<PostV2WorkdaysResponse, PostV2WorkdaysError, PostV2WorkdaysRequestBody, {}, {}, {}>({
    url: "/v2/workdays",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2Workdays = (
  options?: Omit<
    reactQuery.UseMutationOptions<PostV2WorkdaysResponse, PostV2WorkdaysError, PostV2WorkdaysVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2WorkdaysResponse, PostV2WorkdaysError, PostV2WorkdaysVariables>(
    (variables: PostV2WorkdaysVariables) => fetchPostV2Workdays({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2WorkdaysUUIDPathParams = {
  uuid: string;
};

export type PatchV2WorkdaysUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2WorkdaysUUIDResponse = {
  data?: {
    uuid?: string;
    amount?: number;
    collection?: string;
    gender?: string;
    age?: string;
    ethnicity?: string;
    indigeneity?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type PatchV2WorkdaysUUIDVariables = {
  pathParams: PatchV2WorkdaysUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2WorkdaysUUID = (variables: PatchV2WorkdaysUUIDVariables, signal?: AbortSignal) =>
  apiFetch<PatchV2WorkdaysUUIDResponse, PatchV2WorkdaysUUIDError, undefined, {}, {}, PatchV2WorkdaysUUIDPathParams>({
    url: "/v2/workdays/{uuid}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2WorkdaysUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<PatchV2WorkdaysUUIDResponse, PatchV2WorkdaysUUIDError, PatchV2WorkdaysUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PatchV2WorkdaysUUIDResponse, PatchV2WorkdaysUUIDError, PatchV2WorkdaysUUIDVariables>(
    (variables: PatchV2WorkdaysUUIDVariables) => fetchPatchV2WorkdaysUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2WorkdaysUUIDPathParams = {
  uuid: string;
};

export type DeleteV2WorkdaysUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2WorkdaysUUIDVariables = {
  pathParams: DeleteV2WorkdaysUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2WorkdaysUUID = (variables: DeleteV2WorkdaysUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2WorkdaysUUIDError, undefined, {}, {}, DeleteV2WorkdaysUUIDPathParams>({
    url: "/v2/workdays/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2WorkdaysUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2WorkdaysUUIDError, DeleteV2WorkdaysUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2WorkdaysUUIDError, DeleteV2WorkdaysUUIDVariables>(
    (variables: DeleteV2WorkdaysUUIDVariables) => fetchDeleteV2WorkdaysUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2WorkdaysENTITYUUIDPathParams = {
  /**
   * allowed values project/site/nursery/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2WorkdaysENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2WorkdaysENTITYUUIDResponse = {
  data?: {
    uuid?: string;
    amount?: number;
    collection?: string;
    gender?: string;
    age?: string;
    ethnicity?: string;
    indigeneity?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type GetV2WorkdaysENTITYUUIDVariables = {
  pathParams: GetV2WorkdaysENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2WorkdaysENTITYUUID = (variables: GetV2WorkdaysENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2WorkdaysENTITYUUIDResponse,
    GetV2WorkdaysENTITYUUIDError,
    undefined,
    {},
    {},
    GetV2WorkdaysENTITYUUIDPathParams
  >({ url: "/v2/workdays/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2WorkdaysENTITYUUID = <TData = GetV2WorkdaysENTITYUUIDResponse>(
  variables: GetV2WorkdaysENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2WorkdaysENTITYUUIDResponse, GetV2WorkdaysENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2WorkdaysENTITYUUIDResponse, GetV2WorkdaysENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/workdays/{ENTITY}/{UUID}", operationId: "getV2WorkdaysENTITYUUID", variables }),
    ({ signal }) => fetchGetV2WorkdaysENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2StratasError = Fetcher.ErrorWrapper<undefined>;

export type PostV2StratasResponse = {
  uuid?: string;
  description?: string;
  extent?: number;
};

export type PostV2StratasRequestBody = {
  model_type?: string;
  model_uuid?: string;
  description?: string;
  extent?: number;
};

export type PostV2StratasVariables = {
  body?: PostV2StratasRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2Stratas = (variables: PostV2StratasVariables, signal?: AbortSignal) =>
  apiFetch<PostV2StratasResponse, PostV2StratasError, PostV2StratasRequestBody, {}, {}, {}>({
    url: "/v2/stratas",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2Stratas = (
  options?: Omit<
    reactQuery.UseMutationOptions<PostV2StratasResponse, PostV2StratasError, PostV2StratasVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2StratasResponse, PostV2StratasError, PostV2StratasVariables>(
    (variables: PostV2StratasVariables) => fetchPostV2Stratas({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2StratasUUIDPathParams = {
  uuid: string;
};

export type PatchV2StratasUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2StratasUUIDResponse = {
  data?: {
    uuid?: string;
    description?: string;
    extent?: number;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type PatchV2StratasUUIDVariables = {
  pathParams: PatchV2StratasUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2StratasUUID = (variables: PatchV2StratasUUIDVariables, signal?: AbortSignal) =>
  apiFetch<PatchV2StratasUUIDResponse, PatchV2StratasUUIDError, undefined, {}, {}, PatchV2StratasUUIDPathParams>({
    url: "/v2/stratas/{uuid}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2StratasUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<PatchV2StratasUUIDResponse, PatchV2StratasUUIDError, PatchV2StratasUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PatchV2StratasUUIDResponse, PatchV2StratasUUIDError, PatchV2StratasUUIDVariables>(
    (variables: PatchV2StratasUUIDVariables) => fetchPatchV2StratasUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2StratasUUIDPathParams = {
  uuid: string;
};

export type DeleteV2StratasUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2StratasUUIDVariables = {
  pathParams: DeleteV2StratasUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2StratasUUID = (variables: DeleteV2StratasUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2StratasUUIDError, undefined, {}, {}, DeleteV2StratasUUIDPathParams>({
    url: "/v2/stratas/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2StratasUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2StratasUUIDError, DeleteV2StratasUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2StratasUUIDError, DeleteV2StratasUUIDVariables>(
    (variables: DeleteV2StratasUUIDVariables) => fetchDeleteV2StratasUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2StratasENTITYUUIDPathParams = {
  /**
   * allowed values project/site/nursery/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2StratasENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2StratasENTITYUUIDResponse = {
  data?: {
    uuid?: string;
    description?: string;
    extent?: number;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type GetV2StratasENTITYUUIDVariables = {
  pathParams: GetV2StratasENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2StratasENTITYUUID = (variables: GetV2StratasENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2StratasENTITYUUIDResponse,
    GetV2StratasENTITYUUIDError,
    undefined,
    {},
    {},
    GetV2StratasENTITYUUIDPathParams
  >({ url: "/v2/stratas/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2StratasENTITYUUID = <TData = GetV2StratasENTITYUUIDResponse>(
  variables: GetV2StratasENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2StratasENTITYUUIDResponse, GetV2StratasENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2StratasENTITYUUIDResponse, GetV2StratasENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/stratas/{ENTITY}/{UUID}", operationId: "getV2StratasENTITYUUID", variables }),
    ({ signal }) => fetchGetV2StratasENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2SeedingsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2SeedingsResponse = {
  uuid?: string;
  name?: string;
  weight_of_sample?: number;
  seeds_in_sample?: number;
  amount?: number;
};

export type PostV2SeedingsRequestBody = {
  model_type?: string;
  model_uuid?: string;
  name?: string;
  weight_of_sample?: number;
  seeds_in_sample?: number;
  amount?: number;
};

export type PostV2SeedingsVariables = {
  body?: PostV2SeedingsRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2Seedings = (variables: PostV2SeedingsVariables, signal?: AbortSignal) =>
  apiFetch<PostV2SeedingsResponse, PostV2SeedingsError, PostV2SeedingsRequestBody, {}, {}, {}>({
    url: "/v2/seedings",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2Seedings = (
  options?: Omit<
    reactQuery.UseMutationOptions<PostV2SeedingsResponse, PostV2SeedingsError, PostV2SeedingsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2SeedingsResponse, PostV2SeedingsError, PostV2SeedingsVariables>(
    (variables: PostV2SeedingsVariables) => fetchPostV2Seedings({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2SeedingsUUIDPathParams = {
  uuid: string;
};

export type PatchV2SeedingsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2SeedingsUUIDResponse = {
  data?: {
    uuid?: string;
    name?: string;
    weight_of_sample?: number;
    seeds_in_sample?: number;
    amount?: number;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type PatchV2SeedingsUUIDVariables = {
  pathParams: PatchV2SeedingsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2SeedingsUUID = (variables: PatchV2SeedingsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<PatchV2SeedingsUUIDResponse, PatchV2SeedingsUUIDError, undefined, {}, {}, PatchV2SeedingsUUIDPathParams>({
    url: "/v2/seedings/{uuid}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2SeedingsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<PatchV2SeedingsUUIDResponse, PatchV2SeedingsUUIDError, PatchV2SeedingsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PatchV2SeedingsUUIDResponse, PatchV2SeedingsUUIDError, PatchV2SeedingsUUIDVariables>(
    (variables: PatchV2SeedingsUUIDVariables) => fetchPatchV2SeedingsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2SeedingsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2SeedingsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2SeedingsUUIDVariables = {
  pathParams: DeleteV2SeedingsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2SeedingsUUID = (variables: DeleteV2SeedingsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2SeedingsUUIDError, undefined, {}, {}, DeleteV2SeedingsUUIDPathParams>({
    url: "/v2/seedings/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2SeedingsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2SeedingsUUIDError, DeleteV2SeedingsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2SeedingsUUIDError, DeleteV2SeedingsUUIDVariables>(
    (variables: DeleteV2SeedingsUUIDVariables) => fetchDeleteV2SeedingsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2SeedingsENTITYUUIDPathParams = {
  /**
   * allowed values site/site-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2SeedingsENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2SeedingsENTITYUUIDResponse = {
  data?: {
    uuid?: string;
    name?: string;
    weight_of_sample?: number;
    seeds_in_sample?: number;
    amount?: number;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type GetV2SeedingsENTITYUUIDVariables = {
  pathParams: GetV2SeedingsENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2SeedingsENTITYUUID = (variables: GetV2SeedingsENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2SeedingsENTITYUUIDResponse,
    GetV2SeedingsENTITYUUIDError,
    undefined,
    {},
    {},
    GetV2SeedingsENTITYUUIDPathParams
  >({ url: "/v2/seedings/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2SeedingsENTITYUUID = <TData = GetV2SeedingsENTITYUUIDResponse>(
  variables: GetV2SeedingsENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2SeedingsENTITYUUIDResponse, GetV2SeedingsENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2SeedingsENTITYUUIDResponse, GetV2SeedingsENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/seedings/{ENTITY}/{UUID}", operationId: "getV2SeedingsENTITYUUID", variables }),
    ({ signal }) => fetchGetV2SeedingsENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2DisturbancesError = Fetcher.ErrorWrapper<undefined>;

export type PostV2DisturbancesResponse = {
  uuid?: string;
  description?: string;
  intensity?: string;
  extent?: string;
};

export type PostV2DisturbancesRequestBody = {
  model_type?: string;
  model_uuid?: number;
  description?: string;
  intensity?: string;
  extent?: string;
  collection?: string;
};

export type PostV2DisturbancesVariables = {
  body?: PostV2DisturbancesRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2Disturbances = (variables: PostV2DisturbancesVariables, signal?: AbortSignal) =>
  apiFetch<PostV2DisturbancesResponse, PostV2DisturbancesError, PostV2DisturbancesRequestBody, {}, {}, {}>({
    url: "/v2/disturbances",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2Disturbances = (
  options?: Omit<
    reactQuery.UseMutationOptions<PostV2DisturbancesResponse, PostV2DisturbancesError, PostV2DisturbancesVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2DisturbancesResponse, PostV2DisturbancesError, PostV2DisturbancesVariables>(
    (variables: PostV2DisturbancesVariables) => fetchPostV2Disturbances({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2DisturbancesUUIDPathParams = {
  uuid: string;
};

export type PatchV2DisturbancesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2DisturbancesUUIDResponse = {
  data?: {
    uuid?: string;
    description?: string;
    intensity?: string;
    extent?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type PatchV2DisturbancesUUIDVariables = {
  pathParams: PatchV2DisturbancesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2DisturbancesUUID = (variables: PatchV2DisturbancesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PatchV2DisturbancesUUIDResponse,
    PatchV2DisturbancesUUIDError,
    undefined,
    {},
    {},
    PatchV2DisturbancesUUIDPathParams
  >({ url: "/v2/disturbances/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2DisturbancesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2DisturbancesUUIDResponse,
      PatchV2DisturbancesUUIDError,
      PatchV2DisturbancesUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2DisturbancesUUIDResponse,
    PatchV2DisturbancesUUIDError,
    PatchV2DisturbancesUUIDVariables
  >(
    (variables: PatchV2DisturbancesUUIDVariables) => fetchPatchV2DisturbancesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2DisturbancesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2DisturbancesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2DisturbancesUUIDVariables = {
  pathParams: DeleteV2DisturbancesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2DisturbancesUUID = (variables: DeleteV2DisturbancesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2DisturbancesUUIDError, undefined, {}, {}, DeleteV2DisturbancesUUIDPathParams>({
    url: "/v2/disturbances/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2DisturbancesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2DisturbancesUUIDError, DeleteV2DisturbancesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2DisturbancesUUIDError, DeleteV2DisturbancesUUIDVariables>(
    (variables: DeleteV2DisturbancesUUIDVariables) =>
      fetchDeleteV2DisturbancesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2DisturbancesENTITYUUIDPathParams = {
  /**
   * allowed values project/site/nursery/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2DisturbancesENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2DisturbancesENTITYUUIDResponse = {
  data?: {
    uuid?: string;
    description?: string;
    intensity?: string;
    extent?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type GetV2DisturbancesENTITYUUIDVariables = {
  pathParams: GetV2DisturbancesENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2DisturbancesENTITYUUID = (
  variables: GetV2DisturbancesENTITYUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2DisturbancesENTITYUUIDResponse,
    GetV2DisturbancesENTITYUUIDError,
    undefined,
    {},
    {},
    GetV2DisturbancesENTITYUUIDPathParams
  >({ url: "/v2/disturbances/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2DisturbancesENTITYUUID = <TData = GetV2DisturbancesENTITYUUIDResponse>(
  variables: GetV2DisturbancesENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2DisturbancesENTITYUUIDResponse, GetV2DisturbancesENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2DisturbancesENTITYUUIDResponse, GetV2DisturbancesENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/disturbances/{ENTITY}/{UUID}", operationId: "getV2DisturbancesENTITYUUID", variables }),
    ({ signal }) => fetchGetV2DisturbancesENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2InvasivesError = Fetcher.ErrorWrapper<undefined>;

export type PostV2InvasivesResponse = {
  uuid?: string;
  name?: string;
  type?: number;
};

export type PostV2InvasivesRequestBody = {
  model_type?: string;
  model_uuid?: number;
  name?: string;
  type?: string;
  collection?: string;
};

export type PostV2InvasivesVariables = {
  body?: PostV2InvasivesRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2Invasives = (variables: PostV2InvasivesVariables, signal?: AbortSignal) =>
  apiFetch<PostV2InvasivesResponse, PostV2InvasivesError, PostV2InvasivesRequestBody, {}, {}, {}>({
    url: "/v2/invasives",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2Invasives = (
  options?: Omit<
    reactQuery.UseMutationOptions<PostV2InvasivesResponse, PostV2InvasivesError, PostV2InvasivesVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2InvasivesResponse, PostV2InvasivesError, PostV2InvasivesVariables>(
    (variables: PostV2InvasivesVariables) => fetchPostV2Invasives({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2InvasivesUUIDPathParams = {
  uuid: string;
};

export type PatchV2InvasivesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2InvasivesUUIDResponse = {
  data?: {
    uuid?: string;
    name?: string;
    type?: number;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type PatchV2InvasivesUUIDVariables = {
  pathParams: PatchV2InvasivesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2InvasivesUUID = (variables: PatchV2InvasivesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<PatchV2InvasivesUUIDResponse, PatchV2InvasivesUUIDError, undefined, {}, {}, PatchV2InvasivesUUIDPathParams>({
    url: "/v2/invasives/{uuid}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2InvasivesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2InvasivesUUIDResponse,
      PatchV2InvasivesUUIDError,
      PatchV2InvasivesUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PatchV2InvasivesUUIDResponse, PatchV2InvasivesUUIDError, PatchV2InvasivesUUIDVariables>(
    (variables: PatchV2InvasivesUUIDVariables) => fetchPatchV2InvasivesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2InvasivesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2InvasivesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2InvasivesUUIDVariables = {
  pathParams: DeleteV2InvasivesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2InvasivesUUID = (variables: DeleteV2InvasivesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2InvasivesUUIDError, undefined, {}, {}, DeleteV2InvasivesUUIDPathParams>({
    url: "/v2/invasives/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2InvasivesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2InvasivesUUIDError, DeleteV2InvasivesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2InvasivesUUIDError, DeleteV2InvasivesUUIDVariables>(
    (variables: DeleteV2InvasivesUUIDVariables) => fetchDeleteV2InvasivesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2InvasivesENTITYUUIDPathParams = {
  /**
   * allowed values project/site/nursery/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2InvasivesENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2InvasivesENTITYUUIDResponse = {
  data?: {
    uuid?: string;
    name?: string;
    type?: number;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type GetV2InvasivesENTITYUUIDVariables = {
  pathParams: GetV2InvasivesENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2InvasivesENTITYUUID = (variables: GetV2InvasivesENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2InvasivesENTITYUUIDResponse,
    GetV2InvasivesENTITYUUIDError,
    undefined,
    {},
    {},
    GetV2InvasivesENTITYUUIDPathParams
  >({ url: "/v2/invasives/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2InvasivesENTITYUUID = <TData = GetV2InvasivesENTITYUUIDResponse>(
  variables: GetV2InvasivesENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2InvasivesENTITYUUIDResponse, GetV2InvasivesENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2InvasivesENTITYUUIDResponse, GetV2InvasivesENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/invasives/{ENTITY}/{UUID}", operationId: "getV2InvasivesENTITYUUID", variables }),
    ({ signal }) => fetchGetV2InvasivesENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FormsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsResponse = {
  data?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2FormsVariables = {
  body?: RequestBodies.GetV2AdminNurseryReportsBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2Forms = (variables: GetV2FormsVariables, signal?: AbortSignal) =>
  apiFetch<GetV2FormsResponse, GetV2FormsError, RequestBodies.GetV2AdminNurseryReportsBody, {}, {}, {}>({
    url: "/v2/forms",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2Forms = <TData = GetV2FormsResponse>(
  variables: GetV2FormsVariables,
  options?: Omit<reactQuery.UseQueryOptions<GetV2FormsResponse, GetV2FormsError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsResponse, GetV2FormsError, TData>(
    queryKeyFn({ path: "/v2/forms", operationId: "getV2Forms", variables }),
    ({ signal }) => fetchGetV2Forms({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchV2AdminFormsUUIDPublishError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFormsUUIDPublishResponse = {
  id?: number;
  uuid?: string;
  type?: string;
  version?: number;
  title?: string;
  subtitle?: string;
  description?: string;
  framework_key?: string;
  duration?: string;
  deadline_at?: string;
  documentation?: string;
  documentation_label?: string;
  submission_message?: string;
  published?: boolean;
  stage_id?: string;
  options_other?: boolean;
  form_sections?: {
    order?: number;
    form_id?: number;
    form_questions?: {
      id?: number;
      uuid?: string;
      form_section_id?: number;
      label?: string;
      validation?: string[];
      parent_id?: string;
      linked_field_key?: string;
      children?: Record<string, any>[];
      multichoice?: boolean;
      order?: number;
      options?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      table_headers?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      additional_text?: string;
      additional_url?: string;
      show_on_parent_condition?: boolean;
      input_type?:
        | "date"
        | "text"
        | "long-text"
        | "select"
        | "checkboxes"
        | "radio"
        | "number"
        | "image"
        | "file"
        | "conditional";
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg. slug: name
   */
  tags?: string[];
  updated_by?: number;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PatchV2AdminFormsUUIDPublishVariables = ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFormsUUIDPublish = (
  variables: PatchV2AdminFormsUUIDPublishVariables,
  signal?: AbortSignal
) =>
  apiFetch<PatchV2AdminFormsUUIDPublishResponse, PatchV2AdminFormsUUIDPublishError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms/{uuid}/publish",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2AdminFormsUUIDPublish = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2AdminFormsUUIDPublishResponse,
      PatchV2AdminFormsUUIDPublishError,
      PatchV2AdminFormsUUIDPublishVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2AdminFormsUUIDPublishResponse,
    PatchV2AdminFormsUUIDPublishError,
    PatchV2AdminFormsUUIDPublishVariables
  >(
    (variables: PatchV2AdminFormsUUIDPublishVariables) =>
      fetchPatchV2AdminFormsUUIDPublish({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2AdminFormsSectionError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminFormsSectionResponse = {
  order?: number;
  form_id?: number;
  form_questions?: {
    id?: number;
    uuid?: string;
    form_section_id?: number;
    label?: string;
    validation?: string[];
    parent_id?: string;
    linked_field_key?: string;
    children?: Record<string, any>[];
    multichoice?: boolean;
    order?: number;
    options?: {
      id?: number;
      uuid?: string;
      form_question_id?: number;
      label?: string;
      order?: number;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    table_headers?: {
      id?: number;
      uuid?: string;
      form_question_id?: number;
      label?: string;
      order?: number;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    additional_text?: string;
    additional_url?: string;
    show_on_parent_condition?: boolean;
    input_type?:
      | "date"
      | "text"
      | "long-text"
      | "select"
      | "checkboxes"
      | "radio"
      | "number"
      | "image"
      | "file"
      | "conditional";
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  created_at?: string;
  updated_at?: string;
  deleted_at?: string;
};

export type PostV2AdminFormsSectionRequestBody = {
  order?: number;
  title?: string;
  subtitle?: string;
  description?: string;
  form_questions?: {
    additional_props?: Record<string, any>[];
    child_form_questions?: {
      id?: number;
      uuid?: string;
      form_section_id?: number;
      label?: string;
      validation?: string[];
      parent_id?: string;
      linked_field_key?: string;
      children?: Record<string, any>[];
      multichoice?: boolean;
      order?: number;
      options?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      table_headers?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      additional_text?: string;
      additional_url?: string;
      show_on_parent_condition?: boolean;
      input_type?:
        | "date"
        | "text"
        | "long-text"
        | "select"
        | "checkboxes"
        | "radio"
        | "number"
        | "image"
        | "file"
        | "conditional";
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    table_headers?: {
      id?: number;
      uuid?: string;
      form_question_id?: number;
      label?: string;
      order?: number;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    linked_field_key?: string;
    show_on_parent_condition?: boolean;
    input_type?:
      | "date"
      | "text"
      | "long-text"
      | "select"
      | "checkboxes"
      | "radio"
      | "number"
      | "image"
      | "file"
      | "conditional";
    label?: string;
    placeholder?: string;
    description?: string;
    validation?: Record<string, any>;
    multichoice?: boolean;
    order?: number;
    options_list?: string;
    options?: {
      id?: number;
      uuid?: string;
      form_question_id?: number;
      label?: string;
      order?: number;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
};

export type PostV2AdminFormsSectionVariables = {
  body?: PostV2AdminFormsSectionRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminFormsSection = (variables: PostV2AdminFormsSectionVariables, signal?: AbortSignal) =>
  apiFetch<
    PostV2AdminFormsSectionResponse,
    PostV2AdminFormsSectionError,
    PostV2AdminFormsSectionRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/forms/section", method: "post", ...variables, signal });

export const usePostV2AdminFormsSection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2AdminFormsSectionResponse,
      PostV2AdminFormsSectionError,
      PostV2AdminFormsSectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2AdminFormsSectionResponse,
    PostV2AdminFormsSectionError,
    PostV2AdminFormsSectionVariables
  >(
    (variables: PostV2AdminFormsSectionVariables) => fetchPostV2AdminFormsSection({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminFormsQuestionUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFormsQuestionUUIDResponse = {
  id?: number;
  uuid?: string;
  form_section_id?: number;
  label?: string;
  validation?: string[];
  parent_id?: string;
  linked_field_key?: string;
  children?: Record<string, any>[];
  multichoice?: boolean;
  order?: number;
  options?: {
    id?: number;
    uuid?: string;
    form_question_id?: number;
    label?: string;
    order?: number;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  table_headers?: {
    id?: number;
    uuid?: string;
    form_question_id?: number;
    label?: string;
    order?: number;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  additional_text?: string;
  additional_url?: string;
  show_on_parent_condition?: boolean;
  input_type?:
    | "date"
    | "text"
    | "long-text"
    | "select"
    | "checkboxes"
    | "radio"
    | "number"
    | "image"
    | "file"
    | "conditional";
  created_at?: string;
  updated_at?: string;
  deleted_at?: string;
};

export type DeleteV2AdminFormsQuestionUUIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFormsQuestionUUID = (
  variables: DeleteV2AdminFormsQuestionUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<DeleteV2AdminFormsQuestionUUIDResponse, DeleteV2AdminFormsQuestionUUIDError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms/question/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminFormsQuestionUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2AdminFormsQuestionUUIDResponse,
      DeleteV2AdminFormsQuestionUUIDError,
      DeleteV2AdminFormsQuestionUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2AdminFormsQuestionUUIDResponse,
    DeleteV2AdminFormsQuestionUUIDError,
    DeleteV2AdminFormsQuestionUUIDVariables
  >(
    (variables: DeleteV2AdminFormsQuestionUUIDVariables) =>
      fetchDeleteV2AdminFormsQuestionUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminFormsSectionUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFormsSectionUUIDResponse = {
  order?: number;
  form_id?: number;
  form_questions?: {
    id?: number;
    uuid?: string;
    form_section_id?: number;
    label?: string;
    validation?: string[];
    parent_id?: string;
    linked_field_key?: string;
    children?: Record<string, any>[];
    multichoice?: boolean;
    order?: number;
    options?: {
      id?: number;
      uuid?: string;
      form_question_id?: number;
      label?: string;
      order?: number;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    table_headers?: {
      id?: number;
      uuid?: string;
      form_question_id?: number;
      label?: string;
      order?: number;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    additional_text?: string;
    additional_url?: string;
    show_on_parent_condition?: boolean;
    input_type?:
      | "date"
      | "text"
      | "long-text"
      | "select"
      | "checkboxes"
      | "radio"
      | "number"
      | "image"
      | "file"
      | "conditional";
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  created_at?: string;
  updated_at?: string;
  deleted_at?: string;
};

export type DeleteV2AdminFormsSectionUUIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFormsSectionUUID = (
  variables: DeleteV2AdminFormsSectionUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<DeleteV2AdminFormsSectionUUIDResponse, DeleteV2AdminFormsSectionUUIDError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms/section/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminFormsSectionUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2AdminFormsSectionUUIDResponse,
      DeleteV2AdminFormsSectionUUIDError,
      DeleteV2AdminFormsSectionUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2AdminFormsSectionUUIDResponse,
    DeleteV2AdminFormsSectionUUIDError,
    DeleteV2AdminFormsSectionUUIDVariables
  >(
    (variables: DeleteV2AdminFormsSectionUUIDVariables) =>
      fetchDeleteV2AdminFormsSectionUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AdminFormsSectionUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFormsSectionUUIDResponse = {
  order?: number;
  form_id?: number;
  form_questions?: {
    id?: number;
    uuid?: string;
    form_section_id?: number;
    label?: string;
    validation?: string[];
    parent_id?: string;
    linked_field_key?: string;
    children?: Record<string, any>[];
    multichoice?: boolean;
    order?: number;
    options?: {
      id?: number;
      uuid?: string;
      form_question_id?: number;
      label?: string;
      order?: number;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    table_headers?: {
      id?: number;
      uuid?: string;
      form_question_id?: number;
      label?: string;
      order?: number;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    additional_text?: string;
    additional_url?: string;
    show_on_parent_condition?: boolean;
    input_type?:
      | "date"
      | "text"
      | "long-text"
      | "select"
      | "checkboxes"
      | "radio"
      | "number"
      | "image"
      | "file"
      | "conditional";
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  created_at?: string;
  updated_at?: string;
  deleted_at?: string;
};

export type PatchV2AdminFormsSectionUUIDRequestBody = {
  order?: number;
};

export type PatchV2AdminFormsSectionUUIDVariables = {
  body?: PatchV2AdminFormsSectionUUIDRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFormsSectionUUID = (
  variables: PatchV2AdminFormsSectionUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PatchV2AdminFormsSectionUUIDResponse,
    PatchV2AdminFormsSectionUUIDError,
    PatchV2AdminFormsSectionUUIDRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/forms/section/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2AdminFormsSectionUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2AdminFormsSectionUUIDResponse,
      PatchV2AdminFormsSectionUUIDError,
      PatchV2AdminFormsSectionUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2AdminFormsSectionUUIDResponse,
    PatchV2AdminFormsSectionUUIDError,
    PatchV2AdminFormsSectionUUIDVariables
  >(
    (variables: PatchV2AdminFormsSectionUUIDVariables) =>
      fetchPatchV2AdminFormsSectionUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminFormsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFormsUUIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFormsUUID = (variables: DeleteV2AdminFormsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2AdminFormsUUIDError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminFormsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2AdminFormsUUIDError, DeleteV2AdminFormsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2AdminFormsUUIDError, DeleteV2AdminFormsUUIDVariables>(
    (variables: DeleteV2AdminFormsUUIDVariables) => fetchDeleteV2AdminFormsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AdminFormsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFormsUUIDResponse = {
  id?: number;
  uuid?: string;
  type?: string;
  version?: number;
  title?: string;
  subtitle?: string;
  description?: string;
  framework_key?: string;
  duration?: string;
  deadline_at?: string;
  documentation?: string;
  documentation_label?: string;
  submission_message?: string;
  published?: boolean;
  stage_id?: string;
  options_other?: boolean;
  form_sections?: {
    order?: number;
    form_id?: number;
    form_questions?: {
      id?: number;
      uuid?: string;
      form_section_id?: number;
      label?: string;
      validation?: string[];
      parent_id?: string;
      linked_field_key?: string;
      children?: Record<string, any>[];
      multichoice?: boolean;
      order?: number;
      options?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      table_headers?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      additional_text?: string;
      additional_url?: string;
      show_on_parent_condition?: boolean;
      input_type?:
        | "date"
        | "text"
        | "long-text"
        | "select"
        | "checkboxes"
        | "radio"
        | "number"
        | "image"
        | "file"
        | "conditional";
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg. slug: name
   */
  tags?: string[];
  updated_by?: number;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PatchV2AdminFormsUUIDRequestBody = {
  type?: string;
  title?: string;
  subtitle?: string;
  description?: string;
  documentation?: string;
  documentation_label?: string;
  submission_message?: string;
  duration?: string;
  options_other?: boolean;
};

export type PatchV2AdminFormsUUIDVariables = {
  body?: PatchV2AdminFormsUUIDRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFormsUUID = (variables: PatchV2AdminFormsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<PatchV2AdminFormsUUIDResponse, PatchV2AdminFormsUUIDError, PatchV2AdminFormsUUIDRequestBody, {}, {}, {}>({
    url: "/v2/admin/forms/{uuid}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2AdminFormsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2AdminFormsUUIDResponse,
      PatchV2AdminFormsUUIDError,
      PatchV2AdminFormsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2AdminFormsUUIDResponse,
    PatchV2AdminFormsUUIDError,
    PatchV2AdminFormsUUIDVariables
  >(
    (variables: PatchV2AdminFormsUUIDVariables) => fetchPatchV2AdminFormsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FormsLinkedFieldListingQueryParams = {
  /**
   * array of form types
   */
  form_types?: string[];
};

export type GetV2FormsLinkedFieldListingError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsLinkedFieldListingResponse = {
  uuid?: string;
  name?: string;
  input_type?: string;
  model_key?: string;
  option_list_key?: string;
  options?: string[];
};

export type GetV2FormsLinkedFieldListingVariables = {
  queryParams?: GetV2FormsLinkedFieldListingQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsLinkedFieldListing = (
  variables: GetV2FormsLinkedFieldListingVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2FormsLinkedFieldListingResponse,
    GetV2FormsLinkedFieldListingError,
    undefined,
    {},
    GetV2FormsLinkedFieldListingQueryParams,
    {}
  >({ url: "/v2/forms/linked-field-listing", method: "get", ...variables, signal });

export const useGetV2FormsLinkedFieldListing = <TData = GetV2FormsLinkedFieldListingResponse>(
  variables: GetV2FormsLinkedFieldListingVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FormsLinkedFieldListingResponse, GetV2FormsLinkedFieldListingError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsLinkedFieldListingResponse, GetV2FormsLinkedFieldListingError, TData>(
    queryKeyFn({ path: "/v2/forms/linked-field-listing", operationId: "getV2FormsLinkedFieldListing", variables }),
    ({ signal }) => fetchGetV2FormsLinkedFieldListing({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFormsCommonOptionsBUCKETPathParams = {
  /**
   * name of the bucket/collection of common options
   */
  bucket: string;
};

export type GetV2AdminFormsCommonOptionsBUCKETQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
};

export type GetV2AdminFormsCommonOptionsBUCKETError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsCommonOptionsBUCKETResponse = {
  uuid?: string;
  slug?: string;
  alt_value?: string;
  label?: string;
};

export type GetV2AdminFormsCommonOptionsBUCKETVariables = {
  pathParams: GetV2AdminFormsCommonOptionsBUCKETPathParams;
  queryParams?: GetV2AdminFormsCommonOptionsBUCKETQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsCommonOptionsBUCKET = (
  variables: GetV2AdminFormsCommonOptionsBUCKETVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2AdminFormsCommonOptionsBUCKETResponse,
    GetV2AdminFormsCommonOptionsBUCKETError,
    undefined,
    {},
    GetV2AdminFormsCommonOptionsBUCKETQueryParams,
    GetV2AdminFormsCommonOptionsBUCKETPathParams
  >({ url: "/v2/admin/forms/common-options/{bucket}", method: "get", ...variables, signal });

export const useGetV2AdminFormsCommonOptionsBUCKET = <TData = GetV2AdminFormsCommonOptionsBUCKETResponse>(
  variables: GetV2AdminFormsCommonOptionsBUCKETVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2AdminFormsCommonOptionsBUCKETResponse,
      GetV2AdminFormsCommonOptionsBUCKETError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetV2AdminFormsCommonOptionsBUCKETResponse,
    GetV2AdminFormsCommonOptionsBUCKETError,
    TData
  >(
    queryKeyFn({
      path: "/v2/admin/forms/common-options/{BUCKET}",
      operationId: "getV2AdminFormsCommonOptionsBUCKET",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsCommonOptionsBUCKET({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminOrganisationsQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminOrganisationsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminOrganisationsResponse = {
  data?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2AdminOrganisationsVariables = {
  queryParams?: GetV2AdminOrganisationsQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Currently available sort is status, type, trees_grown_total, name, fin_budget_1year, created_at
 */
export const fetchGetV2AdminOrganisations = (variables: GetV2AdminOrganisationsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminOrganisationsResponse,
    GetV2AdminOrganisationsError,
    undefined,
    {},
    GetV2AdminOrganisationsQueryParams,
    {}
  >({ url: "/v2/admin/organisations", method: "get", ...variables, signal });

/**
 * Currently available sort is status, type, trees_grown_total, name, fin_budget_1year, created_at
 */
export const useGetV2AdminOrganisations = <TData = GetV2AdminOrganisationsResponse>(
  variables: GetV2AdminOrganisationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminOrganisationsResponse, GetV2AdminOrganisationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminOrganisationsResponse, GetV2AdminOrganisationsError, TData>(
    queryKeyFn({ path: "/v2/admin/organisations", operationId: "getV2AdminOrganisations", variables }),
    ({ signal }) => fetchGetV2AdminOrganisations({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminOrganisationsMultiQueryParams = {
  /**
   * comma separated list of values. eg ?ids=uuid1,uuid2
   */
  ids: string;
};

export type GetV2AdminOrganisationsMultiError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminOrganisationsMultiResponse = {
  uuid?: string;
  status?: string;
  readable_status?: string;
  type?: string;
  private?: boolean;
  name?: string;
  phone?: string;
  founding_date?: string;
  description?: string;
  countries?: string[];
  languages?: string[];
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  project_pitches?: {
    id?: string;
    uuid?: string;
    status?: string;
    readable_status?: string;
    organisation_id?: string;
    funding_programmes?: {
      id?: number;
      uuid?: string;
      name?: string;
      description?: string;
      read_more_url?: string;
      organisation_types?: string[];
      location?: string;
      status?: string;
    };
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_name?: string;
    how_discovered?: string;
    project_objectives?: string;
    project_country?: string[];
    project_county_district?: string;
    restoration_intervention_types?: string[];
    land_systems?: string[];
    tree_restoration_practices?: string[];
    total_hectares?: number;
    project_budget?: number;
    total_trees?: number;
    capacity_building_needs?: string[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    restoration_photos?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    proof_of_land_tenure_mou?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    detailed_project_budget?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    expected_active_restoration_start_date?: string;
    expected_active_restoration_end_date?: string;
    description_of_project_timeline?: string;
    proj_partner_info?: string;
    land_tenure_proj_area?: string[];
    landholder_comm_engage?: string;
    proj_success_risks?: string;
    monitor_eval_plan?: string;
    proj_boundary?: string;
    sustainable_dev_goals?: string[];
    proj_area_description?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_sites?: number;
    environmental_goals?: string;
    main_degradation_causes?: string;
    seedlings_source?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_nurseries?: number;
    curr_land_degradation?: string;
    proj_impact_socieconom?: string;
    proj_impact_foodsec?: string;
    proj_impact_watersec?: string;
    proj_impact_jobtypes?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    num_jobs_created?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_men?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_18to35?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_older35?: number;
    proj_beneficiaries?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_small?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_large?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_youth?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_classes?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_tribes?: number;
    monitoring_evaluation_plan?: string;
    main_causes_of_degradation?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  web_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  linkedin_url?: string;
  twitter_url?: string;
  hq_street_1?: string;
  hq_street_2?: string;
  hq_city?: string;
  hq_state?: string;
  hq_zipcode?: string;
  hq_country?: string;
  fin_start_month?: number;
  /**
   * @format float
   */
  fin_budget_3year?: number;
  /**
   * @format float
   */
  fin_budget_2year?: number;
  /**
   * @format float
   */
  fin_budget_1year?: number;
  /**
   * @format float
   */
  fin_budget_current_year?: number;
  /**
   * @format float
   */
  ha_restored_total?: number;
  /**
   * @format float
   */
  ha_restored_3year?: number;
  relevant_experience_years?: number;
  trees_grown_total?: number;
  trees_grown_3year?: number;
  tree_care_approach?: string;
  ft_permanent_employees?: number;
  pt_permanent_employees?: number;
  temp_employees?: number;
  female_employees?: number;
  male_employees?: number;
  young_employees?: number;
  additional_funding_details?: string;
  community_experience?: string;
  total_engaged_community_members_3yr?: number;
  percent_engaged_women_3yr?: number;
  percent_engaged_men_3yr?: number;
  percent_engaged_under_35_3yr?: number;
  percent_engaged_over_35_3yr?: number;
  percent_engaged_smallholder_3yr?: number;
  total_trees_grown?: number;
  avg_tree_survival_rate?: number;
  tree_maintenance_aftercare_approach?: string;
  restored_areas_description?: string;
  monitoring_evaluation_experience?: string;
  funding_history?: string;
  shapefiles?: {
    uuid?: string;
    shapefileable_type?: string;
    shapefileable_id?: number;
    geojson?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  bank_statements?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  previous_annual_reports?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  logo?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  reference?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  additional?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_2year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_last_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_this_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_next_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  legal_registration?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg. slug: name
   */
  tags?: string[];
  created_at?: string;
  updated_at?: string;
};

export type GetV2AdminOrganisationsMultiVariables = {
  queryParams: GetV2AdminOrganisationsMultiQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminOrganisationsMulti = (
  variables: GetV2AdminOrganisationsMultiVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2AdminOrganisationsMultiResponse,
    GetV2AdminOrganisationsMultiError,
    undefined,
    {},
    GetV2AdminOrganisationsMultiQueryParams,
    {}
  >({ url: "/v2/admin/organisations/multi", method: "get", ...variables, signal });

export const useGetV2AdminOrganisationsMulti = <TData = GetV2AdminOrganisationsMultiResponse>(
  variables: GetV2AdminOrganisationsMultiVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminOrganisationsMultiResponse, GetV2AdminOrganisationsMultiError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminOrganisationsMultiResponse, GetV2AdminOrganisationsMultiError, TData>(
    queryKeyFn({ path: "/v2/admin/organisations/multi", operationId: "getV2AdminOrganisationsMulti", variables }),
    ({ signal }) => fetchGetV2AdminOrganisationsMulti({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminOrganisationsUUIDPathParams = {
  uuid: string;
};

export type GetV2AdminOrganisationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminOrganisationsUUIDResponse = {
  uuid?: string;
  status?: string;
  readable_status?: string;
  type?: string;
  private?: boolean;
  name?: string;
  phone?: string;
  founding_date?: string;
  description?: string;
  countries?: string[];
  languages?: string[];
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  project_pitches?: {
    id?: string;
    uuid?: string;
    status?: string;
    readable_status?: string;
    organisation_id?: string;
    funding_programmes?: {
      id?: number;
      uuid?: string;
      name?: string;
      description?: string;
      read_more_url?: string;
      organisation_types?: string[];
      location?: string;
      status?: string;
    };
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_name?: string;
    how_discovered?: string;
    project_objectives?: string;
    project_country?: string[];
    project_county_district?: string;
    restoration_intervention_types?: string[];
    land_systems?: string[];
    tree_restoration_practices?: string[];
    total_hectares?: number;
    project_budget?: number;
    total_trees?: number;
    capacity_building_needs?: string[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    restoration_photos?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    proof_of_land_tenure_mou?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    detailed_project_budget?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    expected_active_restoration_start_date?: string;
    expected_active_restoration_end_date?: string;
    description_of_project_timeline?: string;
    proj_partner_info?: string;
    land_tenure_proj_area?: string[];
    landholder_comm_engage?: string;
    proj_success_risks?: string;
    monitor_eval_plan?: string;
    proj_boundary?: string;
    sustainable_dev_goals?: string[];
    proj_area_description?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_sites?: number;
    environmental_goals?: string;
    main_degradation_causes?: string;
    seedlings_source?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_nurseries?: number;
    curr_land_degradation?: string;
    proj_impact_socieconom?: string;
    proj_impact_foodsec?: string;
    proj_impact_watersec?: string;
    proj_impact_jobtypes?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    num_jobs_created?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_men?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_18to35?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_older35?: number;
    proj_beneficiaries?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_small?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_large?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_youth?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_classes?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_tribes?: number;
    monitoring_evaluation_plan?: string;
    main_causes_of_degradation?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  web_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  linkedin_url?: string;
  twitter_url?: string;
  hq_street_1?: string;
  hq_street_2?: string;
  hq_city?: string;
  hq_state?: string;
  hq_zipcode?: string;
  hq_country?: string;
  fin_start_month?: number;
  /**
   * @format float
   */
  fin_budget_3year?: number;
  /**
   * @format float
   */
  fin_budget_2year?: number;
  /**
   * @format float
   */
  fin_budget_1year?: number;
  /**
   * @format float
   */
  fin_budget_current_year?: number;
  /**
   * @format float
   */
  ha_restored_total?: number;
  /**
   * @format float
   */
  ha_restored_3year?: number;
  relevant_experience_years?: number;
  trees_grown_total?: number;
  trees_grown_3year?: number;
  tree_care_approach?: string;
  ft_permanent_employees?: number;
  pt_permanent_employees?: number;
  temp_employees?: number;
  female_employees?: number;
  male_employees?: number;
  young_employees?: number;
  additional_funding_details?: string;
  community_experience?: string;
  total_engaged_community_members_3yr?: number;
  percent_engaged_women_3yr?: number;
  percent_engaged_men_3yr?: number;
  percent_engaged_under_35_3yr?: number;
  percent_engaged_over_35_3yr?: number;
  percent_engaged_smallholder_3yr?: number;
  total_trees_grown?: number;
  avg_tree_survival_rate?: number;
  tree_maintenance_aftercare_approach?: string;
  restored_areas_description?: string;
  monitoring_evaluation_experience?: string;
  funding_history?: string;
  shapefiles?: {
    uuid?: string;
    shapefileable_type?: string;
    shapefileable_id?: number;
    geojson?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  bank_statements?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  previous_annual_reports?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  logo?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  reference?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  additional?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_2year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_last_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_this_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_next_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  legal_registration?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg. slug: name
   */
  tags?: string[];
  created_at?: string;
  updated_at?: string;
};

export type GetV2AdminOrganisationsUUIDVariables = {
  pathParams: GetV2AdminOrganisationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminOrganisationsUUID = (
  variables: GetV2AdminOrganisationsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2AdminOrganisationsUUIDResponse,
    GetV2AdminOrganisationsUUIDError,
    undefined,
    {},
    {},
    GetV2AdminOrganisationsUUIDPathParams
  >({ url: "/v2/admin/organisations/{uuid}", method: "get", ...variables, signal });

export const useGetV2AdminOrganisationsUUID = <TData = GetV2AdminOrganisationsUUIDResponse>(
  variables: GetV2AdminOrganisationsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminOrganisationsUUIDResponse, GetV2AdminOrganisationsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminOrganisationsUUIDResponse, GetV2AdminOrganisationsUUIDError, TData>(
    queryKeyFn({ path: "/v2/admin/organisations/{UUID}", operationId: "getV2AdminOrganisationsUUID", variables }),
    ({ signal }) => fetchGetV2AdminOrganisationsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2AdminOrganisationsUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminOrganisationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminOrganisationsUUIDResponse = {
  uuid?: string;
  status?: string;
  readable_status?: string;
  type?: string;
  private?: boolean;
  name?: string;
  phone?: string;
  founding_date?: string;
  description?: string;
  countries?: string[];
  languages?: string[];
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  project_pitches?: {
    id?: string;
    uuid?: string;
    status?: string;
    readable_status?: string;
    organisation_id?: string;
    funding_programmes?: {
      id?: number;
      uuid?: string;
      name?: string;
      description?: string;
      read_more_url?: string;
      organisation_types?: string[];
      location?: string;
      status?: string;
    };
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_name?: string;
    how_discovered?: string;
    project_objectives?: string;
    project_country?: string[];
    project_county_district?: string;
    restoration_intervention_types?: string[];
    land_systems?: string[];
    tree_restoration_practices?: string[];
    total_hectares?: number;
    project_budget?: number;
    total_trees?: number;
    capacity_building_needs?: string[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    restoration_photos?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    proof_of_land_tenure_mou?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    detailed_project_budget?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    expected_active_restoration_start_date?: string;
    expected_active_restoration_end_date?: string;
    description_of_project_timeline?: string;
    proj_partner_info?: string;
    land_tenure_proj_area?: string[];
    landholder_comm_engage?: string;
    proj_success_risks?: string;
    monitor_eval_plan?: string;
    proj_boundary?: string;
    sustainable_dev_goals?: string[];
    proj_area_description?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_sites?: number;
    environmental_goals?: string;
    main_degradation_causes?: string;
    seedlings_source?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_nurseries?: number;
    curr_land_degradation?: string;
    proj_impact_socieconom?: string;
    proj_impact_foodsec?: string;
    proj_impact_watersec?: string;
    proj_impact_jobtypes?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    num_jobs_created?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_men?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_18to35?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_older35?: number;
    proj_beneficiaries?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_small?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_large?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_youth?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_classes?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_tribes?: number;
    monitoring_evaluation_plan?: string;
    main_causes_of_degradation?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  web_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  linkedin_url?: string;
  twitter_url?: string;
  hq_street_1?: string;
  hq_street_2?: string;
  hq_city?: string;
  hq_state?: string;
  hq_zipcode?: string;
  hq_country?: string;
  fin_start_month?: number;
  /**
   * @format float
   */
  fin_budget_3year?: number;
  /**
   * @format float
   */
  fin_budget_2year?: number;
  /**
   * @format float
   */
  fin_budget_1year?: number;
  /**
   * @format float
   */
  fin_budget_current_year?: number;
  /**
   * @format float
   */
  ha_restored_total?: number;
  /**
   * @format float
   */
  ha_restored_3year?: number;
  relevant_experience_years?: number;
  trees_grown_total?: number;
  trees_grown_3year?: number;
  tree_care_approach?: string;
  ft_permanent_employees?: number;
  pt_permanent_employees?: number;
  temp_employees?: number;
  female_employees?: number;
  male_employees?: number;
  young_employees?: number;
  additional_funding_details?: string;
  community_experience?: string;
  total_engaged_community_members_3yr?: number;
  percent_engaged_women_3yr?: number;
  percent_engaged_men_3yr?: number;
  percent_engaged_under_35_3yr?: number;
  percent_engaged_over_35_3yr?: number;
  percent_engaged_smallholder_3yr?: number;
  total_trees_grown?: number;
  avg_tree_survival_rate?: number;
  tree_maintenance_aftercare_approach?: string;
  restored_areas_description?: string;
  monitoring_evaluation_experience?: string;
  funding_history?: string;
  shapefiles?: {
    uuid?: string;
    shapefileable_type?: string;
    shapefileable_id?: number;
    geojson?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  bank_statements?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  previous_annual_reports?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  logo?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  reference?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  additional?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_2year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_last_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_this_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_next_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  legal_registration?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg. slug: name
   */
  tags?: string[];
  created_at?: string;
  updated_at?: string;
};

export type PutV2AdminOrganisationsUUIDRequestBody = {
  type?: string;
  private?: boolean;
  name?: string;
  phone?: string;
  founding_date?: string;
  description?: string;
  countries?: string[];
  languages?: string[];
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  web_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  linkedin_url?: string;
  twitter_url?: string;
  hq_street_1?: string;
  hq_street_2?: string;
  hq_city?: string;
  hq_state?: string;
  hq_zipcode?: string;
  hq_country?: string;
  fin_start_month?: number;
  /**
   * @format float
   */
  fin_budget_3year?: number;
  /**
   * @format float
   */
  fin_budget_2year?: number;
  /**
   * @format float
   */
  fin_budget_1year?: number;
  /**
   * @format float
   */
  fin_budget_current_year?: number;
  /**
   * @format float
   */
  ha_restored_total?: number;
  /**
   * @format float
   */
  ha_restored_3year?: number;
  relevant_experience_years?: number;
  trees_grown_total?: number;
  trees_grown_3year?: number;
  tree_care_approach?: string;
  ft_permanent_employees?: number;
  pt_permanent_employees?: number;
  temp_employees?: number;
  female_employees?: number;
  male_employees?: number;
  young_employees?: number;
  additional_funding_details?: string;
  community_experience?: string;
  total_engaged_community_members_3yr?: number;
  percent_engaged_women_3yr?: number;
  percent_engaged_men_3yr?: number;
  percent_engaged_under_35_3yr?: number;
  percent_engaged_over_35_3yr?: number;
  percent_engaged_smallholder_3yr?: number;
  total_trees_grown?: number;
  avg_tree_survival_rate?: number;
  tree_maintenance_aftercare_approach?: string;
  restored_areas_description?: string;
  monitoring_evaluation_experience?: string;
  funding_history?: string;
  engagement_farmers?: string[];
  engagement_women?: string[];
  engagement_youth?: string[];
  engagement_non_youth?: string[];
  tree_restoration_practices?: string[];
  business_model?: string;
  subtype?: string;
  organisation_revenue_this_year?: number;
  shapefiles?: {
    uuid?: string;
    shapefileable_type?: string;
    shapefileable_id?: number;
    geojson?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  tags?: string[];
};

export type PutV2AdminOrganisationsUUIDVariables = {
  body?: PutV2AdminOrganisationsUUIDRequestBody;
  pathParams: PutV2AdminOrganisationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminOrganisationsUUID = (
  variables: PutV2AdminOrganisationsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2AdminOrganisationsUUIDResponse,
    PutV2AdminOrganisationsUUIDError,
    PutV2AdminOrganisationsUUIDRequestBody,
    {},
    {},
    PutV2AdminOrganisationsUUIDPathParams
  >({ url: "/v2/admin/organisations/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminOrganisationsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2AdminOrganisationsUUIDResponse,
      PutV2AdminOrganisationsUUIDError,
      PutV2AdminOrganisationsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2AdminOrganisationsUUIDResponse,
    PutV2AdminOrganisationsUUIDError,
    PutV2AdminOrganisationsUUIDVariables
  >(
    (variables: PutV2AdminOrganisationsUUIDVariables) =>
      fetchPutV2AdminOrganisationsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminOrganisationsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminOrganisationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminOrganisationsUUIDVariables = {
  pathParams: DeleteV2AdminOrganisationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminOrganisationsUUID = (
  variables: DeleteV2AdminOrganisationsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteV2AdminOrganisationsUUIDError, undefined, {}, {}, DeleteV2AdminOrganisationsUUIDPathParams>(
    { url: "/v2/admin/organisations/{uuid}", method: "delete", ...variables, signal }
  );

export const useDeleteV2AdminOrganisationsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminOrganisationsUUIDError,
      DeleteV2AdminOrganisationsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminOrganisationsUUIDError,
    DeleteV2AdminOrganisationsUUIDVariables
  >(
    (variables: DeleteV2AdminOrganisationsUUIDVariables) =>
      fetchDeleteV2AdminOrganisationsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2AdminOrganisationsApproveError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminOrganisationsApproveResponse = {
  type?: string;
  private?: boolean;
  name?: string;
  phone?: string;
  founding_date?: string;
  description?: string;
  countries?: string[];
  languages?: string[];
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  web_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  linkedin_url?: string;
  twitter_url?: string;
  hq_street_1?: string;
  hq_street_2?: string;
  hq_city?: string;
  hq_state?: string;
  hq_zipcode?: string;
  hq_country?: string;
  fin_start_month?: number;
  /**
   * @format float
   */
  fin_budget_3year?: number;
  /**
   * @format float
   */
  fin_budget_2year?: number;
  /**
   * @format float
   */
  fin_budget_1year?: number;
  /**
   * @format float
   */
  fin_budget_current_year?: number;
  /**
   * @format float
   */
  ha_restored_total?: number;
  /**
   * @format float
   */
  ha_restored_3year?: number;
  relevant_experience_years?: number;
  trees_grown_total?: number;
  trees_grown_3year?: number;
  tree_care_approach?: string;
  ft_permanent_employees?: number;
  pt_permanent_employees?: number;
  temp_employees?: number;
  female_employees?: number;
  male_employees?: number;
  young_employees?: number;
  additional_funding_details?: string;
  community_experience?: string;
  total_engaged_community_members_3yr?: number;
  percent_engaged_women_3yr?: number;
  percent_engaged_men_3yr?: number;
  percent_engaged_under_35_3yr?: number;
  percent_engaged_over_35_3yr?: number;
  percent_engaged_smallholder_3yr?: number;
  total_trees_grown?: number;
  avg_tree_survival_rate?: number;
  tree_maintenance_aftercare_approach?: string;
  restored_areas_description?: string;
  monitoring_evaluation_experience?: string;
  funding_history?: string;
  engagement_farmers?: string[];
  engagement_women?: string[];
  engagement_youth?: string[];
  engagement_non_youth?: string[];
  tree_restoration_practices?: string[];
  business_model?: string;
  subtype?: string;
  organisation_revenue_this_year?: number;
  shapefiles?: {
    uuid?: string;
    shapefileable_type?: string;
    shapefileable_id?: number;
    geojson?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  tags?: string[];
};

export type PutV2AdminOrganisationsApproveVariables = {
  body: RequestBodies.V2AdminOrganisationApproveBody;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminOrganisationsApprove = (
  variables: PutV2AdminOrganisationsApproveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2AdminOrganisationsApproveResponse,
    PutV2AdminOrganisationsApproveError,
    RequestBodies.V2AdminOrganisationApproveBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/organisations/approve", method: "put", ...variables, signal });

export const usePutV2AdminOrganisationsApprove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2AdminOrganisationsApproveResponse,
      PutV2AdminOrganisationsApproveError,
      PutV2AdminOrganisationsApproveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2AdminOrganisationsApproveResponse,
    PutV2AdminOrganisationsApproveError,
    PutV2AdminOrganisationsApproveVariables
  >(
    (variables: PutV2AdminOrganisationsApproveVariables) =>
      fetchPutV2AdminOrganisationsApprove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2AdminOrganisationsRejectError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminOrganisationsRejectResponse = {
  type?: string;
  private?: boolean;
  name?: string;
  phone?: string;
  founding_date?: string;
  description?: string;
  countries?: string[];
  languages?: string[];
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  web_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  linkedin_url?: string;
  twitter_url?: string;
  hq_street_1?: string;
  hq_street_2?: string;
  hq_city?: string;
  hq_state?: string;
  hq_zipcode?: string;
  hq_country?: string;
  fin_start_month?: number;
  /**
   * @format float
   */
  fin_budget_3year?: number;
  /**
   * @format float
   */
  fin_budget_2year?: number;
  /**
   * @format float
   */
  fin_budget_1year?: number;
  /**
   * @format float
   */
  fin_budget_current_year?: number;
  /**
   * @format float
   */
  ha_restored_total?: number;
  /**
   * @format float
   */
  ha_restored_3year?: number;
  relevant_experience_years?: number;
  trees_grown_total?: number;
  trees_grown_3year?: number;
  tree_care_approach?: string;
  ft_permanent_employees?: number;
  pt_permanent_employees?: number;
  temp_employees?: number;
  female_employees?: number;
  male_employees?: number;
  young_employees?: number;
  additional_funding_details?: string;
  community_experience?: string;
  total_engaged_community_members_3yr?: number;
  percent_engaged_women_3yr?: number;
  percent_engaged_men_3yr?: number;
  percent_engaged_under_35_3yr?: number;
  percent_engaged_over_35_3yr?: number;
  percent_engaged_smallholder_3yr?: number;
  total_trees_grown?: number;
  avg_tree_survival_rate?: number;
  tree_maintenance_aftercare_approach?: string;
  restored_areas_description?: string;
  monitoring_evaluation_experience?: string;
  funding_history?: string;
  engagement_farmers?: string[];
  engagement_women?: string[];
  engagement_youth?: string[];
  engagement_non_youth?: string[];
  tree_restoration_practices?: string[];
  business_model?: string;
  subtype?: string;
  organisation_revenue_this_year?: number;
  shapefiles?: {
    uuid?: string;
    shapefileable_type?: string;
    shapefileable_id?: number;
    geojson?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  tags?: string[];
};

export type PutV2AdminOrganisationsRejectVariables = {
  body: RequestBodies.V2AdminOrganisationApproveBody;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminOrganisationsReject = (
  variables: PutV2AdminOrganisationsRejectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2AdminOrganisationsRejectResponse,
    PutV2AdminOrganisationsRejectError,
    RequestBodies.V2AdminOrganisationApproveBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/organisations/reject", method: "put", ...variables, signal });

export const usePutV2AdminOrganisationsReject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2AdminOrganisationsRejectResponse,
      PutV2AdminOrganisationsRejectError,
      PutV2AdminOrganisationsRejectVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2AdminOrganisationsRejectResponse,
    PutV2AdminOrganisationsRejectError,
    PutV2AdminOrganisationsRejectVariables
  >(
    (variables: PutV2AdminOrganisationsRejectVariables) =>
      fetchPutV2AdminOrganisationsReject({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminOrganisationsExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminOrganisationsExportVariables = ApiContext["fetcherOptions"];

export const fetchGetV2AdminOrganisationsExport = (
  variables: GetV2AdminOrganisationsExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetV2AdminOrganisationsExportError, undefined, {}, {}, {}>({
    url: "/v2/admin/organisations/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminOrganisationsExport = <TData = undefined>(
  variables: GetV2AdminOrganisationsExportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetV2AdminOrganisationsExportError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetV2AdminOrganisationsExportError, TData>(
    queryKeyFn({ path: "/v2/admin/organisations/export", operationId: "getV2AdminOrganisationsExport", variables }),
    ({ signal }) => fetchGetV2AdminOrganisationsExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2OrganisationsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2OrganisationsVariables = {
  body?: RequestBodies.V2PostOrganisationsBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2Organisations = (variables: PostV2OrganisationsVariables, signal?: AbortSignal) =>
  apiFetch<undefined, PostV2OrganisationsError, RequestBodies.V2PostOrganisationsBody, {}, {}, {}>({
    url: "/v2/organisations",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2Organisations = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PostV2OrganisationsError, PostV2OrganisationsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PostV2OrganisationsError, PostV2OrganisationsVariables>(
    (variables: PostV2OrganisationsVariables) => fetchPostV2Organisations({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2OrganisationsUUIDPathParams = {
  uuid: string;
};

export type GetV2OrganisationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2OrganisationsUUIDResponse = {
  uuid?: string;
  type?: string;
  private?: boolean;
  name?: string;
  phone?: string;
  currency?: string;
  states?: string[];
  loan_status_types?: string[];
  land_systems?: string[];
  fund_utilisation?: string[];
  detailed_intervention_types?: string[];
  account_number_1?: string;
  account_number_2?: string;
  approach_of_marginalized_communities?: string;
  community_engagement_numbers_marginalized?: string;
  founding_date?: string;
  description?: string;
  leadership_team?: string;
  countries?: string[];
  languages?: string[];
  project_pitches?: {
    id?: string;
    uuid?: string;
    status?: string;
    readable_status?: string;
    organisation_id?: string;
    funding_programmes?: {
      id?: number;
      uuid?: string;
      name?: string;
      description?: string;
      read_more_url?: string;
      organisation_types?: string[];
      location?: string;
      status?: string;
    };
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_name?: string;
    how_discovered?: string;
    project_objectives?: string;
    project_country?: string[];
    project_county_district?: string;
    restoration_intervention_types?: string[];
    land_systems?: string[];
    tree_restoration_practices?: string[];
    total_hectares?: number;
    project_budget?: number;
    total_trees?: number;
    capacity_building_needs?: string[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    restoration_photos?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    proof_of_land_tenure_mou?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    detailed_project_budget?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    expected_active_restoration_start_date?: string;
    expected_active_restoration_end_date?: string;
    description_of_project_timeline?: string;
    proj_partner_info?: string;
    land_tenure_proj_area?: string[];
    landholder_comm_engage?: string;
    proj_success_risks?: string;
    monitor_eval_plan?: string;
    proj_boundary?: string;
    sustainable_dev_goals?: string[];
    proj_area_description?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_sites?: number;
    environmental_goals?: string;
    main_degradation_causes?: string;
    seedlings_source?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_nurseries?: number;
    curr_land_degradation?: string;
    proj_impact_socieconom?: string;
    proj_impact_foodsec?: string;
    proj_impact_watersec?: string;
    proj_impact_jobtypes?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    num_jobs_created?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_men?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_18to35?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_older35?: number;
    proj_beneficiaries?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_small?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_large?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_youth?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_classes?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_tribes?: number;
    monitoring_evaluation_plan?: string;
    main_causes_of_degradation?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  web_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  linkedin_url?: string;
  twitter_url?: string;
  hq_street_1?: string;
  hq_street_2?: string;
  hq_city?: string;
  hq_state?: string;
  hq_zipcode?: string;
  hq_country?: string;
  fin_start_month?: number;
  /**
   * @format float
   */
  fin_budget_3year?: number;
  /**
   * @format float
   */
  fin_budget_2year?: number;
  /**
   * @format float
   */
  fin_budget_1year?: number;
  /**
   * @format float
   */
  fin_budget_current_year?: number;
  /**
   * @format float
   */
  ha_restored_total?: number;
  /**
   * @format float
   */
  ha_restored_3year?: number;
  relevant_experience_years?: number;
  trees_grown_total?: number;
  trees_grown_3year?: number;
  tree_care_approach?: string;
  ft_permanent_employees?: number;
  pt_permanent_employees?: number;
  temp_employees?: number;
  female_employees?: number;
  male_employees?: number;
  young_employees?: number;
  additional_funding_details?: string;
  community_experience?: string;
  total_engaged_community_members_3yr?: number;
  percent_engaged_women_3yr?: number;
  percent_engaged_men_3yr?: number;
  percent_engaged_under_35_3yr?: number;
  percent_engaged_over_35_3yr?: number;
  percent_engaged_smallholder_3yr?: number;
  total_trees_grown?: number;
  avg_tree_survival_rate?: number;
  tree_maintenance_aftercare_approach?: string;
  restored_areas_description?: string;
  monitoring_evaluation_experience?: string;
  funding_history?: string;
  engagement_farmers?: string[];
  engagement_women?: string[];
  engagement_youth?: string[];
  engagement_non_youth?: string[];
  tree_restoration_practices?: string[];
  business_model?: string;
  subtype?: string;
  organisation_revenue_this_year?: number;
  shapefiles?: {
    uuid?: string;
    shapefileable_type?: string;
    shapefileable_id?: number;
    geojson?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  bank_statements?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  previous_annual_reports?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  logo?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  reference?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  additional?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_2year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_last_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_this_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_next_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  legal_registration?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
};

export type GetV2OrganisationsUUIDVariables = {
  pathParams: GetV2OrganisationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2OrganisationsUUID = (variables: GetV2OrganisationsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2OrganisationsUUIDResponse,
    GetV2OrganisationsUUIDError,
    undefined,
    {},
    {},
    GetV2OrganisationsUUIDPathParams
  >({ url: "/v2/organisations/{uuid}", method: "get", ...variables, signal });

export const useGetV2OrganisationsUUID = <TData = GetV2OrganisationsUUIDResponse>(
  variables: GetV2OrganisationsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2OrganisationsUUIDResponse, GetV2OrganisationsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2OrganisationsUUIDResponse, GetV2OrganisationsUUIDError, TData>(
    queryKeyFn({ path: "/v2/organisations/{UUID}", operationId: "getV2OrganisationsUUID", variables }),
    ({ signal }) => fetchGetV2OrganisationsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2OrganisationsUUIDPathParams = {
  uuid: string;
};

export type PutV2OrganisationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2OrganisationsUUIDVariables = {
  body?: RequestBodies.V2PostOrganisationsBody;
  pathParams: PutV2OrganisationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2OrganisationsUUID = (variables: PutV2OrganisationsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    undefined,
    PutV2OrganisationsUUIDError,
    RequestBodies.V2PostOrganisationsBody,
    {},
    {},
    PutV2OrganisationsUUIDPathParams
  >({ url: "/v2/organisations/{uuid}", method: "put", ...variables, signal });

export const usePutV2OrganisationsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PutV2OrganisationsUUIDError, PutV2OrganisationsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2OrganisationsUUIDError, PutV2OrganisationsUUIDVariables>(
    (variables: PutV2OrganisationsUUIDVariables) => fetchPutV2OrganisationsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2OrganisationsListingQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
};

export type GetV2OrganisationsListingError = Fetcher.ErrorWrapper<undefined>;

export type GetV2OrganisationsListingResponse = {
  data?: {
    uuid?: string;
    name?: string;
    input_type?: string;
    model_key?: string;
    option_list_key?: string;
    options?: string[];
  }[];
};

export type GetV2OrganisationsListingVariables = {
  queryParams?: GetV2OrganisationsListingQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2OrganisationsListing = (variables: GetV2OrganisationsListingVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2OrganisationsListingResponse,
    GetV2OrganisationsListingError,
    undefined,
    {},
    GetV2OrganisationsListingQueryParams,
    {}
  >({ url: "/v2/organisations/listing", method: "get", ...variables, signal });

export const useGetV2OrganisationsListing = <TData = GetV2OrganisationsListingResponse>(
  variables: GetV2OrganisationsListingVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2OrganisationsListingResponse, GetV2OrganisationsListingError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2OrganisationsListingResponse, GetV2OrganisationsListingError, TData>(
    queryKeyFn({ path: "/v2/organisations/listing", operationId: "getV2OrganisationsListing", variables }),
    ({ signal }) => fetchGetV2OrganisationsListing({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2OrganisationsJoinExistingError = Fetcher.ErrorWrapper<undefined>;

export type PostV2OrganisationsJoinExistingResponse = {
  uuid?: string;
  type?: string;
  private?: boolean;
  name?: string;
  phone?: string;
  currency?: string;
  states?: string[];
  loan_status_types?: string[];
  land_systems?: string[];
  fund_utilisation?: string[];
  detailed_intervention_types?: string[];
  account_number_1?: string;
  account_number_2?: string;
  approach_of_marginalized_communities?: string;
  community_engagement_numbers_marginalized?: string;
  founding_date?: string;
  description?: string;
  leadership_team?: string;
  countries?: string[];
  languages?: string[];
  project_pitches?: {
    id?: string;
    uuid?: string;
    status?: string;
    readable_status?: string;
    organisation_id?: string;
    funding_programmes?: {
      id?: number;
      uuid?: string;
      name?: string;
      description?: string;
      read_more_url?: string;
      organisation_types?: string[];
      location?: string;
      status?: string;
    };
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_name?: string;
    how_discovered?: string;
    project_objectives?: string;
    project_country?: string[];
    project_county_district?: string;
    restoration_intervention_types?: string[];
    land_systems?: string[];
    tree_restoration_practices?: string[];
    total_hectares?: number;
    project_budget?: number;
    total_trees?: number;
    capacity_building_needs?: string[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    restoration_photos?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    proof_of_land_tenure_mou?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    detailed_project_budget?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    expected_active_restoration_start_date?: string;
    expected_active_restoration_end_date?: string;
    description_of_project_timeline?: string;
    proj_partner_info?: string;
    land_tenure_proj_area?: string[];
    landholder_comm_engage?: string;
    proj_success_risks?: string;
    monitor_eval_plan?: string;
    proj_boundary?: string;
    sustainable_dev_goals?: string[];
    proj_area_description?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_sites?: number;
    environmental_goals?: string;
    main_degradation_causes?: string;
    seedlings_source?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_nurseries?: number;
    curr_land_degradation?: string;
    proj_impact_socieconom?: string;
    proj_impact_foodsec?: string;
    proj_impact_watersec?: string;
    proj_impact_jobtypes?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    num_jobs_created?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_men?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_18to35?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_older35?: number;
    proj_beneficiaries?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_small?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_large?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_youth?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_classes?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_tribes?: number;
    monitoring_evaluation_plan?: string;
    main_causes_of_degradation?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  web_url?: string;
  facebook_url?: string;
  instagram_url?: string;
  linkedin_url?: string;
  twitter_url?: string;
  hq_street_1?: string;
  hq_street_2?: string;
  hq_city?: string;
  hq_state?: string;
  hq_zipcode?: string;
  hq_country?: string;
  fin_start_month?: number;
  /**
   * @format float
   */
  fin_budget_3year?: number;
  /**
   * @format float
   */
  fin_budget_2year?: number;
  /**
   * @format float
   */
  fin_budget_1year?: number;
  /**
   * @format float
   */
  fin_budget_current_year?: number;
  /**
   * @format float
   */
  ha_restored_total?: number;
  /**
   * @format float
   */
  ha_restored_3year?: number;
  relevant_experience_years?: number;
  trees_grown_total?: number;
  trees_grown_3year?: number;
  tree_care_approach?: string;
  ft_permanent_employees?: number;
  pt_permanent_employees?: number;
  temp_employees?: number;
  female_employees?: number;
  male_employees?: number;
  young_employees?: number;
  additional_funding_details?: string;
  community_experience?: string;
  total_engaged_community_members_3yr?: number;
  percent_engaged_women_3yr?: number;
  percent_engaged_men_3yr?: number;
  percent_engaged_under_35_3yr?: number;
  percent_engaged_over_35_3yr?: number;
  percent_engaged_smallholder_3yr?: number;
  total_trees_grown?: number;
  avg_tree_survival_rate?: number;
  tree_maintenance_aftercare_approach?: string;
  restored_areas_description?: string;
  monitoring_evaluation_experience?: string;
  funding_history?: string;
  engagement_farmers?: string[];
  engagement_women?: string[];
  engagement_youth?: string[];
  engagement_non_youth?: string[];
  tree_restoration_practices?: string[];
  business_model?: string;
  subtype?: string;
  organisation_revenue_this_year?: number;
  shapefiles?: {
    uuid?: string;
    shapefileable_type?: string;
    shapefileable_id?: number;
    geojson?: string;
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  bank_statements?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  previous_annual_reports?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  logo?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  reference?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  additional?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_2year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_last_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_this_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  op_budget_next_year?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  legal_registration?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
};

export type PostV2OrganisationsJoinExistingRequestBody = {
  organisation_uuid: string;
};

export type PostV2OrganisationsJoinExistingVariables = {
  body: PostV2OrganisationsJoinExistingRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2OrganisationsJoinExisting = (
  variables: PostV2OrganisationsJoinExistingVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2OrganisationsJoinExistingResponse,
    PostV2OrganisationsJoinExistingError,
    PostV2OrganisationsJoinExistingRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/organisations/join-existing", method: "post", ...variables, signal });

export const usePostV2OrganisationsJoinExisting = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2OrganisationsJoinExistingResponse,
      PostV2OrganisationsJoinExistingError,
      PostV2OrganisationsJoinExistingVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2OrganisationsJoinExistingResponse,
    PostV2OrganisationsJoinExistingError,
    PostV2OrganisationsJoinExistingVariables
  >(
    (variables: PostV2OrganisationsJoinExistingVariables) =>
      fetchPostV2OrganisationsJoinExisting({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2OrganisationsUserRequestsUUIDPathParams = {
  uuid: string;
};

export type GetV2OrganisationsUserRequestsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2OrganisationsUserRequestsUUIDResponse = {
  id?: number;
  organisation_id?: number;
  organisation_name?: string;
  my_organisation?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  };
  my_monitoring_organisations?: {
    uuid?: string;
    status?: string;
    users_status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  }[];
  first_name?: string;
  last_name?: string;
  email_address?: string;
  /**
   * @format date-time
   */
  email_address_verified_at?: string;
  role?: string;
  /**
   * @format date-time
   */
  last_logged_in_at?: string;
  job_role?: string;
  facebook?: string;
  twitter?: string;
  instagram?: string;
  linkedin?: string;
  avatar?: string;
  phone_number?: string;
  whatsapp_phone?: string;
  has_ppc_projects?: boolean;
  has_terrafund_projects?: boolean;
}[];

export type GetV2OrganisationsUserRequestsUUIDVariables = {
  pathParams: GetV2OrganisationsUserRequestsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2OrganisationsUserRequestsUUID = (
  variables: GetV2OrganisationsUserRequestsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2OrganisationsUserRequestsUUIDResponse,
    GetV2OrganisationsUserRequestsUUIDError,
    undefined,
    {},
    {},
    GetV2OrganisationsUserRequestsUUIDPathParams
  >({ url: "/v2/organisations/user-requests/{uuid}", method: "get", ...variables, signal });

export const useGetV2OrganisationsUserRequestsUUID = <TData = GetV2OrganisationsUserRequestsUUIDResponse>(
  variables: GetV2OrganisationsUserRequestsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2OrganisationsUserRequestsUUIDResponse,
      GetV2OrganisationsUserRequestsUUIDError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetV2OrganisationsUserRequestsUUIDResponse,
    GetV2OrganisationsUserRequestsUUIDError,
    TData
  >(
    queryKeyFn({
      path: "/v2/organisations/user-requests/{UUID}",
      operationId: "getV2OrganisationsUserRequestsUUID",
      variables
    }),
    ({ signal }) => fetchGetV2OrganisationsUserRequestsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2OrganisationsApprovedUsersUUIDPathParams = {
  uuid: string;
};

export type GetV2OrganisationsApprovedUsersUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2OrganisationsApprovedUsersUUIDResponse = {
  id?: number;
  organisation_id?: number;
  organisation_name?: string;
  my_organisation?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  };
  my_monitoring_organisations?: {
    uuid?: string;
    status?: string;
    users_status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  }[];
  first_name?: string;
  last_name?: string;
  email_address?: string;
  /**
   * @format date-time
   */
  email_address_verified_at?: string;
  role?: string;
  /**
   * @format date-time
   */
  last_logged_in_at?: string;
  job_role?: string;
  facebook?: string;
  twitter?: string;
  instagram?: string;
  linkedin?: string;
  avatar?: string;
  phone_number?: string;
  whatsapp_phone?: string;
  has_ppc_projects?: boolean;
  has_terrafund_projects?: boolean;
}[];

export type GetV2OrganisationsApprovedUsersUUIDVariables = {
  pathParams: GetV2OrganisationsApprovedUsersUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2OrganisationsApprovedUsersUUID = (
  variables: GetV2OrganisationsApprovedUsersUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2OrganisationsApprovedUsersUUIDResponse,
    GetV2OrganisationsApprovedUsersUUIDError,
    undefined,
    {},
    {},
    GetV2OrganisationsApprovedUsersUUIDPathParams
  >({ url: "/v2/organisations/approved-users/{uuid}", method: "get", ...variables, signal });

export const useGetV2OrganisationsApprovedUsersUUID = <TData = GetV2OrganisationsApprovedUsersUUIDResponse>(
  variables: GetV2OrganisationsApprovedUsersUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2OrganisationsApprovedUsersUUIDResponse,
      GetV2OrganisationsApprovedUsersUUIDError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetV2OrganisationsApprovedUsersUUIDResponse,
    GetV2OrganisationsApprovedUsersUUIDError,
    TData
  >(
    queryKeyFn({
      path: "/v2/organisations/approved-users/{UUID}",
      operationId: "getV2OrganisationsApprovedUsersUUID",
      variables
    }),
    ({ signal }) => fetchGetV2OrganisationsApprovedUsersUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2OrganisationsApproveUserError = Fetcher.ErrorWrapper<undefined>;

export type PutV2OrganisationsApproveUserVariables = {
  body: RequestBodies.V2PostOrganisationsApproveUserBody;
} & ApiContext["fetcherOptions"];

export const fetchPutV2OrganisationsApproveUser = (
  variables: PutV2OrganisationsApproveUserVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PutV2OrganisationsApproveUserError, RequestBodies.V2PostOrganisationsApproveUserBody, {}, {}, {}>(
    { url: "/v2/organisations/approve-user", method: "put", ...variables, signal }
  );

export const usePutV2OrganisationsApproveUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PutV2OrganisationsApproveUserError,
      PutV2OrganisationsApproveUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2OrganisationsApproveUserError, PutV2OrganisationsApproveUserVariables>(
    (variables: PutV2OrganisationsApproveUserVariables) =>
      fetchPutV2OrganisationsApproveUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2OrganisationsRejectUserError = Fetcher.ErrorWrapper<undefined>;

export type PutV2OrganisationsRejectUserVariables = {
  body: RequestBodies.V2PostOrganisationsApproveUserBody;
} & ApiContext["fetcherOptions"];

export const fetchPutV2OrganisationsRejectUser = (
  variables: PutV2OrganisationsRejectUserVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PutV2OrganisationsRejectUserError, RequestBodies.V2PostOrganisationsApproveUserBody, {}, {}, {}>({
    url: "/v2/organisations/reject-user",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2OrganisationsRejectUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PutV2OrganisationsRejectUserError, PutV2OrganisationsRejectUserVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2OrganisationsRejectUserError, PutV2OrganisationsRejectUserVariables>(
    (variables: PutV2OrganisationsRejectUserVariables) =>
      fetchPutV2OrganisationsRejectUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2OrganisationsSubmitUUIDPathParams = {
  uuid: string;
};

export type PutV2OrganisationsSubmitUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2OrganisationsSubmitUUIDVariables = {
  pathParams: PutV2OrganisationsSubmitUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2OrganisationsSubmitUUID = (
  variables: PutV2OrganisationsSubmitUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PutV2OrganisationsSubmitUUIDError, undefined, {}, {}, PutV2OrganisationsSubmitUUIDPathParams>({
    url: "/v2/organisations/submit/{uuid}",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2OrganisationsSubmitUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PutV2OrganisationsSubmitUUIDError, PutV2OrganisationsSubmitUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2OrganisationsSubmitUUIDError, PutV2OrganisationsSubmitUUIDVariables>(
    (variables: PutV2OrganisationsSubmitUUIDVariables) =>
      fetchPutV2OrganisationsSubmitUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2OrganisationsRetractMyDraftError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2OrganisationsRetractMyDraftVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2OrganisationsRetractMyDraft = (
  variables: DeleteV2OrganisationsRetractMyDraftVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteV2OrganisationsRetractMyDraftError, undefined, {}, {}, {}>({
    url: "/v2/organisations/retract-my-draft",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2OrganisationsRetractMyDraft = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2OrganisationsRetractMyDraftError,
      DeleteV2OrganisationsRetractMyDraftVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2OrganisationsRetractMyDraftError,
    DeleteV2OrganisationsRetractMyDraftVariables
  >(
    (variables: DeleteV2OrganisationsRetractMyDraftVariables) =>
      fetchDeleteV2OrganisationsRetractMyDraft({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminUsersQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[verified]=true
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminUsersError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminUsersResponse = {
  data?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    first_name?: string;
    last_name?: string;
    email_address?: string;
    job_role?: string;
    facebook?: string;
    instagram?: string;
    linkedin?: string;
    twitter?: string;
    whatsapp_phone?: string;
    date_added?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2AdminUsersVariables = {
  queryParams?: GetV2AdminUsersQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Currently available sort is last_logged_in_at, created_at, first_name, last_name, email_address, organisation_name
 */
export const fetchGetV2AdminUsers = (variables: GetV2AdminUsersVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminUsersResponse, GetV2AdminUsersError, undefined, {}, GetV2AdminUsersQueryParams, {}>({
    url: "/v2/admin/users",
    method: "get",
    ...variables,
    signal
  });

/**
 * Currently available sort is last_logged_in_at, created_at, first_name, last_name, email_address, organisation_name
 */
export const useGetV2AdminUsers = <TData = GetV2AdminUsersResponse>(
  variables: GetV2AdminUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminUsersResponse, GetV2AdminUsersError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminUsersResponse, GetV2AdminUsersError, TData>(
    queryKeyFn({ path: "/v2/admin/users", operationId: "getV2AdminUsers", variables }),
    ({ signal }) => fetchGetV2AdminUsers({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminUsersUUIDPathParams = {
  uuid: string;
};

export type GetV2AdminUsersUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminUsersUUIDResponse = {
  uuid?: string;
  status?: string;
  readable_status?: string;
  type?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  job_role?: string;
  facebook?: string;
  instagram?: string;
  linkedin?: string;
  twitter?: string;
  whatsapp_phone?: string;
  date_added?: string;
};

export type GetV2AdminUsersUUIDVariables = {
  pathParams: GetV2AdminUsersUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminUsersUUID = (variables: GetV2AdminUsersUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminUsersUUIDResponse, GetV2AdminUsersUUIDError, undefined, {}, {}, GetV2AdminUsersUUIDPathParams>({
    url: "/v2/admin/users/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminUsersUUID = <TData = GetV2AdminUsersUUIDResponse>(
  variables: GetV2AdminUsersUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminUsersUUIDResponse, GetV2AdminUsersUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminUsersUUIDResponse, GetV2AdminUsersUUIDError, TData>(
    queryKeyFn({ path: "/v2/admin/users/{UUID}", operationId: "getV2AdminUsersUUID", variables }),
    ({ signal }) => fetchGetV2AdminUsersUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2AdminUsersUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminUsersUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminUsersUUIDResponse = {
  uuid?: string;
  status?: string;
  readable_status?: string;
  type?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  job_role?: string;
  facebook?: string;
  instagram?: string;
  linkedin?: string;
  twitter?: string;
  whatsapp_phone?: string;
  date_added?: string;
};

export type PutV2AdminUsersUUIDRequestBody = {
  type?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  password?: string;
  job_role?: string;
  facebook?: string;
  instagram?: string;
  linkedin?: string;
  twitter?: string;
  whatsapp_phone?: string;
  organisation?: string;
  monitoring_organisations?: {
    uuid?: string;
    status?: string;
    users_status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  }[];
};

export type PutV2AdminUsersUUIDVariables = {
  body?: PutV2AdminUsersUUIDRequestBody;
  pathParams: PutV2AdminUsersUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminUsersUUID = (variables: PutV2AdminUsersUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PutV2AdminUsersUUIDResponse,
    PutV2AdminUsersUUIDError,
    PutV2AdminUsersUUIDRequestBody,
    {},
    {},
    PutV2AdminUsersUUIDPathParams
  >({ url: "/v2/admin/users/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminUsersUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<PutV2AdminUsersUUIDResponse, PutV2AdminUsersUUIDError, PutV2AdminUsersUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PutV2AdminUsersUUIDResponse, PutV2AdminUsersUUIDError, PutV2AdminUsersUUIDVariables>(
    (variables: PutV2AdminUsersUUIDVariables) => fetchPutV2AdminUsersUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminUsersUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminUsersUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminUsersUUIDVariables = {
  pathParams: DeleteV2AdminUsersUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminUsersUUID = (variables: DeleteV2AdminUsersUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2AdminUsersUUIDError, undefined, {}, {}, DeleteV2AdminUsersUUIDPathParams>({
    url: "/v2/admin/users/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminUsersUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2AdminUsersUUIDError, DeleteV2AdminUsersUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2AdminUsersUUIDError, DeleteV2AdminUsersUUIDVariables>(
    (variables: DeleteV2AdminUsersUUIDVariables) => fetchDeleteV2AdminUsersUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminUsersMultiQueryParams = {
  ids?: string;
};

export type GetV2AdminUsersMultiError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminUsersMultiResponse = {
  uuid?: string;
  status?: string;
  readable_status?: string;
  type?: string;
  first_name?: string;
  last_name?: string;
  email_address?: string;
  job_role?: string;
  facebook?: string;
  instagram?: string;
  linkedin?: string;
  twitter?: string;
  whatsapp_phone?: string;
  date_added?: string;
};

export type GetV2AdminUsersMultiVariables = {
  queryParams?: GetV2AdminUsersMultiQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminUsersMulti = (variables: GetV2AdminUsersMultiVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminUsersMultiResponse, GetV2AdminUsersMultiError, undefined, {}, GetV2AdminUsersMultiQueryParams, {}>(
    { url: "/v2/admin/users/multi", method: "get", ...variables, signal }
  );

export const useGetV2AdminUsersMulti = <TData = GetV2AdminUsersMultiResponse>(
  variables: GetV2AdminUsersMultiVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminUsersMultiResponse, GetV2AdminUsersMultiError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminUsersMultiResponse, GetV2AdminUsersMultiError, TData>(
    queryKeyFn({ path: "/v2/admin/users/multi", operationId: "getV2AdminUsersMulti", variables }),
    ({ signal }) => fetchGetV2AdminUsersMulti({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminUsersExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminUsersExportVariables = ApiContext["fetcherOptions"];

export const fetchGetV2AdminUsersExport = (variables: GetV2AdminUsersExportVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetV2AdminUsersExportError, undefined, {}, {}, {}>({
    url: "/v2/admin/users/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminUsersExport = <TData = undefined>(
  variables: GetV2AdminUsersExportVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetV2AdminUsersExportError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetV2AdminUsersExportError, TData>(
    queryKeyFn({ path: "/v2/admin/users/export", operationId: "getV2AdminUsersExport", variables }),
    ({ signal }) => fetchGetV2AdminUsersExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2AdminUsersResetPasswordUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminUsersResetPasswordUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminUsersResetPasswordUUIDVariables = {
  pathParams: PutV2AdminUsersResetPasswordUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminUsersResetPasswordUUID = (
  variables: PutV2AdminUsersResetPasswordUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    PutV2AdminUsersResetPasswordUUIDError,
    undefined,
    {},
    {},
    PutV2AdminUsersResetPasswordUUIDPathParams
  >({ url: "/v2/admin/users/reset-password/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminUsersResetPasswordUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PutV2AdminUsersResetPasswordUUIDError,
      PutV2AdminUsersResetPasswordUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    PutV2AdminUsersResetPasswordUUIDError,
    PutV2AdminUsersResetPasswordUUIDVariables
  >(
    (variables: PutV2AdminUsersResetPasswordUUIDVariables) =>
      fetchPutV2AdminUsersResetPasswordUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AdminUsersVerifyUUIDPathParams = {
  uuid: string;
};

export type PatchV2AdminUsersVerifyUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminUsersVerifyUUIDVariables = {
  pathParams: PatchV2AdminUsersVerifyUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AdminUsersVerifyUUID = (
  variables: PatchV2AdminUsersVerifyUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PatchV2AdminUsersVerifyUUIDError, undefined, {}, {}, PatchV2AdminUsersVerifyUUIDPathParams>({
    url: "/v2/admin/users/verify/{uuid}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2AdminUsersVerifyUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PatchV2AdminUsersVerifyUUIDError, PatchV2AdminUsersVerifyUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PatchV2AdminUsersVerifyUUIDError, PatchV2AdminUsersVerifyUUIDVariables>(
    (variables: PatchV2AdminUsersVerifyUUIDVariables) =>
      fetchPatchV2AdminUsersVerifyUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2MODELUUIDFilesPathParams = {
  /**
   * Currently only projects, sites, nurseries, project-reports, nursery-reports, site-reports, project-monitorings and site-monitorings are set up
   */
  model: string;
  uuid: string;
};

export type GetV2MODELUUIDFilesQueryParams = {
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * dependent on model available options are projects, project-reports, sites, site-reports, nurseries, nursery-reports
   */
  model_name?: string;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2MODELUUIDFilesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2MODELUUIDFilesResponse = {
  data?: {
    uuid?: string;
    file_url?: string;
    thumb_url?: string;
    file_name?: string;
    created_date?: string;
    model_name?: string;
    is_public?: boolean;
    location?: {
      lat?: number;
      lng?: number;
    };
    mime_type?: string;
    file_size?: number;
    collection_name?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2MODELUUIDFilesVariables = {
  pathParams: GetV2MODELUUIDFilesPathParams;
  queryParams?: GetV2MODELUUIDFilesQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Filters : file_type
 */
export const fetchGetV2MODELUUIDFiles = (variables: GetV2MODELUUIDFilesVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2MODELUUIDFilesResponse,
    GetV2MODELUUIDFilesError,
    undefined,
    {},
    GetV2MODELUUIDFilesQueryParams,
    GetV2MODELUUIDFilesPathParams
  >({ url: "/v2/{model}/{uuid}/files", method: "get", ...variables, signal });

/**
 * Available Filters : file_type
 */
export const useGetV2MODELUUIDFiles = <TData = GetV2MODELUUIDFilesResponse>(
  variables: GetV2MODELUUIDFilesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2MODELUUIDFilesResponse, GetV2MODELUUIDFilesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2MODELUUIDFilesResponse, GetV2MODELUUIDFilesError, TData>(
    queryKeyFn({ path: "/v2/{MODEL}/{UUID}/files", operationId: "getV2MODELUUIDFiles", variables }),
    ({ signal }) => fetchGetV2MODELUUIDFiles({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2MODELUUIDImageLocationsPathParams = {
  /**
   * Currently only projects, sites, nurseries, project-reports, nursery-reports and site-reports are set up
   */
  model: string;
  uuid: string;
};

export type GetV2MODELUUIDImageLocationsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2MODELUUIDImageLocationsResponse = {
  data?: {
    uuid?: string;
    thumb_url?: string;
    location?: {
      lat?: number;
      lng?: number;
    };
  }[];
};

export type GetV2MODELUUIDImageLocationsVariables = {
  pathParams: GetV2MODELUUIDImageLocationsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2MODELUUIDImageLocations = (
  variables: GetV2MODELUUIDImageLocationsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2MODELUUIDImageLocationsResponse,
    GetV2MODELUUIDImageLocationsError,
    undefined,
    {},
    {},
    GetV2MODELUUIDImageLocationsPathParams
  >({ url: "/v2/{model}/{uuid}/image/locations", method: "get", ...variables, signal });

export const useGetV2MODELUUIDImageLocations = <TData = GetV2MODELUUIDImageLocationsResponse>(
  variables: GetV2MODELUUIDImageLocationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2MODELUUIDImageLocationsResponse, GetV2MODELUUIDImageLocationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2MODELUUIDImageLocationsResponse, GetV2MODELUUIDImageLocationsError, TData>(
    queryKeyFn({ path: "/v2/{MODEL}/{UUID}/image/locations", operationId: "getV2MODELUUIDImageLocations", variables }),
    ({ signal }) => fetchGetV2MODELUUIDImageLocations({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2FileUploadMODELCOLLECTIONUUIDPathParams = {
  /**
   * Currently only organisation, funding-programme, project-pitch, project, site, nursery, project-report, site-report, nursery-report, project-monitoring and site-monitoring are set up
   */
  model: string;
  collection: string;
  uuid: string;
};

export type PostV2FileUploadMODELCOLLECTIONUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FileUploadMODELCOLLECTIONUUIDResponse = {
  uuid?: string;
  url?: string;
  thumb_url?: string;
  collection_name?: string;
  title?: string;
  file_name?: string;
  mime_type?: string;
  size?: number;
  lat?: number;
  lng?: number;
  is_public?: boolean;
  created_at?: string;
};

export type PostV2FileUploadMODELCOLLECTIONUUIDRequestBody = {
  title?: string;
  /**
   * @format binary
   */
  upload_file?: Blob;
  lat?: number;
  lng?: number;
  /**
   * @default false
   */
  is_public?: boolean;
};

export type PostV2FileUploadMODELCOLLECTIONUUIDVariables = {
  body?: PostV2FileUploadMODELCOLLECTIONUUIDRequestBody;
  pathParams: PostV2FileUploadMODELCOLLECTIONUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FileUploadMODELCOLLECTIONUUID = (
  variables: PostV2FileUploadMODELCOLLECTIONUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2FileUploadMODELCOLLECTIONUUIDResponse,
    PostV2FileUploadMODELCOLLECTIONUUIDError,
    PostV2FileUploadMODELCOLLECTIONUUIDRequestBody,
    {},
    {},
    PostV2FileUploadMODELCOLLECTIONUUIDPathParams
  >({ url: "/v2/file/upload/{model}/{collection}/{uuid}", method: "post", ...variables, signal });

export const usePostV2FileUploadMODELCOLLECTIONUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2FileUploadMODELCOLLECTIONUUIDResponse,
      PostV2FileUploadMODELCOLLECTIONUUIDError,
      PostV2FileUploadMODELCOLLECTIONUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2FileUploadMODELCOLLECTIONUUIDResponse,
    PostV2FileUploadMODELCOLLECTIONUUIDError,
    PostV2FileUploadMODELCOLLECTIONUUIDVariables
  >(
    (variables: PostV2FileUploadMODELCOLLECTIONUUIDVariables) =>
      fetchPostV2FileUploadMODELCOLLECTIONUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2FilesUUIDPathParams = {
  uuid: string;
};

export type PutV2FilesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2FilesUUIDResponse = {
  uuid?: string;
  url?: string;
  thumb_url?: string;
  collection_name?: string;
  title?: string;
  file_name?: string;
  mime_type?: string;
  size?: number;
  lat?: number;
  lng?: number;
  is_public?: boolean;
  created_at?: string;
};

export type PutV2FilesUUIDRequestBody = {
  title: string;
  is_public?: boolean;
};

export type PutV2FilesUUIDVariables = {
  body: PutV2FilesUUIDRequestBody;
  pathParams: PutV2FilesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2FilesUUID = (variables: PutV2FilesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<PutV2FilesUUIDResponse, PutV2FilesUUIDError, PutV2FilesUUIDRequestBody, {}, {}, PutV2FilesUUIDPathParams>({
    url: "/v2/files/{uuid}",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2FilesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<PutV2FilesUUIDResponse, PutV2FilesUUIDError, PutV2FilesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PutV2FilesUUIDResponse, PutV2FilesUUIDError, PutV2FilesUUIDVariables>(
    (variables: PutV2FilesUUIDVariables) => fetchPutV2FilesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2FilesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2FilesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2FilesUUIDVariables = {
  pathParams: DeleteV2FilesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2FilesUUID = (variables: DeleteV2FilesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2FilesUUIDError, undefined, {}, {}, DeleteV2FilesUUIDPathParams>({
    url: "/v2/files/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2FilesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2FilesUUIDError, DeleteV2FilesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2FilesUUIDError, DeleteV2FilesUUIDVariables>(
    (variables: DeleteV2FilesUUIDVariables) => fetchDeleteV2FilesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2TreeSpeciesError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TreeSpeciesResponse = {
  uuid?: string;
  name?: string;
  amount?: number;
  type?: string;
  collection?: string;
};

export type PostV2TreeSpeciesRequestBody = {
  model_type?: string;
  model_uuid?: number;
  name?: string;
  amount?: number;
  type?: string;
  collection?: string;
};

export type PostV2TreeSpeciesVariables = {
  body?: PostV2TreeSpeciesRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2TreeSpecies = (variables: PostV2TreeSpeciesVariables, signal?: AbortSignal) =>
  apiFetch<PostV2TreeSpeciesResponse, PostV2TreeSpeciesError, PostV2TreeSpeciesRequestBody, {}, {}, {}>({
    url: "/v2/tree-species",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2TreeSpecies = (
  options?: Omit<
    reactQuery.UseMutationOptions<PostV2TreeSpeciesResponse, PostV2TreeSpeciesError, PostV2TreeSpeciesVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2TreeSpeciesResponse, PostV2TreeSpeciesError, PostV2TreeSpeciesVariables>(
    (variables: PostV2TreeSpeciesVariables) => fetchPostV2TreeSpecies({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2TreeSpeciesUUIDPathParams = {
  uuid: string;
};

export type PatchV2TreeSpeciesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2TreeSpeciesUUIDResponse = {
  model_type?: string;
  model_uuid?: number;
  name?: string;
  amount?: number;
  type?: string;
  collection?: string;
};

export type PatchV2TreeSpeciesUUIDRequestBody = {
  name?: string;
  amount?: number;
  type?: string;
  collection?: string;
};

export type PatchV2TreeSpeciesUUIDVariables = {
  body?: PatchV2TreeSpeciesUUIDRequestBody;
  pathParams: PatchV2TreeSpeciesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2TreeSpeciesUUID = (variables: PatchV2TreeSpeciesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PatchV2TreeSpeciesUUIDResponse,
    PatchV2TreeSpeciesUUIDError,
    PatchV2TreeSpeciesUUIDRequestBody,
    {},
    {},
    PatchV2TreeSpeciesUUIDPathParams
  >({ url: "/v2/tree-species/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2TreeSpeciesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2TreeSpeciesUUIDResponse,
      PatchV2TreeSpeciesUUIDError,
      PatchV2TreeSpeciesUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2TreeSpeciesUUIDResponse,
    PatchV2TreeSpeciesUUIDError,
    PatchV2TreeSpeciesUUIDVariables
  >(
    (variables: PatchV2TreeSpeciesUUIDVariables) => fetchPatchV2TreeSpeciesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2TreeSpeciesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2TreeSpeciesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2TreeSpeciesUUIDResponse = {
  uuid?: string;
  name?: string;
  amount?: number;
  type?: string;
  collection?: string;
};

export type DeleteV2TreeSpeciesUUIDVariables = {
  pathParams: DeleteV2TreeSpeciesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2TreeSpeciesUUID = (variables: DeleteV2TreeSpeciesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    DeleteV2TreeSpeciesUUIDResponse,
    DeleteV2TreeSpeciesUUIDError,
    undefined,
    {},
    {},
    DeleteV2TreeSpeciesUUIDPathParams
  >({ url: "/v2/tree-species/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2TreeSpeciesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2TreeSpeciesUUIDResponse,
      DeleteV2TreeSpeciesUUIDError,
      DeleteV2TreeSpeciesUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2TreeSpeciesUUIDResponse,
    DeleteV2TreeSpeciesUUIDError,
    DeleteV2TreeSpeciesUUIDVariables
  >(
    (variables: DeleteV2TreeSpeciesUUIDVariables) => fetchDeleteV2TreeSpeciesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2FundingTypeError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FundingTypeResponse = {
  uuid?: string;
  organisation_id?: string;
  amount?: number;
  year?: number;
  type?: string;
};

export type PostV2FundingTypeRequestBody = {
  organisation_id?: string;
  amount?: number;
  year?: number;
  type?: string;
};

export type PostV2FundingTypeVariables = {
  body?: PostV2FundingTypeRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FundingType = (variables: PostV2FundingTypeVariables, signal?: AbortSignal) =>
  apiFetch<PostV2FundingTypeResponse, PostV2FundingTypeError, PostV2FundingTypeRequestBody, {}, {}, {}>({
    url: "/v2/funding-type",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2FundingType = (
  options?: Omit<
    reactQuery.UseMutationOptions<PostV2FundingTypeResponse, PostV2FundingTypeError, PostV2FundingTypeVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2FundingTypeResponse, PostV2FundingTypeError, PostV2FundingTypeVariables>(
    (variables: PostV2FundingTypeVariables) => fetchPostV2FundingType({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2FundingTypeUUIDPathParams = {
  uuid: string;
};

export type PatchV2FundingTypeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2FundingTypeUUIDResponse = {
  uuid?: string;
  organisation_id?: string;
  amount?: number;
  year?: number;
  type?: string;
};

export type PatchV2FundingTypeUUIDRequestBody = {
  amount?: number;
  year?: number;
  type?: string;
};

export type PatchV2FundingTypeUUIDVariables = {
  body?: PatchV2FundingTypeUUIDRequestBody;
  pathParams: PatchV2FundingTypeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2FundingTypeUUID = (variables: PatchV2FundingTypeUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PatchV2FundingTypeUUIDResponse,
    PatchV2FundingTypeUUIDError,
    PatchV2FundingTypeUUIDRequestBody,
    {},
    {},
    PatchV2FundingTypeUUIDPathParams
  >({ url: "/v2/funding-type/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2FundingTypeUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2FundingTypeUUIDResponse,
      PatchV2FundingTypeUUIDError,
      PatchV2FundingTypeUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2FundingTypeUUIDResponse,
    PatchV2FundingTypeUUIDError,
    PatchV2FundingTypeUUIDVariables
  >(
    (variables: PatchV2FundingTypeUUIDVariables) => fetchPatchV2FundingTypeUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2FundingTypeUUIDPathParams = {
  uuid: string;
};

export type DeleteV2FundingTypeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2FundingTypeUUIDResponse = {
  uuid?: string;
  organisation_id?: string;
  amount?: number;
  year?: number;
  type?: string;
};

export type DeleteV2FundingTypeUUIDVariables = {
  pathParams: DeleteV2FundingTypeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2FundingTypeUUID = (variables: DeleteV2FundingTypeUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    DeleteV2FundingTypeUUIDResponse,
    DeleteV2FundingTypeUUIDError,
    undefined,
    {},
    {},
    DeleteV2FundingTypeUUIDPathParams
  >({ url: "/v2/funding-type/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2FundingTypeUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2FundingTypeUUIDResponse,
      DeleteV2FundingTypeUUIDError,
      DeleteV2FundingTypeUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2FundingTypeUUIDResponse,
    DeleteV2FundingTypeUUIDError,
    DeleteV2FundingTypeUUIDVariables
  >(
    (variables: DeleteV2FundingTypeUUIDVariables) => fetchDeleteV2FundingTypeUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2CoreTeamLeaderError = Fetcher.ErrorWrapper<undefined>;

export type PostV2CoreTeamLeaderResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  first_name?: string;
  last_name?: string;
  role?: string;
  age?: number;
};

export type PostV2CoreTeamLeaderRequestBody = {
  organisation_id?: string;
  position?: string;
  gender?: string;
  first_name?: string;
  last_name?: string;
  role?: string;
  age?: number;
};

export type PostV2CoreTeamLeaderVariables = {
  body?: PostV2CoreTeamLeaderRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2CoreTeamLeader = (variables: PostV2CoreTeamLeaderVariables, signal?: AbortSignal) =>
  apiFetch<PostV2CoreTeamLeaderResponse, PostV2CoreTeamLeaderError, PostV2CoreTeamLeaderRequestBody, {}, {}, {}>({
    url: "/v2/core-team-leader",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2CoreTeamLeader = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2CoreTeamLeaderResponse,
      PostV2CoreTeamLeaderError,
      PostV2CoreTeamLeaderVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2CoreTeamLeaderResponse, PostV2CoreTeamLeaderError, PostV2CoreTeamLeaderVariables>(
    (variables: PostV2CoreTeamLeaderVariables) => fetchPostV2CoreTeamLeader({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2CoreTeamLeaderUUIDPathParams = {
  uuid: string;
};

export type PatchV2CoreTeamLeaderUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2CoreTeamLeaderUUIDResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  first_name?: string;
  last_name?: string;
  role?: string;
  age?: number;
};

export type PatchV2CoreTeamLeaderUUIDRequestBody = {
  position?: string;
  gender?: string;
  first_name?: string;
  last_name?: string;
  role?: string;
  age?: number;
};

export type PatchV2CoreTeamLeaderUUIDVariables = {
  body?: PatchV2CoreTeamLeaderUUIDRequestBody;
  pathParams: PatchV2CoreTeamLeaderUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2CoreTeamLeaderUUID = (variables: PatchV2CoreTeamLeaderUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PatchV2CoreTeamLeaderUUIDResponse,
    PatchV2CoreTeamLeaderUUIDError,
    PatchV2CoreTeamLeaderUUIDRequestBody,
    {},
    {},
    PatchV2CoreTeamLeaderUUIDPathParams
  >({ url: "/v2/core-team-leader/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2CoreTeamLeaderUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2CoreTeamLeaderUUIDResponse,
      PatchV2CoreTeamLeaderUUIDError,
      PatchV2CoreTeamLeaderUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2CoreTeamLeaderUUIDResponse,
    PatchV2CoreTeamLeaderUUIDError,
    PatchV2CoreTeamLeaderUUIDVariables
  >(
    (variables: PatchV2CoreTeamLeaderUUIDVariables) =>
      fetchPatchV2CoreTeamLeaderUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2CoreTeamLeaderUUIDPathParams = {
  uuid: string;
};

export type DeleteV2CoreTeamLeaderUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2CoreTeamLeaderUUIDResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  first_name?: string;
  last_name?: string;
  role?: string;
  age?: number;
};

export type DeleteV2CoreTeamLeaderUUIDVariables = {
  pathParams: DeleteV2CoreTeamLeaderUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2CoreTeamLeaderUUID = (variables: DeleteV2CoreTeamLeaderUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    DeleteV2CoreTeamLeaderUUIDResponse,
    DeleteV2CoreTeamLeaderUUIDError,
    undefined,
    {},
    {},
    DeleteV2CoreTeamLeaderUUIDPathParams
  >({ url: "/v2/core-team-leader/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2CoreTeamLeaderUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2CoreTeamLeaderUUIDResponse,
      DeleteV2CoreTeamLeaderUUIDError,
      DeleteV2CoreTeamLeaderUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2CoreTeamLeaderUUIDResponse,
    DeleteV2CoreTeamLeaderUUIDError,
    DeleteV2CoreTeamLeaderUUIDVariables
  >(
    (variables: DeleteV2CoreTeamLeaderUUIDVariables) =>
      fetchDeleteV2CoreTeamLeaderUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2LeadershipTeamError = Fetcher.ErrorWrapper<undefined>;

export type PostV2LeadershipTeamResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  age?: number;
};

export type PostV2LeadershipTeamRequestBody = {
  organisation_id?: string;
  position?: string;
  gender?: string;
  age?: number;
};

export type PostV2LeadershipTeamVariables = {
  body?: PostV2LeadershipTeamRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2LeadershipTeam = (variables: PostV2LeadershipTeamVariables, signal?: AbortSignal) =>
  apiFetch<PostV2LeadershipTeamResponse, PostV2LeadershipTeamError, PostV2LeadershipTeamRequestBody, {}, {}, {}>({
    url: "/v2/leadership-team",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2LeadershipTeam = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2LeadershipTeamResponse,
      PostV2LeadershipTeamError,
      PostV2LeadershipTeamVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2LeadershipTeamResponse, PostV2LeadershipTeamError, PostV2LeadershipTeamVariables>(
    (variables: PostV2LeadershipTeamVariables) => fetchPostV2LeadershipTeam({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2LeadershipTeamUUIDPathParams = {
  uuid: string;
};

export type PatchV2LeadershipTeamUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2LeadershipTeamUUIDResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  age?: number;
};

export type PatchV2LeadershipTeamUUIDRequestBody = {
  position?: string;
  gender?: string;
  age?: number;
};

export type PatchV2LeadershipTeamUUIDVariables = {
  body?: PatchV2LeadershipTeamUUIDRequestBody;
  pathParams: PatchV2LeadershipTeamUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2LeadershipTeamUUID = (variables: PatchV2LeadershipTeamUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PatchV2LeadershipTeamUUIDResponse,
    PatchV2LeadershipTeamUUIDError,
    PatchV2LeadershipTeamUUIDRequestBody,
    {},
    {},
    PatchV2LeadershipTeamUUIDPathParams
  >({ url: "/v2/leadership-team/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2LeadershipTeamUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2LeadershipTeamUUIDResponse,
      PatchV2LeadershipTeamUUIDError,
      PatchV2LeadershipTeamUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2LeadershipTeamUUIDResponse,
    PatchV2LeadershipTeamUUIDError,
    PatchV2LeadershipTeamUUIDVariables
  >(
    (variables: PatchV2LeadershipTeamUUIDVariables) =>
      fetchPatchV2LeadershipTeamUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2LeadershipTeamUUIDPathParams = {
  uuid: string;
};

export type DeleteV2LeadershipTeamUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2LeadershipTeamUUIDResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  age?: number;
};

export type DeleteV2LeadershipTeamUUIDVariables = {
  pathParams: DeleteV2LeadershipTeamUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2LeadershipTeamUUID = (variables: DeleteV2LeadershipTeamUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    DeleteV2LeadershipTeamUUIDResponse,
    DeleteV2LeadershipTeamUUIDError,
    undefined,
    {},
    {},
    DeleteV2LeadershipTeamUUIDPathParams
  >({ url: "/v2/leadership-team/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2LeadershipTeamUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2LeadershipTeamUUIDResponse,
      DeleteV2LeadershipTeamUUIDError,
      DeleteV2LeadershipTeamUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2LeadershipTeamUUIDResponse,
    DeleteV2LeadershipTeamUUIDError,
    DeleteV2LeadershipTeamUUIDVariables
  >(
    (variables: DeleteV2LeadershipTeamUUIDVariables) =>
      fetchDeleteV2LeadershipTeamUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2OwnershipStakeError = Fetcher.ErrorWrapper<undefined>;

export type PostV2OwnershipStakeResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  age?: number;
  percent_ownership?: number;
};

export type PostV2OwnershipStakeRequestBody = {
  organisation_id?: string;
  position?: string;
  gender?: string;
  age?: number;
  percent_ownership?: number;
};

export type PostV2OwnershipStakeVariables = {
  body?: PostV2OwnershipStakeRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2OwnershipStake = (variables: PostV2OwnershipStakeVariables, signal?: AbortSignal) =>
  apiFetch<PostV2OwnershipStakeResponse, PostV2OwnershipStakeError, PostV2OwnershipStakeRequestBody, {}, {}, {}>({
    url: "/v2/ownership-stake",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2OwnershipStake = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2OwnershipStakeResponse,
      PostV2OwnershipStakeError,
      PostV2OwnershipStakeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2OwnershipStakeResponse, PostV2OwnershipStakeError, PostV2OwnershipStakeVariables>(
    (variables: PostV2OwnershipStakeVariables) => fetchPostV2OwnershipStake({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2OwnershipStakeUUIDPathParams = {
  uuid: string;
};

export type PatchV2OwnershipStakeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2OwnershipStakeUUIDResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  age?: number;
  percent_ownership?: number;
};

export type PatchV2OwnershipStakeUUIDRequestBody = {
  position?: string;
  gender?: string;
  age?: number;
  percent_ownership?: number;
};

export type PatchV2OwnershipStakeUUIDVariables = {
  body?: PatchV2OwnershipStakeUUIDRequestBody;
  pathParams: PatchV2OwnershipStakeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2OwnershipStakeUUID = (variables: PatchV2OwnershipStakeUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PatchV2OwnershipStakeUUIDResponse,
    PatchV2OwnershipStakeUUIDError,
    PatchV2OwnershipStakeUUIDRequestBody,
    {},
    {},
    PatchV2OwnershipStakeUUIDPathParams
  >({ url: "/v2/ownership-stake/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2OwnershipStakeUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2OwnershipStakeUUIDResponse,
      PatchV2OwnershipStakeUUIDError,
      PatchV2OwnershipStakeUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2OwnershipStakeUUIDResponse,
    PatchV2OwnershipStakeUUIDError,
    PatchV2OwnershipStakeUUIDVariables
  >(
    (variables: PatchV2OwnershipStakeUUIDVariables) =>
      fetchPatchV2OwnershipStakeUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2OwnershipStakeUUIDPathParams = {
  uuid: string;
};

export type DeleteV2OwnershipStakeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2OwnershipStakeUUIDResponse = {
  uuid?: string;
  organisation_id?: string;
  position?: string;
  gender?: string;
  age?: number;
  percent_ownership?: number;
};

export type DeleteV2OwnershipStakeUUIDVariables = {
  pathParams: DeleteV2OwnershipStakeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2OwnershipStakeUUID = (variables: DeleteV2OwnershipStakeUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    DeleteV2OwnershipStakeUUIDResponse,
    DeleteV2OwnershipStakeUUIDError,
    undefined,
    {},
    {},
    DeleteV2OwnershipStakeUUIDPathParams
  >({ url: "/v2/ownership-stake/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2OwnershipStakeUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2OwnershipStakeUUIDResponse,
      DeleteV2OwnershipStakeUUIDError,
      DeleteV2OwnershipStakeUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2OwnershipStakeUUIDResponse,
    DeleteV2OwnershipStakeUUIDError,
    DeleteV2OwnershipStakeUUIDVariables
  >(
    (variables: DeleteV2OwnershipStakeUUIDVariables) =>
      fetchDeleteV2OwnershipStakeUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminSitesQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminSitesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminSitesResponse = {
  data?: {
    id?: number;
    site_id?: number;
    terrafund_site_id?: number;
    programme_id?: number;
    terrafund_programme_id?: number;
    control_site?: boolean;
    name?: string;
    country?: string;
    project_country?: string;
    continent?: string;
    description?: string;
    planting_pattern?: string;
    stratification_for_heterogeneity?: string;
    history?: string;
    workdays_paid?: number;
    workdays_volunteer?: number;
    total_workdays?: number;
    /**
     * @format date
     */
    establishment_date?: string;
    /**
     * @format date
     */
    start_date?: string;
    /**
     * @format date
     */
    end_date?: string;
    technical_narrative?: string;
    public_narrative?: string;
    aim_survival_rate?: number;
    aim_year_five_crown_cover?: number;
    aim_direct_seeding_survival_rate?: number;
    aim_natural_regeneration_trees_per_hectare?: number;
    aim_natural_regeneration_hectares?: number;
    aim_soil_condition?: string;
    aim_number_of_mature_trees?: number;
    hectares_to_restore?: number;
    landscape_community_contribution?: string;
    disturbances?: string;
    boundary_geojson?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminSitesVariables = {
  queryParams?: GetV2AdminSitesQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminSites = (variables: GetV2AdminSitesVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminSitesResponse, GetV2AdminSitesError, undefined, {}, GetV2AdminSitesQueryParams, {}>({
    url: "/v2/admin/sites",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminSites = <TData = GetV2AdminSitesResponse>(
  variables: GetV2AdminSitesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminSitesResponse, GetV2AdminSitesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminSitesResponse, GetV2AdminSitesError, TData>(
    queryKeyFn({ path: "/v2/admin/sites", operationId: "getV2AdminSites", variables }),
    ({ signal }) => fetchGetV2AdminSites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminProjectPitchesQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminProjectPitchesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminProjectPitchesResponse = {
  data?: {
    id?: string;
    uuid?: string;
    status?: string;
    readable_status?: string;
    organisation_id?: string;
    funding_programmes?: {
      id?: number;
      uuid?: string;
      name?: string;
      description?: string;
      read_more_url?: string;
      organisation_types?: string[];
      location?: string;
      status?: string;
    };
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_name?: string;
    how_discovered?: string;
    project_objectives?: string;
    project_country?: string[];
    project_county_district?: string;
    restoration_intervention_types?: string[];
    land_systems?: string[];
    tree_restoration_practices?: string[];
    total_hectares?: number;
    project_budget?: number;
    total_trees?: number;
    capacity_building_needs?: string[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    restoration_photos?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    proof_of_land_tenure_mou?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    detailed_project_budget?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    expected_active_restoration_start_date?: string;
    expected_active_restoration_end_date?: string;
    description_of_project_timeline?: string;
    proj_partner_info?: string;
    land_tenure_proj_area?: string[];
    landholder_comm_engage?: string;
    proj_success_risks?: string;
    monitor_eval_plan?: string;
    proj_boundary?: string;
    sustainable_dev_goals?: string[];
    proj_area_description?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_sites?: number;
    environmental_goals?: string;
    main_degradation_causes?: string;
    seedlings_source?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_nurseries?: number;
    curr_land_degradation?: string;
    proj_impact_socieconom?: string;
    proj_impact_foodsec?: string;
    proj_impact_watersec?: string;
    proj_impact_jobtypes?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    num_jobs_created?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_men?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_18to35?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_older35?: number;
    proj_beneficiaries?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_small?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_large?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_youth?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_classes?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_tribes?: number;
    monitoring_evaluation_plan?: string;
    main_causes_of_degradation?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminProjectPitchesVariables = {
  queryParams?: GetV2AdminProjectPitchesQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminProjectPitches = (variables: GetV2AdminProjectPitchesVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminProjectPitchesResponse,
    GetV2AdminProjectPitchesError,
    undefined,
    {},
    GetV2AdminProjectPitchesQueryParams,
    {}
  >({ url: "/v2/admin/project-pitches", method: "get", ...variables, signal });

export const useGetV2AdminProjectPitches = <TData = GetV2AdminProjectPitchesResponse>(
  variables: GetV2AdminProjectPitchesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminProjectPitchesResponse, GetV2AdminProjectPitchesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminProjectPitchesResponse, GetV2AdminProjectPitchesError, TData>(
    queryKeyFn({ path: "/v2/admin/project-pitches", operationId: "getV2AdminProjectPitches", variables }),
    ({ signal }) => fetchGetV2AdminProjectPitches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminProjectsQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminProjectsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminProjectsResponse = {
  data?: {
    id?: string;
    uuid?: string;
    status?: string;
    name?: string;
    organisation?: {
      uuid?: string;
      type?: string;
      private?: boolean;
      name?: string;
      phone?: string;
      currency?: string;
      states?: string[];
      loan_status_types?: string[];
      land_systems?: string[];
      fund_utilisation?: string[];
      detailed_intervention_types?: string[];
      account_number_1?: string;
      account_number_2?: string;
      approach_of_marginalized_communities?: string;
      community_engagement_numbers_marginalized?: string;
      founding_date?: string;
      description?: string;
      leadership_team?: string;
      countries?: string[];
      languages?: string[];
      project_pitches?: {
        id?: string;
        uuid?: string;
        status?: string;
        readable_status?: string;
        organisation_id?: string;
        funding_programmes?: {
          id?: number;
          uuid?: string;
          name?: string;
          description?: string;
          read_more_url?: string;
          organisation_types?: string[];
          location?: string;
          status?: string;
        };
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_name?: string;
        how_discovered?: string;
        project_objectives?: string;
        project_country?: string[];
        project_county_district?: string;
        restoration_intervention_types?: string[];
        land_systems?: string[];
        tree_restoration_practices?: string[];
        total_hectares?: number;
        project_budget?: number;
        total_trees?: number;
        capacity_building_needs?: string[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        restoration_photos?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        proof_of_land_tenure_mou?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        detailed_project_budget?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        expected_active_restoration_start_date?: string;
        expected_active_restoration_end_date?: string;
        description_of_project_timeline?: string;
        proj_partner_info?: string;
        land_tenure_proj_area?: string[];
        landholder_comm_engage?: string;
        proj_success_risks?: string;
        monitor_eval_plan?: string;
        proj_boundary?: string;
        sustainable_dev_goals?: string[];
        proj_area_description?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_sites?: number;
        environmental_goals?: string;
        main_degradation_causes?: string;
        seedlings_source?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_nurseries?: number;
        curr_land_degradation?: string;
        proj_impact_socieconom?: string;
        proj_impact_foodsec?: string;
        proj_impact_watersec?: string;
        proj_impact_jobtypes?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        num_jobs_created?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_men?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_18to35?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_older35?: number;
        proj_beneficiaries?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_small?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_large?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_youth?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_classes?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_tribes?: number;
        monitoring_evaluation_plan?: string;
        main_causes_of_degradation?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      web_url?: string;
      facebook_url?: string;
      instagram_url?: string;
      linkedin_url?: string;
      twitter_url?: string;
      hq_street_1?: string;
      hq_street_2?: string;
      hq_city?: string;
      hq_state?: string;
      hq_zipcode?: string;
      hq_country?: string;
      fin_start_month?: number;
      /**
       * @format float
       */
      fin_budget_3year?: number;
      /**
       * @format float
       */
      fin_budget_2year?: number;
      /**
       * @format float
       */
      fin_budget_1year?: number;
      /**
       * @format float
       */
      fin_budget_current_year?: number;
      /**
       * @format float
       */
      ha_restored_total?: number;
      /**
       * @format float
       */
      ha_restored_3year?: number;
      relevant_experience_years?: number;
      trees_grown_total?: number;
      trees_grown_3year?: number;
      tree_care_approach?: string;
      ft_permanent_employees?: number;
      pt_permanent_employees?: number;
      temp_employees?: number;
      female_employees?: number;
      male_employees?: number;
      young_employees?: number;
      additional_funding_details?: string;
      community_experience?: string;
      total_engaged_community_members_3yr?: number;
      percent_engaged_women_3yr?: number;
      percent_engaged_men_3yr?: number;
      percent_engaged_under_35_3yr?: number;
      percent_engaged_over_35_3yr?: number;
      percent_engaged_smallholder_3yr?: number;
      total_trees_grown?: number;
      avg_tree_survival_rate?: number;
      tree_maintenance_aftercare_approach?: string;
      restored_areas_description?: string;
      monitoring_evaluation_experience?: string;
      funding_history?: string;
      engagement_farmers?: string[];
      engagement_women?: string[];
      engagement_youth?: string[];
      engagement_non_youth?: string[];
      tree_restoration_practices?: string[];
      business_model?: string;
      subtype?: string;
      organisation_revenue_this_year?: number;
      shapefiles?: {
        uuid?: string;
        shapefileable_type?: string;
        shapefileable_id?: number;
        geojson?: string;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      bank_statements?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      previous_annual_reports?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      logo?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      reference?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_2year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_last_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_this_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_next_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      legal_registration?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
    };
    planting_start_date?: string;
    framework_key?: string;
    framework_uuid?: string;
    has_monitoring_data?: boolean;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminProjectsVariables = {
  queryParams?: GetV2AdminProjectsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminProjects = (variables: GetV2AdminProjectsVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminProjectsResponse, GetV2AdminProjectsError, undefined, {}, GetV2AdminProjectsQueryParams, {}>({
    url: "/v2/admin/projects",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminProjects = <TData = GetV2AdminProjectsResponse>(
  variables: GetV2AdminProjectsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminProjectsResponse, GetV2AdminProjectsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminProjectsResponse, GetV2AdminProjectsError, TData>(
    queryKeyFn({ path: "/v2/admin/projects", operationId: "getV2AdminProjects", variables }),
    ({ signal }) => fetchGetV2AdminProjects({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ProjectsUUIDPathParams = {
  uuid: string;
};

export type GetV2ProjectsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDResponse = {
  data?: {
    id?: string;
    uuid?: string;
    status?: string;
    organisation?: {
      uuid?: string;
      type?: string;
      private?: boolean;
      name?: string;
      phone?: string;
      currency?: string;
      states?: string[];
      loan_status_types?: string[];
      land_systems?: string[];
      fund_utilisation?: string[];
      detailed_intervention_types?: string[];
      account_number_1?: string;
      account_number_2?: string;
      approach_of_marginalized_communities?: string;
      community_engagement_numbers_marginalized?: string;
      founding_date?: string;
      description?: string;
      leadership_team?: string;
      countries?: string[];
      languages?: string[];
      project_pitches?: {
        id?: string;
        uuid?: string;
        status?: string;
        readable_status?: string;
        organisation_id?: string;
        funding_programmes?: {
          id?: number;
          uuid?: string;
          name?: string;
          description?: string;
          read_more_url?: string;
          organisation_types?: string[];
          location?: string;
          status?: string;
        };
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_name?: string;
        how_discovered?: string;
        project_objectives?: string;
        project_country?: string[];
        project_county_district?: string;
        restoration_intervention_types?: string[];
        land_systems?: string[];
        tree_restoration_practices?: string[];
        total_hectares?: number;
        project_budget?: number;
        total_trees?: number;
        capacity_building_needs?: string[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        restoration_photos?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        proof_of_land_tenure_mou?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        detailed_project_budget?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        expected_active_restoration_start_date?: string;
        expected_active_restoration_end_date?: string;
        description_of_project_timeline?: string;
        proj_partner_info?: string;
        land_tenure_proj_area?: string[];
        landholder_comm_engage?: string;
        proj_success_risks?: string;
        monitor_eval_plan?: string;
        proj_boundary?: string;
        sustainable_dev_goals?: string[];
        proj_area_description?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_sites?: number;
        environmental_goals?: string;
        main_degradation_causes?: string;
        seedlings_source?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_nurseries?: number;
        curr_land_degradation?: string;
        proj_impact_socieconom?: string;
        proj_impact_foodsec?: string;
        proj_impact_watersec?: string;
        proj_impact_jobtypes?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        num_jobs_created?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_men?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_18to35?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_older35?: number;
        proj_beneficiaries?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_small?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_large?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_youth?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_classes?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_tribes?: number;
        monitoring_evaluation_plan?: string;
        main_causes_of_degradation?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      web_url?: string;
      facebook_url?: string;
      instagram_url?: string;
      linkedin_url?: string;
      twitter_url?: string;
      hq_street_1?: string;
      hq_street_2?: string;
      hq_city?: string;
      hq_state?: string;
      hq_zipcode?: string;
      hq_country?: string;
      fin_start_month?: number;
      /**
       * @format float
       */
      fin_budget_3year?: number;
      /**
       * @format float
       */
      fin_budget_2year?: number;
      /**
       * @format float
       */
      fin_budget_1year?: number;
      /**
       * @format float
       */
      fin_budget_current_year?: number;
      /**
       * @format float
       */
      ha_restored_total?: number;
      /**
       * @format float
       */
      ha_restored_3year?: number;
      relevant_experience_years?: number;
      trees_grown_total?: number;
      trees_grown_3year?: number;
      tree_care_approach?: string;
      ft_permanent_employees?: number;
      pt_permanent_employees?: number;
      temp_employees?: number;
      female_employees?: number;
      male_employees?: number;
      young_employees?: number;
      additional_funding_details?: string;
      community_experience?: string;
      total_engaged_community_members_3yr?: number;
      percent_engaged_women_3yr?: number;
      percent_engaged_men_3yr?: number;
      percent_engaged_under_35_3yr?: number;
      percent_engaged_over_35_3yr?: number;
      percent_engaged_smallholder_3yr?: number;
      total_trees_grown?: number;
      avg_tree_survival_rate?: number;
      tree_maintenance_aftercare_approach?: string;
      restored_areas_description?: string;
      monitoring_evaluation_experience?: string;
      funding_history?: string;
      engagement_farmers?: string[];
      engagement_women?: string[];
      engagement_youth?: string[];
      engagement_non_youth?: string[];
      tree_restoration_practices?: string[];
      business_model?: string;
      subtype?: string;
      organisation_revenue_this_year?: number;
      shapefiles?: {
        uuid?: string;
        shapefileable_type?: string;
        shapefileable_id?: number;
        geojson?: string;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      bank_statements?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      previous_annual_reports?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      logo?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      reference?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_2year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_last_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_this_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_next_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      legal_registration?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
    };
    application?: {
      uuid?: string;
      form_submissions?: {
        id?: string;
        uuid?: string;
        name?: string;
        form?: {
          id?: number;
          uuid?: string;
          type?: string;
          version?: number;
          title?: string;
          subtitle?: string;
          description?: string;
          framework_key?: string;
          duration?: string;
          deadline_at?: string;
          documentation?: string;
          documentation_label?: string;
          submission_message?: string;
          published?: boolean;
          stage_id?: string;
          options_other?: boolean;
          form_sections?: {
            order?: number;
            form_id?: number;
            form_questions?: {
              id?: number;
              uuid?: string;
              form_section_id?: number;
              label?: string;
              validation?: string[];
              parent_id?: string;
              linked_field_key?: string;
              children?: Record<string, any>[];
              multichoice?: boolean;
              order?: number;
              options?: {
                id?: number;
                uuid?: string;
                form_question_id?: number;
                label?: string;
                order?: number;
                created_at?: string;
                updated_at?: string;
                deleted_at?: string;
              }[];
              table_headers?: {
                id?: number;
                uuid?: string;
                form_question_id?: number;
                label?: string;
                order?: number;
                created_at?: string;
                updated_at?: string;
                deleted_at?: string;
              }[];
              additional_text?: string;
              additional_url?: string;
              show_on_parent_condition?: boolean;
              input_type?:
                | "date"
                | "text"
                | "long-text"
                | "select"
                | "checkboxes"
                | "radio"
                | "number"
                | "image"
                | "file"
                | "conditional";
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          /**
           * this is a list of key value pairs eg. slug: name
           */
          tags?: string[];
          updated_by?: number;
          deleted_at?: string;
          created_at?: string;
          updated_at?: string;
        };
        stage?: {
          uuid?: string;
          name?: string;
          status?: string;
          readable_status?: string;
        };
        answers?: string;
        status?: string;
        readable_status?: string;
        audits?: {
          id?: number;
          event?: string;
          user_id?: number;
          user_uuid?: string;
          old_values?: Record<string, any>;
          new_values?: Record<string, any>;
          created_at?: string;
          updated_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg slug: name
         */
        tags?: string[];
        updated_by?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      current_submission?: {
        id?: string;
        uuid?: string;
        name?: string;
        form?: {
          id?: number;
          uuid?: string;
          type?: string;
          version?: number;
          title?: string;
          subtitle?: string;
          description?: string;
          framework_key?: string;
          duration?: string;
          deadline_at?: string;
          documentation?: string;
          documentation_label?: string;
          submission_message?: string;
          published?: boolean;
          stage_id?: string;
          options_other?: boolean;
          form_sections?: {
            order?: number;
            form_id?: number;
            form_questions?: {
              id?: number;
              uuid?: string;
              form_section_id?: number;
              label?: string;
              validation?: string[];
              parent_id?: string;
              linked_field_key?: string;
              children?: Record<string, any>[];
              multichoice?: boolean;
              order?: number;
              options?: {
                id?: number;
                uuid?: string;
                form_question_id?: number;
                label?: string;
                order?: number;
                created_at?: string;
                updated_at?: string;
                deleted_at?: string;
              }[];
              table_headers?: {
                id?: number;
                uuid?: string;
                form_question_id?: number;
                label?: string;
                order?: number;
                created_at?: string;
                updated_at?: string;
                deleted_at?: string;
              }[];
              additional_text?: string;
              additional_url?: string;
              show_on_parent_condition?: boolean;
              input_type?:
                | "date"
                | "text"
                | "long-text"
                | "select"
                | "checkboxes"
                | "radio"
                | "number"
                | "image"
                | "file"
                | "conditional";
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          /**
           * this is a list of key value pairs eg. slug: name
           */
          tags?: string[];
          updated_by?: number;
          deleted_at?: string;
          created_at?: string;
          updated_at?: string;
        };
        stage?: {
          uuid?: string;
          name?: string;
          status?: string;
          readable_status?: string;
        };
        answers?: string;
        status?: string;
        readable_status?: string;
        audits?: {
          id?: number;
          event?: string;
          user_id?: number;
          user_uuid?: string;
          old_values?: Record<string, any>;
          new_values?: Record<string, any>;
          created_at?: string;
          updated_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg slug: name
         */
        tags?: string[];
        updated_by?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      funding_programme?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        location?: string;
        read_more_url?: string;
        framework_key?: string;
        status?: string;
        organisation_types?: string[];
        stages?: {
          id?: number;
          uuid?: string;
          status?: string;
          deadline_at?: string;
          readable_status?: string;
          funding_programme_id?: number;
          name?: string;
          order?: number;
          forms?: {
            id?: number;
            uuid?: string;
            type?: string;
            version?: number;
            title?: string;
            subtitle?: string;
            description?: string;
            framework_key?: string;
            duration?: string;
            deadline_at?: string;
            documentation?: string;
            documentation_label?: string;
            submission_message?: string;
            published?: boolean;
            stage_id?: string;
            options_other?: boolean;
            form_sections?: {
              order?: number;
              form_id?: number;
              form_questions?: {
                id?: number;
                uuid?: string;
                form_section_id?: number;
                label?: string;
                validation?: string[];
                parent_id?: string;
                linked_field_key?: string;
                children?: Record<string, any>[];
                multichoice?: boolean;
                order?: number;
                options?: {
                  id?: number;
                  uuid?: string;
                  form_question_id?: number;
                  label?: string;
                  order?: number;
                  created_at?: string;
                  updated_at?: string;
                  deleted_at?: string;
                }[];
                table_headers?: {
                  id?: number;
                  uuid?: string;
                  form_question_id?: number;
                  label?: string;
                  order?: number;
                  created_at?: string;
                  updated_at?: string;
                  deleted_at?: string;
                }[];
                additional_text?: string;
                additional_url?: string;
                show_on_parent_condition?: boolean;
                input_type?:
                  | "date"
                  | "text"
                  | "long-text"
                  | "select"
                  | "checkboxes"
                  | "radio"
                  | "number"
                  | "image"
                  | "file"
                  | "conditional";
                created_at?: string;
                updated_at?: string;
                deleted_at?: string;
              }[];
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            /**
             * this is a list of key value pairs eg. slug: name
             */
            tags?: string[];
            updated_by?: number;
            deleted_at?: string;
            created_at?: string;
            updated_at?: string;
          };
          deleted_at?: string;
          created_at?: string;
          updated_at?: string;
        }[];
        organisations?: {
          uuid?: string;
          name?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      organisation?: {
        uuid?: string;
        status?: string;
        readable_status?: string;
        type?: string;
        private?: boolean;
        name?: string;
        phone?: string;
        founding_date?: string;
        description?: string;
        countries?: string[];
        languages?: string[];
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_pitches?: {
          id?: string;
          uuid?: string;
          status?: string;
          readable_status?: string;
          organisation_id?: string;
          funding_programmes?: {
            id?: number;
            uuid?: string;
            name?: string;
            description?: string;
            read_more_url?: string;
            organisation_types?: string[];
            location?: string;
            status?: string;
          };
          tree_species?: {
            uuid?: string;
            name?: string;
            amount?: number;
            type?: string;
            collection?: string;
          }[];
          project_name?: string;
          how_discovered?: string;
          project_objectives?: string;
          project_country?: string[];
          project_county_district?: string;
          restoration_intervention_types?: string[];
          land_systems?: string[];
          tree_restoration_practices?: string[];
          total_hectares?: number;
          project_budget?: number;
          total_trees?: number;
          capacity_building_needs?: string[];
          additional?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          restoration_photos?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          cover?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          proof_of_land_tenure_mou?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          detailed_project_budget?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          expected_active_restoration_start_date?: string;
          expected_active_restoration_end_date?: string;
          description_of_project_timeline?: string;
          proj_partner_info?: string;
          land_tenure_proj_area?: string[];
          landholder_comm_engage?: string;
          proj_success_risks?: string;
          monitor_eval_plan?: string;
          proj_boundary?: string;
          sustainable_dev_goals?: string[];
          proj_area_description?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          proposed_num_sites?: number;
          environmental_goals?: string;
          main_degradation_causes?: string;
          seedlings_source?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          proposed_num_nurseries?: number;
          curr_land_degradation?: string;
          proj_impact_socieconom?: string;
          proj_impact_foodsec?: string;
          proj_impact_watersec?: string;
          proj_impact_jobtypes?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          num_jobs_created?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_men?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_women?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_18to35?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_older35?: number;
          proj_beneficiaries?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_women?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_small?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_large?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_youth?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_scheduled_classes?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_scheduled_tribes?: number;
          monitoring_evaluation_plan?: string;
          main_causes_of_degradation?: string;
          deleted_at?: string;
          created_at?: string;
          updated_at?: string;
        }[];
        web_url?: string;
        facebook_url?: string;
        instagram_url?: string;
        linkedin_url?: string;
        twitter_url?: string;
        hq_street_1?: string;
        hq_street_2?: string;
        hq_city?: string;
        hq_state?: string;
        hq_zipcode?: string;
        hq_country?: string;
        fin_start_month?: number;
        /**
         * @format float
         */
        fin_budget_3year?: number;
        /**
         * @format float
         */
        fin_budget_2year?: number;
        /**
         * @format float
         */
        fin_budget_1year?: number;
        /**
         * @format float
         */
        fin_budget_current_year?: number;
        /**
         * @format float
         */
        ha_restored_total?: number;
        /**
         * @format float
         */
        ha_restored_3year?: number;
        relevant_experience_years?: number;
        trees_grown_total?: number;
        trees_grown_3year?: number;
        tree_care_approach?: string;
        ft_permanent_employees?: number;
        pt_permanent_employees?: number;
        temp_employees?: number;
        female_employees?: number;
        male_employees?: number;
        young_employees?: number;
        additional_funding_details?: string;
        community_experience?: string;
        total_engaged_community_members_3yr?: number;
        percent_engaged_women_3yr?: number;
        percent_engaged_men_3yr?: number;
        percent_engaged_under_35_3yr?: number;
        percent_engaged_over_35_3yr?: number;
        percent_engaged_smallholder_3yr?: number;
        total_trees_grown?: number;
        avg_tree_survival_rate?: number;
        tree_maintenance_aftercare_approach?: string;
        restored_areas_description?: string;
        monitoring_evaluation_experience?: string;
        funding_history?: string;
        shapefiles?: {
          uuid?: string;
          shapefileable_type?: string;
          shapefileable_id?: number;
          geojson?: string;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        bank_statements?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        previous_annual_reports?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        logo?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        reference?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_2year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_last_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_this_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_next_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        legal_registration?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        created_at?: string;
        updated_at?: string;
      };
      /**
       * @format date-time
       */
      created_at?: string;
      /**
       * @format date-time
       */
      updated_at?: string;
    };
    planting_start_date?: string;
    framework_key?: string;
    framework_uuid?: string;
    has_monitoring_data?: boolean;
  }[];
};

export type GetV2ProjectsUUIDVariables = {
  pathParams: GetV2ProjectsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectsUUID = (variables: GetV2ProjectsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2ProjectsUUIDResponse, GetV2ProjectsUUIDError, undefined, {}, {}, GetV2ProjectsUUIDPathParams>({
    url: "/v2/projects/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ProjectsUUID = <TData = GetV2ProjectsUUIDResponse>(
  variables: GetV2ProjectsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectsUUIDResponse, GetV2ProjectsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectsUUIDResponse, GetV2ProjectsUUIDError, TData>(
    queryKeyFn({ path: "/v2/projects/{UUID}", operationId: "getV2ProjectsUUID", variables }),
    ({ signal }) => fetchGetV2ProjectsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2ProjectsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2ProjectsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2ProjectsUUIDVariables = {
  pathParams: DeleteV2ProjectsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2ProjectsUUID = (variables: DeleteV2ProjectsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2ProjectsUUIDError, undefined, {}, {}, DeleteV2ProjectsUUIDPathParams>({
    url: "/v2/projects/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2ProjectsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2ProjectsUUIDError, DeleteV2ProjectsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2ProjectsUUIDError, DeleteV2ProjectsUUIDVariables>(
    (variables: DeleteV2ProjectsUUIDVariables) => fetchDeleteV2ProjectsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ProjectsUUIDSitesPathParams = {
  uuid: string;
};

export type GetV2ProjectsUUIDSitesQueryParams = {
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-name
   */
  sort?: string;
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2ProjectsUUIDSitesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDSitesResponse = {
  data?: {
    uuid?: string;
    name?: string;
    framework_key?: string;
    description?: string;
    control_site?: number;
    status?: string;
    readable_status?: string;
    number_of_trees_planted?: number;
    start_date?: string;
    created_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2ProjectsUUIDSitesVariables = {
  pathParams: GetV2ProjectsUUIDSitesPathParams;
  queryParams?: GetV2ProjectsUUIDSitesQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Filters : status  |  Available Searches: name  |  Available Sort Options: name, status, number_of_trees_planted, created_at, updated_at
 */
export const fetchGetV2ProjectsUUIDSites = (variables: GetV2ProjectsUUIDSitesVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2ProjectsUUIDSitesResponse,
    GetV2ProjectsUUIDSitesError,
    undefined,
    {},
    GetV2ProjectsUUIDSitesQueryParams,
    GetV2ProjectsUUIDSitesPathParams
  >({ url: "/v2/projects/{uuid}/sites", method: "get", ...variables, signal });

/**
 * Available Filters : status  |  Available Searches: name  |  Available Sort Options: name, status, number_of_trees_planted, created_at, updated_at
 */
export const useGetV2ProjectsUUIDSites = <TData = GetV2ProjectsUUIDSitesResponse>(
  variables: GetV2ProjectsUUIDSitesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectsUUIDSitesResponse, GetV2ProjectsUUIDSitesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectsUUIDSitesResponse, GetV2ProjectsUUIDSitesError, TData>(
    queryKeyFn({ path: "/v2/projects/{UUID}/sites", operationId: "getV2ProjectsUUIDSites", variables }),
    ({ signal }) => fetchGetV2ProjectsUUIDSites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ProjectsUUIDNurseriesPathParams = {
  uuid: string;
};

export type GetV2ProjectsUUIDNurseriesQueryParams = {
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-name
   */
  sort?: string;
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2ProjectsUUIDNurseriesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDNurseriesResponse = {
  data?: {
    uuid?: string;
    name?: string;
    project?: {
      id?: string;
      uuid?: string;
      status?: string;
      name?: string;
      organisation?: {
        uuid?: string;
        type?: string;
        private?: boolean;
        name?: string;
        phone?: string;
        currency?: string;
        states?: string[];
        loan_status_types?: string[];
        land_systems?: string[];
        fund_utilisation?: string[];
        detailed_intervention_types?: string[];
        account_number_1?: string;
        account_number_2?: string;
        approach_of_marginalized_communities?: string;
        community_engagement_numbers_marginalized?: string;
        founding_date?: string;
        description?: string;
        leadership_team?: string;
        countries?: string[];
        languages?: string[];
        project_pitches?: {
          id?: string;
          uuid?: string;
          status?: string;
          readable_status?: string;
          organisation_id?: string;
          funding_programmes?: {
            id?: number;
            uuid?: string;
            name?: string;
            description?: string;
            read_more_url?: string;
            organisation_types?: string[];
            location?: string;
            status?: string;
          };
          tree_species?: {
            uuid?: string;
            name?: string;
            amount?: number;
            type?: string;
            collection?: string;
          }[];
          project_name?: string;
          how_discovered?: string;
          project_objectives?: string;
          project_country?: string[];
          project_county_district?: string;
          restoration_intervention_types?: string[];
          land_systems?: string[];
          tree_restoration_practices?: string[];
          total_hectares?: number;
          project_budget?: number;
          total_trees?: number;
          capacity_building_needs?: string[];
          additional?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          restoration_photos?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          cover?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          proof_of_land_tenure_mou?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          }[];
          detailed_project_budget?: {
            uuid?: string;
            url?: string;
            thumb_url?: string;
            collection_name?: string;
            title?: string;
            file_name?: string;
            mime_type?: string;
            size?: number;
            lat?: number;
            lng?: number;
            is_public?: boolean;
            created_at?: string;
          };
          expected_active_restoration_start_date?: string;
          expected_active_restoration_end_date?: string;
          description_of_project_timeline?: string;
          proj_partner_info?: string;
          land_tenure_proj_area?: string[];
          landholder_comm_engage?: string;
          proj_success_risks?: string;
          monitor_eval_plan?: string;
          proj_boundary?: string;
          sustainable_dev_goals?: string[];
          proj_area_description?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          proposed_num_sites?: number;
          environmental_goals?: string;
          main_degradation_causes?: string;
          seedlings_source?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          proposed_num_nurseries?: number;
          curr_land_degradation?: string;
          proj_impact_socieconom?: string;
          proj_impact_foodsec?: string;
          proj_impact_watersec?: string;
          proj_impact_jobtypes?: string;
          /**
           * @minimum 0
           * @maximum 4294967295
           */
          num_jobs_created?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_men?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_women?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_18to35?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_employees_older35?: number;
          proj_beneficiaries?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_women?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_small?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_large?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_youth?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_scheduled_classes?: number;
          /**
           * @minimum 0
           * @maximum 100
           */
          pct_beneficiaries_scheduled_tribes?: number;
          monitoring_evaluation_plan?: string;
          main_causes_of_degradation?: string;
          deleted_at?: string;
          created_at?: string;
          updated_at?: string;
        }[];
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        web_url?: string;
        facebook_url?: string;
        instagram_url?: string;
        linkedin_url?: string;
        twitter_url?: string;
        hq_street_1?: string;
        hq_street_2?: string;
        hq_city?: string;
        hq_state?: string;
        hq_zipcode?: string;
        hq_country?: string;
        fin_start_month?: number;
        /**
         * @format float
         */
        fin_budget_3year?: number;
        /**
         * @format float
         */
        fin_budget_2year?: number;
        /**
         * @format float
         */
        fin_budget_1year?: number;
        /**
         * @format float
         */
        fin_budget_current_year?: number;
        /**
         * @format float
         */
        ha_restored_total?: number;
        /**
         * @format float
         */
        ha_restored_3year?: number;
        relevant_experience_years?: number;
        trees_grown_total?: number;
        trees_grown_3year?: number;
        tree_care_approach?: string;
        ft_permanent_employees?: number;
        pt_permanent_employees?: number;
        temp_employees?: number;
        female_employees?: number;
        male_employees?: number;
        young_employees?: number;
        additional_funding_details?: string;
        community_experience?: string;
        total_engaged_community_members_3yr?: number;
        percent_engaged_women_3yr?: number;
        percent_engaged_men_3yr?: number;
        percent_engaged_under_35_3yr?: number;
        percent_engaged_over_35_3yr?: number;
        percent_engaged_smallholder_3yr?: number;
        total_trees_grown?: number;
        avg_tree_survival_rate?: number;
        tree_maintenance_aftercare_approach?: string;
        restored_areas_description?: string;
        monitoring_evaluation_experience?: string;
        funding_history?: string;
        engagement_farmers?: string[];
        engagement_women?: string[];
        engagement_youth?: string[];
        engagement_non_youth?: string[];
        tree_restoration_practices?: string[];
        business_model?: string;
        subtype?: string;
        organisation_revenue_this_year?: number;
        shapefiles?: {
          uuid?: string;
          shapefileable_type?: string;
          shapefileable_id?: number;
          geojson?: string;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        bank_statements?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        previous_annual_reports?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        logo?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        reference?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_2year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_last_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_this_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        op_budget_next_year?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        legal_registration?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg slug: name
         */
        tags?: string[];
      };
      planting_start_date?: string;
      framework_key?: string;
      framework_uuid?: string;
      has_monitoring_data?: boolean;
    };
    establishment_date?: string;
    framework_key?: string;
    framework_uuid?: string;
    status?: string;
    readable_status?: string;
    start_date?: string;
    created_date?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2ProjectsUUIDNurseriesVariables = {
  pathParams: GetV2ProjectsUUIDNurseriesPathParams;
  queryParams?: GetV2ProjectsUUIDNurseriesQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Filters : status  |  Available Searches: name  |  Available Sort Options: name, status, created_at, updated_at
 */
export const fetchGetV2ProjectsUUIDNurseries = (variables: GetV2ProjectsUUIDNurseriesVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2ProjectsUUIDNurseriesResponse,
    GetV2ProjectsUUIDNurseriesError,
    undefined,
    {},
    GetV2ProjectsUUIDNurseriesQueryParams,
    GetV2ProjectsUUIDNurseriesPathParams
  >({ url: "/v2/projects/{uuid}/nurseries", method: "get", ...variables, signal });

/**
 * Available Filters : status  |  Available Searches: name  |  Available Sort Options: name, status, created_at, updated_at
 */
export const useGetV2ProjectsUUIDNurseries = <TData = GetV2ProjectsUUIDNurseriesResponse>(
  variables: GetV2ProjectsUUIDNurseriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectsUUIDNurseriesResponse, GetV2ProjectsUUIDNurseriesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectsUUIDNurseriesResponse, GetV2ProjectsUUIDNurseriesError, TData>(
    queryKeyFn({ path: "/v2/projects/{UUID}/nurseries", operationId: "getV2ProjectsUUIDNurseries", variables }),
    ({ signal }) => fetchGetV2ProjectsUUIDNurseries({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ProjectsUUIDTasksPathParams = {
  uuid: string;
};

export type GetV2ProjectsUUIDTasksQueryParams = {
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2ProjectsUUIDTasksError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDTasksResponse = {
  data?: {
    uuid?: string;
    project?: Record<string, any>;
    period_key?: string;
    status?: string;
    readable_status?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2ProjectsUUIDTasksVariables = {
  pathParams: GetV2ProjectsUUIDTasksPathParams;
  queryParams?: GetV2ProjectsUUIDTasksQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Sort : period_key (year-month) and status
 */
export const fetchGetV2ProjectsUUIDTasks = (variables: GetV2ProjectsUUIDTasksVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2ProjectsUUIDTasksResponse,
    GetV2ProjectsUUIDTasksError,
    undefined,
    {},
    GetV2ProjectsUUIDTasksQueryParams,
    GetV2ProjectsUUIDTasksPathParams
  >({ url: "/v2/projects/{uuid}/tasks", method: "get", ...variables, signal });

/**
 * Available Sort : period_key (year-month) and status
 */
export const useGetV2ProjectsUUIDTasks = <TData = GetV2ProjectsUUIDTasksResponse>(
  variables: GetV2ProjectsUUIDTasksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectsUUIDTasksResponse, GetV2ProjectsUUIDTasksError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectsUUIDTasksResponse, GetV2ProjectsUUIDTasksError, TData>(
    queryKeyFn({ path: "/v2/projects/{UUID}/tasks", operationId: "getV2ProjectsUUIDTasks", variables }),
    ({ signal }) => fetchGetV2ProjectsUUIDTasks({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2OrganisationsUUIDTasksPathParams = {
  uuid: string;
};

export type GetV2OrganisationsUUIDTasksQueryParams = {
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2OrganisationsUUIDTasksError = Fetcher.ErrorWrapper<undefined>;

export type GetV2OrganisationsUUIDTasksResponse = {
  data?: {
    uuid?: string;
    project?: Record<string, any>;
    period_key?: string;
    status?: string;
    readable_status?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2OrganisationsUUIDTasksVariables = {
  pathParams: GetV2OrganisationsUUIDTasksPathParams;
  queryParams?: GetV2OrganisationsUUIDTasksQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Sort : period_key (year-month) and status
 */
export const fetchGetV2OrganisationsUUIDTasks = (
  variables: GetV2OrganisationsUUIDTasksVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2OrganisationsUUIDTasksResponse,
    GetV2OrganisationsUUIDTasksError,
    undefined,
    {},
    GetV2OrganisationsUUIDTasksQueryParams,
    GetV2OrganisationsUUIDTasksPathParams
  >({ url: "/v2/organisations/{uuid}/tasks", method: "get", ...variables, signal });

/**
 * Available Sort : period_key (year-month) and status
 */
export const useGetV2OrganisationsUUIDTasks = <TData = GetV2OrganisationsUUIDTasksResponse>(
  variables: GetV2OrganisationsUUIDTasksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2OrganisationsUUIDTasksResponse, GetV2OrganisationsUUIDTasksError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2OrganisationsUUIDTasksResponse, GetV2OrganisationsUUIDTasksError, TData>(
    queryKeyFn({ path: "/v2/organisations/{UUID}/tasks", operationId: "getV2OrganisationsUUIDTasks", variables }),
    ({ signal }) => fetchGetV2OrganisationsUUIDTasks({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2TasksUUIDPathParams = {
  uuid: string;
};

export type GetV2TasksUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2TasksUUIDResponse = {
  data?: {
    uuid?: string;
    project?: Record<string, any>;
    period_key?: string;
    status?: string;
    readable_status?: string;
  }[];
};

export type GetV2TasksUUIDVariables = {
  pathParams: GetV2TasksUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2TasksUUID = (variables: GetV2TasksUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2TasksUUIDResponse, GetV2TasksUUIDError, undefined, {}, {}, GetV2TasksUUIDPathParams>({
    url: "/v2/tasks/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2TasksUUID = <TData = GetV2TasksUUIDResponse>(
  variables: GetV2TasksUUIDVariables,
  options?: Omit<reactQuery.UseQueryOptions<GetV2TasksUUIDResponse, GetV2TasksUUIDError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2TasksUUIDResponse, GetV2TasksUUIDError, TData>(
    queryKeyFn({ path: "/v2/tasks/{UUID}", operationId: "getV2TasksUUID", variables }),
    ({ signal }) => fetchGetV2TasksUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2TasksUUIDReportsPathParams = {
  uuid: string;
};

export type GetV2TasksUUIDReportsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2TasksUUIDReportsResponse = {
  data?: {
    uuid?: number;
    type?: string;
    status?: string;
    /**
     * @format date-time
     */
    due_at?: string;
    title?: string;
  }[];
};

export type GetV2TasksUUIDReportsVariables = {
  pathParams: GetV2TasksUUIDReportsPathParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Sort : period_key (year-month) and status
 */
export const fetchGetV2TasksUUIDReports = (variables: GetV2TasksUUIDReportsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2TasksUUIDReportsResponse,
    GetV2TasksUUIDReportsError,
    undefined,
    {},
    {},
    GetV2TasksUUIDReportsPathParams
  >({ url: "/v2/tasks/{uuid}/reports", method: "get", ...variables, signal });

/**
 * Available Sort : period_key (year-month) and status
 */
export const useGetV2TasksUUIDReports = <TData = GetV2TasksUUIDReportsResponse>(
  variables: GetV2TasksUUIDReportsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2TasksUUIDReportsResponse, GetV2TasksUUIDReportsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2TasksUUIDReportsResponse, GetV2TasksUUIDReportsError, TData>(
    queryKeyFn({ path: "/v2/tasks/{UUID}/reports", operationId: "getV2TasksUUIDReports", variables }),
    ({ signal }) => fetchGetV2TasksUUIDReports({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2TasksUUIDSubmitPathParams = {
  uuid: string;
};

export type PutV2TasksUUIDSubmitError = Fetcher.ErrorWrapper<undefined>;

export type PutV2TasksUUIDSubmitVariables = {
  pathParams: PutV2TasksUUIDSubmitPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2TasksUUIDSubmit = (variables: PutV2TasksUUIDSubmitVariables, signal?: AbortSignal) =>
  apiFetch<undefined, PutV2TasksUUIDSubmitError, undefined, {}, {}, PutV2TasksUUIDSubmitPathParams>({
    url: "/v2/tasks/{uuid}/submit",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2TasksUUIDSubmit = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PutV2TasksUUIDSubmitError, PutV2TasksUUIDSubmitVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2TasksUUIDSubmitError, PutV2TasksUUIDSubmitVariables>(
    (variables: PutV2TasksUUIDSubmitVariables) => fetchPutV2TasksUUIDSubmit({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ENTITYUUIDPathParams = {
  /**
   * allowed values projects/sites/nurseries/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2ENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ENTITYUUIDResponse = {
  data?: Record<string, any>;
};

export type GetV2ENTITYUUIDVariables = {
  pathParams: GetV2ENTITYUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ENTITYUUID = (variables: GetV2ENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2ENTITYUUIDResponse, GetV2ENTITYUUIDError, undefined, {}, {}, GetV2ENTITYUUIDPathParams>({
    url: "/v2/{entity}/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ENTITYUUID = <TData = GetV2ENTITYUUIDResponse>(
  variables: GetV2ENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ENTITYUUIDResponse, GetV2ENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ENTITYUUIDResponse, GetV2ENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/{ENTITY}/{UUID}", operationId: "getV2ENTITYUUID", variables }),
    ({ signal }) => fetchGetV2ENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FormsSitesUUIDPathParams = {
  uuid: string;
};

export type GetV2FormsSitesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsSitesUUIDResponse = {
  data?: {
    uuid?: string;
    name?: string;
    status?: string;
    form?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    answers?: {
      question_id?: number;
      value?: string;
      options?: string[];
    }[];
  }[];
};

export type GetV2FormsSitesUUIDVariables = {
  pathParams: GetV2FormsSitesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsSitesUUID = (variables: GetV2FormsSitesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2FormsSitesUUIDResponse, GetV2FormsSitesUUIDError, undefined, {}, {}, GetV2FormsSitesUUIDPathParams>({
    url: "/v2/forms/sites/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2FormsSitesUUID = <TData = GetV2FormsSitesUUIDResponse>(
  variables: GetV2FormsSitesUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FormsSitesUUIDResponse, GetV2FormsSitesUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsSitesUUIDResponse, GetV2FormsSitesUUIDError, TData>(
    queryKeyFn({ path: "/v2/forms/sites/{UUID}", operationId: "getV2FormsSitesUUID", variables }),
    ({ signal }) => fetchGetV2FormsSitesUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminProjectPitchesExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminProjectPitchesExportVariables = ApiContext["fetcherOptions"];

export const fetchGetV2AdminProjectPitchesExport = (
  variables: GetV2AdminProjectPitchesExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<Record<string, any>, GetV2AdminProjectPitchesExportError, undefined, {}, {}, {}>({
    url: "/v2/admin/project-pitches/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminProjectPitchesExport = <TData = Record<string, any>>(
  variables: GetV2AdminProjectPitchesExportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Record<string, any>, GetV2AdminProjectPitchesExportError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Record<string, any>, GetV2AdminProjectPitchesExportError, TData>(
    queryKeyFn({ path: "/v2/admin/project-pitches/export", operationId: "getV2AdminProjectPitchesExport", variables }),
    ({ signal }) => fetchGetV2AdminProjectPitchesExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ProjectPitchesQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2ProjectPitchesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectPitchesResponse = {
  data?: {
    id?: string;
    uuid?: string;
    status?: string;
    readable_status?: string;
    organisation_id?: string;
    funding_programmes?: {
      id?: number;
      uuid?: string;
      name?: string;
      description?: string;
      read_more_url?: string;
      organisation_types?: string[];
      location?: string;
      status?: string;
    };
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_name?: string;
    how_discovered?: string;
    project_objectives?: string;
    project_country?: string[];
    project_county_district?: string;
    restoration_intervention_types?: string[];
    land_systems?: string[];
    tree_restoration_practices?: string[];
    total_hectares?: number;
    project_budget?: number;
    total_trees?: number;
    capacity_building_needs?: string[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    restoration_photos?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    proof_of_land_tenure_mou?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    detailed_project_budget?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    expected_active_restoration_start_date?: string;
    expected_active_restoration_end_date?: string;
    description_of_project_timeline?: string;
    proj_partner_info?: string;
    land_tenure_proj_area?: string[];
    landholder_comm_engage?: string;
    proj_success_risks?: string;
    monitor_eval_plan?: string;
    proj_boundary?: string;
    sustainable_dev_goals?: string[];
    proj_area_description?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_sites?: number;
    environmental_goals?: string;
    main_degradation_causes?: string;
    seedlings_source?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    proposed_num_nurseries?: number;
    curr_land_degradation?: string;
    proj_impact_socieconom?: string;
    proj_impact_foodsec?: string;
    proj_impact_watersec?: string;
    proj_impact_jobtypes?: string;
    /**
     * @minimum 0
     * @maximum 4294967295
     */
    num_jobs_created?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_men?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_18to35?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_employees_older35?: number;
    proj_beneficiaries?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_women?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_small?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_large?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_youth?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_classes?: number;
    /**
     * @minimum 0
     * @maximum 100
     */
    pct_beneficiaries_scheduled_tribes?: number;
    monitoring_evaluation_plan?: string;
    main_causes_of_degradation?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2ProjectPitchesVariables = {
  queryParams?: GetV2ProjectPitchesQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectPitches = (variables: GetV2ProjectPitchesVariables, signal?: AbortSignal) =>
  apiFetch<GetV2ProjectPitchesResponse, GetV2ProjectPitchesError, undefined, {}, GetV2ProjectPitchesQueryParams, {}>({
    url: "/v2/project-pitches",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ProjectPitches = <TData = GetV2ProjectPitchesResponse>(
  variables: GetV2ProjectPitchesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectPitchesResponse, GetV2ProjectPitchesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectPitchesResponse, GetV2ProjectPitchesError, TData>(
    queryKeyFn({ path: "/v2/project-pitches", operationId: "getV2ProjectPitches", variables }),
    ({ signal }) => fetchGetV2ProjectPitches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2ProjectPitchesError = Fetcher.ErrorWrapper<undefined>;

export type PostV2ProjectPitchesResponse = {
  id?: string;
  uuid?: string;
  status?: string;
  readable_status?: string;
  organisation_id?: string;
  funding_programmes?: {
    id?: number;
    uuid?: string;
    name?: string;
    description?: string;
    read_more_url?: string;
    organisation_types?: string[];
    location?: string;
    status?: string;
  };
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  project_name?: string;
  how_discovered?: string;
  project_objectives?: string;
  project_country?: string[];
  project_county_district?: string;
  restoration_intervention_types?: string[];
  land_systems?: string[];
  tree_restoration_practices?: string[];
  total_hectares?: number;
  project_budget?: number;
  total_trees?: number;
  capacity_building_needs?: string[];
  additional?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  restoration_photos?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  proof_of_land_tenure_mou?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  detailed_project_budget?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  expected_active_restoration_start_date?: string;
  expected_active_restoration_end_date?: string;
  description_of_project_timeline?: string;
  proj_partner_info?: string;
  land_tenure_proj_area?: string[];
  landholder_comm_engage?: string;
  proj_success_risks?: string;
  monitor_eval_plan?: string;
  proj_boundary?: string;
  sustainable_dev_goals?: string[];
  proj_area_description?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_sites?: number;
  environmental_goals?: string;
  main_degradation_causes?: string;
  seedlings_source?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_nurseries?: number;
  curr_land_degradation?: string;
  proj_impact_socieconom?: string;
  proj_impact_foodsec?: string;
  proj_impact_watersec?: string;
  proj_impact_jobtypes?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  num_jobs_created?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_men?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_18to35?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_older35?: number;
  proj_beneficiaries?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_small?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_large?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_youth?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_classes?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_tribes?: number;
  monitoring_evaluation_plan?: string;
  main_causes_of_degradation?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PostV2ProjectPitchesRequestBody = {
  organisation_id?: string;
  project_name?: string;
  project_objectives?: string;
  how_discovered?: string;
  project_country?: string[];
  project_county_district?: string;
  land_systems?: string[];
  tree_restoration_practices?: string[];
  restoration_intervention_types?: string[];
  capacity_building_needs?: string[];
  total_trees?: number;
  total_hectares?: number;
  project_budget?: number;
  expected_active_restoration_start_date?: string;
  expected_active_restoration_end_date?: string;
  description_of_project_timeline?: string;
  proj_partner_info?: string;
  land_tenure_proj_area?: string[];
  landholder_comm_engage?: string;
  proj_success_risks?: string;
  monitor_eval_plan?: string;
  proj_boundary?: string;
  sustainable_dev_goals?: string[];
  proj_area_description?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_sites?: number;
  environmental_goals?: string;
  main_degradation_causes?: string;
  seedlings_source?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_nurseries?: number;
  curr_land_degradation?: string;
  proj_impact_socieconom?: string;
  proj_impact_foodsec?: string;
  proj_impact_watersec?: string;
  proj_impact_jobtypes?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  num_jobs_created?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_men?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_18to35?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_older35?: number;
  proj_beneficiaries?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_small?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_large?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_youth?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_classes?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_tribes?: number;
  monitoring_evaluation_plan?: string;
  main_causes_of_degradation?: string;
};

export type PostV2ProjectPitchesVariables = {
  body?: PostV2ProjectPitchesRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2ProjectPitches = (variables: PostV2ProjectPitchesVariables, signal?: AbortSignal) =>
  apiFetch<PostV2ProjectPitchesResponse, PostV2ProjectPitchesError, PostV2ProjectPitchesRequestBody, {}, {}, {}>({
    url: "/v2/project-pitches",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2ProjectPitches = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2ProjectPitchesResponse,
      PostV2ProjectPitchesError,
      PostV2ProjectPitchesVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostV2ProjectPitchesResponse, PostV2ProjectPitchesError, PostV2ProjectPitchesVariables>(
    (variables: PostV2ProjectPitchesVariables) => fetchPostV2ProjectPitches({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ProjectPitchesUUIDPathParams = {
  uuid: string;
};

export type GetV2ProjectPitchesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectPitchesUUIDResponse = {
  id?: string;
  uuid?: string;
  status?: string;
  readable_status?: string;
  organisation_id?: string;
  funding_programmes?: {
    id?: number;
    uuid?: string;
    name?: string;
    description?: string;
    read_more_url?: string;
    organisation_types?: string[];
    location?: string;
    status?: string;
  };
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  project_name?: string;
  how_discovered?: string;
  project_objectives?: string;
  project_country?: string[];
  project_county_district?: string;
  restoration_intervention_types?: string[];
  land_systems?: string[];
  tree_restoration_practices?: string[];
  total_hectares?: number;
  project_budget?: number;
  total_trees?: number;
  capacity_building_needs?: string[];
  additional?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  restoration_photos?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  proof_of_land_tenure_mou?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  detailed_project_budget?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  expected_active_restoration_start_date?: string;
  expected_active_restoration_end_date?: string;
  description_of_project_timeline?: string;
  proj_partner_info?: string;
  land_tenure_proj_area?: string[];
  landholder_comm_engage?: string;
  proj_success_risks?: string;
  monitor_eval_plan?: string;
  proj_boundary?: string;
  sustainable_dev_goals?: string[];
  proj_area_description?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_sites?: number;
  environmental_goals?: string;
  main_degradation_causes?: string;
  seedlings_source?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_nurseries?: number;
  curr_land_degradation?: string;
  proj_impact_socieconom?: string;
  proj_impact_foodsec?: string;
  proj_impact_watersec?: string;
  proj_impact_jobtypes?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  num_jobs_created?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_men?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_18to35?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_older35?: number;
  proj_beneficiaries?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_small?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_large?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_youth?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_classes?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_tribes?: number;
  monitoring_evaluation_plan?: string;
  main_causes_of_degradation?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type GetV2ProjectPitchesUUIDVariables = {
  pathParams: GetV2ProjectPitchesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectPitchesUUID = (variables: GetV2ProjectPitchesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2ProjectPitchesUUIDResponse,
    GetV2ProjectPitchesUUIDError,
    undefined,
    {},
    {},
    GetV2ProjectPitchesUUIDPathParams
  >({ url: "/v2/project-pitches/{uuid}", method: "get", ...variables, signal });

export const useGetV2ProjectPitchesUUID = <TData = GetV2ProjectPitchesUUIDResponse>(
  variables: GetV2ProjectPitchesUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectPitchesUUIDResponse, GetV2ProjectPitchesUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectPitchesUUIDResponse, GetV2ProjectPitchesUUIDError, TData>(
    queryKeyFn({ path: "/v2/project-pitches/{UUID}", operationId: "getV2ProjectPitchesUUID", variables }),
    ({ signal }) => fetchGetV2ProjectPitchesUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchV2ProjectPitchesUUIDPathParams = {
  uuid: string;
};

export type PatchV2ProjectPitchesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2ProjectPitchesUUIDResponse = {
  id?: string;
  uuid?: string;
  status?: string;
  readable_status?: string;
  organisation_id?: string;
  funding_programmes?: {
    id?: number;
    uuid?: string;
    name?: string;
    description?: string;
    read_more_url?: string;
    organisation_types?: string[];
    location?: string;
    status?: string;
  };
  tree_species?: {
    uuid?: string;
    name?: string;
    amount?: number;
    type?: string;
    collection?: string;
  }[];
  project_name?: string;
  how_discovered?: string;
  project_objectives?: string;
  project_country?: string[];
  project_county_district?: string;
  restoration_intervention_types?: string[];
  land_systems?: string[];
  tree_restoration_practices?: string[];
  total_hectares?: number;
  project_budget?: number;
  total_trees?: number;
  capacity_building_needs?: string[];
  additional?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  restoration_photos?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  proof_of_land_tenure_mou?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  }[];
  detailed_project_budget?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  expected_active_restoration_start_date?: string;
  expected_active_restoration_end_date?: string;
  description_of_project_timeline?: string;
  proj_partner_info?: string;
  land_tenure_proj_area?: string[];
  landholder_comm_engage?: string;
  proj_success_risks?: string;
  monitor_eval_plan?: string;
  proj_boundary?: string;
  sustainable_dev_goals?: string[];
  proj_area_description?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_sites?: number;
  environmental_goals?: string;
  main_degradation_causes?: string;
  seedlings_source?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_nurseries?: number;
  curr_land_degradation?: string;
  proj_impact_socieconom?: string;
  proj_impact_foodsec?: string;
  proj_impact_watersec?: string;
  proj_impact_jobtypes?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  num_jobs_created?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_men?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_18to35?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_older35?: number;
  proj_beneficiaries?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_small?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_large?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_youth?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_classes?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_tribes?: number;
  monitoring_evaluation_plan?: string;
  main_causes_of_degradation?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PatchV2ProjectPitchesUUIDRequestBody = {
  funding_programme_id?: number;
  project_name?: string;
  project_objectives?: string;
  project_county_district?: string;
  how_discovered?: string;
  land_systems?: string[];
  tree_restoration_practices?: string[];
  project_budget?: number;
  project_country?: string[];
  restoration_intervention_types?: string[];
  capacity_building_needs?: string[];
  total_hectares?: number;
  total_trees?: number;
  expected_active_restoration_start_date?: string;
  expected_active_restoration_end_date?: string;
  description_of_project_timeline?: string;
  proj_partner_info?: string;
  land_tenure_proj_area?: string[];
  landholder_comm_engage?: string;
  proj_success_risks?: string;
  monitor_eval_plan?: string;
  proj_boundary?: string;
  sustainable_dev_goals?: string[];
  proj_area_description?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_sites?: number;
  environmental_goals?: string;
  main_degradation_causes?: string;
  seedlings_source?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  proposed_num_nurseries?: number;
  curr_land_degradation?: string;
  proj_impact_socieconom?: string;
  proj_impact_foodsec?: string;
  proj_impact_watersec?: string;
  proj_impact_jobtypes?: string;
  /**
   * @minimum 0
   * @maximum 4294967295
   */
  num_jobs_created?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_men?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_18to35?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_employees_older35?: number;
  proj_beneficiaries?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_women?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_small?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_large?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_youth?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_classes?: number;
  /**
   * @minimum 0
   * @maximum 100
   */
  pct_beneficiaries_scheduled_tribes?: number;
  monitoring_evaluation_plan?: string;
  main_causes_of_degradation?: string;
};

export type PatchV2ProjectPitchesUUIDVariables = {
  body?: PatchV2ProjectPitchesUUIDRequestBody;
  pathParams: PatchV2ProjectPitchesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2ProjectPitchesUUID = (variables: PatchV2ProjectPitchesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    PatchV2ProjectPitchesUUIDResponse,
    PatchV2ProjectPitchesUUIDError,
    PatchV2ProjectPitchesUUIDRequestBody,
    {},
    {},
    PatchV2ProjectPitchesUUIDPathParams
  >({ url: "/v2/project-pitches/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2ProjectPitchesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2ProjectPitchesUUIDResponse,
      PatchV2ProjectPitchesUUIDError,
      PatchV2ProjectPitchesUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2ProjectPitchesUUIDResponse,
    PatchV2ProjectPitchesUUIDError,
    PatchV2ProjectPitchesUUIDVariables
  >(
    (variables: PatchV2ProjectPitchesUUIDVariables) =>
      fetchPatchV2ProjectPitchesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2ProjectPitchesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2ProjectPitchesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2ProjectPitchesUUIDVariables = {
  pathParams: DeleteV2ProjectPitchesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2ProjectPitchesUUID = (variables: DeleteV2ProjectPitchesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2ProjectPitchesUUIDError, undefined, {}, {}, DeleteV2ProjectPitchesUUIDPathParams>({
    url: "/v2/project-pitches/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2ProjectPitchesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2ProjectPitchesUUIDError, DeleteV2ProjectPitchesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2ProjectPitchesUUIDError, DeleteV2ProjectPitchesUUIDVariables>(
    (variables: DeleteV2ProjectPitchesUUIDVariables) =>
      fetchDeleteV2ProjectPitchesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2ProjectPitchesSubmitUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2ProjectPitchesSubmitUUIDVariables = ApiContext["fetcherOptions"];

export const fetchPutV2ProjectPitchesSubmitUUID = (
  variables: PutV2ProjectPitchesSubmitUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PutV2ProjectPitchesSubmitUUIDError, undefined, {}, {}, {}>({
    url: "/v2/project-pitches/submit/{uuid}",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2ProjectPitchesSubmitUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PutV2ProjectPitchesSubmitUUIDError,
      PutV2ProjectPitchesSubmitUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2ProjectPitchesSubmitUUIDError, PutV2ProjectPitchesSubmitUUIDVariables>(
    (variables: PutV2ProjectPitchesSubmitUUIDVariables) =>
      fetchPutV2ProjectPitchesSubmitUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ProjectPitchesUUIDSubmissionsPathParams = {
  uuid: string;
};

export type GetV2ProjectPitchesUUIDSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectPitchesUUIDSubmissionsResponse = {
  data?: {
    id?: string;
    uuid?: string;
    name?: string;
    form?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    stage?: {
      uuid?: string;
      name?: string;
      status?: string;
      readable_status?: string;
    };
    answers?: string;
    status?: string;
    readable_status?: string;
    audits?: {
      id?: number;
      event?: string;
      user_id?: number;
      user_uuid?: string;
      old_values?: Record<string, any>;
      new_values?: Record<string, any>;
      created_at?: string;
      updated_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
    updated_by?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
};

export type GetV2ProjectPitchesUUIDSubmissionsVariables = {
  pathParams: GetV2ProjectPitchesUUIDSubmissionsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectPitchesUUIDSubmissions = (
  variables: GetV2ProjectPitchesUUIDSubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2ProjectPitchesUUIDSubmissionsResponse,
    GetV2ProjectPitchesUUIDSubmissionsError,
    undefined,
    {},
    {},
    GetV2ProjectPitchesUUIDSubmissionsPathParams
  >({ url: "/v2/project-pitches/{uuid}/submissions", method: "get", ...variables, signal });

export const useGetV2ProjectPitchesUUIDSubmissions = <TData = GetV2ProjectPitchesUUIDSubmissionsResponse>(
  variables: GetV2ProjectPitchesUUIDSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetV2ProjectPitchesUUIDSubmissionsResponse,
      GetV2ProjectPitchesUUIDSubmissionsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetV2ProjectPitchesUUIDSubmissionsResponse,
    GetV2ProjectPitchesUUIDSubmissionsError,
    TData
  >(
    queryKeyFn({
      path: "/v2/project-pitches/{UUID}/submissions",
      operationId: "getV2ProjectPitchesUUIDSubmissions",
      variables
    }),
    ({ signal }) => fetchGetV2ProjectPitchesUUIDSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFormsSubmissionsUUIDPathParams = {
  uuid: string;
};

export type GetV2AdminFormsSubmissionsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsSubmissionsUUIDResponse = {
  id?: string;
  uuid?: string;
  name?: string;
  form?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  stage?: {
    uuid?: string;
    name?: string;
    status?: string;
    readable_status?: string;
  };
  answers?: string;
  status?: string;
  readable_status?: string;
  audits?: {
    id?: number;
    event?: string;
    user_id?: number;
    user_uuid?: string;
    old_values?: Record<string, any>;
    new_values?: Record<string, any>;
    created_at?: string;
    updated_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
  updated_by?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type GetV2AdminFormsSubmissionsUUIDVariables = {
  pathParams: GetV2AdminFormsSubmissionsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsSubmissionsUUID = (
  variables: GetV2AdminFormsSubmissionsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2AdminFormsSubmissionsUUIDResponse,
    GetV2AdminFormsSubmissionsUUIDError,
    undefined,
    {},
    {},
    GetV2AdminFormsSubmissionsUUIDPathParams
  >({ url: "/v2/admin/forms/submissions/{uuid}", method: "get", ...variables, signal });

export const useGetV2AdminFormsSubmissionsUUID = <TData = GetV2AdminFormsSubmissionsUUIDResponse>(
  variables: GetV2AdminFormsSubmissionsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFormsSubmissionsUUIDResponse, GetV2AdminFormsSubmissionsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFormsSubmissionsUUIDResponse, GetV2AdminFormsSubmissionsUUIDError, TData>(
    queryKeyFn({
      path: "/v2/admin/forms/submissions/{UUID}",
      operationId: "getV2AdminFormsSubmissionsUUID",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsSubmissionsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2AdminFormsSubmissionsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminFormsSubmissionsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFormsSubmissionsUUIDVariables = {
  pathParams: DeleteV2AdminFormsSubmissionsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFormsSubmissionsUUID = (
  variables: DeleteV2AdminFormsSubmissionsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminFormsSubmissionsUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminFormsSubmissionsUUIDPathParams
  >({ url: "/v2/admin/forms/submissions/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminFormsSubmissionsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminFormsSubmissionsUUIDError,
      DeleteV2AdminFormsSubmissionsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminFormsSubmissionsUUIDError,
    DeleteV2AdminFormsSubmissionsUUIDVariables
  >(
    (variables: DeleteV2AdminFormsSubmissionsUUIDVariables) =>
      fetchDeleteV2AdminFormsSubmissionsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminFormsSubmissionsUUIDExportPathParams = {
  uuid: string;
};

export type GetV2AdminFormsSubmissionsUUIDExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsSubmissionsUUIDExportVariables = {
  pathParams: GetV2AdminFormsSubmissionsUUIDExportPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsSubmissionsUUIDExport = (
  variables: GetV2AdminFormsSubmissionsUUIDExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Record<string, any>,
    GetV2AdminFormsSubmissionsUUIDExportError,
    undefined,
    {},
    {},
    GetV2AdminFormsSubmissionsUUIDExportPathParams
  >({ url: "/v2/admin/forms/submissions/{uuid}/export", method: "get", ...variables, signal });

export const useGetV2AdminFormsSubmissionsUUIDExport = <TData = Record<string, any>>(
  variables: GetV2AdminFormsSubmissionsUUIDExportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Record<string, any>, GetV2AdminFormsSubmissionsUUIDExportError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Record<string, any>, GetV2AdminFormsSubmissionsUUIDExportError, TData>(
    queryKeyFn({
      path: "/v2/admin/forms/submissions/{UUID}/export",
      operationId: "getV2AdminFormsSubmissionsUUIDExport",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsSubmissionsUUIDExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFormsSubmissionsQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminFormsSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsSubmissionsResponse = {
  data?: {
    id?: string;
    uuid?: string;
    name?: string;
    form?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    stage?: {
      uuid?: string;
      name?: string;
      status?: string;
      readable_status?: string;
    };
    answers?: string;
    status?: string;
    readable_status?: string;
    audits?: {
      id?: number;
      event?: string;
      user_id?: number;
      user_uuid?: string;
      old_values?: Record<string, any>;
      new_values?: Record<string, any>;
      created_at?: string;
      updated_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
    updated_by?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2AdminFormsSubmissionsVariables = {
  queryParams?: GetV2AdminFormsSubmissionsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsSubmissions = (variables: GetV2AdminFormsSubmissionsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminFormsSubmissionsResponse,
    GetV2AdminFormsSubmissionsError,
    undefined,
    {},
    GetV2AdminFormsSubmissionsQueryParams,
    {}
  >({ url: "/v2/admin/forms/submissions", method: "get", ...variables, signal });

export const useGetV2AdminFormsSubmissions = <TData = GetV2AdminFormsSubmissionsResponse>(
  variables: GetV2AdminFormsSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFormsSubmissionsResponse, GetV2AdminFormsSubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFormsSubmissionsResponse, GetV2AdminFormsSubmissionsError, TData>(
    queryKeyFn({ path: "/v2/admin/forms/submissions", operationId: "getV2AdminFormsSubmissions", variables }),
    ({ signal }) => fetchGetV2AdminFormsSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FormsMySubmissionsQueryParams = {
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2FormsMySubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsMySubmissionsResponse = {
  data?: {
    id?: string;
    uuid?: string;
    name?: string;
    form?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    stage?: {
      uuid?: string;
      name?: string;
      status?: string;
      readable_status?: string;
    };
    answers?: string;
    status?: string;
    readable_status?: string;
    audits?: {
      id?: number;
      event?: string;
      user_id?: number;
      user_uuid?: string;
      old_values?: Record<string, any>;
      new_values?: Record<string, any>;
      created_at?: string;
      updated_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
    updated_by?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2FormsMySubmissionsVariables = {
  queryParams?: GetV2FormsMySubmissionsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsMySubmissions = (variables: GetV2FormsMySubmissionsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2FormsMySubmissionsResponse,
    GetV2FormsMySubmissionsError,
    undefined,
    {},
    GetV2FormsMySubmissionsQueryParams,
    {}
  >({ url: "/v2/forms/my/submissions", method: "get", ...variables, signal });

export const useGetV2FormsMySubmissions = <TData = GetV2FormsMySubmissionsResponse>(
  variables: GetV2FormsMySubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FormsMySubmissionsResponse, GetV2FormsMySubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsMySubmissionsResponse, GetV2FormsMySubmissionsError, TData>(
    queryKeyFn({ path: "/v2/forms/my/submissions", operationId: "getV2FormsMySubmissions", variables }),
    ({ signal }) => fetchGetV2FormsMySubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FormsUUIDPathParams = {
  uuid: string;
};

export type GetV2FormsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsUUIDResponse = {
  id?: number;
  uuid?: string;
  type?: string;
  version?: number;
  title?: string;
  subtitle?: string;
  description?: string;
  framework_key?: string;
  duration?: string;
  deadline_at?: string;
  documentation?: string;
  documentation_label?: string;
  submission_message?: string;
  published?: boolean;
  stage_id?: string;
  options_other?: boolean;
  form_sections?: {
    order?: number;
    form_id?: number;
    form_questions?: {
      id?: number;
      uuid?: string;
      form_section_id?: number;
      label?: string;
      validation?: string[];
      parent_id?: string;
      linked_field_key?: string;
      children?: Record<string, any>[];
      multichoice?: boolean;
      order?: number;
      options?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      table_headers?: {
        id?: number;
        uuid?: string;
        form_question_id?: number;
        label?: string;
        order?: number;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      additional_text?: string;
      additional_url?: string;
      show_on_parent_condition?: boolean;
      input_type?:
        | "date"
        | "text"
        | "long-text"
        | "select"
        | "checkboxes"
        | "radio"
        | "number"
        | "image"
        | "file"
        | "conditional";
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    created_at?: string;
    updated_at?: string;
    deleted_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg. slug: name
   */
  tags?: string[];
  updated_by?: number;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type GetV2FormsUUIDVariables = {
  pathParams: GetV2FormsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsUUID = (variables: GetV2FormsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2FormsUUIDResponse, GetV2FormsUUIDError, undefined, {}, {}, GetV2FormsUUIDPathParams>({
    url: "/v2/forms/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2FormsUUID = <TData = GetV2FormsUUIDResponse>(
  variables: GetV2FormsUUIDVariables,
  options?: Omit<reactQuery.UseQueryOptions<GetV2FormsUUIDResponse, GetV2FormsUUIDError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsUUIDResponse, GetV2FormsUUIDError, TData>(
    queryKeyFn({ path: "/v2/forms/{UUID}", operationId: "getV2FormsUUID", variables }),
    ({ signal }) => fetchGetV2FormsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2AdminFundingProgrammeStageError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminFundingProgrammeStageResponse = {
  id?: number;
  uuid?: string;
  status?: string;
  deadline_at?: string;
  readable_status?: string;
  funding_programme_id?: number;
  name?: string;
  order?: number;
  forms?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PostV2AdminFundingProgrammeStageVariables = {
  body?: RequestBodies.PostV2AdminFundingProgrammeStageBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminFundingProgrammeStage = (
  variables: PostV2AdminFundingProgrammeStageVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2AdminFundingProgrammeStageResponse,
    PostV2AdminFundingProgrammeStageError,
    RequestBodies.PostV2AdminFundingProgrammeStageBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/funding-programme/stage", method: "post", ...variables, signal });

export const usePostV2AdminFundingProgrammeStage = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2AdminFundingProgrammeStageResponse,
      PostV2AdminFundingProgrammeStageError,
      PostV2AdminFundingProgrammeStageVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2AdminFundingProgrammeStageResponse,
    PostV2AdminFundingProgrammeStageError,
    PostV2AdminFundingProgrammeStageVariables
  >(
    (variables: PostV2AdminFundingProgrammeStageVariables) =>
      fetchPostV2AdminFundingProgrammeStage({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminFundingProgrammeStageUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFundingProgrammeStageUUIDResponse = {
  id?: number;
  uuid?: string;
  status?: string;
  deadline_at?: string;
  readable_status?: string;
  funding_programme_id?: number;
  name?: string;
  order?: number;
  forms?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type DeleteV2AdminFundingProgrammeStageUUIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFundingProgrammeStageUUID = (
  variables: DeleteV2AdminFundingProgrammeStageUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    DeleteV2AdminFundingProgrammeStageUUIDResponse,
    DeleteV2AdminFundingProgrammeStageUUIDError,
    undefined,
    {},
    {},
    {}
  >({ url: "/v2/admin/funding-programme/stage/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminFundingProgrammeStageUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteV2AdminFundingProgrammeStageUUIDResponse,
      DeleteV2AdminFundingProgrammeStageUUIDError,
      DeleteV2AdminFundingProgrammeStageUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    DeleteV2AdminFundingProgrammeStageUUIDResponse,
    DeleteV2AdminFundingProgrammeStageUUIDError,
    DeleteV2AdminFundingProgrammeStageUUIDVariables
  >(
    (variables: DeleteV2AdminFundingProgrammeStageUUIDVariables) =>
      fetchDeleteV2AdminFundingProgrammeStageUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AdminFundingProgrammeStageUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFundingProgrammeStageUUIDResponse = {
  id?: number;
  uuid?: string;
  status?: string;
  deadline_at?: string;
  readable_status?: string;
  funding_programme_id?: number;
  name?: string;
  order?: number;
  forms?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PatchV2AdminFundingProgrammeStageUUIDVariables = {
  body?: RequestBodies.PostV2AdminFundingProgrammeStageBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFundingProgrammeStageUUID = (
  variables: PatchV2AdminFundingProgrammeStageUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PatchV2AdminFundingProgrammeStageUUIDResponse,
    PatchV2AdminFundingProgrammeStageUUIDError,
    RequestBodies.PostV2AdminFundingProgrammeStageBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/funding-programme/stage/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2AdminFundingProgrammeStageUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2AdminFundingProgrammeStageUUIDResponse,
      PatchV2AdminFundingProgrammeStageUUIDError,
      PatchV2AdminFundingProgrammeStageUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2AdminFundingProgrammeStageUUIDResponse,
    PatchV2AdminFundingProgrammeStageUUIDError,
    PatchV2AdminFundingProgrammeStageUUIDVariables
  >(
    (variables: PatchV2AdminFundingProgrammeStageUUIDVariables) =>
      fetchPatchV2AdminFundingProgrammeStageUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FundingProgrammeQueryParams = {
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2FundingProgrammeError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FundingProgrammeResponse = {
  data?: {
    id?: number;
    uuid?: string;
    name?: string;
    description?: string;
    location?: string;
    read_more_url?: string;
    framework_key?: string;
    status?: string;
    organisation_types?: string[];
    stages?: {
      id?: number;
      uuid?: string;
      status?: string;
      deadline_at?: string;
      readable_status?: string;
      funding_programme_id?: number;
      name?: string;
      order?: number;
      forms?: {
        id?: number;
        uuid?: string;
        type?: string;
        version?: number;
        title?: string;
        subtitle?: string;
        description?: string;
        framework_key?: string;
        duration?: string;
        deadline_at?: string;
        documentation?: string;
        documentation_label?: string;
        submission_message?: string;
        published?: boolean;
        stage_id?: string;
        options_other?: boolean;
        form_sections?: {
          order?: number;
          form_id?: number;
          form_questions?: {
            id?: number;
            uuid?: string;
            form_section_id?: number;
            label?: string;
            validation?: string[];
            parent_id?: string;
            linked_field_key?: string;
            children?: Record<string, any>[];
            multichoice?: boolean;
            order?: number;
            options?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            table_headers?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            additional_text?: string;
            additional_url?: string;
            show_on_parent_condition?: boolean;
            input_type?:
              | "date"
              | "text"
              | "long-text"
              | "select"
              | "checkboxes"
              | "radio"
              | "number"
              | "image"
              | "file"
              | "conditional";
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        updated_by?: number;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    organisations?: {
      uuid?: string;
      name?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2FundingProgrammeVariables = {
  queryParams?: GetV2FundingProgrammeQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FundingProgramme = (variables: GetV2FundingProgrammeVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2FundingProgrammeResponse,
    GetV2FundingProgrammeError,
    undefined,
    {},
    GetV2FundingProgrammeQueryParams,
    {}
  >({ url: "/v2/funding-programme", method: "get", ...variables, signal });

export const useGetV2FundingProgramme = <TData = GetV2FundingProgrammeResponse>(
  variables: GetV2FundingProgrammeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FundingProgrammeResponse, GetV2FundingProgrammeError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FundingProgrammeResponse, GetV2FundingProgrammeError, TData>(
    queryKeyFn({ path: "/v2/funding-programme", operationId: "getV2FundingProgramme", variables }),
    ({ signal }) => fetchGetV2FundingProgramme({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFundingProgrammeQueryParams = {
  /**
   * page number you want results from
   */
  page?: number;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
};

export type GetV2AdminFundingProgrammeError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFundingProgrammeResponse = {
  data?: {
    id?: number;
    uuid?: string;
    name?: string;
    description?: string;
    location?: string;
    read_more_url?: string;
    framework_key?: string;
    status?: string;
    organisation_types?: string[];
    stages?: {
      id?: number;
      uuid?: string;
      status?: string;
      deadline_at?: string;
      readable_status?: string;
      funding_programme_id?: number;
      name?: string;
      order?: number;
      forms?: {
        id?: number;
        uuid?: string;
        type?: string;
        version?: number;
        title?: string;
        subtitle?: string;
        description?: string;
        framework_key?: string;
        duration?: string;
        deadline_at?: string;
        documentation?: string;
        documentation_label?: string;
        submission_message?: string;
        published?: boolean;
        stage_id?: string;
        options_other?: boolean;
        form_sections?: {
          order?: number;
          form_id?: number;
          form_questions?: {
            id?: number;
            uuid?: string;
            form_section_id?: number;
            label?: string;
            validation?: string[];
            parent_id?: string;
            linked_field_key?: string;
            children?: Record<string, any>[];
            multichoice?: boolean;
            order?: number;
            options?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            table_headers?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            additional_text?: string;
            additional_url?: string;
            show_on_parent_condition?: boolean;
            input_type?:
              | "date"
              | "text"
              | "long-text"
              | "select"
              | "checkboxes"
              | "radio"
              | "number"
              | "image"
              | "file"
              | "conditional";
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        updated_by?: number;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    organisations?: {
      uuid?: string;
      name?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2AdminFundingProgrammeVariables = {
  queryParams?: GetV2AdminFundingProgrammeQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFundingProgramme = (variables: GetV2AdminFundingProgrammeVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminFundingProgrammeResponse,
    GetV2AdminFundingProgrammeError,
    undefined,
    {},
    GetV2AdminFundingProgrammeQueryParams,
    {}
  >({ url: "/v2/admin/funding-programme", method: "get", ...variables, signal });

export const useGetV2AdminFundingProgramme = <TData = GetV2AdminFundingProgrammeResponse>(
  variables: GetV2AdminFundingProgrammeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFundingProgrammeResponse, GetV2AdminFundingProgrammeError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFundingProgrammeResponse, GetV2AdminFundingProgrammeError, TData>(
    queryKeyFn({ path: "/v2/admin/funding-programme", operationId: "getV2AdminFundingProgramme", variables }),
    ({ signal }) => fetchGetV2AdminFundingProgramme({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2AdminFundingProgrammeError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminFundingProgrammeResponse = {
  id?: number;
  uuid?: string;
  name?: string;
  description?: string;
  location?: string;
  read_more_url?: string;
  framework_key?: string;
  status?: string;
  organisation_types?: string[];
  stages?: {
    id?: number;
    uuid?: string;
    status?: string;
    deadline_at?: string;
    readable_status?: string;
    funding_programme_id?: number;
    name?: string;
    order?: number;
    forms?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  organisations?: {
    uuid?: string;
    name?: string;
  }[];
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PostV2AdminFundingProgrammeVariables = {
  body?: RequestBodies.PostV2FundingProgrammeBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminFundingProgramme = (
  variables: PostV2AdminFundingProgrammeVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2AdminFundingProgrammeResponse,
    PostV2AdminFundingProgrammeError,
    RequestBodies.PostV2FundingProgrammeBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/funding-programme", method: "post", ...variables, signal });

export const usePostV2AdminFundingProgramme = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2AdminFundingProgrammeResponse,
      PostV2AdminFundingProgrammeError,
      PostV2AdminFundingProgrammeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2AdminFundingProgrammeResponse,
    PostV2AdminFundingProgrammeError,
    PostV2AdminFundingProgrammeVariables
  >(
    (variables: PostV2AdminFundingProgrammeVariables) =>
      fetchPostV2AdminFundingProgramme({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FundingProgrammeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FundingProgrammeUUIDResponse = {
  id?: number;
  uuid?: string;
  name?: string;
  description?: string;
  location?: string;
  read_more_url?: string;
  framework_key?: string;
  status?: string;
  organisation_types?: string[];
  stages?: {
    id?: number;
    uuid?: string;
    status?: string;
    deadline_at?: string;
    readable_status?: string;
    funding_programme_id?: number;
    name?: string;
    order?: number;
    forms?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  organisations?: {
    uuid?: string;
    name?: string;
  }[];
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type GetV2FundingProgrammeUUIDVariables = {
  body?: RequestBodies.GetV2FundingProgrammeIDBody;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FundingProgrammeUUID = (variables: GetV2FundingProgrammeUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2FundingProgrammeUUIDResponse,
    GetV2FundingProgrammeUUIDError,
    RequestBodies.GetV2FundingProgrammeIDBody,
    {},
    {},
    {}
  >({ url: "/v2/funding-programme/{uuid}", method: "get", ...variables, signal });

export const useGetV2FundingProgrammeUUID = <TData = GetV2FundingProgrammeUUIDResponse>(
  variables: GetV2FundingProgrammeUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FundingProgrammeUUIDResponse, GetV2FundingProgrammeUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FundingProgrammeUUIDResponse, GetV2FundingProgrammeUUIDError, TData>(
    queryKeyFn({ path: "/v2/funding-programme/{UUID}", operationId: "getV2FundingProgrammeUUID", variables }),
    ({ signal }) => fetchGetV2FundingProgrammeUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFundingProgrammeUUIDPathParams = {
  uuid: string;
};

export type GetV2AdminFundingProgrammeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFundingProgrammeUUIDResponse = {
  id?: number;
  uuid?: string;
  name?: string;
  description?: string;
  location?: string;
  read_more_url?: string;
  framework_key?: string;
  status?: string;
  organisation_types?: string[];
  stages?: {
    id?: number;
    uuid?: string;
    status?: string;
    deadline_at?: string;
    readable_status?: string;
    funding_programme_id?: number;
    name?: string;
    order?: number;
    forms?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  organisations?: {
    uuid?: string;
    name?: string;
  }[];
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type GetV2AdminFundingProgrammeUUIDVariables = {
  body?: RequestBodies.GetV2FundingProgrammeIDBody;
  pathParams: GetV2AdminFundingProgrammeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFundingProgrammeUUID = (
  variables: GetV2AdminFundingProgrammeUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2AdminFundingProgrammeUUIDResponse,
    GetV2AdminFundingProgrammeUUIDError,
    RequestBodies.GetV2FundingProgrammeIDBody,
    {},
    {},
    GetV2AdminFundingProgrammeUUIDPathParams
  >({ url: "/v2/admin/funding-programme/{uuid}", method: "get", ...variables, signal });

export const useGetV2AdminFundingProgrammeUUID = <TData = GetV2AdminFundingProgrammeUUIDResponse>(
  variables: GetV2AdminFundingProgrammeUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFundingProgrammeUUIDResponse, GetV2AdminFundingProgrammeUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFundingProgrammeUUIDResponse, GetV2AdminFundingProgrammeUUIDError, TData>(
    queryKeyFn({
      path: "/v2/admin/funding-programme/{UUID}",
      operationId: "getV2AdminFundingProgrammeUUID",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFundingProgrammeUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2AdminFundingProgrammeUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminFundingProgrammeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminFundingProgrammeUUIDResponse = {
  id?: number;
  uuid?: string;
  name?: string;
  description?: string;
  location?: string;
  read_more_url?: string;
  framework_key?: string;
  status?: string;
  organisation_types?: string[];
  stages?: {
    id?: number;
    uuid?: string;
    status?: string;
    deadline_at?: string;
    readable_status?: string;
    funding_programme_id?: number;
    name?: string;
    order?: number;
    forms?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  organisations?: {
    uuid?: string;
    name?: string;
  }[];
  cover?: {
    uuid?: string;
    url?: string;
    thumb_url?: string;
    collection_name?: string;
    title?: string;
    file_name?: string;
    mime_type?: string;
    size?: number;
    lat?: number;
    lng?: number;
    is_public?: boolean;
    created_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PutV2AdminFundingProgrammeUUIDVariables = {
  body?: RequestBodies.PostV2FundingProgrammeBody;
  pathParams: PutV2AdminFundingProgrammeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminFundingProgrammeUUID = (
  variables: PutV2AdminFundingProgrammeUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2AdminFundingProgrammeUUIDResponse,
    PutV2AdminFundingProgrammeUUIDError,
    RequestBodies.PostV2FundingProgrammeBody,
    {},
    {},
    PutV2AdminFundingProgrammeUUIDPathParams
  >({ url: "/v2/admin/funding-programme/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminFundingProgrammeUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2AdminFundingProgrammeUUIDResponse,
      PutV2AdminFundingProgrammeUUIDError,
      PutV2AdminFundingProgrammeUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2AdminFundingProgrammeUUIDResponse,
    PutV2AdminFundingProgrammeUUIDError,
    PutV2AdminFundingProgrammeUUIDVariables
  >(
    (variables: PutV2AdminFundingProgrammeUUIDVariables) =>
      fetchPutV2AdminFundingProgrammeUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminFundingProgrammeUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminFundingProgrammeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFundingProgrammeUUIDVariables = {
  pathParams: DeleteV2AdminFundingProgrammeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFundingProgrammeUUID = (
  variables: DeleteV2AdminFundingProgrammeUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminFundingProgrammeUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminFundingProgrammeUUIDPathParams
  >({ url: "/v2/admin/funding-programme/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminFundingProgrammeUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminFundingProgrammeUUIDError,
      DeleteV2AdminFundingProgrammeUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminFundingProgrammeUUIDError,
    DeleteV2AdminFundingProgrammeUUIDVariables
  >(
    (variables: DeleteV2AdminFundingProgrammeUUIDVariables) =>
      fetchDeleteV2AdminFundingProgrammeUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AdminFundingProgrammeUUIDStatusError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFundingProgrammeUUIDStatusResponse = {
  status?: string;
};

export type PatchV2AdminFundingProgrammeUUIDStatusVariables = ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFundingProgrammeUUIDStatus = (
  variables: PatchV2AdminFundingProgrammeUUIDStatusVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PatchV2AdminFundingProgrammeUUIDStatusResponse,
    PatchV2AdminFundingProgrammeUUIDStatusError,
    undefined,
    {},
    {},
    {}
  >({ url: "/v2/admin/funding-programme/{uuid}/status", method: "patch", ...variables, signal });

export const usePatchV2AdminFundingProgrammeUUIDStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2AdminFundingProgrammeUUIDStatusResponse,
      PatchV2AdminFundingProgrammeUUIDStatusError,
      PatchV2AdminFundingProgrammeUUIDStatusVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2AdminFundingProgrammeUUIDStatusResponse,
    PatchV2AdminFundingProgrammeUUIDStatusError,
    PatchV2AdminFundingProgrammeUUIDStatusVariables
  >(
    (variables: PatchV2AdminFundingProgrammeUUIDStatusVariables) =>
      fetchPatchV2AdminFundingProgrammeUUIDStatus({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FundingProgrammeStageQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2FundingProgrammeStageError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FundingProgrammeStageResponse = {
  data?: {
    id?: number;
    uuid?: string;
    status?: string;
    deadline_at?: string;
    readable_status?: string;
    funding_programme_id?: number;
    name?: string;
    order?: number;
    forms?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2FundingProgrammeStageVariables = {
  queryParams?: GetV2FundingProgrammeStageQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FundingProgrammeStage = (variables: GetV2FundingProgrammeStageVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2FundingProgrammeStageResponse,
    GetV2FundingProgrammeStageError,
    undefined,
    {},
    GetV2FundingProgrammeStageQueryParams,
    {}
  >({ url: "/v2/funding-programme/stage", method: "get", ...variables, signal });

export const useGetV2FundingProgrammeStage = <TData = GetV2FundingProgrammeStageResponse>(
  variables: GetV2FundingProgrammeStageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FundingProgrammeStageResponse, GetV2FundingProgrammeStageError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FundingProgrammeStageResponse, GetV2FundingProgrammeStageError, TData>(
    queryKeyFn({ path: "/v2/funding-programme/stage", operationId: "getV2FundingProgrammeStage", variables }),
    ({ signal }) => fetchGetV2FundingProgrammeStage({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchV2AdminFundingProgrammeStageUUIDStatusError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFundingProgrammeStageUUIDStatusResponse = {
  id?: number;
  uuid?: string;
  status?: string;
  deadline_at?: string;
  readable_status?: string;
  funding_programme_id?: number;
  name?: string;
  order?: number;
  forms?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PatchV2AdminFundingProgrammeStageUUIDStatusVariables = ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFundingProgrammeStageUUIDStatus = (
  variables: PatchV2AdminFundingProgrammeStageUUIDStatusVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PatchV2AdminFundingProgrammeStageUUIDStatusResponse,
    PatchV2AdminFundingProgrammeStageUUIDStatusError,
    undefined,
    {},
    {},
    {}
  >({ url: "/v2/admin/funding-programme/stage/{uuid}/status", method: "patch", ...variables, signal });

export const usePatchV2AdminFundingProgrammeStageUUIDStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2AdminFundingProgrammeStageUUIDStatusResponse,
      PatchV2AdminFundingProgrammeStageUUIDStatusError,
      PatchV2AdminFundingProgrammeStageUUIDStatusVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2AdminFundingProgrammeStageUUIDStatusResponse,
    PatchV2AdminFundingProgrammeStageUUIDStatusError,
    PatchV2AdminFundingProgrammeStageUUIDStatusVariables
  >(
    (variables: PatchV2AdminFundingProgrammeStageUUIDStatusVariables) =>
      fetchPatchV2AdminFundingProgrammeStageUUIDStatus({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FundingProgrammeStageUUIDPathParams = {
  uuid: string;
};

export type GetV2FundingProgrammeStageUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FundingProgrammeStageUUIDResponse = {
  id?: number;
  uuid?: string;
  status?: string;
  deadline_at?: string;
  readable_status?: string;
  funding_programme_id?: number;
  name?: string;
  order?: number;
  forms?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type GetV2FundingProgrammeStageUUIDVariables = {
  pathParams: GetV2FundingProgrammeStageUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FundingProgrammeStageUUID = (
  variables: GetV2FundingProgrammeStageUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2FundingProgrammeStageUUIDResponse,
    GetV2FundingProgrammeStageUUIDError,
    undefined,
    {},
    {},
    GetV2FundingProgrammeStageUUIDPathParams
  >({ url: "/v2/funding-programme/stage/{uuid}", method: "get", ...variables, signal });

export const useGetV2FundingProgrammeStageUUID = <TData = GetV2FundingProgrammeStageUUIDResponse>(
  variables: GetV2FundingProgrammeStageUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FundingProgrammeStageUUIDResponse, GetV2FundingProgrammeStageUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FundingProgrammeStageUUIDResponse, GetV2FundingProgrammeStageUUIDError, TData>(
    queryKeyFn({
      path: "/v2/funding-programme/stage/{UUID}",
      operationId: "getV2FundingProgrammeStageUUID",
      variables
    }),
    ({ signal }) => fetchGetV2FundingProgrammeStageUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchV2AdminFormsSubmissionsUUIDStatusError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFormsSubmissionsUUIDStatusResponse = {
  id?: string;
  uuid?: string;
  name?: string;
  form?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  stage?: {
    uuid?: string;
    name?: string;
    status?: string;
    readable_status?: string;
  };
  answers?: string;
  status?: string;
  readable_status?: string;
  audits?: {
    id?: number;
    event?: string;
    user_id?: number;
    user_uuid?: string;
    old_values?: Record<string, any>;
    new_values?: Record<string, any>;
    created_at?: string;
    updated_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
  updated_by?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PatchV2AdminFormsSubmissionsUUIDStatusRequestBody = {
  feedback?: string;
  status?: "started" | "awaiting-approval" | "approved" | "requires-more-information" | "rejected";
};

export type PatchV2AdminFormsSubmissionsUUIDStatusVariables = {
  body?: PatchV2AdminFormsSubmissionsUUIDStatusRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFormsSubmissionsUUIDStatus = (
  variables: PatchV2AdminFormsSubmissionsUUIDStatusVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PatchV2AdminFormsSubmissionsUUIDStatusResponse,
    PatchV2AdminFormsSubmissionsUUIDStatusError,
    PatchV2AdminFormsSubmissionsUUIDStatusRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/forms/submissions/{uuid}/status", method: "patch", ...variables, signal });

export const usePatchV2AdminFormsSubmissionsUUIDStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2AdminFormsSubmissionsUUIDStatusResponse,
      PatchV2AdminFormsSubmissionsUUIDStatusError,
      PatchV2AdminFormsSubmissionsUUIDStatusVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2AdminFormsSubmissionsUUIDStatusResponse,
    PatchV2AdminFormsSubmissionsUUIDStatusError,
    PatchV2AdminFormsSubmissionsUUIDStatusVariables
  >(
    (variables: PatchV2AdminFormsSubmissionsUUIDStatusVariables) =>
      fetchPatchV2AdminFormsSubmissionsUUIDStatus({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2FormsSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FormsSubmissionsResponse = {
  id?: string;
  uuid?: string;
  name?: string;
  form?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  stage?: {
    uuid?: string;
    name?: string;
    status?: string;
    readable_status?: string;
  };
  answers?: string;
  status?: string;
  readable_status?: string;
  audits?: {
    id?: number;
    event?: string;
    user_id?: number;
    user_uuid?: string;
    old_values?: Record<string, any>;
    new_values?: Record<string, any>;
    created_at?: string;
    updated_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
  updated_by?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PostV2FormsSubmissionsRequestBody = {
  form_uuid?: string;
  project_pitch_uuid?: string;
};

export type PostV2FormsSubmissionsVariables = {
  body?: PostV2FormsSubmissionsRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FormsSubmissions = (variables: PostV2FormsSubmissionsVariables, signal?: AbortSignal) =>
  apiFetch<PostV2FormsSubmissionsResponse, PostV2FormsSubmissionsError, PostV2FormsSubmissionsRequestBody, {}, {}, {}>({
    url: "/v2/forms/submissions",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2FormsSubmissions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2FormsSubmissionsResponse,
      PostV2FormsSubmissionsError,
      PostV2FormsSubmissionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2FormsSubmissionsResponse,
    PostV2FormsSubmissionsError,
    PostV2FormsSubmissionsVariables
  >(
    (variables: PostV2FormsSubmissionsVariables) => fetchPostV2FormsSubmissions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FormsSubmissionsUUIDPathParams = {
  uuid: string;
};

export type GetV2FormsSubmissionsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsSubmissionsUUIDResponse = {
  id?: string;
  uuid?: string;
  name?: string;
  form?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  stage?: {
    uuid?: string;
    name?: string;
    status?: string;
    readable_status?: string;
  };
  answers?: string;
  status?: string;
  readable_status?: string;
  audits?: {
    id?: number;
    event?: string;
    user_id?: number;
    user_uuid?: string;
    old_values?: Record<string, any>;
    new_values?: Record<string, any>;
    created_at?: string;
    updated_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
  updated_by?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type GetV2FormsSubmissionsUUIDVariables = {
  pathParams: GetV2FormsSubmissionsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsSubmissionsUUID = (variables: GetV2FormsSubmissionsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2FormsSubmissionsUUIDResponse,
    GetV2FormsSubmissionsUUIDError,
    undefined,
    {},
    {},
    GetV2FormsSubmissionsUUIDPathParams
  >({ url: "/v2/forms/submissions/{uuid}", method: "get", ...variables, signal });

export const useGetV2FormsSubmissionsUUID = <TData = GetV2FormsSubmissionsUUIDResponse>(
  variables: GetV2FormsSubmissionsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FormsSubmissionsUUIDResponse, GetV2FormsSubmissionsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsSubmissionsUUIDResponse, GetV2FormsSubmissionsUUIDError, TData>(
    queryKeyFn({ path: "/v2/forms/submissions/{UUID}", operationId: "getV2FormsSubmissionsUUID", variables }),
    ({ signal }) => fetchGetV2FormsSubmissionsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchV2FormsSubmissionsUUIDPathParams = {
  uuid: string;
};

export type PatchV2FormsSubmissionsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2FormsSubmissionsUUIDResponse = {
  id?: string;
  uuid?: string;
  name?: string;
  form?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  stage?: {
    uuid?: string;
    name?: string;
    status?: string;
    readable_status?: string;
  };
  answers?: string;
  status?: string;
  readable_status?: string;
  audits?: {
    id?: number;
    event?: string;
    user_id?: number;
    user_uuid?: string;
    old_values?: Record<string, any>;
    new_values?: Record<string, any>;
    created_at?: string;
    updated_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
  updated_by?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PatchV2FormsSubmissionsUUIDRequestBody = {
  status?: string;
  answers?: {
    question_id?: number;
    value?: string;
    options?: string[];
  }[];
};

export type PatchV2FormsSubmissionsUUIDVariables = {
  body?: PatchV2FormsSubmissionsUUIDRequestBody;
  pathParams: PatchV2FormsSubmissionsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2FormsSubmissionsUUID = (
  variables: PatchV2FormsSubmissionsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PatchV2FormsSubmissionsUUIDResponse,
    PatchV2FormsSubmissionsUUIDError,
    PatchV2FormsSubmissionsUUIDRequestBody,
    {},
    {},
    PatchV2FormsSubmissionsUUIDPathParams
  >({ url: "/v2/forms/submissions/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2FormsSubmissionsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchV2FormsSubmissionsUUIDResponse,
      PatchV2FormsSubmissionsUUIDError,
      PatchV2FormsSubmissionsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PatchV2FormsSubmissionsUUIDResponse,
    PatchV2FormsSubmissionsUUIDError,
    PatchV2FormsSubmissionsUUIDVariables
  >(
    (variables: PatchV2FormsSubmissionsUUIDVariables) =>
      fetchPatchV2FormsSubmissionsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2FormsSubmissionsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2FormsSubmissionsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2FormsSubmissionsUUIDVariables = {
  pathParams: DeleteV2FormsSubmissionsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2FormsSubmissionsUUID = (
  variables: DeleteV2FormsSubmissionsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteV2FormsSubmissionsUUIDError, undefined, {}, {}, DeleteV2FormsSubmissionsUUIDPathParams>({
    url: "/v2/forms/submissions/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2FormsSubmissionsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2FormsSubmissionsUUIDError, DeleteV2FormsSubmissionsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2FormsSubmissionsUUIDError, DeleteV2FormsSubmissionsUUIDVariables>(
    (variables: DeleteV2FormsSubmissionsUUIDVariables) =>
      fetchDeleteV2FormsSubmissionsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2FormsSubmissionsUUIDNextStagePathParams = {
  uuid: string;
};

export type PostV2FormsSubmissionsUUIDNextStageError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FormsSubmissionsUUIDNextStageResponse = {
  id?: string;
  uuid?: string;
  name?: string;
  form?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  stage?: {
    uuid?: string;
    name?: string;
    status?: string;
    readable_status?: string;
  };
  answers?: string;
  status?: string;
  readable_status?: string;
  audits?: {
    id?: number;
    event?: string;
    user_id?: number;
    user_uuid?: string;
    old_values?: Record<string, any>;
    new_values?: Record<string, any>;
    created_at?: string;
    updated_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
  updated_by?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PostV2FormsSubmissionsUUIDNextStageVariables = {
  pathParams: PostV2FormsSubmissionsUUIDNextStagePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FormsSubmissionsUUIDNextStage = (
  variables: PostV2FormsSubmissionsUUIDNextStageVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2FormsSubmissionsUUIDNextStageResponse,
    PostV2FormsSubmissionsUUIDNextStageError,
    undefined,
    {},
    {},
    PostV2FormsSubmissionsUUIDNextStagePathParams
  >({ url: "/v2/forms/submissions/{uuid}/next-stage", method: "post", ...variables, signal });

export const usePostV2FormsSubmissionsUUIDNextStage = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2FormsSubmissionsUUIDNextStageResponse,
      PostV2FormsSubmissionsUUIDNextStageError,
      PostV2FormsSubmissionsUUIDNextStageVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2FormsSubmissionsUUIDNextStageResponse,
    PostV2FormsSubmissionsUUIDNextStageError,
    PostV2FormsSubmissionsUUIDNextStageVariables
  >(
    (variables: PostV2FormsSubmissionsUUIDNextStageVariables) =>
      fetchPostV2FormsSubmissionsUUIDNextStage({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2FormsSubmissionsSubmitUUIDPathParams = {
  uuid: string;
};

export type PutV2FormsSubmissionsSubmitUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2FormsSubmissionsSubmitUUIDResponse = {
  id?: string;
  uuid?: string;
  name?: string;
  form?: {
    id?: number;
    uuid?: string;
    type?: string;
    version?: number;
    title?: string;
    subtitle?: string;
    description?: string;
    framework_key?: string;
    duration?: string;
    deadline_at?: string;
    documentation?: string;
    documentation_label?: string;
    submission_message?: string;
    published?: boolean;
    stage_id?: string;
    options_other?: boolean;
    form_sections?: {
      order?: number;
      form_id?: number;
      form_questions?: {
        id?: number;
        uuid?: string;
        form_section_id?: number;
        label?: string;
        validation?: string[];
        parent_id?: string;
        linked_field_key?: string;
        children?: Record<string, any>[];
        multichoice?: boolean;
        order?: number;
        options?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        table_headers?: {
          id?: number;
          uuid?: string;
          form_question_id?: number;
          label?: string;
          order?: number;
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        additional_text?: string;
        additional_url?: string;
        show_on_parent_condition?: boolean;
        input_type?:
          | "date"
          | "text"
          | "long-text"
          | "select"
          | "checkboxes"
          | "radio"
          | "number"
          | "image"
          | "file"
          | "conditional";
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    updated_by?: number;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  stage?: {
    uuid?: string;
    name?: string;
    status?: string;
    readable_status?: string;
  };
  answers?: string;
  status?: string;
  readable_status?: string;
  audits?: {
    id?: number;
    event?: string;
    user_id?: number;
    user_uuid?: string;
    old_values?: Record<string, any>;
    new_values?: Record<string, any>;
    created_at?: string;
    updated_at?: string;
  }[];
  /**
   * this is a list of key value pairs eg slug: name
   */
  tags?: string[];
  updated_by?: string;
  deleted_at?: string;
  created_at?: string;
  updated_at?: string;
};

export type PutV2FormsSubmissionsSubmitUUIDVariables = {
  pathParams: PutV2FormsSubmissionsSubmitUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2FormsSubmissionsSubmitUUID = (
  variables: PutV2FormsSubmissionsSubmitUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2FormsSubmissionsSubmitUUIDResponse,
    PutV2FormsSubmissionsSubmitUUIDError,
    undefined,
    {},
    {},
    PutV2FormsSubmissionsSubmitUUIDPathParams
  >({ url: "/v2/forms/submissions/submit/{uuid}", method: "put", ...variables, signal });

export const usePutV2FormsSubmissionsSubmitUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2FormsSubmissionsSubmitUUIDResponse,
      PutV2FormsSubmissionsSubmitUUIDError,
      PutV2FormsSubmissionsSubmitUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2FormsSubmissionsSubmitUUIDResponse,
    PutV2FormsSubmissionsSubmitUUIDError,
    PutV2FormsSubmissionsSubmitUUIDVariables
  >(
    (variables: PutV2FormsSubmissionsSubmitUUIDVariables) =>
      fetchPutV2FormsSubmissionsSubmitUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2MyBannersError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2MyBannersResponse = {
  id?: number;
  organisation_id?: number;
  organisation_name?: string;
  my_organisation?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  };
  my_monitoring_organisations?: {
    uuid?: string;
    status?: string;
    users_status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  }[];
  first_name?: string;
  last_name?: string;
  email_address?: string;
  /**
   * @format date-time
   */
  email_address_verified_at?: string;
  role?: string;
  /**
   * @format date-time
   */
  last_logged_in_at?: string;
  job_role?: string;
  facebook?: string;
  twitter?: string;
  instagram?: string;
  linkedin?: string;
  avatar?: string;
  phone_number?: string;
  whatsapp_phone?: string;
  has_ppc_projects?: boolean;
  has_terrafund_projects?: boolean;
};

export type PatchV2MyBannersRequestBody = {
  banners?: Record<string, any>[];
};

export type PatchV2MyBannersVariables = {
  body?: PatchV2MyBannersRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2MyBanners = (variables: PatchV2MyBannersVariables, signal?: AbortSignal) =>
  apiFetch<PatchV2MyBannersResponse, PatchV2MyBannersError, PatchV2MyBannersRequestBody, {}, {}, {}>({
    url: "/v2/my/banners",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2MyBanners = (
  options?: Omit<
    reactQuery.UseMutationOptions<PatchV2MyBannersResponse, PatchV2MyBannersError, PatchV2MyBannersVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PatchV2MyBannersResponse, PatchV2MyBannersError, PatchV2MyBannersVariables>(
    (variables: PatchV2MyBannersVariables) => fetchPatchV2MyBanners({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminFormsApplicationsQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminFormsApplicationsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsApplicationsResponse = {
  data?: {
    uuid?: string;
    form_submissions?: {
      id?: string;
      uuid?: string;
      name?: string;
      form?: {
        id?: number;
        uuid?: string;
        type?: string;
        version?: number;
        title?: string;
        subtitle?: string;
        description?: string;
        framework_key?: string;
        duration?: string;
        deadline_at?: string;
        documentation?: string;
        documentation_label?: string;
        submission_message?: string;
        published?: boolean;
        stage_id?: string;
        options_other?: boolean;
        form_sections?: {
          order?: number;
          form_id?: number;
          form_questions?: {
            id?: number;
            uuid?: string;
            form_section_id?: number;
            label?: string;
            validation?: string[];
            parent_id?: string;
            linked_field_key?: string;
            children?: Record<string, any>[];
            multichoice?: boolean;
            order?: number;
            options?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            table_headers?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            additional_text?: string;
            additional_url?: string;
            show_on_parent_condition?: boolean;
            input_type?:
              | "date"
              | "text"
              | "long-text"
              | "select"
              | "checkboxes"
              | "radio"
              | "number"
              | "image"
              | "file"
              | "conditional";
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        updated_by?: number;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      stage?: {
        uuid?: string;
        name?: string;
        status?: string;
        readable_status?: string;
      };
      answers?: string;
      status?: string;
      readable_status?: string;
      audits?: {
        id?: number;
        event?: string;
        user_id?: number;
        user_uuid?: string;
        old_values?: Record<string, any>;
        new_values?: Record<string, any>;
        created_at?: string;
        updated_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
      updated_by?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    current_submission?: {
      id?: string;
      uuid?: string;
      name?: string;
      form?: {
        id?: number;
        uuid?: string;
        type?: string;
        version?: number;
        title?: string;
        subtitle?: string;
        description?: string;
        framework_key?: string;
        duration?: string;
        deadline_at?: string;
        documentation?: string;
        documentation_label?: string;
        submission_message?: string;
        published?: boolean;
        stage_id?: string;
        options_other?: boolean;
        form_sections?: {
          order?: number;
          form_id?: number;
          form_questions?: {
            id?: number;
            uuid?: string;
            form_section_id?: number;
            label?: string;
            validation?: string[];
            parent_id?: string;
            linked_field_key?: string;
            children?: Record<string, any>[];
            multichoice?: boolean;
            order?: number;
            options?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            table_headers?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            additional_text?: string;
            additional_url?: string;
            show_on_parent_condition?: boolean;
            input_type?:
              | "date"
              | "text"
              | "long-text"
              | "select"
              | "checkboxes"
              | "radio"
              | "number"
              | "image"
              | "file"
              | "conditional";
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        updated_by?: number;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      stage?: {
        uuid?: string;
        name?: string;
        status?: string;
        readable_status?: string;
      };
      answers?: string;
      status?: string;
      readable_status?: string;
      audits?: {
        id?: number;
        event?: string;
        user_id?: number;
        user_uuid?: string;
        old_values?: Record<string, any>;
        new_values?: Record<string, any>;
        created_at?: string;
        updated_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
      updated_by?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    funding_programme_name?: number;
    funding_programme_uuid?: string;
    funding_programme_status?: string;
    organisation_name?: string;
    organisation_uuid?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2AdminFormsApplicationsVariables = {
  queryParams?: GetV2AdminFormsApplicationsQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Filters : funding_programme_uuid,current_stage, current_submission_status (Current stage is the stage uuid) Available Sorts : created_at, updated_at, organisation_name, funding_programme_name, organisation_name (Prefix with a '-' for descending
 */
export const fetchGetV2AdminFormsApplications = (
  variables: GetV2AdminFormsApplicationsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2AdminFormsApplicationsResponse,
    GetV2AdminFormsApplicationsError,
    undefined,
    {},
    GetV2AdminFormsApplicationsQueryParams,
    {}
  >({ url: "/v2/admin/forms/applications", method: "get", ...variables, signal });

/**
 * Available Filters : funding_programme_uuid,current_stage, current_submission_status (Current stage is the stage uuid) Available Sorts : created_at, updated_at, organisation_name, funding_programme_name, organisation_name (Prefix with a '-' for descending
 */
export const useGetV2AdminFormsApplications = <TData = GetV2AdminFormsApplicationsResponse>(
  variables: GetV2AdminFormsApplicationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFormsApplicationsResponse, GetV2AdminFormsApplicationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFormsApplicationsResponse, GetV2AdminFormsApplicationsError, TData>(
    queryKeyFn({ path: "/v2/admin/forms/applications", operationId: "getV2AdminFormsApplications", variables }),
    ({ signal }) => fetchGetV2AdminFormsApplications({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFormsApplicationsUUIDPathParams = {
  uuid: string;
};

export type GetV2AdminFormsApplicationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsApplicationsUUIDResponse = {
  uuid?: string;
  form_submissions?: {
    id?: string;
    uuid?: string;
    name?: string;
    form?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    stage?: {
      uuid?: string;
      name?: string;
      status?: string;
      readable_status?: string;
    };
    answers?: string;
    status?: string;
    readable_status?: string;
    audits?: {
      id?: number;
      event?: string;
      user_id?: number;
      user_uuid?: string;
      old_values?: Record<string, any>;
      new_values?: Record<string, any>;
      created_at?: string;
      updated_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
    updated_by?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  current_submission?: {
    id?: string;
    uuid?: string;
    name?: string;
    form?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    stage?: {
      uuid?: string;
      name?: string;
      status?: string;
      readable_status?: string;
    };
    answers?: string;
    status?: string;
    readable_status?: string;
    audits?: {
      id?: number;
      event?: string;
      user_id?: number;
      user_uuid?: string;
      old_values?: Record<string, any>;
      new_values?: Record<string, any>;
      created_at?: string;
      updated_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
    updated_by?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  funding_programme?: {
    id?: number;
    uuid?: string;
    name?: string;
    description?: string;
    location?: string;
    read_more_url?: string;
    framework_key?: string;
    status?: string;
    organisation_types?: string[];
    stages?: {
      id?: number;
      uuid?: string;
      status?: string;
      deadline_at?: string;
      readable_status?: string;
      funding_programme_id?: number;
      name?: string;
      order?: number;
      forms?: {
        id?: number;
        uuid?: string;
        type?: string;
        version?: number;
        title?: string;
        subtitle?: string;
        description?: string;
        framework_key?: string;
        duration?: string;
        deadline_at?: string;
        documentation?: string;
        documentation_label?: string;
        submission_message?: string;
        published?: boolean;
        stage_id?: string;
        options_other?: boolean;
        form_sections?: {
          order?: number;
          form_id?: number;
          form_questions?: {
            id?: number;
            uuid?: string;
            form_section_id?: number;
            label?: string;
            validation?: string[];
            parent_id?: string;
            linked_field_key?: string;
            children?: Record<string, any>[];
            multichoice?: boolean;
            order?: number;
            options?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            table_headers?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            additional_text?: string;
            additional_url?: string;
            show_on_parent_condition?: boolean;
            input_type?:
              | "date"
              | "text"
              | "long-text"
              | "select"
              | "checkboxes"
              | "radio"
              | "number"
              | "image"
              | "file"
              | "conditional";
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        updated_by?: number;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    organisations?: {
      uuid?: string;
      name?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  organisation?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  };
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
};

export type GetV2AdminFormsApplicationsUUIDVariables = {
  pathParams: GetV2AdminFormsApplicationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsApplicationsUUID = (
  variables: GetV2AdminFormsApplicationsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2AdminFormsApplicationsUUIDResponse,
    GetV2AdminFormsApplicationsUUIDError,
    undefined,
    {},
    {},
    GetV2AdminFormsApplicationsUUIDPathParams
  >({ url: "/v2/admin/forms/applications/{uuid}", method: "get", ...variables, signal });

export const useGetV2AdminFormsApplicationsUUID = <TData = GetV2AdminFormsApplicationsUUIDResponse>(
  variables: GetV2AdminFormsApplicationsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFormsApplicationsUUIDResponse, GetV2AdminFormsApplicationsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFormsApplicationsUUIDResponse, GetV2AdminFormsApplicationsUUIDError, TData>(
    queryKeyFn({
      path: "/v2/admin/forms/applications/{UUID}",
      operationId: "getV2AdminFormsApplicationsUUID",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsApplicationsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2AdminFormsApplicationsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminFormsApplicationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFormsApplicationsUUIDVariables = {
  pathParams: DeleteV2AdminFormsApplicationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFormsApplicationsUUID = (
  variables: DeleteV2AdminFormsApplicationsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminFormsApplicationsUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminFormsApplicationsUUIDPathParams
  >({ url: "/v2/admin/forms/applications/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminFormsApplicationsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminFormsApplicationsUUIDError,
      DeleteV2AdminFormsApplicationsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminFormsApplicationsUUIDError,
    DeleteV2AdminFormsApplicationsUUIDVariables
  >(
    (variables: DeleteV2AdminFormsApplicationsUUIDVariables) =>
      fetchDeleteV2AdminFormsApplicationsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminFormsApplicationsUUIDExportPathParams = {
  uuid: string;
};

export type GetV2AdminFormsApplicationsUUIDExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsApplicationsUUIDExportVariables = {
  pathParams: GetV2AdminFormsApplicationsUUIDExportPathParams;
} & ApiContext["fetcherOptions"];

/**
 * The UUID provided is the Funding Programme ID that the applications are for
 */
export const fetchGetV2AdminFormsApplicationsUUIDExport = (
  variables: GetV2AdminFormsApplicationsUUIDExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    GetV2AdminFormsApplicationsUUIDExportError,
    undefined,
    {},
    {},
    GetV2AdminFormsApplicationsUUIDExportPathParams
  >({ url: "/v2/admin/forms/applications/{uuid}/export", method: "get", ...variables, signal });

/**
 * The UUID provided is the Funding Programme ID that the applications are for
 */
export const useGetV2AdminFormsApplicationsUUIDExport = <TData = undefined>(
  variables: GetV2AdminFormsApplicationsUUIDExportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetV2AdminFormsApplicationsUUIDExportError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetV2AdminFormsApplicationsUUIDExportError, TData>(
    queryKeyFn({
      path: "/v2/admin/forms/applications/{UUID}/export",
      operationId: "getV2AdminFormsApplicationsUUIDExport",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsApplicationsUUIDExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2MyApplicationsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2MyApplicationsResponse = {
  data?: {
    uuid?: string;
    form_submissions?: {
      id?: string;
      uuid?: string;
      name?: string;
      form?: {
        id?: number;
        uuid?: string;
        type?: string;
        version?: number;
        title?: string;
        subtitle?: string;
        description?: string;
        framework_key?: string;
        duration?: string;
        deadline_at?: string;
        documentation?: string;
        documentation_label?: string;
        submission_message?: string;
        published?: boolean;
        stage_id?: string;
        options_other?: boolean;
        form_sections?: {
          order?: number;
          form_id?: number;
          form_questions?: {
            id?: number;
            uuid?: string;
            form_section_id?: number;
            label?: string;
            validation?: string[];
            parent_id?: string;
            linked_field_key?: string;
            children?: Record<string, any>[];
            multichoice?: boolean;
            order?: number;
            options?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            table_headers?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            additional_text?: string;
            additional_url?: string;
            show_on_parent_condition?: boolean;
            input_type?:
              | "date"
              | "text"
              | "long-text"
              | "select"
              | "checkboxes"
              | "radio"
              | "number"
              | "image"
              | "file"
              | "conditional";
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        updated_by?: number;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      stage?: {
        uuid?: string;
        name?: string;
        status?: string;
        readable_status?: string;
      };
      answers?: string;
      status?: string;
      readable_status?: string;
      audits?: {
        id?: number;
        event?: string;
        user_id?: number;
        user_uuid?: string;
        old_values?: Record<string, any>;
        new_values?: Record<string, any>;
        created_at?: string;
        updated_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
      updated_by?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    current_submission?: {
      id?: string;
      uuid?: string;
      name?: string;
      form?: {
        id?: number;
        uuid?: string;
        type?: string;
        version?: number;
        title?: string;
        subtitle?: string;
        description?: string;
        framework_key?: string;
        duration?: string;
        deadline_at?: string;
        documentation?: string;
        documentation_label?: string;
        submission_message?: string;
        published?: boolean;
        stage_id?: string;
        options_other?: boolean;
        form_sections?: {
          order?: number;
          form_id?: number;
          form_questions?: {
            id?: number;
            uuid?: string;
            form_section_id?: number;
            label?: string;
            validation?: string[];
            parent_id?: string;
            linked_field_key?: string;
            children?: Record<string, any>[];
            multichoice?: boolean;
            order?: number;
            options?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            table_headers?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            additional_text?: string;
            additional_url?: string;
            show_on_parent_condition?: boolean;
            input_type?:
              | "date"
              | "text"
              | "long-text"
              | "select"
              | "checkboxes"
              | "radio"
              | "number"
              | "image"
              | "file"
              | "conditional";
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        updated_by?: number;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      stage?: {
        uuid?: string;
        name?: string;
        status?: string;
        readable_status?: string;
      };
      answers?: string;
      status?: string;
      readable_status?: string;
      audits?: {
        id?: number;
        event?: string;
        user_id?: number;
        user_uuid?: string;
        old_values?: Record<string, any>;
        new_values?: Record<string, any>;
        created_at?: string;
        updated_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
      updated_by?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    funding_programme_name?: number;
    funding_programme_uuid?: string;
    funding_programme_status?: string;
    organisation_name?: string;
    organisation_uuid?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2MyApplicationsVariables = ApiContext["fetcherOptions"];

export const fetchGetV2MyApplications = (variables: GetV2MyApplicationsVariables, signal?: AbortSignal) =>
  apiFetch<GetV2MyApplicationsResponse, GetV2MyApplicationsError, undefined, {}, {}, {}>({
    url: "/v2/my/applications",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2MyApplications = <TData = GetV2MyApplicationsResponse>(
  variables: GetV2MyApplicationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2MyApplicationsResponse, GetV2MyApplicationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2MyApplicationsResponse, GetV2MyApplicationsError, TData>(
    queryKeyFn({ path: "/v2/my/applications", operationId: "getV2MyApplications", variables }),
    ({ signal }) => fetchGetV2MyApplications({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ApplicationsUUIDPathParams = {
  uuid: string;
};

export type GetV2ApplicationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ApplicationsUUIDResponse = {
  uuid?: string;
  form_submissions?: {
    id?: string;
    uuid?: string;
    name?: string;
    form?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    stage?: {
      uuid?: string;
      name?: string;
      status?: string;
      readable_status?: string;
    };
    answers?: string;
    status?: string;
    readable_status?: string;
    audits?: {
      id?: number;
      event?: string;
      user_id?: number;
      user_uuid?: string;
      old_values?: Record<string, any>;
      new_values?: Record<string, any>;
      created_at?: string;
      updated_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
    updated_by?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  }[];
  current_submission?: {
    id?: string;
    uuid?: string;
    name?: string;
    form?: {
      id?: number;
      uuid?: string;
      type?: string;
      version?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      framework_key?: string;
      duration?: string;
      deadline_at?: string;
      documentation?: string;
      documentation_label?: string;
      submission_message?: string;
      published?: boolean;
      stage_id?: string;
      options_other?: boolean;
      form_sections?: {
        order?: number;
        form_id?: number;
        form_questions?: {
          id?: number;
          uuid?: string;
          form_section_id?: number;
          label?: string;
          validation?: string[];
          parent_id?: string;
          linked_field_key?: string;
          children?: Record<string, any>[];
          multichoice?: boolean;
          order?: number;
          options?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          table_headers?: {
            id?: number;
            uuid?: string;
            form_question_id?: number;
            label?: string;
            order?: number;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          additional_text?: string;
          additional_url?: string;
          show_on_parent_condition?: boolean;
          input_type?:
            | "date"
            | "text"
            | "long-text"
            | "select"
            | "checkboxes"
            | "radio"
            | "number"
            | "image"
            | "file"
            | "conditional";
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg. slug: name
       */
      tags?: string[];
      updated_by?: number;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    stage?: {
      uuid?: string;
      name?: string;
      status?: string;
      readable_status?: string;
    };
    answers?: string;
    status?: string;
    readable_status?: string;
    audits?: {
      id?: number;
      event?: string;
      user_id?: number;
      user_uuid?: string;
      old_values?: Record<string, any>;
      new_values?: Record<string, any>;
      created_at?: string;
      updated_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg slug: name
     */
    tags?: string[];
    updated_by?: string;
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  funding_programme?: {
    id?: number;
    uuid?: string;
    name?: string;
    description?: string;
    location?: string;
    read_more_url?: string;
    framework_key?: string;
    status?: string;
    organisation_types?: string[];
    stages?: {
      id?: number;
      uuid?: string;
      status?: string;
      deadline_at?: string;
      readable_status?: string;
      funding_programme_id?: number;
      name?: string;
      order?: number;
      forms?: {
        id?: number;
        uuid?: string;
        type?: string;
        version?: number;
        title?: string;
        subtitle?: string;
        description?: string;
        framework_key?: string;
        duration?: string;
        deadline_at?: string;
        documentation?: string;
        documentation_label?: string;
        submission_message?: string;
        published?: boolean;
        stage_id?: string;
        options_other?: boolean;
        form_sections?: {
          order?: number;
          form_id?: number;
          form_questions?: {
            id?: number;
            uuid?: string;
            form_section_id?: number;
            label?: string;
            validation?: string[];
            parent_id?: string;
            linked_field_key?: string;
            children?: Record<string, any>[];
            multichoice?: boolean;
            order?: number;
            options?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            table_headers?: {
              id?: number;
              uuid?: string;
              form_question_id?: number;
              label?: string;
              order?: number;
              created_at?: string;
              updated_at?: string;
              deleted_at?: string;
            }[];
            additional_text?: string;
            additional_url?: string;
            show_on_parent_condition?: boolean;
            input_type?:
              | "date"
              | "text"
              | "long-text"
              | "select"
              | "checkboxes"
              | "radio"
              | "number"
              | "image"
              | "file"
              | "conditional";
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
          }[];
          created_at?: string;
          updated_at?: string;
          deleted_at?: string;
        }[];
        /**
         * this is a list of key value pairs eg. slug: name
         */
        tags?: string[];
        updated_by?: number;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      };
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    organisations?: {
      uuid?: string;
      name?: string;
    }[];
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    deleted_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  organisation?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  };
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
};

export type GetV2ApplicationsUUIDVariables = {
  pathParams: GetV2ApplicationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ApplicationsUUID = (variables: GetV2ApplicationsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2ApplicationsUUIDResponse,
    GetV2ApplicationsUUIDError,
    undefined,
    {},
    {},
    GetV2ApplicationsUUIDPathParams
  >({ url: "/v2/applications/{uuid}", method: "get", ...variables, signal });

export const useGetV2ApplicationsUUID = <TData = GetV2ApplicationsUUIDResponse>(
  variables: GetV2ApplicationsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ApplicationsUUIDResponse, GetV2ApplicationsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ApplicationsUUIDResponse, GetV2ApplicationsUUIDError, TData>(
    queryKeyFn({ path: "/v2/applications/{UUID}", operationId: "getV2ApplicationsUUID", variables }),
    ({ signal }) => fetchGetV2ApplicationsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ApplicationsUUIDExportPathParams = {
  uuid: string;
};

export type GetV2ApplicationsUUIDExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ApplicationsUUIDExportVariables = {
  pathParams: GetV2ApplicationsUUIDExportPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ApplicationsUUIDExport = (
  variables: GetV2ApplicationsUUIDExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetV2ApplicationsUUIDExportError, undefined, {}, {}, GetV2ApplicationsUUIDExportPathParams>({
    url: "/v2/applications/{uuid}/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ApplicationsUUIDExport = <TData = undefined>(
  variables: GetV2ApplicationsUUIDExportVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetV2ApplicationsUUIDExportError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetV2ApplicationsUUIDExportError, TData>(
    queryKeyFn({ path: "/v2/applications/{UUID}/export", operationId: "getV2ApplicationsUUIDExport", variables }),
    ({ signal }) => fetchGetV2ApplicationsUUIDExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2AdminNurseriesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminNurseriesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminNurseriesUUIDVariables = {
  pathParams: DeleteV2AdminNurseriesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminNurseriesUUID = (variables: DeleteV2AdminNurseriesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2AdminNurseriesUUIDError, undefined, {}, {}, DeleteV2AdminNurseriesUUIDPathParams>({
    url: "/v2/admin/nurseries/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminNurseriesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2AdminNurseriesUUIDError, DeleteV2AdminNurseriesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2AdminNurseriesUUIDError, DeleteV2AdminNurseriesUUIDVariables>(
    (variables: DeleteV2AdminNurseriesUUIDVariables) =>
      fetchDeleteV2AdminNurseriesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminNurseryReportsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminNurseryReportsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminNurseryReportsUUIDVariables = {
  pathParams: DeleteV2AdminNurseryReportsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminNurseryReportsUUID = (
  variables: DeleteV2AdminNurseryReportsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminNurseryReportsUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminNurseryReportsUUIDPathParams
  >({ url: "/v2/admin/nursery-reports/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminNurseryReportsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminNurseryReportsUUIDError,
      DeleteV2AdminNurseryReportsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminNurseryReportsUUIDError,
    DeleteV2AdminNurseryReportsUUIDVariables
  >(
    (variables: DeleteV2AdminNurseryReportsUUIDVariables) =>
      fetchDeleteV2AdminNurseryReportsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminSitesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminSitesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminSitesUUIDVariables = {
  pathParams: DeleteV2AdminSitesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminSitesUUID = (variables: DeleteV2AdminSitesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2AdminSitesUUIDError, undefined, {}, {}, DeleteV2AdminSitesUUIDPathParams>({
    url: "/v2/admin/sites/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminSitesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2AdminSitesUUIDError, DeleteV2AdminSitesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2AdminSitesUUIDError, DeleteV2AdminSitesUUIDVariables>(
    (variables: DeleteV2AdminSitesUUIDVariables) => fetchDeleteV2AdminSitesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminSiteReportsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminSiteReportsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminSiteReportsUUIDVariables = {
  pathParams: DeleteV2AdminSiteReportsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminSiteReportsUUID = (
  variables: DeleteV2AdminSiteReportsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteV2AdminSiteReportsUUIDError, undefined, {}, {}, DeleteV2AdminSiteReportsUUIDPathParams>({
    url: "/v2/admin/site-reports/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminSiteReportsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2AdminSiteReportsUUIDError, DeleteV2AdminSiteReportsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2AdminSiteReportsUUIDError, DeleteV2AdminSiteReportsUUIDVariables>(
    (variables: DeleteV2AdminSiteReportsUUIDVariables) =>
      fetchDeleteV2AdminSiteReportsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2AdminSiteMonitoringsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminSiteMonitoringsResponse = {
  uuid?: string;
  status?: string;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  /**
   * @format date
   */
  measurement_date?: string;
  /**
   * @format date-time
   */
  last_updated?: string;
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
};

export type PostV2AdminSiteMonitoringsRequestBody = {
  site_uuid?: string;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  /**
   * @format date
   */
  measurement_date?: string;
};

export type PostV2AdminSiteMonitoringsVariables = {
  body?: PostV2AdminSiteMonitoringsRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminSiteMonitorings = (variables: PostV2AdminSiteMonitoringsVariables, signal?: AbortSignal) =>
  apiFetch<
    PostV2AdminSiteMonitoringsResponse,
    PostV2AdminSiteMonitoringsError,
    PostV2AdminSiteMonitoringsRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/site-monitorings", method: "post", ...variables, signal });

export const usePostV2AdminSiteMonitorings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2AdminSiteMonitoringsResponse,
      PostV2AdminSiteMonitoringsError,
      PostV2AdminSiteMonitoringsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2AdminSiteMonitoringsResponse,
    PostV2AdminSiteMonitoringsError,
    PostV2AdminSiteMonitoringsVariables
  >(
    (variables: PostV2AdminSiteMonitoringsVariables) =>
      fetchPostV2AdminSiteMonitorings({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2AdminSiteMonitoringsUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminSiteMonitoringsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminSiteMonitoringsUUIDResponse = {
  uuid?: string;
  status?: string;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  /**
   * @format date
   */
  measurement_date?: string;
  /**
   * @format date-time
   */
  last_updated?: string;
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
};

export type PutV2AdminSiteMonitoringsUUIDRequestBody = {
  status?: string;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  /**
   * @format date
   */
  measurement_date?: string;
};

export type PutV2AdminSiteMonitoringsUUIDVariables = {
  body?: PutV2AdminSiteMonitoringsUUIDRequestBody;
  pathParams: PutV2AdminSiteMonitoringsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminSiteMonitoringsUUID = (
  variables: PutV2AdminSiteMonitoringsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2AdminSiteMonitoringsUUIDResponse,
    PutV2AdminSiteMonitoringsUUIDError,
    PutV2AdminSiteMonitoringsUUIDRequestBody,
    {},
    {},
    PutV2AdminSiteMonitoringsUUIDPathParams
  >({ url: "/v2/admin/site-monitorings/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminSiteMonitoringsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2AdminSiteMonitoringsUUIDResponse,
      PutV2AdminSiteMonitoringsUUIDError,
      PutV2AdminSiteMonitoringsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2AdminSiteMonitoringsUUIDResponse,
    PutV2AdminSiteMonitoringsUUIDError,
    PutV2AdminSiteMonitoringsUUIDVariables
  >(
    (variables: PutV2AdminSiteMonitoringsUUIDVariables) =>
      fetchPutV2AdminSiteMonitoringsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminSiteMonitoringsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminSiteMonitoringsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminSiteMonitoringsUUIDVariables = {
  pathParams: DeleteV2AdminSiteMonitoringsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminSiteMonitoringsUUID = (
  variables: DeleteV2AdminSiteMonitoringsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminSiteMonitoringsUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminSiteMonitoringsUUIDPathParams
  >({ url: "/v2/admin/site-monitorings/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminSiteMonitoringsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminSiteMonitoringsUUIDError,
      DeleteV2AdminSiteMonitoringsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminSiteMonitoringsUUIDError,
    DeleteV2AdminSiteMonitoringsUUIDVariables
  >(
    (variables: DeleteV2AdminSiteMonitoringsUUIDVariables) =>
      fetchDeleteV2AdminSiteMonitoringsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminProjectsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminProjectsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminProjectsUUIDVariables = {
  pathParams: DeleteV2AdminProjectsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminProjectsUUID = (variables: DeleteV2AdminProjectsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2AdminProjectsUUIDError, undefined, {}, {}, DeleteV2AdminProjectsUUIDPathParams>({
    url: "/v2/admin/projects/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminProjectsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2AdminProjectsUUIDError, DeleteV2AdminProjectsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2AdminProjectsUUIDError, DeleteV2AdminProjectsUUIDVariables>(
    (variables: DeleteV2AdminProjectsUUIDVariables) =>
      fetchDeleteV2AdminProjectsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminProjectReportsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminProjectReportsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminProjectReportsUUIDVariables = {
  pathParams: DeleteV2AdminProjectReportsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminProjectReportsUUID = (
  variables: DeleteV2AdminProjectReportsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminProjectReportsUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminProjectReportsUUIDPathParams
  >({ url: "/v2/admin/project-reports/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminProjectReportsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminProjectReportsUUIDError,
      DeleteV2AdminProjectReportsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminProjectReportsUUIDError,
    DeleteV2AdminProjectReportsUUIDVariables
  >(
    (variables: DeleteV2AdminProjectReportsUUIDVariables) =>
      fetchDeleteV2AdminProjectReportsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2AdminProjectMonitoringsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminProjectMonitoringsResponse = {
  uuid?: string;
  status?: string;
  total_hectares?: number;
  ha_mangrove?: number;
  ha_assisted?: number;
  ha_agroforestry?: number;
  ha_reforestation?: number;
  ha_peatland?: number;
  ha_riparian?: number;
  ha_enrichment?: number;
  ha_nucleation?: number;
  ha_silvopasture?: number;
  ha_direct?: number;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  tree_cover_loss?: number;
  carbon_benefits?: number;
  number_of_esrp?: number;
  field_tree_regenerated?: number;
  field_tree_survival_percent?: number;
  /**
   * @format date
   */
  start_date?: string;
  /**
   * @format date
   */
  end_date?: string;
  /**
   * @format date-time
   */
  last_updated?: string;
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
};

export type PostV2AdminProjectMonitoringsRequestBody = {
  project_uuid?: string;
  total_hectares?: number;
  ha_mangrove?: number;
  ha_assisted?: number;
  ha_agroforestry?: number;
  ha_reforestation?: number;
  ha_peatland?: number;
  ha_riparian?: number;
  ha_enrichment?: number;
  ha_nucleation?: number;
  ha_silvopasture?: number;
  ha_direct?: number;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  tree_cover_loss?: number;
  carbon_benefits?: number;
  number_of_esrp?: number;
  field_tree_regenerated?: number;
  field_tree_survival_percent?: number;
  /**
   * @format date
   */
  start_date?: string;
  /**
   * @format date
   */
  end_date?: string;
};

export type PostV2AdminProjectMonitoringsVariables = {
  body?: PostV2AdminProjectMonitoringsRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminProjectMonitorings = (
  variables: PostV2AdminProjectMonitoringsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostV2AdminProjectMonitoringsResponse,
    PostV2AdminProjectMonitoringsError,
    PostV2AdminProjectMonitoringsRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/project-monitorings", method: "post", ...variables, signal });

export const usePostV2AdminProjectMonitorings = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2AdminProjectMonitoringsResponse,
      PostV2AdminProjectMonitoringsError,
      PostV2AdminProjectMonitoringsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2AdminProjectMonitoringsResponse,
    PostV2AdminProjectMonitoringsError,
    PostV2AdminProjectMonitoringsVariables
  >(
    (variables: PostV2AdminProjectMonitoringsVariables) =>
      fetchPostV2AdminProjectMonitorings({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2AdminProjectMonitoringsUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminProjectMonitoringsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminProjectMonitoringsUUIDResponse = {
  uuid?: string;
  status?: string;
  total_hectares?: number;
  ha_mangrove?: number;
  ha_assisted?: number;
  ha_agroforestry?: number;
  ha_reforestation?: number;
  ha_peatland?: number;
  ha_riparian?: number;
  ha_enrichment?: number;
  ha_nucleation?: number;
  ha_silvopasture?: number;
  ha_direct?: number;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  tree_cover_loss?: number;
  carbon_benefits?: number;
  number_of_esrp?: number;
  field_tree_regenerated?: number;
  field_tree_survival_percent?: number;
  /**
   * @format date
   */
  start_date?: string;
  /**
   * @format date
   */
  end_date?: string;
  /**
   * @format date-time
   */
  last_updated?: string;
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
};

export type PutV2AdminProjectMonitoringsUUIDRequestBody = {
  status?: string;
  total_hectares?: number;
  ha_mangrove?: number;
  ha_assisted?: number;
  ha_agroforestry?: number;
  ha_reforestation?: number;
  ha_peatland?: number;
  ha_riparian?: number;
  ha_enrichment?: number;
  ha_nucleation?: number;
  ha_silvopasture?: number;
  ha_direct?: number;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  tree_cover_loss?: number;
  carbon_benefits?: number;
  number_of_esrp?: number;
  field_tree_regenerated?: number;
  field_tree_survival_percent?: number;
  /**
   * @format date
   */
  start_date?: string;
  /**
   * @format date
   */
  end_date?: string;
};

export type PutV2AdminProjectMonitoringsUUIDVariables = {
  body?: PutV2AdminProjectMonitoringsUUIDRequestBody;
  pathParams: PutV2AdminProjectMonitoringsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminProjectMonitoringsUUID = (
  variables: PutV2AdminProjectMonitoringsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PutV2AdminProjectMonitoringsUUIDResponse,
    PutV2AdminProjectMonitoringsUUIDError,
    PutV2AdminProjectMonitoringsUUIDRequestBody,
    {},
    {},
    PutV2AdminProjectMonitoringsUUIDPathParams
  >({ url: "/v2/admin/project-monitorings/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminProjectMonitoringsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PutV2AdminProjectMonitoringsUUIDResponse,
      PutV2AdminProjectMonitoringsUUIDError,
      PutV2AdminProjectMonitoringsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PutV2AdminProjectMonitoringsUUIDResponse,
    PutV2AdminProjectMonitoringsUUIDError,
    PutV2AdminProjectMonitoringsUUIDVariables
  >(
    (variables: PutV2AdminProjectMonitoringsUUIDVariables) =>
      fetchPutV2AdminProjectMonitoringsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminProjectMonitoringsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminProjectMonitoringsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminProjectMonitoringsUUIDVariables = {
  pathParams: DeleteV2AdminProjectMonitoringsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminProjectMonitoringsUUID = (
  variables: DeleteV2AdminProjectMonitoringsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminProjectMonitoringsUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminProjectMonitoringsUUIDPathParams
  >({ url: "/v2/admin/project-monitorings/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminProjectMonitoringsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminProjectMonitoringsUUIDError,
      DeleteV2AdminProjectMonitoringsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminProjectMonitoringsUUIDError,
    DeleteV2AdminProjectMonitoringsUUIDVariables
  >(
    (variables: DeleteV2AdminProjectMonitoringsUUIDVariables) =>
      fetchDeleteV2AdminProjectMonitoringsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetAuthLogoutError = Fetcher.ErrorWrapper<undefined>;

export type GetAuthLogoutVariables = ApiContext["fetcherOptions"];

export const fetchGetAuthLogout = (variables: GetAuthLogoutVariables, signal?: AbortSignal) =>
  apiFetch<Record<string, any>, GetAuthLogoutError, undefined, {}, {}, {}>({
    url: "/auth/logout",
    method: "get",
    ...variables,
    signal
  });

export const useGetAuthLogout = <TData = Record<string, any>>(
  variables: GetAuthLogoutVariables,
  options?: Omit<reactQuery.UseQueryOptions<Record<string, any>, GetAuthLogoutError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Record<string, any>, GetAuthLogoutError, TData>(
    queryKeyFn({ path: "/auth/logout", operationId: "getAuthLogout", variables }),
    ({ signal }) => fetchGetAuthLogout({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetAuthMeError = Fetcher.ErrorWrapper<undefined>;

export type GetAuthMeResponse = {
  id?: number;
  organisation_id?: number;
  organisation_name?: string;
  my_organisation?: {
    uuid?: string;
    status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    project_pitches?: {
      id?: string;
      uuid?: string;
      status?: string;
      readable_status?: string;
      organisation_id?: string;
      funding_programmes?: {
        id?: number;
        uuid?: string;
        name?: string;
        description?: string;
        read_more_url?: string;
        organisation_types?: string[];
        location?: string;
        status?: string;
      };
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      project_name?: string;
      how_discovered?: string;
      project_objectives?: string;
      project_country?: string[];
      project_county_district?: string;
      restoration_intervention_types?: string[];
      land_systems?: string[];
      tree_restoration_practices?: string[];
      total_hectares?: number;
      project_budget?: number;
      total_trees?: number;
      capacity_building_needs?: string[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      restoration_photos?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      proof_of_land_tenure_mou?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      detailed_project_budget?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      expected_active_restoration_start_date?: string;
      expected_active_restoration_end_date?: string;
      description_of_project_timeline?: string;
      proj_partner_info?: string;
      land_tenure_proj_area?: string[];
      landholder_comm_engage?: string;
      proj_success_risks?: string;
      monitor_eval_plan?: string;
      proj_boundary?: string;
      sustainable_dev_goals?: string[];
      proj_area_description?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_sites?: number;
      environmental_goals?: string;
      main_degradation_causes?: string;
      seedlings_source?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      proposed_num_nurseries?: number;
      curr_land_degradation?: string;
      proj_impact_socieconom?: string;
      proj_impact_foodsec?: string;
      proj_impact_watersec?: string;
      proj_impact_jobtypes?: string;
      /**
       * @minimum 0
       * @maximum 4294967295
       */
      num_jobs_created?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_men?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_18to35?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_employees_older35?: number;
      proj_beneficiaries?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_women?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_small?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_large?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_youth?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_classes?: number;
      /**
       * @minimum 0
       * @maximum 100
       */
      pct_beneficiaries_scheduled_tribes?: number;
      monitoring_evaluation_plan?: string;
      main_causes_of_degradation?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    ft_permanent_employees?: number;
    pt_permanent_employees?: number;
    temp_employees?: number;
    female_employees?: number;
    male_employees?: number;
    young_employees?: number;
    additional_funding_details?: string;
    community_experience?: string;
    total_engaged_community_members_3yr?: number;
    percent_engaged_women_3yr?: number;
    percent_engaged_men_3yr?: number;
    percent_engaged_under_35_3yr?: number;
    percent_engaged_over_35_3yr?: number;
    percent_engaged_smallholder_3yr?: number;
    total_trees_grown?: number;
    avg_tree_survival_rate?: number;
    tree_maintenance_aftercare_approach?: string;
    restored_areas_description?: string;
    monitoring_evaluation_experience?: string;
    funding_history?: string;
    shapefiles?: {
      uuid?: string;
      shapefileable_type?: string;
      shapefileable_id?: number;
      geojson?: string;
      created_at?: string;
      updated_at?: string;
      deleted_at?: string;
    }[];
    bank_statements?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    previous_annual_reports?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  };
  my_monitoring_organisations?: {
    uuid?: string;
    status?: string;
    users_status?: string;
    readable_status?: string;
    type?: string;
    private?: boolean;
    name?: string;
    phone?: string;
    founding_date?: string;
    description?: string;
    countries?: string[];
    languages?: string[];
    tree_species?: {
      uuid?: string;
      name?: string;
      amount?: number;
      type?: string;
      collection?: string;
    }[];
    web_url?: string;
    facebook_url?: string;
    instagram_url?: string;
    linkedin_url?: string;
    twitter_url?: string;
    hq_street_1?: string;
    hq_street_2?: string;
    hq_city?: string;
    hq_state?: string;
    hq_zipcode?: string;
    hq_country?: string;
    fin_start_month?: number;
    /**
     * @format float
     */
    fin_budget_3year?: number;
    /**
     * @format float
     */
    fin_budget_2year?: number;
    /**
     * @format float
     */
    fin_budget_1year?: number;
    /**
     * @format float
     */
    fin_budget_current_year?: number;
    /**
     * @format float
     */
    ha_restored_total?: number;
    /**
     * @format float
     */
    ha_restored_3year?: number;
    relevant_experience_years?: number;
    trees_grown_total?: number;
    trees_grown_3year?: number;
    tree_care_approach?: string;
    logo?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    cover?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    };
    reference?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    additional?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_2year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_last_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_this_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    op_budget_next_year?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    legal_registration?: {
      uuid?: string;
      url?: string;
      thumb_url?: string;
      collection_name?: string;
      title?: string;
      file_name?: string;
      mime_type?: string;
      size?: number;
      lat?: number;
      lng?: number;
      is_public?: boolean;
      created_at?: string;
    }[];
    /**
     * this is a list of key value pairs eg. slug: name
     */
    tags?: string[];
    created_at?: string;
    updated_at?: string;
  }[];
  first_name?: string;
  last_name?: string;
  email_address?: string;
  /**
   * @format date-time
   */
  email_address_verified_at?: string;
  role?: string;
  /**
   * @format date-time
   */
  last_logged_in_at?: string;
  job_role?: string;
  facebook?: string;
  twitter?: string;
  instagram?: string;
  linkedin?: string;
  avatar?: string;
  phone_number?: string;
  whatsapp_phone?: string;
  has_ppc_projects?: boolean;
  has_terrafund_projects?: boolean;
};

export type GetAuthMeVariables = ApiContext["fetcherOptions"];

export const fetchGetAuthMe = (variables: GetAuthMeVariables, signal?: AbortSignal) =>
  apiFetch<GetAuthMeResponse, GetAuthMeError, undefined, {}, {}, {}>({
    url: "/auth/me",
    method: "get",
    ...variables,
    signal
  });

export const useGetAuthMe = <TData = GetAuthMeResponse>(
  variables: GetAuthMeVariables,
  options?: Omit<reactQuery.UseQueryOptions<GetAuthMeResponse, GetAuthMeError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetAuthMeResponse, GetAuthMeError, TData>(
    queryKeyFn({ path: "/auth/me", operationId: "getAuthMe", variables }),
    ({ signal }) => fetchGetAuthMe({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostAuthLoginError = Fetcher.ErrorWrapper<undefined>;

export type PostAuthLoginResponse = {
  token?: string;
};

export type PostAuthLoginRequestBody = {
  /**
   * @format email
   */
  email_address?: string;
  password?: string;
};

export type PostAuthLoginVariables = {
  body?: PostAuthLoginRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostAuthLogin = (variables: PostAuthLoginVariables, signal?: AbortSignal) =>
  apiFetch<PostAuthLoginResponse, PostAuthLoginError, PostAuthLoginRequestBody, {}, {}, {}>({
    url: "/auth/login",
    method: "post",
    ...variables,
    signal
  });

export const usePostAuthLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<PostAuthLoginResponse, PostAuthLoginError, PostAuthLoginVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PostAuthLoginResponse, PostAuthLoginError, PostAuthLoginVariables>(
    (variables: PostAuthLoginVariables) => fetchPostAuthLogin({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminFormsSubmissionsExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsSubmissionsExportVariables = ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsSubmissionsExport = (
  variables: GetV2AdminFormsSubmissionsExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<Record<string, any>, GetV2AdminFormsSubmissionsExportError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms/submissions/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminFormsSubmissionsExport = <TData = Record<string, any>>(
  variables: GetV2AdminFormsSubmissionsExportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Record<string, any>, GetV2AdminFormsSubmissionsExportError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Record<string, any>, GetV2AdminFormsSubmissionsExportError, TData>(
    queryKeyFn({
      path: "/v2/admin/forms/submissions/export",
      operationId: "getV2AdminFormsSubmissionsExport",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsSubmissionsExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FormsOptionLabelsQueryParams = {
  /**
   * the option keys you want to retrieve
   */
  keys?: string;
  /**
   * the language to use for the label translation
   */
  lang?: string;
};

export type GetV2FormsOptionLabelsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsOptionLabelsResponse = {
  uuid?: string;
  name?: string;
  input_type?: string;
  model_key?: string;
  option_list_key?: string;
  options?: string[];
};

export type GetV2FormsOptionLabelsVariables = {
  queryParams?: GetV2FormsOptionLabelsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsOptionLabels = (variables: GetV2FormsOptionLabelsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2FormsOptionLabelsResponse,
    GetV2FormsOptionLabelsError,
    undefined,
    {},
    GetV2FormsOptionLabelsQueryParams,
    {}
  >({ url: "/v2/forms/option-labels", method: "get", ...variables, signal });

export const useGetV2FormsOptionLabels = <TData = GetV2FormsOptionLabelsResponse>(
  variables: GetV2FormsOptionLabelsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FormsOptionLabelsResponse, GetV2FormsOptionLabelsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsOptionLabelsResponse, GetV2FormsOptionLabelsError, TData>(
    queryKeyFn({ path: "/v2/forms/option-labels", operationId: "getV2FormsOptionLabels", variables }),
    ({ signal }) => fetchGetV2FormsOptionLabels({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchAuthChangeError = Fetcher.ErrorWrapper<undefined>;

export type PatchAuthChangeRequestBody = {
  token?: string;
  password?: string;
};

export type PatchAuthChangeVariables = {
  body?: PatchAuthChangeRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchAuthChange = (variables: PatchAuthChangeVariables, signal?: AbortSignal) =>
  apiFetch<Record<string, any>, PatchAuthChangeError, PatchAuthChangeRequestBody, {}, {}, {}>({
    url: "/auth/change",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchAuthChange = (
  options?: Omit<
    reactQuery.UseMutationOptions<Record<string, any>, PatchAuthChangeError, PatchAuthChangeVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Record<string, any>, PatchAuthChangeError, PatchAuthChangeVariables>(
    (variables: PatchAuthChangeVariables) => fetchPatchAuthChange({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostAuthResetError = Fetcher.ErrorWrapper<undefined>;

export type PostAuthResetRequestBody = {
  email_address?: string;
  callback_url?: string;
};

export type PostAuthResetVariables = {
  body?: PostAuthResetRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostAuthReset = (variables: PostAuthResetVariables, signal?: AbortSignal) =>
  apiFetch<Record<string, any>, PostAuthResetError, PostAuthResetRequestBody, {}, {}, {}>({
    url: "/auth/reset",
    method: "post",
    ...variables,
    signal
  });

export const usePostAuthReset = (
  options?: Omit<
    reactQuery.UseMutationOptions<Record<string, any>, PostAuthResetError, PostAuthResetVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Record<string, any>, PostAuthResetError, PostAuthResetVariables>(
    (variables: PostAuthResetVariables) => fetchPostAuthReset({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AuthVerifyError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AuthVerifyVariables = {
  body?: RequestBodies.PatchV2AuthVerifyBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AuthVerify = (variables: PatchV2AuthVerifyVariables, signal?: AbortSignal) =>
  apiFetch<Record<string, any>, PatchV2AuthVerifyError, RequestBodies.PatchV2AuthVerifyBody, {}, {}, {}>({
    url: "/v2/auth/verify",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2AuthVerify = (
  options?: Omit<
    reactQuery.UseMutationOptions<Record<string, any>, PatchV2AuthVerifyError, PatchV2AuthVerifyVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Record<string, any>, PatchV2AuthVerifyError, PatchV2AuthVerifyVariables>(
    (variables: PatchV2AuthVerifyVariables) => fetchPatchV2AuthVerify({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchAuthVerifyError = Fetcher.ErrorWrapper<undefined>;

export type PatchAuthVerifyVariables = {
  body?: RequestBodies.PatchV2AuthVerifyBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchAuthVerify = (variables: PatchAuthVerifyVariables, signal?: AbortSignal) =>
  apiFetch<Record<string, any>, PatchAuthVerifyError, RequestBodies.PatchV2AuthVerifyBody, {}, {}, {}>({
    url: "/auth/verify",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchAuthVerify = (
  options?: Omit<
    reactQuery.UseMutationOptions<Record<string, any>, PatchAuthVerifyError, PatchAuthVerifyVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Record<string, any>, PatchAuthVerifyError, PatchAuthVerifyVariables>(
    (variables: PatchAuthVerifyVariables) => fetchPatchAuthVerify({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2UsersResendError = Fetcher.ErrorWrapper<undefined>;

export type PostV2UsersResendRequestBody = {
  callback_url?: string;
  email_address?: string;
};

export type PostV2UsersResendVariables = {
  body?: PostV2UsersResendRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2UsersResend = (variables: PostV2UsersResendVariables, signal?: AbortSignal) =>
  apiFetch<Record<string, any>, PostV2UsersResendError, PostV2UsersResendRequestBody, {}, {}, {}>({
    url: "/v2/users/resend",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2UsersResend = (
  options?: Omit<
    reactQuery.UseMutationOptions<Record<string, any>, PostV2UsersResendError, PostV2UsersResendVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Record<string, any>, PostV2UsersResendError, PostV2UsersResendVariables>(
    (variables: PostV2UsersResendVariables) => fetchPostV2UsersResend({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2SitesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2SitesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2SitesUUIDVariables = {
  pathParams: DeleteV2SitesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2SitesUUID = (variables: DeleteV2SitesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2SitesUUIDError, undefined, {}, {}, DeleteV2SitesUUIDPathParams>({
    url: "/v2/sites/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2SitesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2SitesUUIDError, DeleteV2SitesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2SitesUUIDError, DeleteV2SitesUUIDVariables>(
    (variables: DeleteV2SitesUUIDVariables) => fetchDeleteV2SitesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2SitesUUIDPathParams = {
  uuid: string;
};

export type GetV2SitesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2SitesUUIDResponse = {
  data?: {
    id?: string;
    uuid?: string;
    status?: string;
    framework_key?: string;
    framework_uuid?: string;
    has_monitoring_data?: boolean;
    organisation?: {
      uuid?: string;
      type?: string;
      private?: boolean;
      name?: string;
      phone?: string;
      currency?: string;
      states?: string[];
      loan_status_types?: string[];
      land_systems?: string[];
      fund_utilisation?: string[];
      detailed_intervention_types?: string[];
      account_number_1?: string;
      account_number_2?: string;
      approach_of_marginalized_communities?: string;
      community_engagement_numbers_marginalized?: string;
      founding_date?: string;
      description?: string;
      leadership_team?: string;
      countries?: string[];
      languages?: string[];
      project_pitches?: {
        id?: string;
        uuid?: string;
        status?: string;
        readable_status?: string;
        organisation_id?: string;
        funding_programmes?: {
          id?: number;
          uuid?: string;
          name?: string;
          description?: string;
          read_more_url?: string;
          organisation_types?: string[];
          location?: string;
          status?: string;
        };
        tree_species?: {
          uuid?: string;
          name?: string;
          amount?: number;
          type?: string;
          collection?: string;
        }[];
        project_name?: string;
        how_discovered?: string;
        project_objectives?: string;
        project_country?: string[];
        project_county_district?: string;
        restoration_intervention_types?: string[];
        land_systems?: string[];
        tree_restoration_practices?: string[];
        total_hectares?: number;
        project_budget?: number;
        total_trees?: number;
        capacity_building_needs?: string[];
        additional?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        restoration_photos?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        cover?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        proof_of_land_tenure_mou?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        }[];
        detailed_project_budget?: {
          uuid?: string;
          url?: string;
          thumb_url?: string;
          collection_name?: string;
          title?: string;
          file_name?: string;
          mime_type?: string;
          size?: number;
          lat?: number;
          lng?: number;
          is_public?: boolean;
          created_at?: string;
        };
        expected_active_restoration_start_date?: string;
        expected_active_restoration_end_date?: string;
        description_of_project_timeline?: string;
        proj_partner_info?: string;
        land_tenure_proj_area?: string[];
        landholder_comm_engage?: string;
        proj_success_risks?: string;
        monitor_eval_plan?: string;
        proj_boundary?: string;
        sustainable_dev_goals?: string[];
        proj_area_description?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_sites?: number;
        environmental_goals?: string;
        main_degradation_causes?: string;
        seedlings_source?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        proposed_num_nurseries?: number;
        curr_land_degradation?: string;
        proj_impact_socieconom?: string;
        proj_impact_foodsec?: string;
        proj_impact_watersec?: string;
        proj_impact_jobtypes?: string;
        /**
         * @minimum 0
         * @maximum 4294967295
         */
        num_jobs_created?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_men?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_18to35?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_employees_older35?: number;
        proj_beneficiaries?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_women?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_small?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_large?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_youth?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_classes?: number;
        /**
         * @minimum 0
         * @maximum 100
         */
        pct_beneficiaries_scheduled_tribes?: number;
        monitoring_evaluation_plan?: string;
        main_causes_of_degradation?: string;
        deleted_at?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      tree_species?: {
        uuid?: string;
        name?: string;
        amount?: number;
        type?: string;
        collection?: string;
      }[];
      web_url?: string;
      facebook_url?: string;
      instagram_url?: string;
      linkedin_url?: string;
      twitter_url?: string;
      hq_street_1?: string;
      hq_street_2?: string;
      hq_city?: string;
      hq_state?: string;
      hq_zipcode?: string;
      hq_country?: string;
      fin_start_month?: number;
      /**
       * @format float
       */
      fin_budget_3year?: number;
      /**
       * @format float
       */
      fin_budget_2year?: number;
      /**
       * @format float
       */
      fin_budget_1year?: number;
      /**
       * @format float
       */
      fin_budget_current_year?: number;
      /**
       * @format float
       */
      ha_restored_total?: number;
      /**
       * @format float
       */
      ha_restored_3year?: number;
      relevant_experience_years?: number;
      trees_grown_total?: number;
      trees_grown_3year?: number;
      tree_care_approach?: string;
      ft_permanent_employees?: number;
      pt_permanent_employees?: number;
      temp_employees?: number;
      female_employees?: number;
      male_employees?: number;
      young_employees?: number;
      additional_funding_details?: string;
      community_experience?: string;
      total_engaged_community_members_3yr?: number;
      percent_engaged_women_3yr?: number;
      percent_engaged_men_3yr?: number;
      percent_engaged_under_35_3yr?: number;
      percent_engaged_over_35_3yr?: number;
      percent_engaged_smallholder_3yr?: number;
      total_trees_grown?: number;
      avg_tree_survival_rate?: number;
      tree_maintenance_aftercare_approach?: string;
      restored_areas_description?: string;
      monitoring_evaluation_experience?: string;
      funding_history?: string;
      engagement_farmers?: string[];
      engagement_women?: string[];
      engagement_youth?: string[];
      engagement_non_youth?: string[];
      tree_restoration_practices?: string[];
      business_model?: string;
      subtype?: string;
      organisation_revenue_this_year?: number;
      shapefiles?: {
        uuid?: string;
        shapefileable_type?: string;
        shapefileable_id?: number;
        geojson?: string;
        created_at?: string;
        updated_at?: string;
        deleted_at?: string;
      }[];
      bank_statements?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      previous_annual_reports?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      logo?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      cover?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      };
      reference?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      additional?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_2year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_last_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_this_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      op_budget_next_year?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      legal_registration?: {
        uuid?: string;
        url?: string;
        thumb_url?: string;
        collection_name?: string;
        title?: string;
        file_name?: string;
        mime_type?: string;
        size?: number;
        lat?: number;
        lng?: number;
        is_public?: boolean;
        created_at?: string;
      }[];
      /**
       * this is a list of key value pairs eg slug: name
       */
      tags?: string[];
    };
  }[];
};

export type GetV2SitesUUIDVariables = {
  pathParams: GetV2SitesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2SitesUUID = (variables: GetV2SitesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2SitesUUIDResponse, GetV2SitesUUIDError, undefined, {}, {}, GetV2SitesUUIDPathParams>({
    url: "/v2/sites/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2SitesUUID = <TData = GetV2SitesUUIDResponse>(
  variables: GetV2SitesUUIDVariables,
  options?: Omit<reactQuery.UseQueryOptions<GetV2SitesUUIDResponse, GetV2SitesUUIDError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2SitesUUIDResponse, GetV2SitesUUIDError, TData>(
    queryKeyFn({ path: "/v2/sites/{UUID}", operationId: "getV2SitesUUID", variables }),
    ({ signal }) => fetchGetV2SitesUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2SiteMonitoringsUUIDPathParams = {
  uuid: string;
};

export type GetV2SiteMonitoringsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2SiteMonitoringsUUIDResponse = {
  uuid?: string;
  status?: string;
  tree_count?: number;
  tree_cover?: number;
  field_tree_count?: number;
  /**
   * @format date
   */
  measurement_date?: string;
  /**
   * @format date-time
   */
  last_updated?: string;
  /**
   * @format date-time
   */
  created_at?: string;
  /**
   * @format date-time
   */
  updated_at?: string;
};

export type GetV2SiteMonitoringsUUIDVariables = {
  pathParams: GetV2SiteMonitoringsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2SiteMonitoringsUUID = (variables: GetV2SiteMonitoringsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2SiteMonitoringsUUIDResponse,
    GetV2SiteMonitoringsUUIDError,
    undefined,
    {},
    {},
    GetV2SiteMonitoringsUUIDPathParams
  >({ url: "/v2/site-monitorings/{uuid}", method: "get", ...variables, signal });

export const useGetV2SiteMonitoringsUUID = <TData = GetV2SiteMonitoringsUUIDResponse>(
  variables: GetV2SiteMonitoringsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2SiteMonitoringsUUIDResponse, GetV2SiteMonitoringsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2SiteMonitoringsUUIDResponse, GetV2SiteMonitoringsUUIDError, TData>(
    queryKeyFn({ path: "/v2/site-monitorings/{UUID}", operationId: "getV2SiteMonitoringsUUID", variables }),
    ({ signal }) => fetchGetV2SiteMonitoringsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2SitesUUIDMonitoringsPathParams = {
  uuid: string;
};

export type GetV2SitesUUIDMonitoringsQueryParams = {
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2SitesUUIDMonitoringsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2SitesUUIDMonitoringsResponse = {
  data?: {
    uuid?: string;
    status?: string;
    tree_count?: number;
    tree_cover?: number;
    field_tree_count?: number;
    /**
     * @format date
     */
    measurement_date?: string;
    /**
     * @format date-time
     */
    last_updated?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2SitesUUIDMonitoringsVariables = {
  pathParams: GetV2SitesUUIDMonitoringsPathParams;
  queryParams?: GetV2SitesUUIDMonitoringsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2SitesUUIDMonitorings = (variables: GetV2SitesUUIDMonitoringsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2SitesUUIDMonitoringsResponse,
    GetV2SitesUUIDMonitoringsError,
    undefined,
    {},
    GetV2SitesUUIDMonitoringsQueryParams,
    GetV2SitesUUIDMonitoringsPathParams
  >({ url: "/v2/sites/{uuid}/monitorings", method: "get", ...variables, signal });

export const useGetV2SitesUUIDMonitorings = <TData = GetV2SitesUUIDMonitoringsResponse>(
  variables: GetV2SitesUUIDMonitoringsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2SitesUUIDMonitoringsResponse, GetV2SitesUUIDMonitoringsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2SitesUUIDMonitoringsResponse, GetV2SitesUUIDMonitoringsError, TData>(
    queryKeyFn({ path: "/v2/sites/{UUID}/monitorings", operationId: "getV2SitesUUIDMonitorings", variables }),
    ({ signal }) => fetchGetV2SitesUUIDMonitorings({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ProjectsUUIDMonitoringsPathParams = {
  uuid: string;
};

export type GetV2ProjectsUUIDMonitoringsQueryParams = {
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2ProjectsUUIDMonitoringsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDMonitoringsResponse = {
  data?: {
    uuid?: string;
    status?: string;
    total_hectares?: number;
    ha_mangrove?: number;
    ha_assisted?: number;
    ha_agroforestry?: number;
    ha_reforestation?: number;
    ha_peatland?: number;
    ha_riparian?: number;
    ha_enrichment?: number;
    ha_nucleation?: number;
    ha_silvopasture?: number;
    ha_direct?: number;
    tree_count?: number;
    tree_cover?: number;
    field_tree_count?: number;
    tree_cover_loss?: number;
    carbon_benefits?: number;
    number_of_esrp?: number;
    field_tree_regenerated?: number;
    field_tree_survival_percent?: number;
    /**
     * @format date
     */
    start_date?: string;
    /**
     * @format date
     */
    end_date?: string;
    /**
     * @format date-time
     */
    last_updated?: string;
    /**
     * @format date-time
     */
    created_at?: string;
    /**
     * @format date-time
     */
    updated_at?: string;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    from?: number;
    to?: number;
    current_page?: number;
    last_page?: number;
    per_page?: number;
    total?: number;
    path?: string;
    links?: {
      url?: string;
      label?: string;
      active?: boolean;
    }[];
  };
};

export type GetV2ProjectsUUIDMonitoringsVariables = {
  pathParams: GetV2ProjectsUUIDMonitoringsPathParams;
  queryParams?: GetV2ProjectsUUIDMonitoringsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectsUUIDMonitorings = (
  variables: GetV2ProjectsUUIDMonitoringsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2ProjectsUUIDMonitoringsResponse,
    GetV2ProjectsUUIDMonitoringsError,
    undefined,
    {},
    GetV2ProjectsUUIDMonitoringsQueryParams,
    GetV2ProjectsUUIDMonitoringsPathParams
  >({ url: "/v2/projects/{uuid}/monitorings", method: "get", ...variables, signal });

export const useGetV2ProjectsUUIDMonitorings = <TData = GetV2ProjectsUUIDMonitoringsResponse>(
  variables: GetV2ProjectsUUIDMonitoringsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectsUUIDMonitoringsResponse, GetV2ProjectsUUIDMonitoringsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectsUUIDMonitoringsResponse, GetV2ProjectsUUIDMonitoringsError, TData>(
    queryKeyFn({ path: "/v2/projects/{UUID}/monitorings", operationId: "getV2ProjectsUUIDMonitorings", variables }),
    ({ signal }) => fetchGetV2ProjectsUUIDMonitorings({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2ProjectsUUIDInvitePathParams = {
  uuid: string;
};

export type PostV2ProjectsUUIDInviteError = Fetcher.ErrorWrapper<undefined>;

export type PostV2ProjectsUUIDInviteResponse = {
  id?: number;
  uuid?: string;
  project_id?: number;
  email_address?: string;
  /**
   * @format datetime
   */
  accepted_at?: string;
  /**
   * @format datetime
   */
  created_at?: string;
};

export type PostV2ProjectsUUIDInviteRequestBody = {
  email_address?: string;
};

export type PostV2ProjectsUUIDInviteVariables = {
  body?: PostV2ProjectsUUIDInviteRequestBody;
  pathParams: PostV2ProjectsUUIDInvitePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2ProjectsUUIDInvite = (variables: PostV2ProjectsUUIDInviteVariables, signal?: AbortSignal) =>
  apiFetch<
    PostV2ProjectsUUIDInviteResponse,
    PostV2ProjectsUUIDInviteError,
    PostV2ProjectsUUIDInviteRequestBody,
    {},
    {},
    PostV2ProjectsUUIDInvitePathParams
  >({ url: "/v2/projects/{uuid}/invite", method: "post", ...variables, signal });

export const usePostV2ProjectsUUIDInvite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2ProjectsUUIDInviteResponse,
      PostV2ProjectsUUIDInviteError,
      PostV2ProjectsUUIDInviteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2ProjectsUUIDInviteResponse,
    PostV2ProjectsUUIDInviteError,
    PostV2ProjectsUUIDInviteVariables
  >(
    (variables: PostV2ProjectsUUIDInviteVariables) =>
      fetchPostV2ProjectsUUIDInvite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2ProjectsInviteAcceptError = Fetcher.ErrorWrapper<undefined>;

export type PostV2ProjectsInviteAcceptResponse = {
  id?: number;
  uuid?: string;
  project_id?: number;
  email_address?: string;
  /**
   * @format datetime
   */
  accepted_at?: string;
  /**
   * @format datetime
   */
  created_at?: string;
};

export type PostV2ProjectsInviteAcceptRequestBody = {
  token: string;
};

export type PostV2ProjectsInviteAcceptVariables = {
  body: PostV2ProjectsInviteAcceptRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2ProjectsInviteAccept = (variables: PostV2ProjectsInviteAcceptVariables, signal?: AbortSignal) =>
  apiFetch<
    PostV2ProjectsInviteAcceptResponse,
    PostV2ProjectsInviteAcceptError,
    PostV2ProjectsInviteAcceptRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/projects/invite/accept", method: "post", ...variables, signal });

export const usePostV2ProjectsInviteAccept = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostV2ProjectsInviteAcceptResponse,
      PostV2ProjectsInviteAcceptError,
      PostV2ProjectsInviteAcceptVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostV2ProjectsInviteAcceptResponse,
    PostV2ProjectsInviteAcceptError,
    PostV2ProjectsInviteAcceptVariables
  >(
    (variables: PostV2ProjectsInviteAcceptVariables) =>
      fetchPostV2ProjectsInviteAccept({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2NurseriesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2NurseriesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2NurseriesUUIDVariables = {
  pathParams: DeleteV2NurseriesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2NurseriesUUID = (variables: DeleteV2NurseriesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2NurseriesUUIDError, undefined, {}, {}, DeleteV2NurseriesUUIDPathParams>({
    url: "/v2/nurseries/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2NurseriesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2NurseriesUUIDError, DeleteV2NurseriesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2NurseriesUUIDError, DeleteV2NurseriesUUIDVariables>(
    (variables: DeleteV2NurseriesUUIDVariables) => fetchDeleteV2NurseriesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminAuditsENTITYUUIDPathParams = {
  /**
   * allowed values project/site/nursery/project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2AdminAuditsENTITYUUIDQueryParams = {
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminAuditsENTITYUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminAuditsENTITYUUIDResponse = {
  data?: {
    uuid?: string;
    name?: string;
    type?: number;
  }[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
    unfiltered_total?: number;
  };
};

export type GetV2AdminAuditsENTITYUUIDVariables = {
  pathParams: GetV2AdminAuditsENTITYUUIDPathParams;
  queryParams?: GetV2AdminAuditsENTITYUUIDQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminAuditsENTITYUUID = (variables: GetV2AdminAuditsENTITYUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminAuditsENTITYUUIDResponse,
    GetV2AdminAuditsENTITYUUIDError,
    undefined,
    {},
    GetV2AdminAuditsENTITYUUIDQueryParams,
    GetV2AdminAuditsENTITYUUIDPathParams
  >({ url: "/v2/admin/audits/{entity}/{uuid}", method: "get", ...variables, signal });

export const useGetV2AdminAuditsENTITYUUID = <TData = GetV2AdminAuditsENTITYUUIDResponse>(
  variables: GetV2AdminAuditsENTITYUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminAuditsENTITYUUIDResponse, GetV2AdminAuditsENTITYUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminAuditsENTITYUUIDResponse, GetV2AdminAuditsENTITYUUIDError, TData>(
    queryKeyFn({ path: "/v2/admin/audits/{ENTITY}/{UUID}", operationId: "getV2AdminAuditsENTITYUUID", variables }),
    ({ signal }) => fetchGetV2AdminAuditsENTITYUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminENTITYExportFRAMEWORKPathParams = {
  /**
   * allowed values projects/sites/nurseries/project-reports/site-reports/nursery-reports
   */
  entity: string;
  /**
   * allowed values terrafund/ppc
   */
  framework: string;
};

export type GetV2AdminENTITYExportFRAMEWORKError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminENTITYExportFRAMEWORKVariables = {
  pathParams: GetV2AdminENTITYExportFRAMEWORKPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminENTITYExportFRAMEWORK = (
  variables: GetV2AdminENTITYExportFRAMEWORKVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetV2AdminENTITYExportFRAMEWORKError, undefined, {}, {}, GetV2AdminENTITYExportFRAMEWORKPathParams>({
    url: "/v2/admin/{entity}/export/{framework}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminENTITYExportFRAMEWORK = <TData = Blob>(
  variables: GetV2AdminENTITYExportFRAMEWORKVariables,
  options?: Omit<reactQuery.UseQueryOptions<Blob, GetV2AdminENTITYExportFRAMEWORKError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetV2AdminENTITYExportFRAMEWORKError, TData>(
    queryKeyFn({
      path: "/v2/admin/{ENTITY}/export/{FRAMEWORK}",
      operationId: "getV2AdminENTITYExportFRAMEWORK",
      variables
    }),
    ({ signal }) => fetchGetV2AdminENTITYExportFRAMEWORK({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ProjectsUUIDENTITYExportPathParams = {
  /**
   * allowed values sites|nurseries|project-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2ProjectsUUIDENTITYExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectsUUIDENTITYExportVariables = {
  pathParams: GetV2ProjectsUUIDENTITYExportPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectsUUIDENTITYExport = (
  variables: GetV2ProjectsUUIDENTITYExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetV2ProjectsUUIDENTITYExportError, undefined, {}, {}, GetV2ProjectsUUIDENTITYExportPathParams>({
    url: "/v2/projects/{uuid}/{entity}/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ProjectsUUIDENTITYExport = <TData = Blob>(
  variables: GetV2ProjectsUUIDENTITYExportVariables,
  options?: Omit<reactQuery.UseQueryOptions<Blob, GetV2ProjectsUUIDENTITYExportError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetV2ProjectsUUIDENTITYExportError, TData>(
    queryKeyFn({
      path: "/v2/projects/{UUID}/{ENTITY}/export",
      operationId: "getV2ProjectsUUIDENTITYExport",
      variables
    }),
    ({ signal }) => fetchGetV2ProjectsUUIDENTITYExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ENTITYUUIDExportPathParams = {
  /**
   * allowed values sites|nurseries|projects|project-reports/site-reports/nursery-reports
   */
  entity: string;
  uuid: string;
};

export type GetV2ENTITYUUIDExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ENTITYUUIDExportVariables = {
  pathParams: GetV2ENTITYUUIDExportPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ENTITYUUIDExport = (variables: GetV2ENTITYUUIDExportVariables, signal?: AbortSignal) =>
  apiFetch<Blob, GetV2ENTITYUUIDExportError, undefined, {}, {}, GetV2ENTITYUUIDExportPathParams>({
    url: "/v2/{entity}/{uuid}/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ENTITYUUIDExport = <TData = Blob>(
  variables: GetV2ENTITYUUIDExportVariables,
  options?: Omit<reactQuery.UseQueryOptions<Blob, GetV2ENTITYUUIDExportError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetV2ENTITYUUIDExportError, TData>(
    queryKeyFn({ path: "/v2/{ENTITY}/{UUID}/export", operationId: "getV2ENTITYUUIDExport", variables }),
    ({ signal }) => fetchGetV2ENTITYUUIDExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type QueryOperation =
  | {
      path: "/v2/tree-species/{entity}/{UUID}";
      operationId: "getV2TreeSpeciesEntityUUID";
      variables: GetV2TreeSpeciesEntityUUIDVariables;
    }
  | {
      path: "/v2/admin/projects/multi";
      operationId: "getV2AdminProjectsMulti";
      variables: GetV2AdminProjectsMultiVariables;
    }
  | {
      path: "/v2/admin/nurseries/multi";
      operationId: "getV2AdminNurseriesMulti";
      variables: GetV2AdminNurseriesMultiVariables;
    }
  | {
      path: "/v2/admin/sites/multi";
      operationId: "getV2AdminSitesMulti";
      variables: GetV2AdminSitesMultiVariables;
    }
  | {
      path: "/v2/projects/{UUID}/partners";
      operationId: "getV2ProjectsUUIDPartners";
      variables: GetV2ProjectsUUIDPartnersVariables;
    }
  | {
      path: "/v2/my/projects";
      operationId: "getV2MyProjects";
      variables: GetV2MyProjectsVariables;
    }
  | {
      path: "/v2/my/actions";
      operationId: "getV2MyActions";
      variables: GetV2MyActionsVariables;
    }
  | {
      path: "/v2/{ENTITY}/{UUID}/reports";
      operationId: "getV2ENTITYUUIDReports";
      variables: GetV2ENTITYUUIDReportsVariables;
    }
  | {
      path: "/v2/admin/nursery-reports";
      operationId: "getV2AdminNurseryReports";
      variables: GetV2AdminNurseryReportsVariables;
    }
  | {
      path: "/v2/admin/site-reports";
      operationId: "getV2AdminSiteReports";
      variables: GetV2AdminSiteReportsVariables;
    }
  | {
      path: "/v2/admin/project-reports";
      operationId: "getV2AdminProjectReports";
      variables: GetV2AdminProjectReportsVariables;
    }
  | {
      path: "/v2/admin/tasks";
      operationId: "getV2AdminTasks";
      variables: GetV2AdminTasksVariables;
    }
  | {
      path: "/v2/admin/nurseries";
      operationId: "getV2AdminNurseries";
      variables: GetV2AdminNurseriesVariables;
    }
  | {
      path: "/v2/admin/forms";
      operationId: "getV2AdminForms";
      variables: GetV2AdminFormsVariables;
    }
  | {
      path: "/v2/admin/reporting-frameworks";
      operationId: "getV2AdminReportingFrameworks";
      variables: GetV2AdminReportingFrameworksVariables;
    }
  | {
      path: "/v2/reporting-frameworks/access-code/{ACCESS_CODE}";
      operationId: "getV2ReportingFrameworksAccessCodeACCESSCODE";
      variables: GetV2ReportingFrameworksAccessCodeACCESSCODEVariables;
    }
  | {
      path: "/v2/reporting-frameworks/{UUID}";
      operationId: "getV2ReportingFrameworksUUID";
      variables: GetV2ReportingFrameworksUUIDVariables;
    }
  | {
      path: "/v2/forms/{ENTITY}/{UUID}";
      operationId: "getV2FormsENTITYUUID";
      variables: GetV2FormsENTITYUUIDVariables;
    }
  | {
      path: "/v2/projects/{UUID}/site-polygons";
      operationId: "getV2ProjectsUUIDSitePolygons";
      variables: GetV2ProjectsUUIDSitePolygonsVariables;
    }
  | {
      path: "/v2/admin/update-requests/";
      operationId: "getV2AdminUpdateRequests";
      variables: GetV2AdminUpdateRequestsVariables;
    }
  | {
      path: "/v2/update-requests/{UUID}";
      operationId: "getV2UpdateRequestsUUID";
      variables: GetV2UpdateRequestsUUIDVariables;
    }
  | {
      path: "/v2/update-requests/{ENTITY}/{UUID}";
      operationId: "getV2UpdateRequestsENTITYUUID";
      variables: GetV2UpdateRequestsENTITYUUIDVariables;
    }
  | {
      path: "/v2/workdays/{ENTITY}/{UUID}";
      operationId: "getV2WorkdaysENTITYUUID";
      variables: GetV2WorkdaysENTITYUUIDVariables;
    }
  | {
      path: "/v2/stratas/{ENTITY}/{UUID}";
      operationId: "getV2StratasENTITYUUID";
      variables: GetV2StratasENTITYUUIDVariables;
    }
  | {
      path: "/v2/seedings/{ENTITY}/{UUID}";
      operationId: "getV2SeedingsENTITYUUID";
      variables: GetV2SeedingsENTITYUUIDVariables;
    }
  | {
      path: "/v2/disturbances/{ENTITY}/{UUID}";
      operationId: "getV2DisturbancesENTITYUUID";
      variables: GetV2DisturbancesENTITYUUIDVariables;
    }
  | {
      path: "/v2/invasives/{ENTITY}/{UUID}";
      operationId: "getV2InvasivesENTITYUUID";
      variables: GetV2InvasivesENTITYUUIDVariables;
    }
  | {
      path: "/v2/forms";
      operationId: "getV2Forms";
      variables: GetV2FormsVariables;
    }
  | {
      path: "/v2/forms/linked-field-listing";
      operationId: "getV2FormsLinkedFieldListing";
      variables: GetV2FormsLinkedFieldListingVariables;
    }
  | {
      path: "/v2/admin/forms/common-options/{BUCKET}";
      operationId: "getV2AdminFormsCommonOptionsBUCKET";
      variables: GetV2AdminFormsCommonOptionsBUCKETVariables;
    }
  | {
      path: "/v2/admin/organisations";
      operationId: "getV2AdminOrganisations";
      variables: GetV2AdminOrganisationsVariables;
    }
  | {
      path: "/v2/admin/organisations/multi";
      operationId: "getV2AdminOrganisationsMulti";
      variables: GetV2AdminOrganisationsMultiVariables;
    }
  | {
      path: "/v2/admin/organisations/{UUID}";
      operationId: "getV2AdminOrganisationsUUID";
      variables: GetV2AdminOrganisationsUUIDVariables;
    }
  | {
      path: "/v2/admin/organisations/export";
      operationId: "getV2AdminOrganisationsExport";
      variables: GetV2AdminOrganisationsExportVariables;
    }
  | {
      path: "/v2/organisations/{UUID}";
      operationId: "getV2OrganisationsUUID";
      variables: GetV2OrganisationsUUIDVariables;
    }
  | {
      path: "/v2/organisations/listing";
      operationId: "getV2OrganisationsListing";
      variables: GetV2OrganisationsListingVariables;
    }
  | {
      path: "/v2/organisations/user-requests/{UUID}";
      operationId: "getV2OrganisationsUserRequestsUUID";
      variables: GetV2OrganisationsUserRequestsUUIDVariables;
    }
  | {
      path: "/v2/organisations/approved-users/{UUID}";
      operationId: "getV2OrganisationsApprovedUsersUUID";
      variables: GetV2OrganisationsApprovedUsersUUIDVariables;
    }
  | {
      path: "/v2/admin/users";
      operationId: "getV2AdminUsers";
      variables: GetV2AdminUsersVariables;
    }
  | {
      path: "/v2/admin/users/{UUID}";
      operationId: "getV2AdminUsersUUID";
      variables: GetV2AdminUsersUUIDVariables;
    }
  | {
      path: "/v2/admin/users/multi";
      operationId: "getV2AdminUsersMulti";
      variables: GetV2AdminUsersMultiVariables;
    }
  | {
      path: "/v2/admin/users/export";
      operationId: "getV2AdminUsersExport";
      variables: GetV2AdminUsersExportVariables;
    }
  | {
      path: "/v2/{MODEL}/{UUID}/files";
      operationId: "getV2MODELUUIDFiles";
      variables: GetV2MODELUUIDFilesVariables;
    }
  | {
      path: "/v2/{MODEL}/{UUID}/image/locations";
      operationId: "getV2MODELUUIDImageLocations";
      variables: GetV2MODELUUIDImageLocationsVariables;
    }
  | {
      path: "/v2/admin/sites";
      operationId: "getV2AdminSites";
      variables: GetV2AdminSitesVariables;
    }
  | {
      path: "/v2/admin/project-pitches";
      operationId: "getV2AdminProjectPitches";
      variables: GetV2AdminProjectPitchesVariables;
    }
  | {
      path: "/v2/admin/projects";
      operationId: "getV2AdminProjects";
      variables: GetV2AdminProjectsVariables;
    }
  | {
      path: "/v2/projects/{UUID}";
      operationId: "getV2ProjectsUUID";
      variables: GetV2ProjectsUUIDVariables;
    }
  | {
      path: "/v2/projects/{UUID}/sites";
      operationId: "getV2ProjectsUUIDSites";
      variables: GetV2ProjectsUUIDSitesVariables;
    }
  | {
      path: "/v2/projects/{UUID}/nurseries";
      operationId: "getV2ProjectsUUIDNurseries";
      variables: GetV2ProjectsUUIDNurseriesVariables;
    }
  | {
      path: "/v2/projects/{UUID}/tasks";
      operationId: "getV2ProjectsUUIDTasks";
      variables: GetV2ProjectsUUIDTasksVariables;
    }
  | {
      path: "/v2/organisations/{UUID}/tasks";
      operationId: "getV2OrganisationsUUIDTasks";
      variables: GetV2OrganisationsUUIDTasksVariables;
    }
  | {
      path: "/v2/tasks/{UUID}";
      operationId: "getV2TasksUUID";
      variables: GetV2TasksUUIDVariables;
    }
  | {
      path: "/v2/tasks/{UUID}/reports";
      operationId: "getV2TasksUUIDReports";
      variables: GetV2TasksUUIDReportsVariables;
    }
  | {
      path: "/v2/{ENTITY}/{UUID}";
      operationId: "getV2ENTITYUUID";
      variables: GetV2ENTITYUUIDVariables;
    }
  | {
      path: "/v2/forms/sites/{UUID}";
      operationId: "getV2FormsSitesUUID";
      variables: GetV2FormsSitesUUIDVariables;
    }
  | {
      path: "/v2/admin/project-pitches/export";
      operationId: "getV2AdminProjectPitchesExport";
      variables: GetV2AdminProjectPitchesExportVariables;
    }
  | {
      path: "/v2/project-pitches";
      operationId: "getV2ProjectPitches";
      variables: GetV2ProjectPitchesVariables;
    }
  | {
      path: "/v2/project-pitches/{UUID}";
      operationId: "getV2ProjectPitchesUUID";
      variables: GetV2ProjectPitchesUUIDVariables;
    }
  | {
      path: "/v2/project-pitches/{UUID}/submissions";
      operationId: "getV2ProjectPitchesUUIDSubmissions";
      variables: GetV2ProjectPitchesUUIDSubmissionsVariables;
    }
  | {
      path: "/v2/admin/forms/submissions/{UUID}";
      operationId: "getV2AdminFormsSubmissionsUUID";
      variables: GetV2AdminFormsSubmissionsUUIDVariables;
    }
  | {
      path: "/v2/admin/forms/submissions/{UUID}/export";
      operationId: "getV2AdminFormsSubmissionsUUIDExport";
      variables: GetV2AdminFormsSubmissionsUUIDExportVariables;
    }
  | {
      path: "/v2/admin/forms/submissions";
      operationId: "getV2AdminFormsSubmissions";
      variables: GetV2AdminFormsSubmissionsVariables;
    }
  | {
      path: "/v2/forms/my/submissions";
      operationId: "getV2FormsMySubmissions";
      variables: GetV2FormsMySubmissionsVariables;
    }
  | {
      path: "/v2/forms/{UUID}";
      operationId: "getV2FormsUUID";
      variables: GetV2FormsUUIDVariables;
    }
  | {
      path: "/v2/funding-programme";
      operationId: "getV2FundingProgramme";
      variables: GetV2FundingProgrammeVariables;
    }
  | {
      path: "/v2/admin/funding-programme";
      operationId: "getV2AdminFundingProgramme";
      variables: GetV2AdminFundingProgrammeVariables;
    }
  | {
      path: "/v2/funding-programme/{UUID}";
      operationId: "getV2FundingProgrammeUUID";
      variables: GetV2FundingProgrammeUUIDVariables;
    }
  | {
      path: "/v2/admin/funding-programme/{UUID}";
      operationId: "getV2AdminFundingProgrammeUUID";
      variables: GetV2AdminFundingProgrammeUUIDVariables;
    }
  | {
      path: "/v2/funding-programme/stage";
      operationId: "getV2FundingProgrammeStage";
      variables: GetV2FundingProgrammeStageVariables;
    }
  | {
      path: "/v2/funding-programme/stage/{UUID}";
      operationId: "getV2FundingProgrammeStageUUID";
      variables: GetV2FundingProgrammeStageUUIDVariables;
    }
  | {
      path: "/v2/forms/submissions/{UUID}";
      operationId: "getV2FormsSubmissionsUUID";
      variables: GetV2FormsSubmissionsUUIDVariables;
    }
  | {
      path: "/v2/admin/forms/applications";
      operationId: "getV2AdminFormsApplications";
      variables: GetV2AdminFormsApplicationsVariables;
    }
  | {
      path: "/v2/admin/forms/applications/{UUID}";
      operationId: "getV2AdminFormsApplicationsUUID";
      variables: GetV2AdminFormsApplicationsUUIDVariables;
    }
  | {
      path: "/v2/admin/forms/applications/{UUID}/export";
      operationId: "getV2AdminFormsApplicationsUUIDExport";
      variables: GetV2AdminFormsApplicationsUUIDExportVariables;
    }
  | {
      path: "/v2/my/applications";
      operationId: "getV2MyApplications";
      variables: GetV2MyApplicationsVariables;
    }
  | {
      path: "/v2/applications/{UUID}";
      operationId: "getV2ApplicationsUUID";
      variables: GetV2ApplicationsUUIDVariables;
    }
  | {
      path: "/v2/applications/{UUID}/export";
      operationId: "getV2ApplicationsUUIDExport";
      variables: GetV2ApplicationsUUIDExportVariables;
    }
  | {
      path: "/auth/logout";
      operationId: "getAuthLogout";
      variables: GetAuthLogoutVariables;
    }
  | {
      path: "/auth/me";
      operationId: "getAuthMe";
      variables: GetAuthMeVariables;
    }
  | {
      path: "/v2/admin/forms/submissions/export";
      operationId: "getV2AdminFormsSubmissionsExport";
      variables: GetV2AdminFormsSubmissionsExportVariables;
    }
  | {
      path: "/v2/forms/option-labels";
      operationId: "getV2FormsOptionLabels";
      variables: GetV2FormsOptionLabelsVariables;
    }
  | {
      path: "/v2/sites/{UUID}";
      operationId: "getV2SitesUUID";
      variables: GetV2SitesUUIDVariables;
    }
  | {
      path: "/v2/site-monitorings/{UUID}";
      operationId: "getV2SiteMonitoringsUUID";
      variables: GetV2SiteMonitoringsUUIDVariables;
    }
  | {
      path: "/v2/sites/{UUID}/monitorings";
      operationId: "getV2SitesUUIDMonitorings";
      variables: GetV2SitesUUIDMonitoringsVariables;
    }
  | {
      path: "/v2/projects/{UUID}/monitorings";
      operationId: "getV2ProjectsUUIDMonitorings";
      variables: GetV2ProjectsUUIDMonitoringsVariables;
    }
  | {
      path: "/v2/admin/audits/{ENTITY}/{UUID}";
      operationId: "getV2AdminAuditsENTITYUUID";
      variables: GetV2AdminAuditsENTITYUUIDVariables;
    }
  | {
      path: "/v2/admin/{ENTITY}/export/{FRAMEWORK}";
      operationId: "getV2AdminENTITYExportFRAMEWORK";
      variables: GetV2AdminENTITYExportFRAMEWORKVariables;
    }
  | {
      path: "/v2/projects/{UUID}/{ENTITY}/export";
      operationId: "getV2ProjectsUUIDENTITYExport";
      variables: GetV2ProjectsUUIDENTITYExportVariables;
    }
  | {
      path: "/v2/{ENTITY}/{UUID}/export";
      operationId: "getV2ENTITYUUIDExport";
      variables: GetV2ENTITYUUIDExportVariables;
    };
