/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";
import type * as RequestBodies from "./apiRequestBodies";

export type GetOrganisationsIDUsersPathParams = {
  id: number;
};

export type GetOrganisationsIDUsersError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationsIDUsersVariables = {
  pathParams: GetOrganisationsIDUsersPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationsIDUsers = (variables: GetOrganisationsIDUsersVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.MaskedUserReadAll,
    GetOrganisationsIDUsersError,
    undefined,
    {},
    {},
    GetOrganisationsIDUsersPathParams
  >({ url: "/organisations/{id}/users", method: "get", ...variables, signal });

export const useGetOrganisationsIDUsers = <TData = Schemas.MaskedUserReadAll>(
  variables: GetOrganisationsIDUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.MaskedUserReadAll, GetOrganisationsIDUsersError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.MaskedUserReadAll, GetOrganisationsIDUsersError, TData>(
    queryKeyFn({ path: "/organisations/{ID}/users", operationId: "getOrganisationsIDUsers", variables }),
    ({ signal }) => fetchGetOrganisationsIDUsers({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetOrganisationsIDUsersInspectPathParams = {
  id: number;
};

export type GetOrganisationsIDUsersInspectError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationsIDUsersInspectVariables = {
  pathParams: GetOrganisationsIDUsersInspectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationsIDUsersInspect = (
  variables: GetOrganisationsIDUsersInspectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.UserReadAll,
    GetOrganisationsIDUsersInspectError,
    undefined,
    {},
    {},
    GetOrganisationsIDUsersInspectPathParams
  >({ url: "/organisations/{id}/users/inspect", method: "get", ...variables, signal });

export const useGetOrganisationsIDUsersInspect = <TData = Schemas.UserReadAll>(
  variables: GetOrganisationsIDUsersInspectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.UserReadAll, GetOrganisationsIDUsersInspectError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.UserReadAll, GetOrganisationsIDUsersInspectError, TData>(
    queryKeyFn({ path: "/organisations/{ID}/users/inspect", operationId: "getOrganisationsIDUsersInspect", variables }),
    ({ signal }) => fetchGetOrganisationsIDUsersInspect({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostUsersError = Fetcher.ErrorWrapper<undefined>;

export type PostUsersVariables = {
  body?: Schemas.UserCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostUsers = (variables: PostUsersVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UserRead, PostUsersError, Schemas.UserCreate, {}, {}, {}>({
    url: "/users",
    method: "post",
    ...variables,
    signal
  });

export const usePostUsers = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.UserRead, PostUsersError, PostUsersVariables>, "mutationFn">
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.UserRead, PostUsersError, PostUsersVariables>(
    (variables: PostUsersVariables) => fetchPostUsers({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchUsersIDPathParams = {
  id: number;
};

export type PatchUsersIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchUsersIDVariables = {
  body?: Schemas.UserUpdate;
  pathParams: PatchUsersIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchUsersID = (variables: PatchUsersIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UserRead, PatchUsersIDError, Schemas.UserUpdate, {}, {}, PatchUsersIDPathParams>({
    url: "/users/{id}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchUsersID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.UserRead, PatchUsersIDError, PatchUsersIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.UserRead, PatchUsersIDError, PatchUsersIDVariables>(
    (variables: PatchUsersIDVariables) => fetchPatchUsersID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetUsersIDPathParams = {
  id: number;
};

export type GetUsersIDError = Fetcher.ErrorWrapper<undefined>;

export type GetUsersIDVariables = {
  pathParams: GetUsersIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetUsersID = (variables: GetUsersIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UserRead, GetUsersIDError, undefined, {}, {}, GetUsersIDPathParams>({
    url: "/users/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetUsersID = <TData = Schemas.UserRead>(
  variables: GetUsersIDVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.UserRead, GetUsersIDError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.UserRead, GetUsersIDError, TData>(
    queryKeyFn({ path: "/users/{ID}", operationId: "getUsersID", variables }),
    ({ signal }) => fetchGetUsersID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostUsersInviteError = Fetcher.ErrorWrapper<undefined>;

export type PostUsersInviteVariables = {
  body?: Schemas.UserInvite;
} & ApiContext["fetcherOptions"];

export const fetchPostUsersInvite = (variables: PostUsersInviteVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UserRead, PostUsersInviteError, Schemas.UserInvite, {}, {}, {}>({
    url: "/users/invite",
    method: "post",
    ...variables,
    signal
  });

export const usePostUsersInvite = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.UserRead, PostUsersInviteError, PostUsersInviteVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.UserRead, PostUsersInviteError, PostUsersInviteVariables>(
    (variables: PostUsersInviteVariables) => fetchPostUsersInvite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostUsersAcceptError = Fetcher.ErrorWrapper<undefined>;

export type PostUsersAcceptVariables = {
  body?: Schemas.UserAccept;
} & ApiContext["fetcherOptions"];

export const fetchPostUsersAccept = (variables: PostUsersAcceptVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UserRead, PostUsersAcceptError, Schemas.UserAccept, {}, {}, {}>({
    url: "/users/accept",
    method: "post",
    ...variables,
    signal
  });

export const usePostUsersAccept = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.UserRead, PostUsersAcceptError, PostUsersAcceptVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.UserRead, PostUsersAcceptError, PostUsersAcceptVariables>(
    (variables: PostUsersAcceptVariables) => fetchPostUsersAccept({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetAdminsError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminsVariables = ApiContext["fetcherOptions"];

export const fetchGetAdmins = (variables: GetAdminsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.AdminReadAll, GetAdminsError, undefined, {}, {}, {}>({
    url: "/admins",
    method: "get",
    ...variables,
    signal
  });

export const useGetAdmins = <TData = Schemas.AdminReadAll>(
  variables: GetAdminsVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.AdminReadAll, GetAdminsError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.AdminReadAll, GetAdminsError, TData>(
    queryKeyFn({ path: "/admins", operationId: "getAdmins", variables }),
    ({ signal }) => fetchGetAdmins({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchAdminsIDPathParams = {
  id: number;
};

export type PatchAdminsIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchAdminsIDVariables = {
  body?: Schemas.AdminUpdate;
  pathParams: PatchAdminsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchAdminsID = (variables: PatchAdminsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.AdminRead, PatchAdminsIDError, Schemas.AdminUpdate, {}, {}, PatchAdminsIDPathParams>({
    url: "/admins/{id}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchAdminsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.AdminRead, PatchAdminsIDError, PatchAdminsIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.AdminRead, PatchAdminsIDError, PatchAdminsIDVariables>(
    (variables: PatchAdminsIDVariables) => fetchPatchAdminsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetAdminsIDPathParams = {
  id: number;
};

export type GetAdminsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetAdminsIDVariables = {
  pathParams: GetAdminsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetAdminsID = (variables: GetAdminsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.AdminRead, GetAdminsIDError, undefined, {}, {}, GetAdminsIDPathParams>({
    url: "/admins/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetAdminsID = <TData = Schemas.AdminRead>(
  variables: GetAdminsIDVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.AdminRead, GetAdminsIDError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.AdminRead, GetAdminsIDError, TData>(
    queryKeyFn({ path: "/admins/{ID}", operationId: "getAdminsID", variables }),
    ({ signal }) => fetchGetAdminsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostAdminsInviteError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminsInviteVariables = {
  body?: Schemas.AdminInvite;
} & ApiContext["fetcherOptions"];

export const fetchPostAdminsInvite = (variables: PostAdminsInviteVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.AdminRead, PostAdminsInviteError, Schemas.AdminInvite, {}, {}, {}>({
    url: "/admins/invite",
    method: "post",
    ...variables,
    signal
  });

export const usePostAdminsInvite = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.AdminRead, PostAdminsInviteError, PostAdminsInviteVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.AdminRead, PostAdminsInviteError, PostAdminsInviteVariables>(
    (variables: PostAdminsInviteVariables) => fetchPostAdminsInvite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostAdminsAcceptError = Fetcher.ErrorWrapper<undefined>;

export type PostAdminsAcceptVariables = {
  body?: Schemas.AdminAccept;
} & ApiContext["fetcherOptions"];

export const fetchPostAdminsAccept = (variables: PostAdminsAcceptVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.AdminRead, PostAdminsAcceptError, Schemas.AdminAccept, {}, {}, {}>({
    url: "/admins/accept",
    method: "post",
    ...variables,
    signal
  });

export const usePostAdminsAccept = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.AdminRead, PostAdminsAcceptError, PostAdminsAcceptVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.AdminRead, PostAdminsAcceptError, PostAdminsAcceptVariables>(
    (variables: PostAdminsAcceptVariables) => fetchPostAdminsAccept({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostAuthLoginError = Fetcher.ErrorWrapper<undefined>;

export type PostAuthLoginVariables = {
  body?: Schemas.AuthLogIn;
} & ApiContext["fetcherOptions"];

export const fetchPostAuthLogin = (variables: PostAuthLoginVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TokenRead, PostAuthLoginError, Schemas.AuthLogIn, {}, {}, {}>({
    url: "/auth/login",
    method: "post",
    ...variables,
    signal
  });

export const usePostAuthLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TokenRead, PostAuthLoginError, PostAuthLoginVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.TokenRead, PostAuthLoginError, PostAuthLoginVariables>(
    (variables: PostAuthLoginVariables) => fetchPostAuthLogin({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetAuthLogoutError = Fetcher.ErrorWrapper<undefined>;

export type GetAuthLogoutVariables = ApiContext["fetcherOptions"];

export const fetchGetAuthLogout = (variables: GetAuthLogoutVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, GetAuthLogoutError, undefined, {}, {}, {}>({
    url: "/auth/logout",
    method: "get",
    ...variables,
    signal
  });

export const useGetAuthLogout = <TData = Schemas.Empty>(
  variables: GetAuthLogoutVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.Empty, GetAuthLogoutError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.Empty, GetAuthLogoutError, TData>(
    queryKeyFn({ path: "/auth/logout", operationId: "getAuthLogout", variables }),
    ({ signal }) => fetchGetAuthLogout({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetAuthRefreshError = Fetcher.ErrorWrapper<undefined>;

export type GetAuthRefreshVariables = ApiContext["fetcherOptions"];

export const fetchGetAuthRefresh = (variables: GetAuthRefreshVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TokenRead, GetAuthRefreshError, undefined, {}, {}, {}>({
    url: "/auth/refresh",
    method: "get",
    ...variables,
    signal
  });

export const useGetAuthRefresh = <TData = Schemas.TokenRead>(
  variables: GetAuthRefreshVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.TokenRead, GetAuthRefreshError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TokenRead, GetAuthRefreshError, TData>(
    queryKeyFn({ path: "/auth/refresh", operationId: "getAuthRefresh", variables }),
    ({ signal }) => fetchGetAuthRefresh({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchAuthVerifyError = Fetcher.ErrorWrapper<undefined>;

export type PatchAuthVerifyVariables = {
  body?: RequestBodies.AuthVerify;
} & ApiContext["fetcherOptions"];

export const fetchPatchAuthVerify = (variables: PatchAuthVerifyVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, PatchAuthVerifyError, RequestBodies.AuthVerify, {}, {}, {}>({
    url: "/auth/verify",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchAuthVerify = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Empty, PatchAuthVerifyError, PatchAuthVerifyVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, PatchAuthVerifyError, PatchAuthVerifyVariables>(
    (variables: PatchAuthVerifyVariables) => fetchPatchAuthVerify({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AuthVerifyError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AuthVerifyVariables = {
  body?: RequestBodies.AuthVerify;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AuthVerify = (variables: PatchV2AuthVerifyVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, PatchV2AuthVerifyError, RequestBodies.AuthVerify, {}, {}, {}>({
    url: "/v2/auth/verify",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2AuthVerify = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Empty, PatchV2AuthVerifyError, PatchV2AuthVerifyVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, PatchV2AuthVerifyError, PatchV2AuthVerifyVariables>(
    (variables: PatchV2AuthVerifyVariables) => fetchPatchV2AuthVerify({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetAuthResendError = Fetcher.ErrorWrapper<undefined>;

export type GetAuthResendRequestBody = {
  callback_url?: string;
};

export type GetAuthResendVariables = {
  body?: GetAuthResendRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchGetAuthResend = (variables: GetAuthResendVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, GetAuthResendError, GetAuthResendRequestBody, {}, {}, {}>({
    url: "/auth/resend",
    method: "get",
    ...variables,
    signal
  });

export const useGetAuthResend = <TData = Schemas.Empty>(
  variables: GetAuthResendVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.Empty, GetAuthResendError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.Empty, GetAuthResendError, TData>(
    queryKeyFn({ path: "/auth/resend", operationId: "getAuthResend", variables }),
    ({ signal }) => fetchGetAuthResend({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2UsersResendError = Fetcher.ErrorWrapper<undefined>;

export type PostV2UsersResendRequestBody = {
  callback_url?: string;
  email_address?: string;
};

export type PostV2UsersResendVariables = {
  body?: PostV2UsersResendRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2UsersResend = (variables: PostV2UsersResendVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, PostV2UsersResendError, PostV2UsersResendRequestBody, {}, {}, {}>({
    url: "/v2/users/resend",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2UsersResend = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Empty, PostV2UsersResendError, PostV2UsersResendVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, PostV2UsersResendError, PostV2UsersResendVariables>(
    (variables: PostV2UsersResendVariables) => fetchPostV2UsersResend({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostAuthResetError = Fetcher.ErrorWrapper<undefined>;

export type PostAuthResetVariables = {
  body?: Schemas.AuthReset;
} & ApiContext["fetcherOptions"];

export const fetchPostAuthReset = (variables: PostAuthResetVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, PostAuthResetError, Schemas.AuthReset, {}, {}, {}>({
    url: "/auth/reset",
    method: "post",
    ...variables,
    signal
  });

export const usePostAuthReset = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.Empty, PostAuthResetError, PostAuthResetVariables>, "mutationFn">
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, PostAuthResetError, PostAuthResetVariables>(
    (variables: PostAuthResetVariables) => fetchPostAuthReset({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchAuthChangeError = Fetcher.ErrorWrapper<undefined>;

export type PatchAuthChangeVariables = {
  body?: Schemas.AuthChange;
} & ApiContext["fetcherOptions"];

export const fetchPatchAuthChange = (variables: PatchAuthChangeVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, PatchAuthChangeError, Schemas.AuthChange, {}, {}, {}>({
    url: "/auth/change",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchAuthChange = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Empty, PatchAuthChangeError, PatchAuthChangeVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, PatchAuthChangeError, PatchAuthChangeVariables>(
    (variables: PatchAuthChangeVariables) => fetchPatchAuthChange({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetAuthMeError = Fetcher.ErrorWrapper<undefined>;

export type GetAuthMeVariables = ApiContext["fetcherOptions"];

export const fetchGetAuthMe = (variables: GetAuthMeVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UserRead, GetAuthMeError, undefined, {}, {}, {}>({
    url: "/auth/me",
    method: "get",
    ...variables,
    signal
  });

export const useGetAuthMe = <TData = Schemas.UserRead>(
  variables: GetAuthMeVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.UserRead, GetAuthMeError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.UserRead, GetAuthMeError, TData>(
    queryKeyFn({ path: "/auth/me", operationId: "getAuthMe", variables }),
    ({ signal }) => fetchGetAuthMe({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteAuthDeleteMeError = Fetcher.ErrorWrapper<undefined>;

export type DeleteAuthDeleteMeVariables = ApiContext["fetcherOptions"];

export const fetchDeleteAuthDeleteMe = (variables: DeleteAuthDeleteMeVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteAuthDeleteMeError, undefined, {}, {}, {}>({
    url: "/auth/delete_me",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteAuthDeleteMe = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteAuthDeleteMeError, DeleteAuthDeleteMeVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteAuthDeleteMeError, DeleteAuthDeleteMeVariables>(
    (variables: DeleteAuthDeleteMeVariables) => fetchDeleteAuthDeleteMe({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetCountriesError = Fetcher.ErrorWrapper<undefined>;

export type GetCountriesVariables = ApiContext["fetcherOptions"];

export const fetchGetCountries = (variables: GetCountriesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.CountryReadAll, GetCountriesError, undefined, {}, {}, {}>({
    url: "/countries",
    method: "get",
    ...variables,
    signal
  });

export const useGetCountries = <TData = Schemas.CountryReadAll>(
  variables: GetCountriesVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.CountryReadAll, GetCountriesError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.CountryReadAll, GetCountriesError, TData>(
    queryKeyFn({ path: "/countries", operationId: "getCountries", variables }),
    ({ signal }) => fetchGetCountries({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetOrganisationCategoriesError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationCategoriesVariables = ApiContext["fetcherOptions"];

export const fetchGetOrganisationCategories = (variables: GetOrganisationCategoriesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OrganisationCategoryReadAll, GetOrganisationCategoriesError, undefined, {}, {}, {}>({
    url: "/organisation_categories",
    method: "get",
    ...variables,
    signal
  });

export const useGetOrganisationCategories = <TData = Schemas.OrganisationCategoryReadAll>(
  variables: GetOrganisationCategoriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OrganisationCategoryReadAll, GetOrganisationCategoriesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OrganisationCategoryReadAll, GetOrganisationCategoriesError, TData>(
    queryKeyFn({ path: "/organisation_categories", operationId: "getOrganisationCategories", variables }),
    ({ signal }) => fetchGetOrganisationCategories({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostOrganisationsError = Fetcher.ErrorWrapper<undefined>;

export type PostOrganisationsVariables = {
  body?: Schemas.OrganisationCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostOrganisations = (variables: PostOrganisationsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OrganisationVersionRead, PostOrganisationsError, Schemas.OrganisationCreate, {}, {}, {}>({
    url: "/organisations",
    method: "post",
    ...variables,
    signal
  });

export const usePostOrganisations = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.OrganisationVersionRead, PostOrganisationsError, PostOrganisationsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.OrganisationVersionRead, PostOrganisationsError, PostOrganisationsVariables>(
    (variables: PostOrganisationsVariables) => fetchPostOrganisations({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetOrganisationsError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationsVariables = ApiContext["fetcherOptions"];

export const fetchGetOrganisations = (variables: GetOrganisationsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OrganisationReadAll, GetOrganisationsError, undefined, {}, {}, {}>({
    url: "/organisations",
    method: "get",
    ...variables,
    signal
  });

export const useGetOrganisations = <TData = Schemas.OrganisationReadAll>(
  variables: GetOrganisationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OrganisationReadAll, GetOrganisationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OrganisationReadAll, GetOrganisationsError, TData>(
    queryKeyFn({ path: "/organisations", operationId: "getOrganisations", variables }),
    ({ signal }) => fetchGetOrganisations({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetOrganisationsIDPathParams = {
  id: number;
};

export type GetOrganisationsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationsIDVariables = {
  pathParams: GetOrganisationsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationsID = (variables: GetOrganisationsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.MaskedOrganisationRead, GetOrganisationsIDError, undefined, {}, {}, GetOrganisationsIDPathParams>({
    url: "/organisations/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetOrganisationsID = <TData = Schemas.MaskedOrganisationRead>(
  variables: GetOrganisationsIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.MaskedOrganisationRead, GetOrganisationsIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.MaskedOrganisationRead, GetOrganisationsIDError, TData>(
    queryKeyFn({ path: "/organisations/{ID}", operationId: "getOrganisationsID", variables }),
    ({ signal }) => fetchGetOrganisationsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchOrganisationsIDPathParams = {
  id: number;
};

export type PatchOrganisationsIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchOrganisationsIDVariables = {
  body?: Schemas.OrganisationUpdate;
  pathParams: PatchOrganisationsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchOrganisationsID = (variables: PatchOrganisationsIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.OrganisationVersionRead,
    PatchOrganisationsIDError,
    Schemas.OrganisationUpdate,
    {},
    {},
    PatchOrganisationsIDPathParams
  >({ url: "/organisations/{id}", method: "patch", ...variables, signal });

export const usePatchOrganisationsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganisationVersionRead,
      PatchOrganisationsIDError,
      PatchOrganisationsIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.OrganisationVersionRead,
    PatchOrganisationsIDError,
    PatchOrganisationsIDVariables
  >(
    (variables: PatchOrganisationsIDVariables) => fetchPatchOrganisationsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetOrganisationsIDInspectPathParams = {
  id: number;
};

export type GetOrganisationsIDInspectError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationsIDInspectVariables = {
  pathParams: GetOrganisationsIDInspectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationsIDInspect = (variables: GetOrganisationsIDInspectVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.OrganisationRead,
    GetOrganisationsIDInspectError,
    undefined,
    {},
    {},
    GetOrganisationsIDInspectPathParams
  >({ url: "/organisations/{id}/inspect", method: "get", ...variables, signal });

export const useGetOrganisationsIDInspect = <TData = Schemas.OrganisationRead>(
  variables: GetOrganisationsIDInspectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OrganisationRead, GetOrganisationsIDInspectError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OrganisationRead, GetOrganisationsIDInspectError, TData>(
    queryKeyFn({ path: "/organisations/{ID}/inspect", operationId: "getOrganisationsIDInspect", variables }),
    ({ signal }) => fetchGetOrganisationsIDInspect({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetOrganisationVersionsIDPathParams = {
  id: number;
};

export type GetOrganisationVersionsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationVersionsIDVariables = {
  pathParams: GetOrganisationVersionsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationVersionsID = (variables: GetOrganisationVersionsIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.OrganisationVersionRead,
    GetOrganisationVersionsIDError,
    undefined,
    {},
    {},
    GetOrganisationVersionsIDPathParams
  >({ url: "/organisation_versions/{id}", method: "get", ...variables, signal });

export const useGetOrganisationVersionsID = <TData = Schemas.OrganisationVersionRead>(
  variables: GetOrganisationVersionsIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OrganisationVersionRead, GetOrganisationVersionsIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OrganisationVersionRead, GetOrganisationVersionsIDError, TData>(
    queryKeyFn({ path: "/organisation_versions/{ID}", operationId: "getOrganisationVersionsID", variables }),
    ({ signal }) => fetchGetOrganisationVersionsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteOrganisationVersionsIDPathParams = {
  id: number;
};

export type DeleteOrganisationVersionsIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteOrganisationVersionsIDVariables = {
  pathParams: DeleteOrganisationVersionsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteOrganisationVersionsID = (
  variables: DeleteOrganisationVersionsIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.Empty, DeleteOrganisationVersionsIDError, undefined, {}, {}, DeleteOrganisationVersionsIDPathParams>(
    { url: "/organisation_versions/{id}", method: "delete", ...variables, signal }
  );

export const useDeleteOrganisationVersionsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Empty,
      DeleteOrganisationVersionsIDError,
      DeleteOrganisationVersionsIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Empty,
    DeleteOrganisationVersionsIDError,
    DeleteOrganisationVersionsIDVariables
  >(
    (variables: DeleteOrganisationVersionsIDVariables) =>
      fetchDeleteOrganisationVersionsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchOrganisationVersionsIDApprovePathParams = {
  id: number;
};

export type PatchOrganisationVersionsIDApproveError = Fetcher.ErrorWrapper<undefined>;

export type PatchOrganisationVersionsIDApproveVariables = {
  pathParams: PatchOrganisationVersionsIDApprovePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchOrganisationVersionsIDApprove = (
  variables: PatchOrganisationVersionsIDApproveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.OrganisationVersionRead,
    PatchOrganisationVersionsIDApproveError,
    undefined,
    {},
    {},
    PatchOrganisationVersionsIDApprovePathParams
  >({ url: "/organisation_versions/{id}/approve", method: "patch", ...variables, signal });

export const usePatchOrganisationVersionsIDApprove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganisationVersionRead,
      PatchOrganisationVersionsIDApproveError,
      PatchOrganisationVersionsIDApproveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.OrganisationVersionRead,
    PatchOrganisationVersionsIDApproveError,
    PatchOrganisationVersionsIDApproveVariables
  >(
    (variables: PatchOrganisationVersionsIDApproveVariables) =>
      fetchPatchOrganisationVersionsIDApprove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchOrganisationVersionsIDRevivePathParams = {
  id: number;
};

export type PatchOrganisationVersionsIDReviveError = Fetcher.ErrorWrapper<undefined>;

export type PatchOrganisationVersionsIDReviveVariables = {
  pathParams: PatchOrganisationVersionsIDRevivePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchOrganisationVersionsIDRevive = (
  variables: PatchOrganisationVersionsIDReviveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.OrganisationVersionRead,
    PatchOrganisationVersionsIDReviveError,
    undefined,
    {},
    {},
    PatchOrganisationVersionsIDRevivePathParams
  >({ url: "/organisation_versions/{id}/revive", method: "patch", ...variables, signal });

export const usePatchOrganisationVersionsIDRevive = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganisationVersionRead,
      PatchOrganisationVersionsIDReviveError,
      PatchOrganisationVersionsIDReviveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.OrganisationVersionRead,
    PatchOrganisationVersionsIDReviveError,
    PatchOrganisationVersionsIDReviveVariables
  >(
    (variables: PatchOrganisationVersionsIDReviveVariables) =>
      fetchPatchOrganisationVersionsIDRevive({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchOrganisationVersionsIDRejectPathParams = {
  id: number;
};

export type PatchOrganisationVersionsIDRejectError = Fetcher.ErrorWrapper<undefined>;

export type PatchOrganisationVersionsIDRejectVariables = {
  body?: Schemas.OrganisationVersionReject;
  pathParams: PatchOrganisationVersionsIDRejectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchOrganisationVersionsIDReject = (
  variables: PatchOrganisationVersionsIDRejectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.OrganisationVersionRead,
    PatchOrganisationVersionsIDRejectError,
    Schemas.OrganisationVersionReject,
    {},
    {},
    PatchOrganisationVersionsIDRejectPathParams
  >({ url: "/organisation_versions/{id}/reject", method: "patch", ...variables, signal });

export const usePatchOrganisationVersionsIDReject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganisationVersionRead,
      PatchOrganisationVersionsIDRejectError,
      PatchOrganisationVersionsIDRejectVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.OrganisationVersionRead,
    PatchOrganisationVersionsIDRejectError,
    PatchOrganisationVersionsIDRejectVariables
  >(
    (variables: PatchOrganisationVersionsIDRejectVariables) =>
      fetchPatchOrganisationVersionsIDReject({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetOrganisationsIDOrganisationVersionsPathParams = {
  id: number;
};

export type GetOrganisationsIDOrganisationVersionsError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationsIDOrganisationVersionsVariables = {
  pathParams: GetOrganisationsIDOrganisationVersionsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationsIDOrganisationVersions = (
  variables: GetOrganisationsIDOrganisationVersionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.OrganisationVersionReadAll,
    GetOrganisationsIDOrganisationVersionsError,
    undefined,
    {},
    {},
    GetOrganisationsIDOrganisationVersionsPathParams
  >({ url: "/organisations/{id}/organisation_versions", method: "get", ...variables, signal });

export const useGetOrganisationsIDOrganisationVersions = <TData = Schemas.OrganisationVersionReadAll>(
  variables: GetOrganisationsIDOrganisationVersionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OrganisationVersionReadAll, GetOrganisationsIDOrganisationVersionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OrganisationVersionReadAll, GetOrganisationsIDOrganisationVersionsError, TData>(
    queryKeyFn({
      path: "/organisations/{ID}/organisation_versions",
      operationId: "getOrganisationsIDOrganisationVersions",
      variables
    }),
    ({ signal }) => fetchGetOrganisationsIDOrganisationVersions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostUploadsError = Fetcher.ErrorWrapper<undefined>;

export type PostUploadsRequestBody = {
  /**
   * @format binary
   */
  upload: Blob;
};

export type PostUploadsVariables = {
  body: PostUploadsRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostUploads = (variables: PostUploadsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UploadCreate, PostUploadsError, PostUploadsRequestBody, {}, {}, {}>({
    url: "/uploads",
    method: "post",
    ...variables,
    signal
  });

export const usePostUploads = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.UploadCreate, PostUploadsError, PostUploadsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.UploadCreate, PostUploadsError, PostUploadsVariables>(
    (variables: PostUploadsVariables) => fetchPostUploads({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutUploadsIDUpdatePathParams = {
  id: number;
};

export type PutUploadsIDUpdateError = Fetcher.ErrorWrapper<undefined>;

export type PutUploadsIDUpdateVariables = {
  pathParams: PutUploadsIDUpdatePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutUploadsIDUpdate = (variables: PutUploadsIDUpdateVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UploadCreate, PutUploadsIDUpdateError, undefined, {}, {}, PutUploadsIDUpdatePathParams>({
    url: "/uploads/{id}/update",
    method: "put",
    ...variables,
    signal
  });

export const usePutUploadsIDUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.UploadCreate, PutUploadsIDUpdateError, PutUploadsIDUpdateVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.UploadCreate, PutUploadsIDUpdateError, PutUploadsIDUpdateVariables>(
    (variables: PutUploadsIDUpdateVariables) => fetchPutUploadsIDUpdate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostUploadsSocioeconomicBenefitsError = Fetcher.ErrorWrapper<undefined>;

export type PostUploadsSocioeconomicBenefitsVariables = {
  body?: RequestBodies.UploadSocioEconomicBenefits;
} & ApiContext["fetcherOptions"];

export const fetchPostUploadsSocioeconomicBenefits = (
  variables: PostUploadsSocioeconomicBenefitsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.UploadSocioEconomicBenefitsRead,
    PostUploadsSocioeconomicBenefitsError,
    RequestBodies.UploadSocioEconomicBenefits,
    {},
    {},
    {}
  >({ url: "/uploads/socioeconomic_benefits", method: "post", ...variables, signal });

export const usePostUploadsSocioeconomicBenefits = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UploadSocioEconomicBenefitsRead,
      PostUploadsSocioeconomicBenefitsError,
      PostUploadsSocioeconomicBenefitsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.UploadSocioEconomicBenefitsRead,
    PostUploadsSocioeconomicBenefitsError,
    PostUploadsSocioeconomicBenefitsVariables
  >(
    (variables: PostUploadsSocioeconomicBenefitsVariables) =>
      fetchPostUploadsSocioeconomicBenefits({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchUploadsSocioeconomicBenefitsError = Fetcher.ErrorWrapper<undefined>;

export type PatchUploadsSocioeconomicBenefitsVariables = {
  body?: RequestBodies.UploadSocioEconomicBenefits;
} & ApiContext["fetcherOptions"];

export const fetchPatchUploadsSocioeconomicBenefits = (
  variables: PatchUploadsSocioeconomicBenefitsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.UploadSocioEconomicBenefitsRead,
    PatchUploadsSocioeconomicBenefitsError,
    RequestBodies.UploadSocioEconomicBenefits,
    {},
    {},
    {}
  >({ url: "/uploads/socioeconomic_benefits", method: "patch", ...variables, signal });

export const usePatchUploadsSocioeconomicBenefits = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UploadSocioEconomicBenefitsRead,
      PatchUploadsSocioeconomicBenefitsError,
      PatchUploadsSocioeconomicBenefitsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.UploadSocioEconomicBenefitsRead,
    PatchUploadsSocioeconomicBenefitsError,
    PatchUploadsSocioeconomicBenefitsVariables
  >(
    (variables: PatchUploadsSocioeconomicBenefitsVariables) =>
      fetchPatchUploadsSocioeconomicBenefits({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetUploadsSocioeconomicBenefitsTemplateError = Fetcher.ErrorWrapper<undefined>;

export type GetUploadsSocioeconomicBenefitsTemplateVariables = ApiContext["fetcherOptions"];

export const fetchGetUploadsSocioeconomicBenefitsTemplate = (
  variables: GetUploadsSocioeconomicBenefitsTemplateVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetUploadsSocioeconomicBenefitsTemplateError, undefined, {}, {}, {}>({
    url: "/uploads/socioeconomic_benefits/template",
    method: "get",
    ...variables,
    signal
  });

export const useGetUploadsSocioeconomicBenefitsTemplate = <TData = undefined>(
  variables: GetUploadsSocioeconomicBenefitsTemplateVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetUploadsSocioeconomicBenefitsTemplateError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetUploadsSocioeconomicBenefitsTemplateError, TData>(
    queryKeyFn({
      path: "/uploads/socioeconomic_benefits/template",
      operationId: "getUploadsSocioeconomicBenefitsTemplate",
      variables
    }),
    ({ signal }) => fetchGetUploadsSocioeconomicBenefitsTemplate({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetUploadsSocioeconomicBenefitsTemplateProgrammeSubmissionError = Fetcher.ErrorWrapper<undefined>;

export type GetUploadsSocioeconomicBenefitsTemplateProgrammeSubmissionVariables = ApiContext["fetcherOptions"];

export const fetchGetUploadsSocioeconomicBenefitsTemplateProgrammeSubmission = (
  variables: GetUploadsSocioeconomicBenefitsTemplateProgrammeSubmissionVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetUploadsSocioeconomicBenefitsTemplateProgrammeSubmissionError, undefined, {}, {}, {}>({
    url: "/uploads/socioeconomic_benefits/template/programme_submission",
    method: "get",
    ...variables,
    signal
  });

export const useGetUploadsSocioeconomicBenefitsTemplateProgrammeSubmission = <TData = undefined>(
  variables: GetUploadsSocioeconomicBenefitsTemplateProgrammeSubmissionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetUploadsSocioeconomicBenefitsTemplateProgrammeSubmissionError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetUploadsSocioeconomicBenefitsTemplateProgrammeSubmissionError, TData>(
    queryKeyFn({
      path: "/uploads/socioeconomic_benefits/template/programme_submission",
      operationId: "getUploadsSocioeconomicBenefitsTemplateProgrammeSubmission",
      variables
    }),
    ({ signal }) =>
      fetchGetUploadsSocioeconomicBenefitsTemplateProgrammeSubmission({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetUploadsSocioeconomicBenefitsTemplateSiteSubmissionError = Fetcher.ErrorWrapper<undefined>;

export type GetUploadsSocioeconomicBenefitsTemplateSiteSubmissionVariables = ApiContext["fetcherOptions"];

export const fetchGetUploadsSocioeconomicBenefitsTemplateSiteSubmission = (
  variables: GetUploadsSocioeconomicBenefitsTemplateSiteSubmissionVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetUploadsSocioeconomicBenefitsTemplateSiteSubmissionError, undefined, {}, {}, {}>({
    url: "/uploads/socioeconomic_benefits/template/site_submission",
    method: "get",
    ...variables,
    signal
  });

export const useGetUploadsSocioeconomicBenefitsTemplateSiteSubmission = <TData = undefined>(
  variables: GetUploadsSocioeconomicBenefitsTemplateSiteSubmissionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetUploadsSocioeconomicBenefitsTemplateSiteSubmissionError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetUploadsSocioeconomicBenefitsTemplateSiteSubmissionError, TData>(
    queryKeyFn({
      path: "/uploads/socioeconomic_benefits/template/site_submission",
      operationId: "getUploadsSocioeconomicBenefitsTemplateSiteSubmission",
      variables
    }),
    ({ signal }) =>
      fetchGetUploadsSocioeconomicBenefitsTemplateSiteSubmission({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetUploadsStratificationExampleError = Fetcher.ErrorWrapper<undefined>;

export type GetUploadsStratificationExampleVariables = ApiContext["fetcherOptions"];

export const fetchGetUploadsStratificationExample = (
  variables: GetUploadsStratificationExampleVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetUploadsStratificationExampleError, undefined, {}, {}, {}>({
    url: "/uploads/stratification/example",
    method: "get",
    ...variables,
    signal
  });

export const useGetUploadsStratificationExample = <TData = undefined>(
  variables: GetUploadsStratificationExampleVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetUploadsStratificationExampleError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetUploadsStratificationExampleError, TData>(
    queryKeyFn({ path: "/uploads/stratification/example", operationId: "getUploadsStratificationExample", variables }),
    ({ signal }) => fetchGetUploadsStratificationExample({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetUploadsSocioeconomicBenefitsTemplateCsvError = Fetcher.ErrorWrapper<undefined>;

export type GetUploadsSocioeconomicBenefitsTemplateCsvVariables = ApiContext["fetcherOptions"];

export const fetchGetUploadsSocioeconomicBenefitsTemplateCsv = (
  variables: GetUploadsSocioeconomicBenefitsTemplateCsvVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetUploadsSocioeconomicBenefitsTemplateCsvError, undefined, {}, {}, {}>({
    url: "/uploads/socioeconomic_benefits/template/csv",
    method: "get",
    ...variables,
    signal
  });

export const useGetUploadsSocioeconomicBenefitsTemplateCsv = <TData = undefined>(
  variables: GetUploadsSocioeconomicBenefitsTemplateCsvVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetUploadsSocioeconomicBenefitsTemplateCsvError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetUploadsSocioeconomicBenefitsTemplateCsvError, TData>(
    queryKeyFn({
      path: "/uploads/socioeconomic_benefits/template/csv",
      operationId: "getUploadsSocioeconomicBenefitsTemplateCsv",
      variables
    }),
    ({ signal }) => fetchGetUploadsSocioeconomicBenefitsTemplateCsv({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetSiteTreeSpeciesTemplateCsvError = Fetcher.ErrorWrapper<undefined>;

export type GetSiteTreeSpeciesTemplateCsvVariables = ApiContext["fetcherOptions"];

export const fetchGetSiteTreeSpeciesTemplateCsv = (
  variables: GetSiteTreeSpeciesTemplateCsvVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetSiteTreeSpeciesTemplateCsvError, undefined, {}, {}, {}>({
    url: "/site/tree_species/template/csv",
    method: "get",
    ...variables,
    signal
  });

export const useGetSiteTreeSpeciesTemplateCsv = <TData = undefined>(
  variables: GetSiteTreeSpeciesTemplateCsvVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetSiteTreeSpeciesTemplateCsvError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetSiteTreeSpeciesTemplateCsvError, TData>(
    queryKeyFn({ path: "/site/tree_species/template/csv", operationId: "getSiteTreeSpeciesTemplateCsv", variables }),
    ({ signal }) => fetchGetSiteTreeSpeciesTemplateCsv({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetSubmissionTreeSpeciesTemplateCsvError = Fetcher.ErrorWrapper<undefined>;

export type GetSubmissionTreeSpeciesTemplateCsvVariables = ApiContext["fetcherOptions"];

export const fetchGetSubmissionTreeSpeciesTemplateCsv = (
  variables: GetSubmissionTreeSpeciesTemplateCsvVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetSubmissionTreeSpeciesTemplateCsvError, undefined, {}, {}, {}>({
    url: "/submission/tree_species/template/csv",
    method: "get",
    ...variables,
    signal
  });

export const useGetSubmissionTreeSpeciesTemplateCsv = <TData = undefined>(
  variables: GetSubmissionTreeSpeciesTemplateCsvVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetSubmissionTreeSpeciesTemplateCsvError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetSubmissionTreeSpeciesTemplateCsvError, TData>(
    queryKeyFn({
      path: "/submission/tree_species/template/csv",
      operationId: "getSubmissionTreeSpeciesTemplateCsv",
      variables
    }),
    ({ signal }) => fetchGetSubmissionTreeSpeciesTemplateCsv({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetSubmissionTreeSpeciesTemplateCsvExampleError = Fetcher.ErrorWrapper<undefined>;

export type GetSubmissionTreeSpeciesTemplateCsvExampleVariables = ApiContext["fetcherOptions"];

export const fetchGetSubmissionTreeSpeciesTemplateCsvExample = (
  variables: GetSubmissionTreeSpeciesTemplateCsvExampleVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetSubmissionTreeSpeciesTemplateCsvExampleError, undefined, {}, {}, {}>({
    url: "/submission/tree_species/template/csv/example",
    method: "get",
    ...variables,
    signal
  });

export const useGetSubmissionTreeSpeciesTemplateCsvExample = <TData = undefined>(
  variables: GetSubmissionTreeSpeciesTemplateCsvExampleVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetSubmissionTreeSpeciesTemplateCsvExampleError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetSubmissionTreeSpeciesTemplateCsvExampleError, TData>(
    queryKeyFn({
      path: "/submission/tree_species/template/csv/example",
      operationId: "getSubmissionTreeSpeciesTemplateCsvExample",
      variables
    }),
    ({ signal }) => fetchGetSubmissionTreeSpeciesTemplateCsvExample({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostUploadsSiteProgrammeMediaError = Fetcher.ErrorWrapper<undefined>;

export type PostUploadsSiteProgrammeMediaVariables = {
  body?: Schemas.UploadMedia;
} & ApiContext["fetcherOptions"];

export const fetchPostUploadsSiteProgrammeMedia = (
  variables: PostUploadsSiteProgrammeMediaVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.UploadMediaRead, PostUploadsSiteProgrammeMediaError, Schemas.UploadMedia, {}, {}, {}>({
    url: "/uploads/site_programme_media",
    method: "post",
    ...variables,
    signal
  });

export const usePostUploadsSiteProgrammeMedia = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UploadMediaRead,
      PostUploadsSiteProgrammeMediaError,
      PostUploadsSiteProgrammeMediaVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.UploadMediaRead,
    PostUploadsSiteProgrammeMediaError,
    PostUploadsSiteProgrammeMediaVariables
  >(
    (variables: PostUploadsSiteProgrammeMediaVariables) =>
      fetchPostUploadsSiteProgrammeMedia({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostTeamMembersError = Fetcher.ErrorWrapper<undefined>;

export type PostTeamMembersVariables = {
  body?: Schemas.TeamMemberCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTeamMembers = (variables: PostTeamMembersVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TeamMemberRead, PostTeamMembersError, Schemas.TeamMemberCreate, {}, {}, {}>({
    url: "/team_members",
    method: "post",
    ...variables,
    signal
  });

export const usePostTeamMembers = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TeamMemberRead, PostTeamMembersError, PostTeamMembersVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.TeamMemberRead, PostTeamMembersError, PostTeamMembersVariables>(
    (variables: PostTeamMembersVariables) => fetchPostTeamMembers({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTeamMembersIDPathParams = {
  id: number;
};

export type GetTeamMembersIDError = Fetcher.ErrorWrapper<undefined>;

export type GetTeamMembersIDVariables = {
  pathParams: GetTeamMembersIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetTeamMembersID = (variables: GetTeamMembersIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TeamMemberRead, GetTeamMembersIDError, undefined, {}, {}, GetTeamMembersIDPathParams>({
    url: "/team_members/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetTeamMembersID = <TData = Schemas.TeamMemberRead>(
  variables: GetTeamMembersIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TeamMemberRead, GetTeamMembersIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TeamMemberRead, GetTeamMembersIDError, TData>(
    queryKeyFn({ path: "/team_members/{ID}", operationId: "getTeamMembersID", variables }),
    ({ signal }) => fetchGetTeamMembersID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchTeamMembersIDPathParams = {
  id: number;
};

export type PatchTeamMembersIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchTeamMembersIDVariables = {
  body?: Schemas.TeamMemberUpdate;
  pathParams: PatchTeamMembersIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchTeamMembersID = (variables: PatchTeamMembersIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.TeamMemberRead,
    PatchTeamMembersIDError,
    Schemas.TeamMemberUpdate,
    {},
    {},
    PatchTeamMembersIDPathParams
  >({ url: "/team_members/{id}", method: "patch", ...variables, signal });

export const usePatchTeamMembersID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TeamMemberRead, PatchTeamMembersIDError, PatchTeamMembersIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.TeamMemberRead, PatchTeamMembersIDError, PatchTeamMembersIDVariables>(
    (variables: PatchTeamMembersIDVariables) => fetchPatchTeamMembersID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteTeamMembersIDPathParams = {
  id: number;
};

export type DeleteTeamMembersIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteTeamMembersIDVariables = {
  pathParams: DeleteTeamMembersIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteTeamMembersID = (variables: DeleteTeamMembersIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, DeleteTeamMembersIDError, undefined, {}, {}, DeleteTeamMembersIDPathParams>({
    url: "/team_members/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteTeamMembersID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Empty, DeleteTeamMembersIDError, DeleteTeamMembersIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, DeleteTeamMembersIDError, DeleteTeamMembersIDVariables>(
    (variables: DeleteTeamMembersIDVariables) => fetchDeleteTeamMembersID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetOrganisationsIDTeamMembersPathParams = {
  id: number;
};

export type GetOrganisationsIDTeamMembersError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationsIDTeamMembersVariables = {
  pathParams: GetOrganisationsIDTeamMembersPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationsIDTeamMembers = (
  variables: GetOrganisationsIDTeamMembersVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.MaskedTeamMemberReadAll,
    GetOrganisationsIDTeamMembersError,
    undefined,
    {},
    {},
    GetOrganisationsIDTeamMembersPathParams
  >({ url: "/organisations/{id}/team_members", method: "get", ...variables, signal });

export const useGetOrganisationsIDTeamMembers = <TData = Schemas.MaskedTeamMemberReadAll>(
  variables: GetOrganisationsIDTeamMembersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.MaskedTeamMemberReadAll, GetOrganisationsIDTeamMembersError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.MaskedTeamMemberReadAll, GetOrganisationsIDTeamMembersError, TData>(
    queryKeyFn({ path: "/organisations/{ID}/team_members", operationId: "getOrganisationsIDTeamMembers", variables }),
    ({ signal }) => fetchGetOrganisationsIDTeamMembers({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetOrganisationsIDTeamMembersInspectPathParams = {
  id: number;
};

export type GetOrganisationsIDTeamMembersInspectError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationsIDTeamMembersInspectVariables = {
  pathParams: GetOrganisationsIDTeamMembersInspectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationsIDTeamMembersInspect = (
  variables: GetOrganisationsIDTeamMembersInspectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TeamMemberReadAll,
    GetOrganisationsIDTeamMembersInspectError,
    undefined,
    {},
    {},
    GetOrganisationsIDTeamMembersInspectPathParams
  >({ url: "/organisations/{id}/team_members/inspect", method: "get", ...variables, signal });

export const useGetOrganisationsIDTeamMembersInspect = <TData = Schemas.TeamMemberReadAll>(
  variables: GetOrganisationsIDTeamMembersInspectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TeamMemberReadAll, GetOrganisationsIDTeamMembersInspectError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TeamMemberReadAll, GetOrganisationsIDTeamMembersInspectError, TData>(
    queryKeyFn({
      path: "/organisations/{ID}/team_members/inspect",
      operationId: "getOrganisationsIDTeamMembersInspect",
      variables
    }),
    ({ signal }) => fetchGetOrganisationsIDTeamMembersInspect({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostOfferDocumentsError = Fetcher.ErrorWrapper<undefined>;

export type PostOfferDocumentsVariables = {
  body?: Schemas.OfferDocumentCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostOfferDocuments = (variables: PostOfferDocumentsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OfferDocumentRead, PostOfferDocumentsError, Schemas.OfferDocumentCreate, {}, {}, {}>({
    url: "/offer_documents",
    method: "post",
    ...variables,
    signal
  });

export const usePostOfferDocuments = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.OfferDocumentRead, PostOfferDocumentsError, PostOfferDocumentsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.OfferDocumentRead, PostOfferDocumentsError, PostOfferDocumentsVariables>(
    (variables: PostOfferDocumentsVariables) => fetchPostOfferDocuments({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetOfferDocumentsIDPathParams = {
  id: number;
};

export type GetOfferDocumentsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetOfferDocumentsIDVariables = {
  pathParams: GetOfferDocumentsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOfferDocumentsID = (variables: GetOfferDocumentsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OfferDocumentRead, GetOfferDocumentsIDError, undefined, {}, {}, GetOfferDocumentsIDPathParams>({
    url: "/offer_documents/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetOfferDocumentsID = <TData = Schemas.OfferDocumentRead>(
  variables: GetOfferDocumentsIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OfferDocumentRead, GetOfferDocumentsIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OfferDocumentRead, GetOfferDocumentsIDError, TData>(
    queryKeyFn({ path: "/offer_documents/{ID}", operationId: "getOfferDocumentsID", variables }),
    ({ signal }) => fetchGetOfferDocumentsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchOfferDocumentsIDPathParams = {
  id: number;
};

export type PatchOfferDocumentsIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchOfferDocumentsIDVariables = {
  body?: Schemas.OfferDocumentUpdate;
  pathParams: PatchOfferDocumentsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchOfferDocumentsID = (variables: PatchOfferDocumentsIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.OfferDocumentRead,
    PatchOfferDocumentsIDError,
    Schemas.OfferDocumentUpdate,
    {},
    {},
    PatchOfferDocumentsIDPathParams
  >({ url: "/offer_documents/{id}", method: "patch", ...variables, signal });

export const usePatchOfferDocumentsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OfferDocumentRead,
      PatchOfferDocumentsIDError,
      PatchOfferDocumentsIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.OfferDocumentRead, PatchOfferDocumentsIDError, PatchOfferDocumentsIDVariables>(
    (variables: PatchOfferDocumentsIDVariables) => fetchPatchOfferDocumentsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteOfferDocumentsIDPathParams = {
  id: number;
};

export type DeleteOfferDocumentsIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteOfferDocumentsIDVariables = {
  pathParams: DeleteOfferDocumentsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteOfferDocumentsID = (variables: DeleteOfferDocumentsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, DeleteOfferDocumentsIDError, undefined, {}, {}, DeleteOfferDocumentsIDPathParams>({
    url: "/offer_documents/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteOfferDocumentsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Empty, DeleteOfferDocumentsIDError, DeleteOfferDocumentsIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, DeleteOfferDocumentsIDError, DeleteOfferDocumentsIDVariables>(
    (variables: DeleteOfferDocumentsIDVariables) => fetchDeleteOfferDocumentsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetOffersIDOfferDocumentsPathParams = {
  id: number;
};

export type GetOffersIDOfferDocumentsError = Fetcher.ErrorWrapper<undefined>;

export type GetOffersIDOfferDocumentsVariables = {
  pathParams: GetOffersIDOfferDocumentsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOffersIDOfferDocuments = (variables: GetOffersIDOfferDocumentsVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.OfferDocumentReadAll,
    GetOffersIDOfferDocumentsError,
    undefined,
    {},
    {},
    GetOffersIDOfferDocumentsPathParams
  >({ url: "/offers/{id}/offer_documents", method: "get", ...variables, signal });

export const useGetOffersIDOfferDocuments = <TData = Schemas.OfferDocumentReadAll>(
  variables: GetOffersIDOfferDocumentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OfferDocumentReadAll, GetOffersIDOfferDocumentsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OfferDocumentReadAll, GetOffersIDOfferDocumentsError, TData>(
    queryKeyFn({ path: "/offers/{ID}/offer_documents", operationId: "getOffersIDOfferDocuments", variables }),
    ({ signal }) => fetchGetOffersIDOfferDocuments({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetDocumentTypesError = Fetcher.ErrorWrapper<undefined>;

export type GetDocumentTypesVariables = ApiContext["fetcherOptions"];

export const fetchGetDocumentTypes = (variables: GetDocumentTypesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DocumentTypeReadAll, GetDocumentTypesError, undefined, {}, {}, {}>({
    url: "/document_types",
    method: "get",
    ...variables,
    signal
  });

export const useGetDocumentTypes = <TData = Schemas.DocumentTypeReadAll>(
  variables: GetDocumentTypesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.DocumentTypeReadAll, GetDocumentTypesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DocumentTypeReadAll, GetDocumentTypesError, TData>(
    queryKeyFn({ path: "/document_types", operationId: "getDocumentTypes", variables }),
    ({ signal }) => fetchGetDocumentTypes({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostOrganisationDocumentsError = Fetcher.ErrorWrapper<undefined>;

export type PostOrganisationDocumentsVariables = {
  body?: Schemas.OrganisationDocumentCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostOrganisationDocuments = (variables: PostOrganisationDocumentsVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.OrganisationDocumentVersionRead,
    PostOrganisationDocumentsError,
    Schemas.OrganisationDocumentCreate,
    {},
    {},
    {}
  >({ url: "/organisation_documents", method: "post", ...variables, signal });

export const usePostOrganisationDocuments = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganisationDocumentVersionRead,
      PostOrganisationDocumentsError,
      PostOrganisationDocumentsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.OrganisationDocumentVersionRead,
    PostOrganisationDocumentsError,
    PostOrganisationDocumentsVariables
  >(
    (variables: PostOrganisationDocumentsVariables) =>
      fetchPostOrganisationDocuments({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetOrganisationDocumentsIDPathParams = {
  id: number;
};

export type GetOrganisationDocumentsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationDocumentsIDVariables = {
  pathParams: GetOrganisationDocumentsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationDocumentsID = (variables: GetOrganisationDocumentsIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.OrganisationDocumentRead,
    GetOrganisationDocumentsIDError,
    undefined,
    {},
    {},
    GetOrganisationDocumentsIDPathParams
  >({ url: "/organisation_documents/{id}", method: "get", ...variables, signal });

export const useGetOrganisationDocumentsID = <TData = Schemas.OrganisationDocumentRead>(
  variables: GetOrganisationDocumentsIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OrganisationDocumentRead, GetOrganisationDocumentsIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OrganisationDocumentRead, GetOrganisationDocumentsIDError, TData>(
    queryKeyFn({ path: "/organisation_documents/{ID}", operationId: "getOrganisationDocumentsID", variables }),
    ({ signal }) => fetchGetOrganisationDocumentsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchOrganisationDocumentsIDPathParams = {
  id: number;
};

export type PatchOrganisationDocumentsIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchOrganisationDocumentsIDVariables = {
  body?: Schemas.OrganisationDocumentUpdate;
  pathParams: PatchOrganisationDocumentsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchOrganisationDocumentsID = (
  variables: PatchOrganisationDocumentsIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.OrganisationDocumentVersionRead,
    PatchOrganisationDocumentsIDError,
    Schemas.OrganisationDocumentUpdate,
    {},
    {},
    PatchOrganisationDocumentsIDPathParams
  >({ url: "/organisation_documents/{id}", method: "patch", ...variables, signal });

export const usePatchOrganisationDocumentsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganisationDocumentVersionRead,
      PatchOrganisationDocumentsIDError,
      PatchOrganisationDocumentsIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.OrganisationDocumentVersionRead,
    PatchOrganisationDocumentsIDError,
    PatchOrganisationDocumentsIDVariables
  >(
    (variables: PatchOrganisationDocumentsIDVariables) =>
      fetchPatchOrganisationDocumentsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteOrganisationDocumentsIDPathParams = {
  id: number;
};

export type DeleteOrganisationDocumentsIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteOrganisationDocumentsIDVariables = {
  pathParams: DeleteOrganisationDocumentsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteOrganisationDocumentsID = (
  variables: DeleteOrganisationDocumentsIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.Empty,
    DeleteOrganisationDocumentsIDError,
    undefined,
    {},
    {},
    DeleteOrganisationDocumentsIDPathParams
  >({ url: "/organisation_documents/{id}", method: "delete", ...variables, signal });

export const useDeleteOrganisationDocumentsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Empty,
      DeleteOrganisationDocumentsIDError,
      DeleteOrganisationDocumentsIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Empty,
    DeleteOrganisationDocumentsIDError,
    DeleteOrganisationDocumentsIDVariables
  >(
    (variables: DeleteOrganisationDocumentsIDVariables) =>
      fetchDeleteOrganisationDocumentsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetOrganisationsIDOrganisationDocumentsPathParams = {
  id: number;
};

export type GetOrganisationsIDOrganisationDocumentsError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationsIDOrganisationDocumentsVariables = {
  pathParams: GetOrganisationsIDOrganisationDocumentsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationsIDOrganisationDocuments = (
  variables: GetOrganisationsIDOrganisationDocumentsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.OrganisationDocumentReadAll,
    GetOrganisationsIDOrganisationDocumentsError,
    undefined,
    {},
    {},
    GetOrganisationsIDOrganisationDocumentsPathParams
  >({ url: "/organisations/{id}/organisation_documents", method: "get", ...variables, signal });

export const useGetOrganisationsIDOrganisationDocuments = <TData = Schemas.OrganisationDocumentReadAll>(
  variables: GetOrganisationsIDOrganisationDocumentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrganisationDocumentReadAll,
      GetOrganisationsIDOrganisationDocumentsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OrganisationDocumentReadAll, GetOrganisationsIDOrganisationDocumentsError, TData>(
    queryKeyFn({
      path: "/organisations/{ID}/organisation_documents",
      operationId: "getOrganisationsIDOrganisationDocuments",
      variables
    }),
    ({ signal }) => fetchGetOrganisationsIDOrganisationDocuments({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetOrganisationsIDOrganisationDocumentsInspectPathParams = {
  id: number;
};

export type GetOrganisationsIDOrganisationDocumentsInspectError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationsIDOrganisationDocumentsInspectVariables = {
  pathParams: GetOrganisationsIDOrganisationDocumentsInspectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationsIDOrganisationDocumentsInspect = (
  variables: GetOrganisationsIDOrganisationDocumentsInspectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.OrganisationDocumentVersionReadAll,
    GetOrganisationsIDOrganisationDocumentsInspectError,
    undefined,
    {},
    {},
    GetOrganisationsIDOrganisationDocumentsInspectPathParams
  >({ url: "/organisations/{id}/organisation_documents/inspect", method: "get", ...variables, signal });

export const useGetOrganisationsIDOrganisationDocumentsInspect = <TData = Schemas.OrganisationDocumentVersionReadAll>(
  variables: GetOrganisationsIDOrganisationDocumentsInspectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrganisationDocumentVersionReadAll,
      GetOrganisationsIDOrganisationDocumentsInspectError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.OrganisationDocumentVersionReadAll,
    GetOrganisationsIDOrganisationDocumentsInspectError,
    TData
  >(
    queryKeyFn({
      path: "/organisations/{ID}/organisation_documents/inspect",
      operationId: "getOrganisationsIDOrganisationDocumentsInspect",
      variables
    }),
    ({ signal }) => fetchGetOrganisationsIDOrganisationDocumentsInspect({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetOrganisationDocumentVersionsIDPathParams = {
  id: number;
};

export type GetOrganisationDocumentVersionsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationDocumentVersionsIDVariables = {
  pathParams: GetOrganisationDocumentVersionsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationDocumentVersionsID = (
  variables: GetOrganisationDocumentVersionsIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.OrganisationDocumentVersionRead,
    GetOrganisationDocumentVersionsIDError,
    undefined,
    {},
    {},
    GetOrganisationDocumentVersionsIDPathParams
  >({ url: "/organisation_document_versions/{id}", method: "get", ...variables, signal });

export const useGetOrganisationDocumentVersionsID = <TData = Schemas.OrganisationDocumentVersionRead>(
  variables: GetOrganisationDocumentVersionsIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OrganisationDocumentVersionRead, GetOrganisationDocumentVersionsIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OrganisationDocumentVersionRead, GetOrganisationDocumentVersionsIDError, TData>(
    queryKeyFn({
      path: "/organisation_document_versions/{ID}",
      operationId: "getOrganisationDocumentVersionsID",
      variables
    }),
    ({ signal }) => fetchGetOrganisationDocumentVersionsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteOrganisationDocumentVersionsIDPathParams = {
  id: number;
};

export type DeleteOrganisationDocumentVersionsIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteOrganisationDocumentVersionsIDVariables = {
  pathParams: DeleteOrganisationDocumentVersionsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteOrganisationDocumentVersionsID = (
  variables: DeleteOrganisationDocumentVersionsIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.Empty,
    DeleteOrganisationDocumentVersionsIDError,
    undefined,
    {},
    {},
    DeleteOrganisationDocumentVersionsIDPathParams
  >({ url: "/organisation_document_versions/{id}", method: "delete", ...variables, signal });

export const useDeleteOrganisationDocumentVersionsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Empty,
      DeleteOrganisationDocumentVersionsIDError,
      DeleteOrganisationDocumentVersionsIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Empty,
    DeleteOrganisationDocumentVersionsIDError,
    DeleteOrganisationDocumentVersionsIDVariables
  >(
    (variables: DeleteOrganisationDocumentVersionsIDVariables) =>
      fetchDeleteOrganisationDocumentVersionsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchOrganisationDocumentVersionsIDApprovePathParams = {
  id: number;
};

export type PatchOrganisationDocumentVersionsIDApproveError = Fetcher.ErrorWrapper<undefined>;

export type PatchOrganisationDocumentVersionsIDApproveVariables = {
  pathParams: PatchOrganisationDocumentVersionsIDApprovePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchOrganisationDocumentVersionsIDApprove = (
  variables: PatchOrganisationDocumentVersionsIDApproveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.OrganisationDocumentVersionRead,
    PatchOrganisationDocumentVersionsIDApproveError,
    undefined,
    {},
    {},
    PatchOrganisationDocumentVersionsIDApprovePathParams
  >({ url: "/organisation_document_versions/{id}/approve", method: "patch", ...variables, signal });

export const usePatchOrganisationDocumentVersionsIDApprove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganisationDocumentVersionRead,
      PatchOrganisationDocumentVersionsIDApproveError,
      PatchOrganisationDocumentVersionsIDApproveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.OrganisationDocumentVersionRead,
    PatchOrganisationDocumentVersionsIDApproveError,
    PatchOrganisationDocumentVersionsIDApproveVariables
  >(
    (variables: PatchOrganisationDocumentVersionsIDApproveVariables) =>
      fetchPatchOrganisationDocumentVersionsIDApprove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchOrganisationDocumentVersionsIDRevivePathParams = {
  id: number;
};

export type PatchOrganisationDocumentVersionsIDReviveError = Fetcher.ErrorWrapper<undefined>;

export type PatchOrganisationDocumentVersionsIDReviveVariables = {
  pathParams: PatchOrganisationDocumentVersionsIDRevivePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchOrganisationDocumentVersionsIDRevive = (
  variables: PatchOrganisationDocumentVersionsIDReviveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.OrganisationDocumentVersionRead,
    PatchOrganisationDocumentVersionsIDReviveError,
    undefined,
    {},
    {},
    PatchOrganisationDocumentVersionsIDRevivePathParams
  >({ url: "/organisation_document_versions/{id}/revive", method: "patch", ...variables, signal });

export const usePatchOrganisationDocumentVersionsIDRevive = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganisationDocumentVersionRead,
      PatchOrganisationDocumentVersionsIDReviveError,
      PatchOrganisationDocumentVersionsIDReviveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.OrganisationDocumentVersionRead,
    PatchOrganisationDocumentVersionsIDReviveError,
    PatchOrganisationDocumentVersionsIDReviveVariables
  >(
    (variables: PatchOrganisationDocumentVersionsIDReviveVariables) =>
      fetchPatchOrganisationDocumentVersionsIDRevive({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchOrganisationDocumentVersionsIDRejectPathParams = {
  id: number;
};

export type PatchOrganisationDocumentVersionsIDRejectError = Fetcher.ErrorWrapper<undefined>;

export type PatchOrganisationDocumentVersionsIDRejectVariables = {
  body?: Schemas.OrganisationDocumentVersionReject;
  pathParams: PatchOrganisationDocumentVersionsIDRejectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchOrganisationDocumentVersionsIDReject = (
  variables: PatchOrganisationDocumentVersionsIDRejectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.OrganisationDocumentVersionRead,
    PatchOrganisationDocumentVersionsIDRejectError,
    Schemas.OrganisationDocumentVersionReject,
    {},
    {},
    PatchOrganisationDocumentVersionsIDRejectPathParams
  >({ url: "/organisation_document_versions/{id}/reject", method: "patch", ...variables, signal });

export const usePatchOrganisationDocumentVersionsIDReject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganisationDocumentVersionRead,
      PatchOrganisationDocumentVersionsIDRejectError,
      PatchOrganisationDocumentVersionsIDRejectVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.OrganisationDocumentVersionRead,
    PatchOrganisationDocumentVersionsIDRejectError,
    PatchOrganisationDocumentVersionsIDRejectVariables
  >(
    (variables: PatchOrganisationDocumentVersionsIDRejectVariables) =>
      fetchPatchOrganisationDocumentVersionsIDReject({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetOrganisationDocumentsIDOrganisationDocumentVersionsPathParams = {
  id: number;
};

export type GetOrganisationDocumentsIDOrganisationDocumentVersionsError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationDocumentsIDOrganisationDocumentVersionsVariables = {
  pathParams: GetOrganisationDocumentsIDOrganisationDocumentVersionsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationDocumentsIDOrganisationDocumentVersions = (
  variables: GetOrganisationDocumentsIDOrganisationDocumentVersionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.OrganisationDocumentVersionReadAll,
    GetOrganisationDocumentsIDOrganisationDocumentVersionsError,
    undefined,
    {},
    {},
    GetOrganisationDocumentsIDOrganisationDocumentVersionsPathParams
  >({ url: "/organisation_documents/{id}/organisation_document_versions", method: "get", ...variables, signal });

export const useGetOrganisationDocumentsIDOrganisationDocumentVersions = <
  TData = Schemas.OrganisationDocumentVersionReadAll
>(
  variables: GetOrganisationDocumentsIDOrganisationDocumentVersionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.OrganisationDocumentVersionReadAll,
      GetOrganisationDocumentsIDOrganisationDocumentVersionsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.OrganisationDocumentVersionReadAll,
    GetOrganisationDocumentsIDOrganisationDocumentVersionsError,
    TData
  >(
    queryKeyFn({
      path: "/organisation_documents/{ID}/organisation_document_versions",
      operationId: "getOrganisationDocumentsIDOrganisationDocumentVersions",
      variables
    }),
    ({ signal }) =>
      fetchGetOrganisationDocumentsIDOrganisationDocumentVersions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostOffersError = Fetcher.ErrorWrapper<undefined>;

export type PostOffersVariables = {
  body?: Schemas.OfferCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostOffers = (variables: PostOffersVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OfferRead, PostOffersError, Schemas.OfferCreate, {}, {}, {}>({
    url: "/offers",
    method: "post",
    ...variables,
    signal
  });

export const usePostOffers = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.OfferRead, PostOffersError, PostOffersVariables>, "mutationFn">
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.OfferRead, PostOffersError, PostOffersVariables>(
    (variables: PostOffersVariables) => fetchPostOffers({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostOffersSearchError = Fetcher.ErrorWrapper<undefined>;

export type PostOffersSearchVariables = {
  body?: RequestBodies.FilterSearch;
} & ApiContext["fetcherOptions"];

export const fetchPostOffersSearch = (variables: PostOffersSearchVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OfferReadAll, PostOffersSearchError, RequestBodies.FilterSearch, {}, {}, {}>({
    url: "/offers/search",
    method: "post",
    ...variables,
    signal
  });

export const usePostOffersSearch = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.OfferReadAll, PostOffersSearchError, PostOffersSearchVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.OfferReadAll, PostOffersSearchError, PostOffersSearchVariables>(
    (variables: PostOffersSearchVariables) => fetchPostOffersSearch({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetOffersMostRecentQueryParams = {
  limit?: number;
};

export type GetOffersMostRecentError = Fetcher.ErrorWrapper<undefined>;

export type GetOffersMostRecentVariables = {
  queryParams?: GetOffersMostRecentQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOffersMostRecent = (variables: GetOffersMostRecentVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OfferReadAll, GetOffersMostRecentError, undefined, {}, GetOffersMostRecentQueryParams, {}>({
    url: "/offers/most_recent",
    method: "get",
    ...variables,
    signal
  });

export const useGetOffersMostRecent = <TData = Schemas.OfferReadAll>(
  variables: GetOffersMostRecentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OfferReadAll, GetOffersMostRecentError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OfferReadAll, GetOffersMostRecentError, TData>(
    queryKeyFn({ path: "/offers/most_recent", operationId: "getOffersMostRecent", variables }),
    ({ signal }) => fetchGetOffersMostRecent({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetOffersIDPathParams = {
  id: number;
};

export type GetOffersIDError = Fetcher.ErrorWrapper<undefined>;

export type GetOffersIDVariables = {
  pathParams: GetOffersIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOffersID = (variables: GetOffersIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OfferRead, GetOffersIDError, undefined, {}, {}, GetOffersIDPathParams>({
    url: "/offers/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetOffersID = <TData = Schemas.OfferRead>(
  variables: GetOffersIDVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.OfferRead, GetOffersIDError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OfferRead, GetOffersIDError, TData>(
    queryKeyFn({ path: "/offers/{ID}", operationId: "getOffersID", variables }),
    ({ signal }) => fetchGetOffersID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchOffersIDPathParams = {
  id: number;
};

export type PatchOffersIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchOffersIDVariables = {
  body?: Schemas.OfferUpdate;
  pathParams: PatchOffersIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchOffersID = (variables: PatchOffersIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OfferRead, PatchOffersIDError, Schemas.OfferUpdate, {}, {}, PatchOffersIDPathParams>({
    url: "/offers/{id}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchOffersID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.OfferRead, PatchOffersIDError, PatchOffersIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.OfferRead, PatchOffersIDError, PatchOffersIDVariables>(
    (variables: PatchOffersIDVariables) => fetchPatchOffersID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetOrganisationsIDOffersPathParams = {
  id: number;
};

export type GetOrganisationsIDOffersError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationsIDOffersVariables = {
  pathParams: GetOrganisationsIDOffersPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationsIDOffers = (variables: GetOrganisationsIDOffersVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OfferReadAll, GetOrganisationsIDOffersError, undefined, {}, {}, GetOrganisationsIDOffersPathParams>({
    url: "/organisations/{id}/offers",
    method: "get",
    ...variables,
    signal
  });

export const useGetOrganisationsIDOffers = <TData = Schemas.OfferReadAll>(
  variables: GetOrganisationsIDOffersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OfferReadAll, GetOrganisationsIDOffersError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OfferReadAll, GetOrganisationsIDOffersError, TData>(
    queryKeyFn({ path: "/organisations/{ID}/offers", operationId: "getOrganisationsIDOffers", variables }),
    ({ signal }) => fetchGetOrganisationsIDOffers({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetOrganisationsIDOffersInspectPathParams = {
  id: number;
};

export type GetOrganisationsIDOffersInspectError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationsIDOffersInspectVariables = {
  pathParams: GetOrganisationsIDOffersInspectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationsIDOffersInspect = (
  variables: GetOrganisationsIDOffersInspectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.OfferReadAll,
    GetOrganisationsIDOffersInspectError,
    undefined,
    {},
    {},
    GetOrganisationsIDOffersInspectPathParams
  >({ url: "/organisations/{id}/offers/inspect", method: "get", ...variables, signal });

export const useGetOrganisationsIDOffersInspect = <TData = Schemas.OfferReadAll>(
  variables: GetOrganisationsIDOffersInspectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OfferReadAll, GetOrganisationsIDOffersInspectError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OfferReadAll, GetOrganisationsIDOffersInspectError, TData>(
    queryKeyFn({
      path: "/organisations/{ID}/offers/inspect",
      operationId: "getOrganisationsIDOffersInspect",
      variables
    }),
    ({ signal }) => fetchGetOrganisationsIDOffersInspect({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchOffersIDVisibilityPathParams = {
  id: number;
};

export type PatchOffersIDVisibilityError = Fetcher.ErrorWrapper<undefined>;

export type PatchOffersIDVisibilityVariables = {
  body?: Schemas.OfferVisibility;
  pathParams: PatchOffersIDVisibilityPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchOffersIDVisibility = (variables: PatchOffersIDVisibilityVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.OfferRead,
    PatchOffersIDVisibilityError,
    Schemas.OfferVisibility,
    {},
    {},
    PatchOffersIDVisibilityPathParams
  >({ url: "/offers/{id}/visibility", method: "patch", ...variables, signal });

export const usePatchOffersIDVisibility = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.OfferRead, PatchOffersIDVisibilityError, PatchOffersIDVisibilityVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.OfferRead, PatchOffersIDVisibilityError, PatchOffersIDVisibilityVariables>(
    (variables: PatchOffersIDVisibilityVariables) => fetchPatchOffersIDVisibility({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostOfferContactsError = Fetcher.ErrorWrapper<undefined>;

export type PostOfferContactsVariables = {
  body?: Schemas.OfferContactCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostOfferContacts = (variables: PostOfferContactsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OfferContactRead, PostOfferContactsError, Schemas.OfferContactCreate, {}, {}, {}>({
    url: "/offer_contacts",
    method: "post",
    ...variables,
    signal
  });

export const usePostOfferContacts = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.OfferContactRead, PostOfferContactsError, PostOfferContactsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.OfferContactRead, PostOfferContactsError, PostOfferContactsVariables>(
    (variables: PostOfferContactsVariables) => fetchPostOfferContacts({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteOfferContactsIDPathParams = {
  id: number;
};

export type DeleteOfferContactsIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteOfferContactsIDVariables = {
  pathParams: DeleteOfferContactsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteOfferContactsID = (variables: DeleteOfferContactsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, DeleteOfferContactsIDError, undefined, {}, {}, DeleteOfferContactsIDPathParams>({
    url: "/offer_contacts/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteOfferContactsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Empty, DeleteOfferContactsIDError, DeleteOfferContactsIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, DeleteOfferContactsIDError, DeleteOfferContactsIDVariables>(
    (variables: DeleteOfferContactsIDVariables) => fetchDeleteOfferContactsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetOffersIDOfferContactsPathParams = {
  id: number;
};

export type GetOffersIDOfferContactsError = Fetcher.ErrorWrapper<undefined>;

export type GetOffersIDOfferContactsVariables = {
  pathParams: GetOffersIDOfferContactsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOffersIDOfferContacts = (variables: GetOffersIDOfferContactsVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.OfferContactReadAll,
    GetOffersIDOfferContactsError,
    undefined,
    {},
    {},
    GetOffersIDOfferContactsPathParams
  >({ url: "/offers/{id}/offer_contacts", method: "get", ...variables, signal });

export const useGetOffersIDOfferContacts = <TData = Schemas.OfferContactReadAll>(
  variables: GetOffersIDOfferContactsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OfferContactReadAll, GetOffersIDOfferContactsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OfferContactReadAll, GetOffersIDOfferContactsError, TData>(
    queryKeyFn({ path: "/offers/{ID}/offer_contacts", operationId: "getOffersIDOfferContacts", variables }),
    ({ signal }) => fetchGetOffersIDOfferContacts({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostPitchContactsError = Fetcher.ErrorWrapper<undefined>;

export type PostPitchContactsVariables = {
  body?: Schemas.PitchContactCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostPitchContacts = (variables: PostPitchContactsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.PitchContactRead, PostPitchContactsError, Schemas.PitchContactCreate, {}, {}, {}>({
    url: "/pitch_contacts",
    method: "post",
    ...variables,
    signal
  });

export const usePostPitchContacts = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.PitchContactRead, PostPitchContactsError, PostPitchContactsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.PitchContactRead, PostPitchContactsError, PostPitchContactsVariables>(
    (variables: PostPitchContactsVariables) => fetchPostPitchContacts({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeletePitchContactsIDPathParams = {
  id: number;
};

export type DeletePitchContactsIDError = Fetcher.ErrorWrapper<undefined>;

export type DeletePitchContactsIDVariables = {
  pathParams: DeletePitchContactsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeletePitchContactsID = (variables: DeletePitchContactsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, DeletePitchContactsIDError, undefined, {}, {}, DeletePitchContactsIDPathParams>({
    url: "/pitch_contacts/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeletePitchContactsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Empty, DeletePitchContactsIDError, DeletePitchContactsIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, DeletePitchContactsIDError, DeletePitchContactsIDVariables>(
    (variables: DeletePitchContactsIDVariables) => fetchDeletePitchContactsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetPitchesIDPitchContactsPathParams = {
  id: number;
};

export type GetPitchesIDPitchContactsError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchesIDPitchContactsVariables = {
  pathParams: GetPitchesIDPitchContactsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchesIDPitchContacts = (variables: GetPitchesIDPitchContactsVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.PitchContactReadAll,
    GetPitchesIDPitchContactsError,
    undefined,
    {},
    {},
    GetPitchesIDPitchContactsPathParams
  >({ url: "/pitches/{id}/pitch_contacts", method: "get", ...variables, signal });

export const useGetPitchesIDPitchContacts = <TData = Schemas.PitchContactReadAll>(
  variables: GetPitchesIDPitchContactsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PitchContactReadAll, GetPitchesIDPitchContactsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.PitchContactReadAll, GetPitchesIDPitchContactsError, TData>(
    queryKeyFn({ path: "/pitches/{ID}/pitch_contacts", operationId: "getPitchesIDPitchContacts", variables }),
    ({ signal }) => fetchGetPitchesIDPitchContacts({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetLandTypesError = Fetcher.ErrorWrapper<undefined>;

export type GetLandTypesVariables = ApiContext["fetcherOptions"];

export const fetchGetLandTypes = (variables: GetLandTypesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.LandTypeReadAll, GetLandTypesError, undefined, {}, {}, {}>({
    url: "/land_types",
    method: "get",
    ...variables,
    signal
  });

export const useGetLandTypes = <TData = Schemas.LandTypeReadAll>(
  variables: GetLandTypesVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.LandTypeReadAll, GetLandTypesError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.LandTypeReadAll, GetLandTypesError, TData>(
    queryKeyFn({ path: "/land_types", operationId: "getLandTypes", variables }),
    ({ signal }) => fetchGetLandTypes({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetFundingBracketsError = Fetcher.ErrorWrapper<undefined>;

export type GetFundingBracketsVariables = ApiContext["fetcherOptions"];

export const fetchGetFundingBrackets = (variables: GetFundingBracketsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.FundingBracketReadAll, GetFundingBracketsError, undefined, {}, {}, {}>({
    url: "/funding_brackets",
    method: "get",
    ...variables,
    signal
  });

export const useGetFundingBrackets = <TData = Schemas.FundingBracketReadAll>(
  variables: GetFundingBracketsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.FundingBracketReadAll, GetFundingBracketsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.FundingBracketReadAll, GetFundingBracketsError, TData>(
    queryKeyFn({ path: "/funding_brackets", operationId: "getFundingBrackets", variables }),
    ({ signal }) => fetchGetFundingBrackets({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetRestorationMethodsError = Fetcher.ErrorWrapper<undefined>;

export type GetRestorationMethodsVariables = ApiContext["fetcherOptions"];

export const fetchGetRestorationMethods = (variables: GetRestorationMethodsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.RestorationMethodReadAll, GetRestorationMethodsError, undefined, {}, {}, {}>({
    url: "/restoration_methods",
    method: "get",
    ...variables,
    signal
  });

export const useGetRestorationMethods = <TData = Schemas.RestorationMethodReadAll>(
  variables: GetRestorationMethodsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestorationMethodReadAll, GetRestorationMethodsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.RestorationMethodReadAll, GetRestorationMethodsError, TData>(
    queryKeyFn({ path: "/restoration_methods", operationId: "getRestorationMethods", variables }),
    ({ signal }) => fetchGetRestorationMethods({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetVisibilitiesError = Fetcher.ErrorWrapper<undefined>;

export type GetVisibilitiesVariables = ApiContext["fetcherOptions"];

export const fetchGetVisibilities = (variables: GetVisibilitiesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.VisibilityReadAll, GetVisibilitiesError, undefined, {}, {}, {}>({
    url: "/visibilities",
    method: "get",
    ...variables,
    signal
  });

export const useGetVisibilities = <TData = Schemas.VisibilityReadAll>(
  variables: GetVisibilitiesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.VisibilityReadAll, GetVisibilitiesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.VisibilityReadAll, GetVisibilitiesError, TData>(
    queryKeyFn({ path: "/visibilities", operationId: "getVisibilities", variables }),
    ({ signal }) => fetchGetVisibilities({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetRevenueDriversError = Fetcher.ErrorWrapper<undefined>;

export type GetRevenueDriversVariables = ApiContext["fetcherOptions"];

export const fetchGetRevenueDrivers = (variables: GetRevenueDriversVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.RevenueDriverReadAll, GetRevenueDriversError, undefined, {}, {}, {}>({
    url: "/revenue_drivers",
    method: "get",
    ...variables,
    signal
  });

export const useGetRevenueDrivers = <TData = Schemas.RevenueDriverReadAll>(
  variables: GetRevenueDriversVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RevenueDriverReadAll, GetRevenueDriversError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.RevenueDriverReadAll, GetRevenueDriversError, TData>(
    queryKeyFn({ path: "/revenue_drivers", operationId: "getRevenueDrivers", variables }),
    ({ signal }) => fetchGetRevenueDrivers({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostPitchesError = Fetcher.ErrorWrapper<undefined>;

export type PostPitchesVariables = {
  body?: Schemas.PitchCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostPitches = (variables: PostPitchesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.PitchVersionRead, PostPitchesError, Schemas.PitchCreate, {}, {}, {}>({
    url: "/pitches",
    method: "post",
    ...variables,
    signal
  });

export const usePostPitches = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.PitchVersionRead, PostPitchesError, PostPitchesVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.PitchVersionRead, PostPitchesError, PostPitchesVariables>(
    (variables: PostPitchesVariables) => fetchPostPitches({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostPitchesSearchError = Fetcher.ErrorWrapper<undefined>;

export type PostPitchesSearchVariables = {
  body?: RequestBodies.FilterSearch;
} & ApiContext["fetcherOptions"];

export const fetchPostPitchesSearch = (variables: PostPitchesSearchVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.PitchReadAll, PostPitchesSearchError, RequestBodies.FilterSearch, {}, {}, {}>({
    url: "/pitches/search",
    method: "post",
    ...variables,
    signal
  });

export const usePostPitchesSearch = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.PitchReadAll, PostPitchesSearchError, PostPitchesSearchVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.PitchReadAll, PostPitchesSearchError, PostPitchesSearchVariables>(
    (variables: PostPitchesSearchVariables) => fetchPostPitchesSearch({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetContinentsPitchesError = Fetcher.ErrorWrapper<undefined>;

export type GetContinentsPitchesVariables = ApiContext["fetcherOptions"];

export const fetchGetContinentsPitches = (variables: GetContinentsPitchesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.PitchByContinentReadAll, GetContinentsPitchesError, undefined, {}, {}, {}>({
    url: "/continents/pitches",
    method: "get",
    ...variables,
    signal
  });

export const useGetContinentsPitches = <TData = Schemas.PitchByContinentReadAll>(
  variables: GetContinentsPitchesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PitchByContinentReadAll, GetContinentsPitchesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.PitchByContinentReadAll, GetContinentsPitchesError, TData>(
    queryKeyFn({ path: "/continents/pitches", operationId: "getContinentsPitches", variables }),
    ({ signal }) => fetchGetContinentsPitches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetPitchesMostRecentQueryParams = {
  limit?: number;
};

export type GetPitchesMostRecentError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchesMostRecentVariables = {
  queryParams?: GetPitchesMostRecentQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchesMostRecent = (variables: GetPitchesMostRecentVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.PitchReadAll, GetPitchesMostRecentError, undefined, {}, GetPitchesMostRecentQueryParams, {}>({
    url: "/pitches/most_recent",
    method: "get",
    ...variables,
    signal
  });

export const useGetPitchesMostRecent = <TData = Schemas.PitchReadAll>(
  variables: GetPitchesMostRecentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PitchReadAll, GetPitchesMostRecentError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.PitchReadAll, GetPitchesMostRecentError, TData>(
    queryKeyFn({ path: "/pitches/most_recent", operationId: "getPitchesMostRecent", variables }),
    ({ signal }) => fetchGetPitchesMostRecent({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetContinentsCONTINENTPitchesPathParams = {
  continent: string;
};

export type GetContinentsCONTINENTPitchesError = Fetcher.ErrorWrapper<undefined>;

export type GetContinentsCONTINENTPitchesVariables = {
  pathParams: GetContinentsCONTINENTPitchesPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetContinentsCONTINENTPitches = (
  variables: GetContinentsCONTINENTPitchesVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.PitchReadAll,
    GetContinentsCONTINENTPitchesError,
    undefined,
    {},
    {},
    GetContinentsCONTINENTPitchesPathParams
  >({ url: "/continents/{continent}/pitches", method: "get", ...variables, signal });

export const useGetContinentsCONTINENTPitches = <TData = Schemas.PitchReadAll>(
  variables: GetContinentsCONTINENTPitchesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PitchReadAll, GetContinentsCONTINENTPitchesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.PitchReadAll, GetContinentsCONTINENTPitchesError, TData>(
    queryKeyFn({ path: "/continents/{CONTINENT}/pitches", operationId: "getContinentsCONTINENTPitches", variables }),
    ({ signal }) => fetchGetContinentsCONTINENTPitches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetUsersAllQueryParams = {
  /**
   * Page number
   */
  page?: number;
};

export type GetUsersAllError = Fetcher.ErrorWrapper<undefined>;

export type GetUsersAllVariables = {
  queryParams?: GetUsersAllQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetUsersAll = (variables: GetUsersAllVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UserReadAllPaginated, GetUsersAllError, undefined, {}, GetUsersAllQueryParams, {}>({
    url: "/users/all",
    method: "get",
    ...variables,
    signal
  });

export const useGetUsersAll = <TData = Schemas.UserReadAllPaginated>(
  variables: GetUsersAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.UserReadAllPaginated, GetUsersAllError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.UserReadAllPaginated, GetUsersAllError, TData>(
    queryKeyFn({ path: "/users/all", operationId: "getUsersAll", variables }),
    ({ signal }) => fetchGetUsersAll({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetUsersUnverifiedQueryParams = {
  /**
   * Page number
   */
  page?: number;
};

export type GetUsersUnverifiedError = Fetcher.ErrorWrapper<undefined>;

export type GetUsersUnverifiedVariables = {
  queryParams?: GetUsersUnverifiedQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetUsersUnverified = (variables: GetUsersUnverifiedVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UserReadAllPaginated, GetUsersUnverifiedError, undefined, {}, GetUsersUnverifiedQueryParams, {}>({
    url: "/users/unverified",
    method: "get",
    ...variables,
    signal
  });

export const useGetUsersUnverified = <TData = Schemas.UserReadAllPaginated>(
  variables: GetUsersUnverifiedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.UserReadAllPaginated, GetUsersUnverifiedError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.UserReadAllPaginated, GetUsersUnverifiedError, TData>(
    queryKeyFn({ path: "/users/unverified", operationId: "getUsersUnverified", variables }),
    ({ signal }) => fetchGetUsersUnverified({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostUsersResendError = Fetcher.ErrorWrapper<undefined>;

export type PostUsersResendVariables = {
  body?: Schemas.UserResend;
} & ApiContext["fetcherOptions"];

export const fetchPostUsersResend = (variables: PostUsersResendVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UserRead, PostUsersResendError, Schemas.UserResend, {}, {}, {}>({
    url: "/users/resend",
    method: "post",
    ...variables,
    signal
  });

export const usePostUsersResend = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.UserRead, PostUsersResendError, PostUsersResendVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.UserRead, PostUsersResendError, PostUsersResendVariables>(
    (variables: PostUsersResendVariables) => fetchPostUsersResend({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetPitchesIDPathParams = {
  id: number;
};

export type GetPitchesIDError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchesIDVariables = {
  pathParams: GetPitchesIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchesID = (variables: GetPitchesIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.PitchRead, GetPitchesIDError, undefined, {}, {}, GetPitchesIDPathParams>({
    url: "/pitches/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetPitchesID = <TData = Schemas.PitchRead>(
  variables: GetPitchesIDVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.PitchRead, GetPitchesIDError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.PitchRead, GetPitchesIDError, TData>(
    queryKeyFn({ path: "/pitches/{ID}", operationId: "getPitchesID", variables }),
    ({ signal }) => fetchGetPitchesID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchPitchesIDPathParams = {
  id: number;
};

export type PatchPitchesIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchPitchesIDVariables = {
  body?: Schemas.PitchUpdate;
  pathParams: PatchPitchesIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchPitchesID = (variables: PatchPitchesIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.PitchVersionRead, PatchPitchesIDError, Schemas.PitchUpdate, {}, {}, PatchPitchesIDPathParams>({
    url: "/pitches/{id}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchPitchesID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.PitchVersionRead, PatchPitchesIDError, PatchPitchesIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.PitchVersionRead, PatchPitchesIDError, PatchPitchesIDVariables>(
    (variables: PatchPitchesIDVariables) => fetchPatchPitchesID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetOrganisationsIDPitchesPathParams = {
  id: number;
};

export type GetOrganisationsIDPitchesError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationsIDPitchesVariables = {
  pathParams: GetOrganisationsIDPitchesPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationsIDPitches = (variables: GetOrganisationsIDPitchesVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.PitchReadAll,
    GetOrganisationsIDPitchesError,
    undefined,
    {},
    {},
    GetOrganisationsIDPitchesPathParams
  >({ url: "/organisations/{id}/pitches", method: "get", ...variables, signal });

export const useGetOrganisationsIDPitches = <TData = Schemas.PitchReadAll>(
  variables: GetOrganisationsIDPitchesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PitchReadAll, GetOrganisationsIDPitchesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.PitchReadAll, GetOrganisationsIDPitchesError, TData>(
    queryKeyFn({ path: "/organisations/{ID}/pitches", operationId: "getOrganisationsIDPitches", variables }),
    ({ signal }) => fetchGetOrganisationsIDPitches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetOrganisationsIDPitchesInspectPathParams = {
  id: number;
};

export type GetOrganisationsIDPitchesInspectError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationsIDPitchesInspectVariables = {
  pathParams: GetOrganisationsIDPitchesInspectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOrganisationsIDPitchesInspect = (
  variables: GetOrganisationsIDPitchesInspectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.PitchVersionReadAll,
    GetOrganisationsIDPitchesInspectError,
    undefined,
    {},
    {},
    GetOrganisationsIDPitchesInspectPathParams
  >({ url: "/organisations/{id}/pitches/inspect", method: "get", ...variables, signal });

export const useGetOrganisationsIDPitchesInspect = <TData = Schemas.PitchVersionReadAll>(
  variables: GetOrganisationsIDPitchesInspectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PitchVersionReadAll, GetOrganisationsIDPitchesInspectError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.PitchVersionReadAll, GetOrganisationsIDPitchesInspectError, TData>(
    queryKeyFn({
      path: "/organisations/{ID}/pitches/inspect",
      operationId: "getOrganisationsIDPitchesInspect",
      variables
    }),
    ({ signal }) => fetchGetOrganisationsIDPitchesInspect({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchPitchesIDVisibilityPathParams = {
  id: number;
};

export type PatchPitchesIDVisibilityError = Fetcher.ErrorWrapper<undefined>;

export type PatchPitchesIDVisibilityVariables = {
  body?: Schemas.PitchVisibility;
  pathParams: PatchPitchesIDVisibilityPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchPitchesIDVisibility = (variables: PatchPitchesIDVisibilityVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.PitchRead,
    PatchPitchesIDVisibilityError,
    Schemas.PitchVisibility,
    {},
    {},
    PatchPitchesIDVisibilityPathParams
  >({ url: "/pitches/{id}/visibility", method: "patch", ...variables, signal });

export const usePatchPitchesIDVisibility = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.PitchRead, PatchPitchesIDVisibilityError, PatchPitchesIDVisibilityVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.PitchRead, PatchPitchesIDVisibilityError, PatchPitchesIDVisibilityVariables>(
    (variables: PatchPitchesIDVisibilityVariables) =>
      fetchPatchPitchesIDVisibility({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetPitchVersionsIDPathParams = {
  id: number;
};

export type GetPitchVersionsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchVersionsIDVariables = {
  pathParams: GetPitchVersionsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchVersionsID = (variables: GetPitchVersionsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.PitchVersionRead, GetPitchVersionsIDError, undefined, {}, {}, GetPitchVersionsIDPathParams>({
    url: "/pitch_versions/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetPitchVersionsID = <TData = Schemas.PitchVersionRead>(
  variables: GetPitchVersionsIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PitchVersionRead, GetPitchVersionsIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.PitchVersionRead, GetPitchVersionsIDError, TData>(
    queryKeyFn({ path: "/pitch_versions/{ID}", operationId: "getPitchVersionsID", variables }),
    ({ signal }) => fetchGetPitchVersionsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeletePitchVersionsIDPathParams = {
  id: number;
};

export type DeletePitchVersionsIDError = Fetcher.ErrorWrapper<undefined>;

export type DeletePitchVersionsIDVariables = {
  pathParams: DeletePitchVersionsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeletePitchVersionsID = (variables: DeletePitchVersionsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, DeletePitchVersionsIDError, undefined, {}, {}, DeletePitchVersionsIDPathParams>({
    url: "/pitch_versions/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeletePitchVersionsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Empty, DeletePitchVersionsIDError, DeletePitchVersionsIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, DeletePitchVersionsIDError, DeletePitchVersionsIDVariables>(
    (variables: DeletePitchVersionsIDVariables) => fetchDeletePitchVersionsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchPitchVersionsIDApprovePathParams = {
  id: number;
};

export type PatchPitchVersionsIDApproveError = Fetcher.ErrorWrapper<undefined>;

export type PatchPitchVersionsIDApproveVariables = {
  pathParams: PatchPitchVersionsIDApprovePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchPitchVersionsIDApprove = (
  variables: PatchPitchVersionsIDApproveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.PitchVersionRead,
    PatchPitchVersionsIDApproveError,
    undefined,
    {},
    {},
    PatchPitchVersionsIDApprovePathParams
  >({ url: "/pitch_versions/{id}/approve", method: "patch", ...variables, signal });

export const usePatchPitchVersionsIDApprove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PitchVersionRead,
      PatchPitchVersionsIDApproveError,
      PatchPitchVersionsIDApproveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.PitchVersionRead,
    PatchPitchVersionsIDApproveError,
    PatchPitchVersionsIDApproveVariables
  >(
    (variables: PatchPitchVersionsIDApproveVariables) =>
      fetchPatchPitchVersionsIDApprove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchPitchVersionsIDRevivePathParams = {
  id: number;
};

export type PatchPitchVersionsIDReviveError = Fetcher.ErrorWrapper<undefined>;

export type PatchPitchVersionsIDReviveVariables = {
  pathParams: PatchPitchVersionsIDRevivePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchPitchVersionsIDRevive = (variables: PatchPitchVersionsIDReviveVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.PitchVersionRead,
    PatchPitchVersionsIDReviveError,
    undefined,
    {},
    {},
    PatchPitchVersionsIDRevivePathParams
  >({ url: "/pitch_versions/{id}/revive", method: "patch", ...variables, signal });

export const usePatchPitchVersionsIDRevive = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PitchVersionRead,
      PatchPitchVersionsIDReviveError,
      PatchPitchVersionsIDReviveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.PitchVersionRead,
    PatchPitchVersionsIDReviveError,
    PatchPitchVersionsIDReviveVariables
  >(
    (variables: PatchPitchVersionsIDReviveVariables) =>
      fetchPatchPitchVersionsIDRevive({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchPitchVersionsIDRejectPathParams = {
  id: number;
};

export type PatchPitchVersionsIDRejectError = Fetcher.ErrorWrapper<undefined>;

export type PatchPitchVersionsIDRejectVariables = {
  body?: Schemas.PitchVersionReject;
  pathParams: PatchPitchVersionsIDRejectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchPitchVersionsIDReject = (variables: PatchPitchVersionsIDRejectVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.PitchVersionRead,
    PatchPitchVersionsIDRejectError,
    Schemas.PitchVersionReject,
    {},
    {},
    PatchPitchVersionsIDRejectPathParams
  >({ url: "/pitch_versions/{id}/reject", method: "patch", ...variables, signal });

export const usePatchPitchVersionsIDReject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PitchVersionRead,
      PatchPitchVersionsIDRejectError,
      PatchPitchVersionsIDRejectVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.PitchVersionRead,
    PatchPitchVersionsIDRejectError,
    PatchPitchVersionsIDRejectVariables
  >(
    (variables: PatchPitchVersionsIDRejectVariables) =>
      fetchPatchPitchVersionsIDReject({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetPitchesIDPitchVersionsPathParams = {
  id: number;
};

export type GetPitchesIDPitchVersionsError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchesIDPitchVersionsVariables = {
  pathParams: GetPitchesIDPitchVersionsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchesIDPitchVersions = (variables: GetPitchesIDPitchVersionsVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.PitchVersionReadAll,
    GetPitchesIDPitchVersionsError,
    undefined,
    {},
    {},
    GetPitchesIDPitchVersionsPathParams
  >({ url: "/pitches/{id}/pitch_versions", method: "get", ...variables, signal });

export const useGetPitchesIDPitchVersions = <TData = Schemas.PitchVersionReadAll>(
  variables: GetPitchesIDPitchVersionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PitchVersionReadAll, GetPitchesIDPitchVersionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.PitchVersionReadAll, GetPitchesIDPitchVersionsError, TData>(
    queryKeyFn({ path: "/pitches/{ID}/pitch_versions", operationId: "getPitchesIDPitchVersions", variables }),
    ({ signal }) => fetchGetPitchesIDPitchVersions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostCarbonCertificationsError = Fetcher.ErrorWrapper<undefined>;

export type PostCarbonCertificationsVariables = {
  body?: Schemas.CarbonCertificationCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostCarbonCertifications = (variables: PostCarbonCertificationsVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.CarbonCertificationVersionRead,
    PostCarbonCertificationsError,
    Schemas.CarbonCertificationCreate,
    {},
    {},
    {}
  >({ url: "/carbon_certifications", method: "post", ...variables, signal });

export const usePostCarbonCertifications = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CarbonCertificationVersionRead,
      PostCarbonCertificationsError,
      PostCarbonCertificationsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.CarbonCertificationVersionRead,
    PostCarbonCertificationsError,
    PostCarbonCertificationsVariables
  >(
    (variables: PostCarbonCertificationsVariables) =>
      fetchPostCarbonCertifications({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetCarbonCertificationsIDPathParams = {
  id: number;
};

export type GetCarbonCertificationsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetCarbonCertificationsIDVariables = {
  pathParams: GetCarbonCertificationsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetCarbonCertificationsID = (variables: GetCarbonCertificationsIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.CarbonCertificationRead,
    GetCarbonCertificationsIDError,
    undefined,
    {},
    {},
    GetCarbonCertificationsIDPathParams
  >({ url: "/carbon_certifications/{id}", method: "get", ...variables, signal });

export const useGetCarbonCertificationsID = <TData = Schemas.CarbonCertificationRead>(
  variables: GetCarbonCertificationsIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CarbonCertificationRead, GetCarbonCertificationsIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.CarbonCertificationRead, GetCarbonCertificationsIDError, TData>(
    queryKeyFn({ path: "/carbon_certifications/{ID}", operationId: "getCarbonCertificationsID", variables }),
    ({ signal }) => fetchGetCarbonCertificationsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchCarbonCertificationsIDPathParams = {
  id: number;
};

export type PatchCarbonCertificationsIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchCarbonCertificationsIDVariables = {
  body?: Schemas.CarbonCertificationUpdate;
  pathParams: PatchCarbonCertificationsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchCarbonCertificationsID = (
  variables: PatchCarbonCertificationsIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.CarbonCertificationVersionRead,
    PatchCarbonCertificationsIDError,
    Schemas.CarbonCertificationUpdate,
    {},
    {},
    PatchCarbonCertificationsIDPathParams
  >({ url: "/carbon_certifications/{id}", method: "patch", ...variables, signal });

export const usePatchCarbonCertificationsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CarbonCertificationVersionRead,
      PatchCarbonCertificationsIDError,
      PatchCarbonCertificationsIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.CarbonCertificationVersionRead,
    PatchCarbonCertificationsIDError,
    PatchCarbonCertificationsIDVariables
  >(
    (variables: PatchCarbonCertificationsIDVariables) =>
      fetchPatchCarbonCertificationsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteCarbonCertificationsIDPathParams = {
  id: number;
};

export type DeleteCarbonCertificationsIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteCarbonCertificationsIDVariables = {
  pathParams: DeleteCarbonCertificationsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteCarbonCertificationsID = (
  variables: DeleteCarbonCertificationsIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.Empty, DeleteCarbonCertificationsIDError, undefined, {}, {}, DeleteCarbonCertificationsIDPathParams>(
    { url: "/carbon_certifications/{id}", method: "delete", ...variables, signal }
  );

export const useDeleteCarbonCertificationsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Empty,
      DeleteCarbonCertificationsIDError,
      DeleteCarbonCertificationsIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Empty,
    DeleteCarbonCertificationsIDError,
    DeleteCarbonCertificationsIDVariables
  >(
    (variables: DeleteCarbonCertificationsIDVariables) =>
      fetchDeleteCarbonCertificationsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetPitchesIDCarbonCertificationsPathParams = {
  id: number;
};

export type GetPitchesIDCarbonCertificationsError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchesIDCarbonCertificationsVariables = {
  pathParams: GetPitchesIDCarbonCertificationsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchesIDCarbonCertifications = (
  variables: GetPitchesIDCarbonCertificationsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.CarbonCertificationReadAll,
    GetPitchesIDCarbonCertificationsError,
    undefined,
    {},
    {},
    GetPitchesIDCarbonCertificationsPathParams
  >({ url: "/pitches/{id}/carbon_certifications", method: "get", ...variables, signal });

export const useGetPitchesIDCarbonCertifications = <TData = Schemas.CarbonCertificationReadAll>(
  variables: GetPitchesIDCarbonCertificationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CarbonCertificationReadAll, GetPitchesIDCarbonCertificationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.CarbonCertificationReadAll, GetPitchesIDCarbonCertificationsError, TData>(
    queryKeyFn({
      path: "/pitches/{ID}/carbon_certifications",
      operationId: "getPitchesIDCarbonCertifications",
      variables
    }),
    ({ signal }) => fetchGetPitchesIDCarbonCertifications({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetPitchesIDCarbonCertificationsInspectPathParams = {
  id: number;
};

export type GetPitchesIDCarbonCertificationsInspectError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchesIDCarbonCertificationsInspectVariables = {
  pathParams: GetPitchesIDCarbonCertificationsInspectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchesIDCarbonCertificationsInspect = (
  variables: GetPitchesIDCarbonCertificationsInspectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.CarbonCertificationVersionReadAll,
    GetPitchesIDCarbonCertificationsInspectError,
    undefined,
    {},
    {},
    GetPitchesIDCarbonCertificationsInspectPathParams
  >({ url: "/pitches/{id}/carbon_certifications/inspect", method: "get", ...variables, signal });

export const useGetPitchesIDCarbonCertificationsInspect = <TData = Schemas.CarbonCertificationVersionReadAll>(
  variables: GetPitchesIDCarbonCertificationsInspectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CarbonCertificationVersionReadAll,
      GetPitchesIDCarbonCertificationsInspectError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.CarbonCertificationVersionReadAll,
    GetPitchesIDCarbonCertificationsInspectError,
    TData
  >(
    queryKeyFn({
      path: "/pitches/{ID}/carbon_certifications/inspect",
      operationId: "getPitchesIDCarbonCertificationsInspect",
      variables
    }),
    ({ signal }) => fetchGetPitchesIDCarbonCertificationsInspect({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetCarbonCertificationVersionsIDPathParams = {
  id: number;
};

export type GetCarbonCertificationVersionsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetCarbonCertificationVersionsIDVariables = {
  pathParams: GetCarbonCertificationVersionsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetCarbonCertificationVersionsID = (
  variables: GetCarbonCertificationVersionsIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.CarbonCertificationVersionRead,
    GetCarbonCertificationVersionsIDError,
    undefined,
    {},
    {},
    GetCarbonCertificationVersionsIDPathParams
  >({ url: "/carbon_certification_versions/{id}", method: "get", ...variables, signal });

export const useGetCarbonCertificationVersionsID = <TData = Schemas.CarbonCertificationVersionRead>(
  variables: GetCarbonCertificationVersionsIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CarbonCertificationVersionRead, GetCarbonCertificationVersionsIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.CarbonCertificationVersionRead, GetCarbonCertificationVersionsIDError, TData>(
    queryKeyFn({
      path: "/carbon_certification_versions/{ID}",
      operationId: "getCarbonCertificationVersionsID",
      variables
    }),
    ({ signal }) => fetchGetCarbonCertificationVersionsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteCarbonCertificationVersionsIDPathParams = {
  id: number;
};

export type DeleteCarbonCertificationVersionsIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteCarbonCertificationVersionsIDVariables = {
  pathParams: DeleteCarbonCertificationVersionsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteCarbonCertificationVersionsID = (
  variables: DeleteCarbonCertificationVersionsIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.Empty,
    DeleteCarbonCertificationVersionsIDError,
    undefined,
    {},
    {},
    DeleteCarbonCertificationVersionsIDPathParams
  >({ url: "/carbon_certification_versions/{id}", method: "delete", ...variables, signal });

export const useDeleteCarbonCertificationVersionsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Empty,
      DeleteCarbonCertificationVersionsIDError,
      DeleteCarbonCertificationVersionsIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Empty,
    DeleteCarbonCertificationVersionsIDError,
    DeleteCarbonCertificationVersionsIDVariables
  >(
    (variables: DeleteCarbonCertificationVersionsIDVariables) =>
      fetchDeleteCarbonCertificationVersionsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchCarbonCertificationVersionsIDApprovePathParams = {
  id: number;
};

export type PatchCarbonCertificationVersionsIDApproveError = Fetcher.ErrorWrapper<undefined>;

export type PatchCarbonCertificationVersionsIDApproveVariables = {
  pathParams: PatchCarbonCertificationVersionsIDApprovePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchCarbonCertificationVersionsIDApprove = (
  variables: PatchCarbonCertificationVersionsIDApproveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.CarbonCertificationVersionRead,
    PatchCarbonCertificationVersionsIDApproveError,
    undefined,
    {},
    {},
    PatchCarbonCertificationVersionsIDApprovePathParams
  >({ url: "/carbon_certification_versions/{id}/approve", method: "patch", ...variables, signal });

export const usePatchCarbonCertificationVersionsIDApprove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CarbonCertificationVersionRead,
      PatchCarbonCertificationVersionsIDApproveError,
      PatchCarbonCertificationVersionsIDApproveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.CarbonCertificationVersionRead,
    PatchCarbonCertificationVersionsIDApproveError,
    PatchCarbonCertificationVersionsIDApproveVariables
  >(
    (variables: PatchCarbonCertificationVersionsIDApproveVariables) =>
      fetchPatchCarbonCertificationVersionsIDApprove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchCarbonCertificationVersionsIDRevivePathParams = {
  id: number;
};

export type PatchCarbonCertificationVersionsIDReviveError = Fetcher.ErrorWrapper<undefined>;

export type PatchCarbonCertificationVersionsIDReviveVariables = {
  pathParams: PatchCarbonCertificationVersionsIDRevivePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchCarbonCertificationVersionsIDRevive = (
  variables: PatchCarbonCertificationVersionsIDReviveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.CarbonCertificationVersionRead,
    PatchCarbonCertificationVersionsIDReviveError,
    undefined,
    {},
    {},
    PatchCarbonCertificationVersionsIDRevivePathParams
  >({ url: "/carbon_certification_versions/{id}/revive", method: "patch", ...variables, signal });

export const usePatchCarbonCertificationVersionsIDRevive = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CarbonCertificationVersionRead,
      PatchCarbonCertificationVersionsIDReviveError,
      PatchCarbonCertificationVersionsIDReviveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.CarbonCertificationVersionRead,
    PatchCarbonCertificationVersionsIDReviveError,
    PatchCarbonCertificationVersionsIDReviveVariables
  >(
    (variables: PatchCarbonCertificationVersionsIDReviveVariables) =>
      fetchPatchCarbonCertificationVersionsIDRevive({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchCarbonCertificationVersionsIDRejectPathParams = {
  id: number;
};

export type PatchCarbonCertificationVersionsIDRejectError = Fetcher.ErrorWrapper<undefined>;

export type PatchCarbonCertificationVersionsIDRejectVariables = {
  body?: Schemas.CarbonCertificationVersionReject;
  pathParams: PatchCarbonCertificationVersionsIDRejectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchCarbonCertificationVersionsIDReject = (
  variables: PatchCarbonCertificationVersionsIDRejectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.CarbonCertificationVersionRead,
    PatchCarbonCertificationVersionsIDRejectError,
    Schemas.CarbonCertificationVersionReject,
    {},
    {},
    PatchCarbonCertificationVersionsIDRejectPathParams
  >({ url: "/carbon_certification_versions/{id}/reject", method: "patch", ...variables, signal });

export const usePatchCarbonCertificationVersionsIDReject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CarbonCertificationVersionRead,
      PatchCarbonCertificationVersionsIDRejectError,
      PatchCarbonCertificationVersionsIDRejectVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.CarbonCertificationVersionRead,
    PatchCarbonCertificationVersionsIDRejectError,
    PatchCarbonCertificationVersionsIDRejectVariables
  >(
    (variables: PatchCarbonCertificationVersionsIDRejectVariables) =>
      fetchPatchCarbonCertificationVersionsIDReject({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetCarbonCertificationsIDCarbonCertificationVersionsPathParams = {
  id: number;
};

export type GetCarbonCertificationsIDCarbonCertificationVersionsError = Fetcher.ErrorWrapper<undefined>;

export type GetCarbonCertificationsIDCarbonCertificationVersionsVariables = {
  pathParams: GetCarbonCertificationsIDCarbonCertificationVersionsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetCarbonCertificationsIDCarbonCertificationVersions = (
  variables: GetCarbonCertificationsIDCarbonCertificationVersionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.CarbonCertificationVersionReadAll,
    GetCarbonCertificationsIDCarbonCertificationVersionsError,
    undefined,
    {},
    {},
    GetCarbonCertificationsIDCarbonCertificationVersionsPathParams
  >({ url: "/carbon_certifications/{id}/carbon_certification_versions", method: "get", ...variables, signal });

export const useGetCarbonCertificationsIDCarbonCertificationVersions = <
  TData = Schemas.CarbonCertificationVersionReadAll
>(
  variables: GetCarbonCertificationsIDCarbonCertificationVersionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CarbonCertificationVersionReadAll,
      GetCarbonCertificationsIDCarbonCertificationVersionsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.CarbonCertificationVersionReadAll,
    GetCarbonCertificationsIDCarbonCertificationVersionsError,
    TData
  >(
    queryKeyFn({
      path: "/carbon_certifications/{ID}/carbon_certification_versions",
      operationId: "getCarbonCertificationsIDCarbonCertificationVersions",
      variables
    }),
    ({ signal }) =>
      fetchGetCarbonCertificationsIDCarbonCertificationVersions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostPitchDocumentsError = Fetcher.ErrorWrapper<undefined>;

export type PostPitchDocumentsVariables = {
  body?: Schemas.PitchDocumentCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostPitchDocuments = (variables: PostPitchDocumentsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.PitchDocumentVersionRead, PostPitchDocumentsError, Schemas.PitchDocumentCreate, {}, {}, {}>({
    url: "/pitch_documents",
    method: "post",
    ...variables,
    signal
  });

export const usePostPitchDocuments = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PitchDocumentVersionRead,
      PostPitchDocumentsError,
      PostPitchDocumentsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.PitchDocumentVersionRead, PostPitchDocumentsError, PostPitchDocumentsVariables>(
    (variables: PostPitchDocumentsVariables) => fetchPostPitchDocuments({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetPitchDocumentsIDPathParams = {
  id: number;
};

export type GetPitchDocumentsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchDocumentsIDVariables = {
  pathParams: GetPitchDocumentsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchDocumentsID = (variables: GetPitchDocumentsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.PitchDocumentRead, GetPitchDocumentsIDError, undefined, {}, {}, GetPitchDocumentsIDPathParams>({
    url: "/pitch_documents/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetPitchDocumentsID = <TData = Schemas.PitchDocumentRead>(
  variables: GetPitchDocumentsIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PitchDocumentRead, GetPitchDocumentsIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.PitchDocumentRead, GetPitchDocumentsIDError, TData>(
    queryKeyFn({ path: "/pitch_documents/{ID}", operationId: "getPitchDocumentsID", variables }),
    ({ signal }) => fetchGetPitchDocumentsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchPitchDocumentsIDPathParams = {
  id: number;
};

export type PatchPitchDocumentsIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchPitchDocumentsIDVariables = {
  body?: Schemas.PitchDocumentUpdate;
  pathParams: PatchPitchDocumentsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchPitchDocumentsID = (variables: PatchPitchDocumentsIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.PitchDocumentVersionRead,
    PatchPitchDocumentsIDError,
    Schemas.PitchDocumentUpdate,
    {},
    {},
    PatchPitchDocumentsIDPathParams
  >({ url: "/pitch_documents/{id}", method: "patch", ...variables, signal });

export const usePatchPitchDocumentsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PitchDocumentVersionRead,
      PatchPitchDocumentsIDError,
      PatchPitchDocumentsIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.PitchDocumentVersionRead,
    PatchPitchDocumentsIDError,
    PatchPitchDocumentsIDVariables
  >(
    (variables: PatchPitchDocumentsIDVariables) => fetchPatchPitchDocumentsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeletePitchDocumentsIDPathParams = {
  id: number;
};

export type DeletePitchDocumentsIDError = Fetcher.ErrorWrapper<undefined>;

export type DeletePitchDocumentsIDVariables = {
  pathParams: DeletePitchDocumentsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeletePitchDocumentsID = (variables: DeletePitchDocumentsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, DeletePitchDocumentsIDError, undefined, {}, {}, DeletePitchDocumentsIDPathParams>({
    url: "/pitch_documents/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeletePitchDocumentsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Empty, DeletePitchDocumentsIDError, DeletePitchDocumentsIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, DeletePitchDocumentsIDError, DeletePitchDocumentsIDVariables>(
    (variables: DeletePitchDocumentsIDVariables) => fetchDeletePitchDocumentsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetPitchesIDPitchDocumentsPathParams = {
  id: number;
};

export type GetPitchesIDPitchDocumentsError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchesIDPitchDocumentsVariables = {
  pathParams: GetPitchesIDPitchDocumentsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchesIDPitchDocuments = (variables: GetPitchesIDPitchDocumentsVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.PitchDocumentReadAll,
    GetPitchesIDPitchDocumentsError,
    undefined,
    {},
    {},
    GetPitchesIDPitchDocumentsPathParams
  >({ url: "/pitches/{id}/pitch_documents", method: "get", ...variables, signal });

export const useGetPitchesIDPitchDocuments = <TData = Schemas.PitchDocumentReadAll>(
  variables: GetPitchesIDPitchDocumentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PitchDocumentReadAll, GetPitchesIDPitchDocumentsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.PitchDocumentReadAll, GetPitchesIDPitchDocumentsError, TData>(
    queryKeyFn({ path: "/pitches/{ID}/pitch_documents", operationId: "getPitchesIDPitchDocuments", variables }),
    ({ signal }) => fetchGetPitchesIDPitchDocuments({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetPitchesIDPitchDocumentsInspectPathParams = {
  id: number;
};

export type GetPitchesIDPitchDocumentsInspectError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchesIDPitchDocumentsInspectVariables = {
  pathParams: GetPitchesIDPitchDocumentsInspectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchesIDPitchDocumentsInspect = (
  variables: GetPitchesIDPitchDocumentsInspectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.PitchDocumentVersionReadAll,
    GetPitchesIDPitchDocumentsInspectError,
    undefined,
    {},
    {},
    GetPitchesIDPitchDocumentsInspectPathParams
  >({ url: "/pitches/{id}/pitch_documents/inspect", method: "get", ...variables, signal });

export const useGetPitchesIDPitchDocumentsInspect = <TData = Schemas.PitchDocumentVersionReadAll>(
  variables: GetPitchesIDPitchDocumentsInspectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PitchDocumentVersionReadAll, GetPitchesIDPitchDocumentsInspectError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.PitchDocumentVersionReadAll, GetPitchesIDPitchDocumentsInspectError, TData>(
    queryKeyFn({
      path: "/pitches/{ID}/pitch_documents/inspect",
      operationId: "getPitchesIDPitchDocumentsInspect",
      variables
    }),
    ({ signal }) => fetchGetPitchesIDPitchDocumentsInspect({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetPitchDocumentVersionsIDPathParams = {
  id: number;
};

export type GetPitchDocumentVersionsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchDocumentVersionsIDVariables = {
  pathParams: GetPitchDocumentVersionsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchDocumentVersionsID = (variables: GetPitchDocumentVersionsIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.PitchDocumentVersionRead,
    GetPitchDocumentVersionsIDError,
    undefined,
    {},
    {},
    GetPitchDocumentVersionsIDPathParams
  >({ url: "/pitch_document_versions/{id}", method: "get", ...variables, signal });

export const useGetPitchDocumentVersionsID = <TData = Schemas.PitchDocumentVersionRead>(
  variables: GetPitchDocumentVersionsIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PitchDocumentVersionRead, GetPitchDocumentVersionsIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.PitchDocumentVersionRead, GetPitchDocumentVersionsIDError, TData>(
    queryKeyFn({ path: "/pitch_document_versions/{ID}", operationId: "getPitchDocumentVersionsID", variables }),
    ({ signal }) => fetchGetPitchDocumentVersionsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeletePitchDocumentVersionsIDPathParams = {
  id: number;
};

export type DeletePitchDocumentVersionsIDError = Fetcher.ErrorWrapper<undefined>;

export type DeletePitchDocumentVersionsIDVariables = {
  pathParams: DeletePitchDocumentVersionsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeletePitchDocumentVersionsID = (
  variables: DeletePitchDocumentVersionsIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.Empty,
    DeletePitchDocumentVersionsIDError,
    undefined,
    {},
    {},
    DeletePitchDocumentVersionsIDPathParams
  >({ url: "/pitch_document_versions/{id}", method: "delete", ...variables, signal });

export const useDeletePitchDocumentVersionsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Empty,
      DeletePitchDocumentVersionsIDError,
      DeletePitchDocumentVersionsIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Empty,
    DeletePitchDocumentVersionsIDError,
    DeletePitchDocumentVersionsIDVariables
  >(
    (variables: DeletePitchDocumentVersionsIDVariables) =>
      fetchDeletePitchDocumentVersionsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchPitchDocumentVersionsIDApprovePathParams = {
  id: number;
};

export type PatchPitchDocumentVersionsIDApproveError = Fetcher.ErrorWrapper<undefined>;

export type PatchPitchDocumentVersionsIDApproveVariables = {
  pathParams: PatchPitchDocumentVersionsIDApprovePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchPitchDocumentVersionsIDApprove = (
  variables: PatchPitchDocumentVersionsIDApproveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.PitchDocumentVersionRead,
    PatchPitchDocumentVersionsIDApproveError,
    undefined,
    {},
    {},
    PatchPitchDocumentVersionsIDApprovePathParams
  >({ url: "/pitch_document_versions/{id}/approve", method: "patch", ...variables, signal });

export const usePatchPitchDocumentVersionsIDApprove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PitchDocumentVersionRead,
      PatchPitchDocumentVersionsIDApproveError,
      PatchPitchDocumentVersionsIDApproveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.PitchDocumentVersionRead,
    PatchPitchDocumentVersionsIDApproveError,
    PatchPitchDocumentVersionsIDApproveVariables
  >(
    (variables: PatchPitchDocumentVersionsIDApproveVariables) =>
      fetchPatchPitchDocumentVersionsIDApprove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchPitchDocumentVersionsIDRevivePathParams = {
  id: number;
};

export type PatchPitchDocumentVersionsIDReviveError = Fetcher.ErrorWrapper<undefined>;

export type PatchPitchDocumentVersionsIDReviveVariables = {
  pathParams: PatchPitchDocumentVersionsIDRevivePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchPitchDocumentVersionsIDRevive = (
  variables: PatchPitchDocumentVersionsIDReviveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.PitchDocumentVersionRead,
    PatchPitchDocumentVersionsIDReviveError,
    undefined,
    {},
    {},
    PatchPitchDocumentVersionsIDRevivePathParams
  >({ url: "/pitch_document_versions/{id}/revive", method: "patch", ...variables, signal });

export const usePatchPitchDocumentVersionsIDRevive = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PitchDocumentVersionRead,
      PatchPitchDocumentVersionsIDReviveError,
      PatchPitchDocumentVersionsIDReviveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.PitchDocumentVersionRead,
    PatchPitchDocumentVersionsIDReviveError,
    PatchPitchDocumentVersionsIDReviveVariables
  >(
    (variables: PatchPitchDocumentVersionsIDReviveVariables) =>
      fetchPatchPitchDocumentVersionsIDRevive({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchPitchDocumentVersionsIDRejectPathParams = {
  id: number;
};

export type PatchPitchDocumentVersionsIDRejectError = Fetcher.ErrorWrapper<undefined>;

export type PatchPitchDocumentVersionsIDRejectVariables = {
  body?: Schemas.PitchDocumentVersionReject;
  pathParams: PatchPitchDocumentVersionsIDRejectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchPitchDocumentVersionsIDReject = (
  variables: PatchPitchDocumentVersionsIDRejectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.PitchDocumentVersionRead,
    PatchPitchDocumentVersionsIDRejectError,
    Schemas.PitchDocumentVersionReject,
    {},
    {},
    PatchPitchDocumentVersionsIDRejectPathParams
  >({ url: "/pitch_document_versions/{id}/reject", method: "patch", ...variables, signal });

export const usePatchPitchDocumentVersionsIDReject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PitchDocumentVersionRead,
      PatchPitchDocumentVersionsIDRejectError,
      PatchPitchDocumentVersionsIDRejectVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.PitchDocumentVersionRead,
    PatchPitchDocumentVersionsIDRejectError,
    PatchPitchDocumentVersionsIDRejectVariables
  >(
    (variables: PatchPitchDocumentVersionsIDRejectVariables) =>
      fetchPatchPitchDocumentVersionsIDReject({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetPitchDocumentsIDPitchDocumentVersionsPathParams = {
  id: number;
};

export type GetPitchDocumentsIDPitchDocumentVersionsError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchDocumentsIDPitchDocumentVersionsVariables = {
  pathParams: GetPitchDocumentsIDPitchDocumentVersionsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchDocumentsIDPitchDocumentVersions = (
  variables: GetPitchDocumentsIDPitchDocumentVersionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.PitchDocumentVersionReadAll,
    GetPitchDocumentsIDPitchDocumentVersionsError,
    undefined,
    {},
    {},
    GetPitchDocumentsIDPitchDocumentVersionsPathParams
  >({ url: "/pitch_documents/{id}/pitch_document_versions", method: "get", ...variables, signal });

export const useGetPitchDocumentsIDPitchDocumentVersions = <TData = Schemas.PitchDocumentVersionReadAll>(
  variables: GetPitchDocumentsIDPitchDocumentVersionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PitchDocumentVersionReadAll,
      GetPitchDocumentsIDPitchDocumentVersionsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.PitchDocumentVersionReadAll, GetPitchDocumentsIDPitchDocumentVersionsError, TData>(
    queryKeyFn({
      path: "/pitch_documents/{ID}/pitch_document_versions",
      operationId: "getPitchDocumentsIDPitchDocumentVersions",
      variables
    }),
    ({ signal }) => fetchGetPitchDocumentsIDPitchDocumentVersions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostRestorationMethodMetricsError = Fetcher.ErrorWrapper<undefined>;

export type PostRestorationMethodMetricsVariables = {
  body?: Schemas.RestorationMethodMetricCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostRestorationMethodMetrics = (
  variables: PostRestorationMethodMetricsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.RestorationMethodMetricVersionRead,
    PostRestorationMethodMetricsError,
    Schemas.RestorationMethodMetricCreate,
    {},
    {},
    {}
  >({ url: "/restoration_method_metrics", method: "post", ...variables, signal });

export const usePostRestorationMethodMetrics = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestorationMethodMetricVersionRead,
      PostRestorationMethodMetricsError,
      PostRestorationMethodMetricsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.RestorationMethodMetricVersionRead,
    PostRestorationMethodMetricsError,
    PostRestorationMethodMetricsVariables
  >(
    (variables: PostRestorationMethodMetricsVariables) =>
      fetchPostRestorationMethodMetrics({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetRestorationMethodMetricsIDPathParams = {
  id: number;
};

export type GetRestorationMethodMetricsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetRestorationMethodMetricsIDVariables = {
  pathParams: GetRestorationMethodMetricsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetRestorationMethodMetricsID = (
  variables: GetRestorationMethodMetricsIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.RestorationMethodMetricRead,
    GetRestorationMethodMetricsIDError,
    undefined,
    {},
    {},
    GetRestorationMethodMetricsIDPathParams
  >({ url: "/restoration_method_metrics/{id}", method: "get", ...variables, signal });

export const useGetRestorationMethodMetricsID = <TData = Schemas.RestorationMethodMetricRead>(
  variables: GetRestorationMethodMetricsIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.RestorationMethodMetricRead, GetRestorationMethodMetricsIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.RestorationMethodMetricRead, GetRestorationMethodMetricsIDError, TData>(
    queryKeyFn({ path: "/restoration_method_metrics/{ID}", operationId: "getRestorationMethodMetricsID", variables }),
    ({ signal }) => fetchGetRestorationMethodMetricsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchRestorationMethodMetricsIDPathParams = {
  id: number;
};

export type PatchRestorationMethodMetricsIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchRestorationMethodMetricsIDVariables = {
  body?: Schemas.RestorationMethodMetricUpdate;
  pathParams: PatchRestorationMethodMetricsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchRestorationMethodMetricsID = (
  variables: PatchRestorationMethodMetricsIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.RestorationMethodMetricVersionRead,
    PatchRestorationMethodMetricsIDError,
    Schemas.RestorationMethodMetricUpdate,
    {},
    {},
    PatchRestorationMethodMetricsIDPathParams
  >({ url: "/restoration_method_metrics/{id}", method: "patch", ...variables, signal });

export const usePatchRestorationMethodMetricsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestorationMethodMetricVersionRead,
      PatchRestorationMethodMetricsIDError,
      PatchRestorationMethodMetricsIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.RestorationMethodMetricVersionRead,
    PatchRestorationMethodMetricsIDError,
    PatchRestorationMethodMetricsIDVariables
  >(
    (variables: PatchRestorationMethodMetricsIDVariables) =>
      fetchPatchRestorationMethodMetricsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteRestorationMethodMetricsIDPathParams = {
  id: number;
};

export type DeleteRestorationMethodMetricsIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteRestorationMethodMetricsIDVariables = {
  pathParams: DeleteRestorationMethodMetricsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteRestorationMethodMetricsID = (
  variables: DeleteRestorationMethodMetricsIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.Empty,
    DeleteRestorationMethodMetricsIDError,
    undefined,
    {},
    {},
    DeleteRestorationMethodMetricsIDPathParams
  >({ url: "/restoration_method_metrics/{id}", method: "delete", ...variables, signal });

export const useDeleteRestorationMethodMetricsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Empty,
      DeleteRestorationMethodMetricsIDError,
      DeleteRestorationMethodMetricsIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Empty,
    DeleteRestorationMethodMetricsIDError,
    DeleteRestorationMethodMetricsIDVariables
  >(
    (variables: DeleteRestorationMethodMetricsIDVariables) =>
      fetchDeleteRestorationMethodMetricsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetPitchesIDRestorationMethodMetricsPathParams = {
  id: number;
};

export type GetPitchesIDRestorationMethodMetricsError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchesIDRestorationMethodMetricsVariables = {
  pathParams: GetPitchesIDRestorationMethodMetricsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchesIDRestorationMethodMetrics = (
  variables: GetPitchesIDRestorationMethodMetricsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.RestorationMethodMetricReadAll,
    GetPitchesIDRestorationMethodMetricsError,
    undefined,
    {},
    {},
    GetPitchesIDRestorationMethodMetricsPathParams
  >({ url: "/pitches/{id}/restoration_method_metrics", method: "get", ...variables, signal });

export const useGetPitchesIDRestorationMethodMetrics = <TData = Schemas.RestorationMethodMetricReadAll>(
  variables: GetPitchesIDRestorationMethodMetricsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestorationMethodMetricReadAll,
      GetPitchesIDRestorationMethodMetricsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.RestorationMethodMetricReadAll, GetPitchesIDRestorationMethodMetricsError, TData>(
    queryKeyFn({
      path: "/pitches/{ID}/restoration_method_metrics",
      operationId: "getPitchesIDRestorationMethodMetrics",
      variables
    }),
    ({ signal }) => fetchGetPitchesIDRestorationMethodMetrics({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetPitchesIDRestorationMethodMetricsInspectPathParams = {
  id: number;
};

export type GetPitchesIDRestorationMethodMetricsInspectError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchesIDRestorationMethodMetricsInspectVariables = {
  pathParams: GetPitchesIDRestorationMethodMetricsInspectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchesIDRestorationMethodMetricsInspect = (
  variables: GetPitchesIDRestorationMethodMetricsInspectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.RestorationMethodMetricVersionReadAll,
    GetPitchesIDRestorationMethodMetricsInspectError,
    undefined,
    {},
    {},
    GetPitchesIDRestorationMethodMetricsInspectPathParams
  >({ url: "/pitches/{id}/restoration_method_metrics/inspect", method: "get", ...variables, signal });

export const useGetPitchesIDRestorationMethodMetricsInspect = <TData = Schemas.RestorationMethodMetricVersionReadAll>(
  variables: GetPitchesIDRestorationMethodMetricsInspectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestorationMethodMetricVersionReadAll,
      GetPitchesIDRestorationMethodMetricsInspectError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.RestorationMethodMetricVersionReadAll,
    GetPitchesIDRestorationMethodMetricsInspectError,
    TData
  >(
    queryKeyFn({
      path: "/pitches/{ID}/restoration_method_metrics/inspect",
      operationId: "getPitchesIDRestorationMethodMetricsInspect",
      variables
    }),
    ({ signal }) => fetchGetPitchesIDRestorationMethodMetricsInspect({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetRestorationMethodMetricVersionsIDPathParams = {
  id: number;
};

export type GetRestorationMethodMetricVersionsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetRestorationMethodMetricVersionsIDVariables = {
  pathParams: GetRestorationMethodMetricVersionsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetRestorationMethodMetricVersionsID = (
  variables: GetRestorationMethodMetricVersionsIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.RestorationMethodMetricVersionRead,
    GetRestorationMethodMetricVersionsIDError,
    undefined,
    {},
    {},
    GetRestorationMethodMetricVersionsIDPathParams
  >({ url: "/restoration_method_metric_versions/{id}", method: "get", ...variables, signal });

export const useGetRestorationMethodMetricVersionsID = <TData = Schemas.RestorationMethodMetricVersionRead>(
  variables: GetRestorationMethodMetricVersionsIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestorationMethodMetricVersionRead,
      GetRestorationMethodMetricVersionsIDError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.RestorationMethodMetricVersionRead,
    GetRestorationMethodMetricVersionsIDError,
    TData
  >(
    queryKeyFn({
      path: "/restoration_method_metric_versions/{ID}",
      operationId: "getRestorationMethodMetricVersionsID",
      variables
    }),
    ({ signal }) => fetchGetRestorationMethodMetricVersionsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteRestorationMethodMetricVersionsIDPathParams = {
  id: number;
};

export type DeleteRestorationMethodMetricVersionsIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteRestorationMethodMetricVersionsIDVariables = {
  pathParams: DeleteRestorationMethodMetricVersionsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteRestorationMethodMetricVersionsID = (
  variables: DeleteRestorationMethodMetricVersionsIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.Empty,
    DeleteRestorationMethodMetricVersionsIDError,
    undefined,
    {},
    {},
    DeleteRestorationMethodMetricVersionsIDPathParams
  >({ url: "/restoration_method_metric_versions/{id}", method: "delete", ...variables, signal });

export const useDeleteRestorationMethodMetricVersionsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Empty,
      DeleteRestorationMethodMetricVersionsIDError,
      DeleteRestorationMethodMetricVersionsIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Empty,
    DeleteRestorationMethodMetricVersionsIDError,
    DeleteRestorationMethodMetricVersionsIDVariables
  >(
    (variables: DeleteRestorationMethodMetricVersionsIDVariables) =>
      fetchDeleteRestorationMethodMetricVersionsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchRestorationMethodMetricVersionsIDApprovePathParams = {
  id: number;
};

export type PatchRestorationMethodMetricVersionsIDApproveError = Fetcher.ErrorWrapper<undefined>;

export type PatchRestorationMethodMetricVersionsIDApproveVariables = {
  pathParams: PatchRestorationMethodMetricVersionsIDApprovePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchRestorationMethodMetricVersionsIDApprove = (
  variables: PatchRestorationMethodMetricVersionsIDApproveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.RestorationMethodMetricVersionRead,
    PatchRestorationMethodMetricVersionsIDApproveError,
    undefined,
    {},
    {},
    PatchRestorationMethodMetricVersionsIDApprovePathParams
  >({ url: "/restoration_method_metric_versions/{id}/approve", method: "patch", ...variables, signal });

export const usePatchRestorationMethodMetricVersionsIDApprove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestorationMethodMetricVersionRead,
      PatchRestorationMethodMetricVersionsIDApproveError,
      PatchRestorationMethodMetricVersionsIDApproveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.RestorationMethodMetricVersionRead,
    PatchRestorationMethodMetricVersionsIDApproveError,
    PatchRestorationMethodMetricVersionsIDApproveVariables
  >(
    (variables: PatchRestorationMethodMetricVersionsIDApproveVariables) =>
      fetchPatchRestorationMethodMetricVersionsIDApprove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchRestorationMethodMetricVersionsIDRevivePathParams = {
  id: number;
};

export type PatchRestorationMethodMetricVersionsIDReviveError = Fetcher.ErrorWrapper<undefined>;

export type PatchRestorationMethodMetricVersionsIDReviveVariables = {
  pathParams: PatchRestorationMethodMetricVersionsIDRevivePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchRestorationMethodMetricVersionsIDRevive = (
  variables: PatchRestorationMethodMetricVersionsIDReviveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.RestorationMethodMetricVersionRead,
    PatchRestorationMethodMetricVersionsIDReviveError,
    undefined,
    {},
    {},
    PatchRestorationMethodMetricVersionsIDRevivePathParams
  >({ url: "/restoration_method_metric_versions/{id}/revive", method: "patch", ...variables, signal });

export const usePatchRestorationMethodMetricVersionsIDRevive = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestorationMethodMetricVersionRead,
      PatchRestorationMethodMetricVersionsIDReviveError,
      PatchRestorationMethodMetricVersionsIDReviveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.RestorationMethodMetricVersionRead,
    PatchRestorationMethodMetricVersionsIDReviveError,
    PatchRestorationMethodMetricVersionsIDReviveVariables
  >(
    (variables: PatchRestorationMethodMetricVersionsIDReviveVariables) =>
      fetchPatchRestorationMethodMetricVersionsIDRevive({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchRestorationMethodMetricVersionsIDRejectPathParams = {
  id: number;
};

export type PatchRestorationMethodMetricVersionsIDRejectError = Fetcher.ErrorWrapper<undefined>;

export type PatchRestorationMethodMetricVersionsIDRejectVariables = {
  body?: Schemas.RestorationMethodMetricVersionReject;
  pathParams: PatchRestorationMethodMetricVersionsIDRejectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchRestorationMethodMetricVersionsIDReject = (
  variables: PatchRestorationMethodMetricVersionsIDRejectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.RestorationMethodMetricVersionRead,
    PatchRestorationMethodMetricVersionsIDRejectError,
    Schemas.RestorationMethodMetricVersionReject,
    {},
    {},
    PatchRestorationMethodMetricVersionsIDRejectPathParams
  >({ url: "/restoration_method_metric_versions/{id}/reject", method: "patch", ...variables, signal });

export const usePatchRestorationMethodMetricVersionsIDReject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestorationMethodMetricVersionRead,
      PatchRestorationMethodMetricVersionsIDRejectError,
      PatchRestorationMethodMetricVersionsIDRejectVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.RestorationMethodMetricVersionRead,
    PatchRestorationMethodMetricVersionsIDRejectError,
    PatchRestorationMethodMetricVersionsIDRejectVariables
  >(
    (variables: PatchRestorationMethodMetricVersionsIDRejectVariables) =>
      fetchPatchRestorationMethodMetricVersionsIDReject({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetRestorationMethodMetricsIDRestorationMethodMetricVersionsPathParams = {
  id: number;
};

export type GetRestorationMethodMetricsIDRestorationMethodMetricVersionsError = Fetcher.ErrorWrapper<undefined>;

export type GetRestorationMethodMetricsIDRestorationMethodMetricVersionsVariables = {
  pathParams: GetRestorationMethodMetricsIDRestorationMethodMetricVersionsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetRestorationMethodMetricsIDRestorationMethodMetricVersions = (
  variables: GetRestorationMethodMetricsIDRestorationMethodMetricVersionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.RestorationMethodMetricVersionReadAll,
    GetRestorationMethodMetricsIDRestorationMethodMetricVersionsError,
    undefined,
    {},
    {},
    GetRestorationMethodMetricsIDRestorationMethodMetricVersionsPathParams
  >({
    url: "/restoration_method_metrics/{id}/restoration_method_metric_versions",
    method: "get",
    ...variables,
    signal
  });

export const useGetRestorationMethodMetricsIDRestorationMethodMetricVersions = <
  TData = Schemas.RestorationMethodMetricVersionReadAll
>(
  variables: GetRestorationMethodMetricsIDRestorationMethodMetricVersionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.RestorationMethodMetricVersionReadAll,
      GetRestorationMethodMetricsIDRestorationMethodMetricVersionsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.RestorationMethodMetricVersionReadAll,
    GetRestorationMethodMetricsIDRestorationMethodMetricVersionsError,
    TData
  >(
    queryKeyFn({
      path: "/restoration_method_metrics/{ID}/restoration_method_metric_versions",
      operationId: "getRestorationMethodMetricsIDRestorationMethodMetricVersions",
      variables
    }),
    ({ signal }) =>
      fetchGetRestorationMethodMetricsIDRestorationMethodMetricVersions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostTreeSpeciesError = Fetcher.ErrorWrapper<undefined>;

export type PostTreeSpeciesVariables = {
  body?: Schemas.TreeSpeciesCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTreeSpecies = (variables: PostTreeSpeciesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TreeSpeciesVersionRead, PostTreeSpeciesError, Schemas.TreeSpeciesCreate, {}, {}, {}>({
    url: "/tree_species",
    method: "post",
    ...variables,
    signal
  });

export const usePostTreeSpecies = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TreeSpeciesVersionRead, PostTreeSpeciesError, PostTreeSpeciesVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.TreeSpeciesVersionRead, PostTreeSpeciesError, PostTreeSpeciesVariables>(
    (variables: PostTreeSpeciesVariables) => fetchPostTreeSpecies({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTreeSpeciesIDPathParams = {
  id: number;
};

export type GetTreeSpeciesIDError = Fetcher.ErrorWrapper<undefined>;

export type GetTreeSpeciesIDVariables = {
  pathParams: GetTreeSpeciesIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetTreeSpeciesID = (variables: GetTreeSpeciesIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TreeSpeciesRead, GetTreeSpeciesIDError, undefined, {}, {}, GetTreeSpeciesIDPathParams>({
    url: "/tree_species/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetTreeSpeciesID = <TData = Schemas.TreeSpeciesRead>(
  variables: GetTreeSpeciesIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TreeSpeciesRead, GetTreeSpeciesIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TreeSpeciesRead, GetTreeSpeciesIDError, TData>(
    queryKeyFn({ path: "/tree_species/{ID}", operationId: "getTreeSpeciesID", variables }),
    ({ signal }) => fetchGetTreeSpeciesID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchTreeSpeciesIDPathParams = {
  id: number;
};

export type PatchTreeSpeciesIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchTreeSpeciesIDVariables = {
  body?: Schemas.TreeSpeciesUpdate;
  pathParams: PatchTreeSpeciesIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchTreeSpeciesID = (variables: PatchTreeSpeciesIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.TreeSpeciesVersionRead,
    PatchTreeSpeciesIDError,
    Schemas.TreeSpeciesUpdate,
    {},
    {},
    PatchTreeSpeciesIDPathParams
  >({ url: "/tree_species/{id}", method: "patch", ...variables, signal });

export const usePatchTreeSpeciesID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TreeSpeciesVersionRead, PatchTreeSpeciesIDError, PatchTreeSpeciesIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.TreeSpeciesVersionRead, PatchTreeSpeciesIDError, PatchTreeSpeciesIDVariables>(
    (variables: PatchTreeSpeciesIDVariables) => fetchPatchTreeSpeciesID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteTreeSpeciesIDPathParams = {
  id: number;
};

export type DeleteTreeSpeciesIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteTreeSpeciesIDVariables = {
  pathParams: DeleteTreeSpeciesIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteTreeSpeciesID = (variables: DeleteTreeSpeciesIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, DeleteTreeSpeciesIDError, undefined, {}, {}, DeleteTreeSpeciesIDPathParams>({
    url: "/tree_species/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteTreeSpeciesID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Empty, DeleteTreeSpeciesIDError, DeleteTreeSpeciesIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, DeleteTreeSpeciesIDError, DeleteTreeSpeciesIDVariables>(
    (variables: DeleteTreeSpeciesIDVariables) => fetchDeleteTreeSpeciesID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetProgrammeIDTreeSpeciesPathParams = {
  id: number;
};

export type GetProgrammeIDTreeSpeciesError = Fetcher.ErrorWrapper<undefined>;

export type GetProgrammeIDTreeSpeciesVariables = {
  pathParams: GetProgrammeIDTreeSpeciesPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetProgrammeIDTreeSpecies = (variables: GetProgrammeIDTreeSpeciesVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.TreeSpeciesRead,
    GetProgrammeIDTreeSpeciesError,
    undefined,
    {},
    {},
    GetProgrammeIDTreeSpeciesPathParams
  >({ url: "/programme/{id}/tree_species", method: "get", ...variables, signal });

export const useGetProgrammeIDTreeSpecies = <TData = Schemas.TreeSpeciesRead>(
  variables: GetProgrammeIDTreeSpeciesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TreeSpeciesRead, GetProgrammeIDTreeSpeciesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TreeSpeciesRead, GetProgrammeIDTreeSpeciesError, TData>(
    queryKeyFn({ path: "/programme/{ID}/tree_species", operationId: "getProgrammeIDTreeSpecies", variables }),
    ({ signal }) => fetchGetProgrammeIDTreeSpecies({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetSiteIDTreeSpeciesPathParams = {
  id: number;
};

export type GetSiteIDTreeSpeciesError = Fetcher.ErrorWrapper<undefined>;

export type GetSiteIDTreeSpeciesVariables = {
  pathParams: GetSiteIDTreeSpeciesPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetSiteIDTreeSpecies = (variables: GetSiteIDTreeSpeciesVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.BaseSiteTreeSpeciesReadAll,
    GetSiteIDTreeSpeciesError,
    undefined,
    {},
    {},
    GetSiteIDTreeSpeciesPathParams
  >({ url: "/site/{id}/tree_species", method: "get", ...variables, signal });

export const useGetSiteIDTreeSpecies = <TData = Schemas.BaseSiteTreeSpeciesReadAll>(
  variables: GetSiteIDTreeSpeciesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.BaseSiteTreeSpeciesReadAll, GetSiteIDTreeSpeciesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.BaseSiteTreeSpeciesReadAll, GetSiteIDTreeSpeciesError, TData>(
    queryKeyFn({ path: "/site/{ID}/tree_species", operationId: "getSiteIDTreeSpecies", variables }),
    ({ signal }) => fetchGetSiteIDTreeSpecies({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetPitchesIDTreeSpeciesPathParams = {
  id: number;
};

export type GetPitchesIDTreeSpeciesError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchesIDTreeSpeciesVariables = {
  pathParams: GetPitchesIDTreeSpeciesPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchesIDTreeSpecies = (variables: GetPitchesIDTreeSpeciesVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.TreeSpeciesReadAll,
    GetPitchesIDTreeSpeciesError,
    undefined,
    {},
    {},
    GetPitchesIDTreeSpeciesPathParams
  >({ url: "/pitches/{id}/tree_species", method: "get", ...variables, signal });

export const useGetPitchesIDTreeSpecies = <TData = Schemas.TreeSpeciesReadAll>(
  variables: GetPitchesIDTreeSpeciesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TreeSpeciesReadAll, GetPitchesIDTreeSpeciesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TreeSpeciesReadAll, GetPitchesIDTreeSpeciesError, TData>(
    queryKeyFn({ path: "/pitches/{ID}/tree_species", operationId: "getPitchesIDTreeSpecies", variables }),
    ({ signal }) => fetchGetPitchesIDTreeSpecies({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetPitchesIDTreeSpeciesInspectPathParams = {
  id: number;
};

export type GetPitchesIDTreeSpeciesInspectError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchesIDTreeSpeciesInspectVariables = {
  pathParams: GetPitchesIDTreeSpeciesInspectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchesIDTreeSpeciesInspect = (
  variables: GetPitchesIDTreeSpeciesInspectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TreeSpeciesVersionReadAll,
    GetPitchesIDTreeSpeciesInspectError,
    undefined,
    {},
    {},
    GetPitchesIDTreeSpeciesInspectPathParams
  >({ url: "/pitches/{id}/tree_species/inspect", method: "get", ...variables, signal });

export const useGetPitchesIDTreeSpeciesInspect = <TData = Schemas.TreeSpeciesVersionReadAll>(
  variables: GetPitchesIDTreeSpeciesInspectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TreeSpeciesVersionReadAll, GetPitchesIDTreeSpeciesInspectError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TreeSpeciesVersionReadAll, GetPitchesIDTreeSpeciesInspectError, TData>(
    queryKeyFn({
      path: "/pitches/{ID}/tree_species/inspect",
      operationId: "getPitchesIDTreeSpeciesInspect",
      variables
    }),
    ({ signal }) => fetchGetPitchesIDTreeSpeciesInspect({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTreeSpeciesVersionsIDPathParams = {
  id: number;
};

export type GetTreeSpeciesVersionsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetTreeSpeciesVersionsIDVariables = {
  pathParams: GetTreeSpeciesVersionsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetTreeSpeciesVersionsID = (variables: GetTreeSpeciesVersionsIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.TreeSpeciesVersionRead,
    GetTreeSpeciesVersionsIDError,
    undefined,
    {},
    {},
    GetTreeSpeciesVersionsIDPathParams
  >({ url: "/tree_species_versions/{id}", method: "get", ...variables, signal });

export const useGetTreeSpeciesVersionsID = <TData = Schemas.TreeSpeciesVersionRead>(
  variables: GetTreeSpeciesVersionsIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TreeSpeciesVersionRead, GetTreeSpeciesVersionsIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TreeSpeciesVersionRead, GetTreeSpeciesVersionsIDError, TData>(
    queryKeyFn({ path: "/tree_species_versions/{ID}", operationId: "getTreeSpeciesVersionsID", variables }),
    ({ signal }) => fetchGetTreeSpeciesVersionsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteTreeSpeciesVersionsIDPathParams = {
  id: number;
};

export type DeleteTreeSpeciesVersionsIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteTreeSpeciesVersionsIDVariables = {
  pathParams: DeleteTreeSpeciesVersionsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteTreeSpeciesVersionsID = (
  variables: DeleteTreeSpeciesVersionsIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.Empty, DeleteTreeSpeciesVersionsIDError, undefined, {}, {}, DeleteTreeSpeciesVersionsIDPathParams>({
    url: "/tree_species_versions/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteTreeSpeciesVersionsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Empty,
      DeleteTreeSpeciesVersionsIDError,
      DeleteTreeSpeciesVersionsIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, DeleteTreeSpeciesVersionsIDError, DeleteTreeSpeciesVersionsIDVariables>(
    (variables: DeleteTreeSpeciesVersionsIDVariables) =>
      fetchDeleteTreeSpeciesVersionsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchTreeSpeciesVersionsIDApprovePathParams = {
  id: number;
};

export type PatchTreeSpeciesVersionsIDApproveError = Fetcher.ErrorWrapper<undefined>;

export type PatchTreeSpeciesVersionsIDApproveVariables = {
  pathParams: PatchTreeSpeciesVersionsIDApprovePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchTreeSpeciesVersionsIDApprove = (
  variables: PatchTreeSpeciesVersionsIDApproveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TreeSpeciesVersionRead,
    PatchTreeSpeciesVersionsIDApproveError,
    undefined,
    {},
    {},
    PatchTreeSpeciesVersionsIDApprovePathParams
  >({ url: "/tree_species_versions/{id}/approve", method: "patch", ...variables, signal });

export const usePatchTreeSpeciesVersionsIDApprove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TreeSpeciesVersionRead,
      PatchTreeSpeciesVersionsIDApproveError,
      PatchTreeSpeciesVersionsIDApproveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TreeSpeciesVersionRead,
    PatchTreeSpeciesVersionsIDApproveError,
    PatchTreeSpeciesVersionsIDApproveVariables
  >(
    (variables: PatchTreeSpeciesVersionsIDApproveVariables) =>
      fetchPatchTreeSpeciesVersionsIDApprove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchTreeSpeciesVersionsIDRevivePathParams = {
  id: number;
};

export type PatchTreeSpeciesVersionsIDReviveError = Fetcher.ErrorWrapper<undefined>;

export type PatchTreeSpeciesVersionsIDReviveVariables = {
  pathParams: PatchTreeSpeciesVersionsIDRevivePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchTreeSpeciesVersionsIDRevive = (
  variables: PatchTreeSpeciesVersionsIDReviveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TreeSpeciesVersionRead,
    PatchTreeSpeciesVersionsIDReviveError,
    undefined,
    {},
    {},
    PatchTreeSpeciesVersionsIDRevivePathParams
  >({ url: "/tree_species_versions/{id}/revive", method: "patch", ...variables, signal });

export const usePatchTreeSpeciesVersionsIDRevive = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TreeSpeciesVersionRead,
      PatchTreeSpeciesVersionsIDReviveError,
      PatchTreeSpeciesVersionsIDReviveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TreeSpeciesVersionRead,
    PatchTreeSpeciesVersionsIDReviveError,
    PatchTreeSpeciesVersionsIDReviveVariables
  >(
    (variables: PatchTreeSpeciesVersionsIDReviveVariables) =>
      fetchPatchTreeSpeciesVersionsIDRevive({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchTreeSpeciesVersionsIDRejectPathParams = {
  id: number;
};

export type PatchTreeSpeciesVersionsIDRejectError = Fetcher.ErrorWrapper<undefined>;

export type PatchTreeSpeciesVersionsIDRejectVariables = {
  body?: Schemas.TreeSpeciesVersionReject;
  pathParams: PatchTreeSpeciesVersionsIDRejectPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchTreeSpeciesVersionsIDReject = (
  variables: PatchTreeSpeciesVersionsIDRejectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TreeSpeciesVersionRead,
    PatchTreeSpeciesVersionsIDRejectError,
    Schemas.TreeSpeciesVersionReject,
    {},
    {},
    PatchTreeSpeciesVersionsIDRejectPathParams
  >({ url: "/tree_species_versions/{id}/reject", method: "patch", ...variables, signal });

export const usePatchTreeSpeciesVersionsIDReject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TreeSpeciesVersionRead,
      PatchTreeSpeciesVersionsIDRejectError,
      PatchTreeSpeciesVersionsIDRejectVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TreeSpeciesVersionRead,
    PatchTreeSpeciesVersionsIDRejectError,
    PatchTreeSpeciesVersionsIDRejectVariables
  >(
    (variables: PatchTreeSpeciesVersionsIDRejectVariables) =>
      fetchPatchTreeSpeciesVersionsIDReject({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTreeSpeciesIDTreeSpeciesVersionsPathParams = {
  id: number;
};

export type GetTreeSpeciesIDTreeSpeciesVersionsError = Fetcher.ErrorWrapper<undefined>;

export type GetTreeSpeciesIDTreeSpeciesVersionsVariables = {
  pathParams: GetTreeSpeciesIDTreeSpeciesVersionsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetTreeSpeciesIDTreeSpeciesVersions = (
  variables: GetTreeSpeciesIDTreeSpeciesVersionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TreeSpeciesVersionReadAll,
    GetTreeSpeciesIDTreeSpeciesVersionsError,
    undefined,
    {},
    {},
    GetTreeSpeciesIDTreeSpeciesVersionsPathParams
  >({ url: "/tree_species/{id}/tree_species_versions", method: "get", ...variables, signal });

export const useGetTreeSpeciesIDTreeSpeciesVersions = <TData = Schemas.TreeSpeciesVersionReadAll>(
  variables: GetTreeSpeciesIDTreeSpeciesVersionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TreeSpeciesVersionReadAll, GetTreeSpeciesIDTreeSpeciesVersionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TreeSpeciesVersionReadAll, GetTreeSpeciesIDTreeSpeciesVersionsError, TData>(
    queryKeyFn({
      path: "/tree_species/{ID}/tree_species_versions",
      operationId: "getTreeSpeciesIDTreeSpeciesVersions",
      variables
    }),
    ({ signal }) => fetchGetTreeSpeciesIDTreeSpeciesVersions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTasksOrganisationsError = Fetcher.ErrorWrapper<undefined>;

export type GetTasksOrganisationsVariables = ApiContext["fetcherOptions"];

export const fetchGetTasksOrganisations = (variables: GetTasksOrganisationsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OrganisationReadAll, GetTasksOrganisationsError, undefined, {}, {}, {}>({
    url: "/tasks/organisations",
    method: "get",
    ...variables,
    signal
  });

export const useGetTasksOrganisations = <TData = Schemas.OrganisationReadAll>(
  variables: GetTasksOrganisationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OrganisationReadAll, GetTasksOrganisationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OrganisationReadAll, GetTasksOrganisationsError, TData>(
    queryKeyFn({ path: "/tasks/organisations", operationId: "getTasksOrganisations", variables }),
    ({ signal }) => fetchGetTasksOrganisations({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTasksPitchesError = Fetcher.ErrorWrapper<undefined>;

export type GetTasksPitchesVariables = ApiContext["fetcherOptions"];

export const fetchGetTasksPitches = (variables: GetTasksPitchesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.PitchReadAll, GetTasksPitchesError, undefined, {}, {}, {}>({
    url: "/tasks/pitches",
    method: "get",
    ...variables,
    signal
  });

export const useGetTasksPitches = <TData = Schemas.PitchReadAll>(
  variables: GetTasksPitchesVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.PitchReadAll, GetTasksPitchesError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.PitchReadAll, GetTasksPitchesError, TData>(
    queryKeyFn({ path: "/tasks/pitches", operationId: "getTasksPitches", variables }),
    ({ signal }) => fetchGetTasksPitches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTasksMatchesError = Fetcher.ErrorWrapper<undefined>;

export type GetTasksMatchesVariables = ApiContext["fetcherOptions"];

export const fetchGetTasksMatches = (variables: GetTasksMatchesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.MatchReadAll, GetTasksMatchesError, undefined, {}, {}, {}>({
    url: "/tasks/matches",
    method: "get",
    ...variables,
    signal
  });

export const useGetTasksMatches = <TData = Schemas.MatchReadAll>(
  variables: GetTasksMatchesVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.MatchReadAll, GetTasksMatchesError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.MatchReadAll, GetTasksMatchesError, TData>(
    queryKeyFn({ path: "/tasks/matches", operationId: "getTasksMatches", variables }),
    ({ signal }) => fetchGetTasksMatches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTasksMonitoringsError = Fetcher.ErrorWrapper<undefined>;

export type GetTasksMonitoringsVariables = ApiContext["fetcherOptions"];

export const fetchGetTasksMonitorings = (variables: GetTasksMonitoringsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.MonitoringReadAll, GetTasksMonitoringsError, undefined, {}, {}, {}>({
    url: "/tasks/monitorings",
    method: "get",
    ...variables,
    signal
  });

export const useGetTasksMonitorings = <TData = Schemas.MonitoringReadAll>(
  variables: GetTasksMonitoringsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.MonitoringReadAll, GetTasksMonitoringsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.MonitoringReadAll, GetTasksMonitoringsError, TData>(
    queryKeyFn({ path: "/tasks/monitorings", operationId: "getTasksMonitorings", variables }),
    ({ signal }) => fetchGetTasksMonitorings({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostInterestsError = Fetcher.ErrorWrapper<undefined>;

export type PostInterestsVariables = {
  body?: Schemas.InterestCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostInterests = (variables: PostInterestsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.InterestRead, PostInterestsError, Schemas.InterestCreate, {}, {}, {}>({
    url: "/interests",
    method: "post",
    ...variables,
    signal
  });

export const usePostInterests = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.InterestRead, PostInterestsError, PostInterestsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.InterestRead, PostInterestsError, PostInterestsVariables>(
    (variables: PostInterestsVariables) => fetchPostInterests({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetInterestsInitiatedError = Fetcher.ErrorWrapper<undefined>;

export type GetInterestsInitiatedVariables = ApiContext["fetcherOptions"];

export const fetchGetInterestsInitiated = (variables: GetInterestsInitiatedVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.InterestReadAll, GetInterestsInitiatedError, undefined, {}, {}, {}>({
    url: "/interests/initiated",
    method: "get",
    ...variables,
    signal
  });

export const useGetInterestsInitiated = <TData = Schemas.InterestReadAll>(
  variables: GetInterestsInitiatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.InterestReadAll, GetInterestsInitiatedError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.InterestReadAll, GetInterestsInitiatedError, TData>(
    queryKeyFn({ path: "/interests/initiated", operationId: "getInterestsInitiated", variables }),
    ({ signal }) => fetchGetInterestsInitiated({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetInterestsReceivedError = Fetcher.ErrorWrapper<undefined>;

export type GetInterestsReceivedVariables = ApiContext["fetcherOptions"];

export const fetchGetInterestsReceived = (variables: GetInterestsReceivedVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.InterestReadAll, GetInterestsReceivedError, undefined, {}, {}, {}>({
    url: "/interests/received",
    method: "get",
    ...variables,
    signal
  });

export const useGetInterestsReceived = <TData = Schemas.InterestReadAll>(
  variables: GetInterestsReceivedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.InterestReadAll, GetInterestsReceivedError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.InterestReadAll, GetInterestsReceivedError, TData>(
    queryKeyFn({ path: "/interests/received", operationId: "getInterestsReceived", variables }),
    ({ signal }) => fetchGetInterestsReceived({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteInterestsIDPathParams = {
  id: number;
};

export type DeleteInterestsIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteInterestsIDVariables = {
  pathParams: DeleteInterestsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteInterestsID = (variables: DeleteInterestsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, DeleteInterestsIDError, undefined, {}, {}, DeleteInterestsIDPathParams>({
    url: "/interests/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteInterestsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Empty, DeleteInterestsIDError, DeleteInterestsIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, DeleteInterestsIDError, DeleteInterestsIDVariables>(
    (variables: DeleteInterestsIDVariables) => fetchDeleteInterestsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetMatchesError = Fetcher.ErrorWrapper<undefined>;

export type GetMatchesVariables = ApiContext["fetcherOptions"];

export const fetchGetMatches = (variables: GetMatchesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.MatchReadAll, GetMatchesError, undefined, {}, {}, {}>({
    url: "/matches",
    method: "get",
    ...variables,
    signal
  });

export const useGetMatches = <TData = Schemas.MatchReadAll>(
  variables: GetMatchesVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.MatchReadAll, GetMatchesError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.MatchReadAll, GetMatchesError, TData>(
    queryKeyFn({ path: "/matches", operationId: "getMatches", variables }),
    ({ signal }) => fetchGetMatches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetMatchesIDPathParams = {
  id: number;
};

export type GetMatchesIDError = Fetcher.ErrorWrapper<undefined>;

export type GetMatchesIDVariables = {
  pathParams: GetMatchesIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetMatchesID = (variables: GetMatchesIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.MatchRead, GetMatchesIDError, undefined, {}, {}, GetMatchesIDPathParams>({
    url: "/matches/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetMatchesID = <TData = Schemas.MatchRead>(
  variables: GetMatchesIDVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.MatchRead, GetMatchesIDError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.MatchRead, GetMatchesIDError, TData>(
    queryKeyFn({ path: "/matches/{ID}", operationId: "getMatchesID", variables }),
    ({ signal }) => fetchGetMatchesID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetNotificationsError = Fetcher.ErrorWrapper<undefined>;

export type GetNotificationsVariables = ApiContext["fetcherOptions"];

export const fetchGetNotifications = (variables: GetNotificationsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.NotificationReadAll, GetNotificationsError, undefined, {}, {}, {}>({
    url: "/notifications",
    method: "get",
    ...variables,
    signal
  });

export const useGetNotifications = <TData = Schemas.NotificationReadAll>(
  variables: GetNotificationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.NotificationReadAll, GetNotificationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.NotificationReadAll, GetNotificationsError, TData>(
    queryKeyFn({ path: "/notifications", operationId: "getNotifications", variables }),
    ({ signal }) => fetchGetNotifications({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchNotificationsIDMarkPathParams = {
  id: number;
};

export type PatchNotificationsIDMarkError = Fetcher.ErrorWrapper<undefined>;

export type PatchNotificationsIDMarkVariables = {
  pathParams: PatchNotificationsIDMarkPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchNotificationsIDMark = (variables: PatchNotificationsIDMarkVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.NotificationRead,
    PatchNotificationsIDMarkError,
    undefined,
    {},
    {},
    PatchNotificationsIDMarkPathParams
  >({ url: "/notifications/{id}/mark", method: "patch", ...variables, signal });

export const usePatchNotificationsIDMark = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.NotificationRead,
      PatchNotificationsIDMarkError,
      PatchNotificationsIDMarkVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.NotificationRead,
    PatchNotificationsIDMarkError,
    PatchNotificationsIDMarkVariables
  >(
    (variables: PatchNotificationsIDMarkVariables) =>
      fetchPatchNotificationsIDMark({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetDevicesIDPathParams = {
  id: number;
};

export type GetDevicesIDError = Fetcher.ErrorWrapper<undefined>;

export type GetDevicesIDVariables = {
  pathParams: GetDevicesIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetDevicesID = (variables: GetDevicesIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DeviceRead, GetDevicesIDError, undefined, {}, {}, GetDevicesIDPathParams>({
    url: "/devices/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetDevicesID = <TData = Schemas.DeviceRead>(
  variables: GetDevicesIDVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.DeviceRead, GetDevicesIDError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DeviceRead, GetDevicesIDError, TData>(
    queryKeyFn({ path: "/devices/{ID}", operationId: "getDevicesID", variables }),
    ({ signal }) => fetchGetDevicesID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteDevicesIDPathParams = {
  id: number;
};

export type DeleteDevicesIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteDevicesIDVariables = {
  pathParams: DeleteDevicesIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteDevicesID = (variables: DeleteDevicesIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, DeleteDevicesIDError, undefined, {}, {}, DeleteDevicesIDPathParams>({
    url: "/devices/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteDevicesID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Empty, DeleteDevicesIDError, DeleteDevicesIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, DeleteDevicesIDError, DeleteDevicesIDVariables>(
    (variables: DeleteDevicesIDVariables) => fetchDeleteDevicesID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchDevicesIDPathParams = {
  id: number;
};

export type PatchDevicesIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchDevicesIDVariables = {
  body?: Schemas.DeviceUpdate;
  pathParams: PatchDevicesIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchDevicesID = (variables: PatchDevicesIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DeviceRead, PatchDevicesIDError, Schemas.DeviceUpdate, {}, {}, PatchDevicesIDPathParams>({
    url: "/devices/{id}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchDevicesID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.DeviceRead, PatchDevicesIDError, PatchDevicesIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.DeviceRead, PatchDevicesIDError, PatchDevicesIDVariables>(
    (variables: PatchDevicesIDVariables) => fetchPatchDevicesID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostDevicesError = Fetcher.ErrorWrapper<undefined>;

export type PostDevicesVariables = {
  body?: Schemas.DeviceCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostDevices = (variables: PostDevicesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DeviceRead, PostDevicesError, Schemas.DeviceCreate, {}, {}, {}>({
    url: "/devices",
    method: "post",
    ...variables,
    signal
  });

export const usePostDevices = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.DeviceRead, PostDevicesError, PostDevicesVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.DeviceRead, PostDevicesError, PostDevicesVariables>(
    (variables: PostDevicesVariables) => fetchPostDevices({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetDevicesError = Fetcher.ErrorWrapper<undefined>;

export type GetDevicesVariables = ApiContext["fetcherOptions"];

export const fetchGetDevices = (variables: GetDevicesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DeviceReadAll, GetDevicesError, undefined, {}, {}, {}>({
    url: "/devices",
    method: "get",
    ...variables,
    signal
  });

export const useGetDevices = <TData = Schemas.DeviceReadAll>(
  variables: GetDevicesVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.DeviceReadAll, GetDevicesError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DeviceReadAll, GetDevicesError, TData>(
    queryKeyFn({ path: "/devices", operationId: "getDevices", variables }),
    ({ signal }) => fetchGetDevices({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetReportsOrganisationsError = Fetcher.ErrorWrapper<undefined>;

export type GetReportsOrganisationsVariables = ApiContext["fetcherOptions"];

export const fetchGetReportsOrganisations = (variables: GetReportsOrganisationsVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetReportsOrganisationsError, undefined, {}, {}, {}>({
    url: "/reports/organisations",
    method: "get",
    ...variables,
    signal
  });

export const useGetReportsOrganisations = <TData = undefined>(
  variables: GetReportsOrganisationsVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetReportsOrganisationsError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetReportsOrganisationsError, TData>(
    queryKeyFn({ path: "/reports/organisations", operationId: "getReportsOrganisations", variables }),
    ({ signal }) => fetchGetReportsOrganisations({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetReportsPitchesError = Fetcher.ErrorWrapper<undefined>;

export type GetReportsPitchesVariables = ApiContext["fetcherOptions"];

export const fetchGetReportsPitches = (variables: GetReportsPitchesVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetReportsPitchesError, undefined, {}, {}, {}>({
    url: "/reports/pitches",
    method: "get",
    ...variables,
    signal
  });

export const useGetReportsPitches = <TData = undefined>(
  variables: GetReportsPitchesVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetReportsPitchesError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetReportsPitchesError, TData>(
    queryKeyFn({ path: "/reports/pitches", operationId: "getReportsPitches", variables }),
    ({ signal }) => fetchGetReportsPitches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetReportsApprovedOrganisationsError = Fetcher.ErrorWrapper<undefined>;

export type GetReportsApprovedOrganisationsVariables = ApiContext["fetcherOptions"];

export const fetchGetReportsApprovedOrganisations = (
  variables: GetReportsApprovedOrganisationsVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetReportsApprovedOrganisationsError, undefined, {}, {}, {}>({
    url: "/reports/approved_organisations",
    method: "get",
    ...variables,
    signal
  });

export const useGetReportsApprovedOrganisations = <TData = undefined>(
  variables: GetReportsApprovedOrganisationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetReportsApprovedOrganisationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetReportsApprovedOrganisationsError, TData>(
    queryKeyFn({ path: "/reports/approved_organisations", operationId: "getReportsApprovedOrganisations", variables }),
    ({ signal }) => fetchGetReportsApprovedOrganisations({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetReportsRejectedOrganisationsError = Fetcher.ErrorWrapper<undefined>;

export type GetReportsRejectedOrganisationsVariables = ApiContext["fetcherOptions"];

export const fetchGetReportsRejectedOrganisations = (
  variables: GetReportsRejectedOrganisationsVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetReportsRejectedOrganisationsError, undefined, {}, {}, {}>({
    url: "/reports/rejected_organisations",
    method: "get",
    ...variables,
    signal
  });

export const useGetReportsRejectedOrganisations = <TData = undefined>(
  variables: GetReportsRejectedOrganisationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetReportsRejectedOrganisationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetReportsRejectedOrganisationsError, TData>(
    queryKeyFn({ path: "/reports/rejected_organisations", operationId: "getReportsRejectedOrganisations", variables }),
    ({ signal }) => fetchGetReportsRejectedOrganisations({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetReportsUsersError = Fetcher.ErrorWrapper<undefined>;

export type GetReportsUsersVariables = ApiContext["fetcherOptions"];

export const fetchGetReportsUsers = (variables: GetReportsUsersVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetReportsUsersError, undefined, {}, {}, {}>({
    url: "/reports/users",
    method: "get",
    ...variables,
    signal
  });

export const useGetReportsUsers = <TData = undefined>(
  variables: GetReportsUsersVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetReportsUsersError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetReportsUsersError, TData>(
    queryKeyFn({ path: "/reports/users", operationId: "getReportsUsers", variables }),
    ({ signal }) => fetchGetReportsUsers({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetReportsOffersError = Fetcher.ErrorWrapper<undefined>;

export type GetReportsOffersVariables = ApiContext["fetcherOptions"];

export const fetchGetReportsOffers = (variables: GetReportsOffersVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetReportsOffersError, undefined, {}, {}, {}>({
    url: "/reports/offers",
    method: "get",
    ...variables,
    signal
  });

export const useGetReportsOffers = <TData = undefined>(
  variables: GetReportsOffersVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetReportsOffersError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetReportsOffersError, TData>(
    queryKeyFn({ path: "/reports/offers", operationId: "getReportsOffers", variables }),
    ({ signal }) => fetchGetReportsOffers({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetReportsApprovedPitchesError = Fetcher.ErrorWrapper<undefined>;

export type GetReportsApprovedPitchesVariables = ApiContext["fetcherOptions"];

export const fetchGetReportsApprovedPitches = (variables: GetReportsApprovedPitchesVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetReportsApprovedPitchesError, undefined, {}, {}, {}>({
    url: "/reports/approved_pitches",
    method: "get",
    ...variables,
    signal
  });

export const useGetReportsApprovedPitches = <TData = undefined>(
  variables: GetReportsApprovedPitchesVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetReportsApprovedPitchesError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetReportsApprovedPitchesError, TData>(
    queryKeyFn({ path: "/reports/approved_pitches", operationId: "getReportsApprovedPitches", variables }),
    ({ signal }) => fetchGetReportsApprovedPitches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetReportsRejectedPitchesError = Fetcher.ErrorWrapper<undefined>;

export type GetReportsRejectedPitchesVariables = ApiContext["fetcherOptions"];

export const fetchGetReportsRejectedPitches = (variables: GetReportsRejectedPitchesVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetReportsRejectedPitchesError, undefined, {}, {}, {}>({
    url: "/reports/rejected_pitches",
    method: "get",
    ...variables,
    signal
  });

export const useGetReportsRejectedPitches = <TData = undefined>(
  variables: GetReportsRejectedPitchesVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetReportsRejectedPitchesError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetReportsRejectedPitchesError, TData>(
    queryKeyFn({ path: "/reports/rejected_pitches", operationId: "getReportsRejectedPitches", variables }),
    ({ signal }) => fetchGetReportsRejectedPitches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetReportsInterestsError = Fetcher.ErrorWrapper<undefined>;

export type GetReportsInterestsVariables = ApiContext["fetcherOptions"];

export const fetchGetReportsInterests = (variables: GetReportsInterestsVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetReportsInterestsError, undefined, {}, {}, {}>({
    url: "/reports/interests",
    method: "get",
    ...variables,
    signal
  });

export const useGetReportsInterests = <TData = undefined>(
  variables: GetReportsInterestsVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetReportsInterestsError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetReportsInterestsError, TData>(
    queryKeyFn({ path: "/reports/interests", operationId: "getReportsInterests", variables }),
    ({ signal }) => fetchGetReportsInterests({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetReportsMatchesError = Fetcher.ErrorWrapper<undefined>;

export type GetReportsMatchesVariables = ApiContext["fetcherOptions"];

export const fetchGetReportsMatches = (variables: GetReportsMatchesVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetReportsMatchesError, undefined, {}, {}, {}>({
    url: "/reports/matches",
    method: "get",
    ...variables,
    signal
  });

export const useGetReportsMatches = <TData = undefined>(
  variables: GetReportsMatchesVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetReportsMatchesError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetReportsMatchesError, TData>(
    queryKeyFn({ path: "/reports/matches", operationId: "getReportsMatches", variables }),
    ({ signal }) => fetchGetReportsMatches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetReportsFilterRecordsError = Fetcher.ErrorWrapper<undefined>;

export type GetReportsFilterRecordsVariables = ApiContext["fetcherOptions"];

export const fetchGetReportsFilterRecords = (variables: GetReportsFilterRecordsVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetReportsFilterRecordsError, undefined, {}, {}, {}>({
    url: "/reports/filter_records",
    method: "get",
    ...variables,
    signal
  });

export const useGetReportsFilterRecords = <TData = undefined>(
  variables: GetReportsFilterRecordsVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetReportsFilterRecordsError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetReportsFilterRecordsError, TData>(
    queryKeyFn({ path: "/reports/filter_records", operationId: "getReportsFilterRecords", variables }),
    ({ signal }) => fetchGetReportsFilterRecords({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetReportsMonitoringsError = Fetcher.ErrorWrapper<undefined>;

export type GetReportsMonitoringsVariables = ApiContext["fetcherOptions"];

export const fetchGetReportsMonitorings = (variables: GetReportsMonitoringsVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetReportsMonitoringsError, undefined, {}, {}, {}>({
    url: "/reports/monitorings",
    method: "get",
    ...variables,
    signal
  });

export const useGetReportsMonitorings = <TData = undefined>(
  variables: GetReportsMonitoringsVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetReportsMonitoringsError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetReportsMonitoringsError, TData>(
    queryKeyFn({ path: "/reports/monitorings", operationId: "getReportsMonitorings", variables }),
    ({ signal }) => fetchGetReportsMonitorings({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetReportsProgressUpdatesError = Fetcher.ErrorWrapper<undefined>;

export type GetReportsProgressUpdatesVariables = ApiContext["fetcherOptions"];

export const fetchGetReportsProgressUpdates = (variables: GetReportsProgressUpdatesVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetReportsProgressUpdatesError, undefined, {}, {}, {}>({
    url: "/reports/progress_updates",
    method: "get",
    ...variables,
    signal
  });

export const useGetReportsProgressUpdates = <TData = undefined>(
  variables: GetReportsProgressUpdatesVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetReportsProgressUpdatesError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetReportsProgressUpdatesError, TData>(
    queryKeyFn({ path: "/reports/progress_updates", operationId: "getReportsProgressUpdates", variables }),
    ({ signal }) => fetchGetReportsProgressUpdates({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostElevatorVideosError = Fetcher.ErrorWrapper<undefined>;

export type PostElevatorVideosVariables = {
  body?: Schemas.ElevatorVideoCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostElevatorVideos = (variables: PostElevatorVideosVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ElevatorVideoRead, PostElevatorVideosError, Schemas.ElevatorVideoCreate, {}, {}, {}>({
    url: "/elevator_videos",
    method: "post",
    ...variables,
    signal
  });

export const usePostElevatorVideos = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.ElevatorVideoRead, PostElevatorVideosError, PostElevatorVideosVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.ElevatorVideoRead, PostElevatorVideosError, PostElevatorVideosVariables>(
    (variables: PostElevatorVideosVariables) => fetchPostElevatorVideos({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetElevatorVideosIDPathParams = {
  id: number;
};

export type GetElevatorVideosIDError = Fetcher.ErrorWrapper<undefined>;

export type GetElevatorVideosIDVariables = {
  pathParams: GetElevatorVideosIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetElevatorVideosID = (variables: GetElevatorVideosIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ElevatorVideoRead, GetElevatorVideosIDError, undefined, {}, {}, GetElevatorVideosIDPathParams>({
    url: "/elevator_videos/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetElevatorVideosID = <TData = Schemas.ElevatorVideoRead>(
  variables: GetElevatorVideosIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ElevatorVideoRead, GetElevatorVideosIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.ElevatorVideoRead, GetElevatorVideosIDError, TData>(
    queryKeyFn({ path: "/elevator_videos/{ID}", operationId: "getElevatorVideosID", variables }),
    ({ signal }) => fetchGetElevatorVideosID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostDraftsError = Fetcher.ErrorWrapper<undefined>;

export type PostDraftsVariables = {
  body?: Schemas.DraftCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostDrafts = (variables: PostDraftsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DraftRead, PostDraftsError, Schemas.DraftCreate, {}, {}, {}>({
    url: "/drafts",
    method: "post",
    ...variables,
    signal
  });

export const usePostDrafts = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.DraftRead, PostDraftsError, PostDraftsVariables>, "mutationFn">
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.DraftRead, PostDraftsError, PostDraftsVariables>(
    (variables: PostDraftsVariables) => fetchPostDrafts({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetDraftsIDPathParams = {
  id: number;
};

export type GetDraftsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetDraftsIDVariables = {
  pathParams: GetDraftsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetDraftsID = (variables: GetDraftsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DraftRead, GetDraftsIDError, undefined, {}, {}, GetDraftsIDPathParams>({
    url: "/drafts/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetDraftsID = <TData = Schemas.DraftRead>(
  variables: GetDraftsIDVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.DraftRead, GetDraftsIDError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DraftRead, GetDraftsIDError, TData>(
    queryKeyFn({ path: "/drafts/{ID}", operationId: "getDraftsID", variables }),
    ({ signal }) => fetchGetDraftsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchDraftsIDPathParams = {
  id: number;
};

export type PatchDraftsIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchDraftsIDVariables = {
  body?: Schemas.DraftUpdateAll;
  pathParams: PatchDraftsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchDraftsID = (variables: PatchDraftsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DraftRead, PatchDraftsIDError, Schemas.DraftUpdateAll, {}, {}, PatchDraftsIDPathParams>({
    url: "/drafts/{id}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchDraftsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.DraftRead, PatchDraftsIDError, PatchDraftsIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.DraftRead, PatchDraftsIDError, PatchDraftsIDVariables>(
    (variables: PatchDraftsIDVariables) => fetchPatchDraftsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteDraftsIDPathParams = {
  id: number;
};

export type DeleteDraftsIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteDraftsIDVariables = {
  pathParams: DeleteDraftsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteDraftsID = (variables: DeleteDraftsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.Empty, DeleteDraftsIDError, undefined, {}, {}, DeleteDraftsIDPathParams>({
    url: "/drafts/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteDraftsID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.Empty, DeleteDraftsIDError, DeleteDraftsIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, DeleteDraftsIDError, DeleteDraftsIDVariables>(
    (variables: DeleteDraftsIDVariables) => fetchDeleteDraftsID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetDraftsOffersError = Fetcher.ErrorWrapper<undefined>;

export type GetDraftsOffersVariables = ApiContext["fetcherOptions"];

export const fetchGetDraftsOffers = (variables: GetDraftsOffersVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DraftReadAll, GetDraftsOffersError, undefined, {}, {}, {}>({
    url: "/drafts/offers",
    method: "get",
    ...variables,
    signal
  });

export const useGetDraftsOffers = <TData = Schemas.DraftReadAll>(
  variables: GetDraftsOffersVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.DraftReadAll, GetDraftsOffersError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DraftReadAll, GetDraftsOffersError, TData>(
    queryKeyFn({ path: "/drafts/offers", operationId: "getDraftsOffers", variables }),
    ({ signal }) => fetchGetDraftsOffers({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetDraftsTerrafundProgrammeSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetDraftsTerrafundProgrammeSubmissionsVariables = ApiContext["fetcherOptions"];

export const fetchGetDraftsTerrafundProgrammeSubmissions = (
  variables: GetDraftsTerrafundProgrammeSubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.DraftReadAll, GetDraftsTerrafundProgrammeSubmissionsError, undefined, {}, {}, {}>({
    url: "/drafts/terrafund_programme_submissions",
    method: "get",
    ...variables,
    signal
  });

export const useGetDraftsTerrafundProgrammeSubmissions = <TData = Schemas.DraftReadAll>(
  variables: GetDraftsTerrafundProgrammeSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.DraftReadAll, GetDraftsTerrafundProgrammeSubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DraftReadAll, GetDraftsTerrafundProgrammeSubmissionsError, TData>(
    queryKeyFn({
      path: "/drafts/terrafund_programme_submissions",
      operationId: "getDraftsTerrafundProgrammeSubmissions",
      variables
    }),
    ({ signal }) => fetchGetDraftsTerrafundProgrammeSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetDraftsPitchesError = Fetcher.ErrorWrapper<undefined>;

export type GetDraftsPitchesVariables = ApiContext["fetcherOptions"];

export const fetchGetDraftsPitches = (variables: GetDraftsPitchesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DraftReadAll, GetDraftsPitchesError, undefined, {}, {}, {}>({
    url: "/drafts/pitches",
    method: "get",
    ...variables,
    signal
  });

export const useGetDraftsPitches = <TData = Schemas.DraftReadAll>(
  variables: GetDraftsPitchesVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.DraftReadAll, GetDraftsPitchesError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DraftReadAll, GetDraftsPitchesError, TData>(
    queryKeyFn({ path: "/drafts/pitches", operationId: "getDraftsPitches", variables }),
    ({ signal }) => fetchGetDraftsPitches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetDraftsProgrammesError = Fetcher.ErrorWrapper<undefined>;

export type GetDraftsProgrammesVariables = ApiContext["fetcherOptions"];

export const fetchGetDraftsProgrammes = (variables: GetDraftsProgrammesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DraftReadAll, GetDraftsProgrammesError, undefined, {}, {}, {}>({
    url: "/drafts/programmes",
    method: "get",
    ...variables,
    signal
  });

export const useGetDraftsProgrammes = <TData = Schemas.DraftReadAll>(
  variables: GetDraftsProgrammesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.DraftReadAll, GetDraftsProgrammesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DraftReadAll, GetDraftsProgrammesError, TData>(
    queryKeyFn({ path: "/drafts/programmes", operationId: "getDraftsProgrammes", variables }),
    ({ signal }) => fetchGetDraftsProgrammes({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetDraftsTerrafundProgrammesError = Fetcher.ErrorWrapper<undefined>;

export type GetDraftsTerrafundProgrammesVariables = ApiContext["fetcherOptions"];

export const fetchGetDraftsTerrafundProgrammes = (
  variables: GetDraftsTerrafundProgrammesVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.DraftReadAll, GetDraftsTerrafundProgrammesError, undefined, {}, {}, {}>({
    url: "/drafts/terrafund_programmes",
    method: "get",
    ...variables,
    signal
  });

export const useGetDraftsTerrafundProgrammes = <TData = Schemas.DraftReadAll>(
  variables: GetDraftsTerrafundProgrammesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.DraftReadAll, GetDraftsTerrafundProgrammesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DraftReadAll, GetDraftsTerrafundProgrammesError, TData>(
    queryKeyFn({ path: "/drafts/terrafund_programmes", operationId: "getDraftsTerrafundProgrammes", variables }),
    ({ signal }) => fetchGetDraftsTerrafundProgrammes({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetDraftsTerrafundNurserysError = Fetcher.ErrorWrapper<undefined>;

export type GetDraftsTerrafundNurserysVariables = ApiContext["fetcherOptions"];

export const fetchGetDraftsTerrafundNurserys = (variables: GetDraftsTerrafundNurserysVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DraftReadAll, GetDraftsTerrafundNurserysError, undefined, {}, {}, {}>({
    url: "/drafts/terrafund_nurserys",
    method: "get",
    ...variables,
    signal
  });

export const useGetDraftsTerrafundNurserys = <TData = Schemas.DraftReadAll>(
  variables: GetDraftsTerrafundNurserysVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.DraftReadAll, GetDraftsTerrafundNurserysError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DraftReadAll, GetDraftsTerrafundNurserysError, TData>(
    queryKeyFn({ path: "/drafts/terrafund_nurserys", operationId: "getDraftsTerrafundNurserys", variables }),
    ({ signal }) => fetchGetDraftsTerrafundNurserys({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetDraftsTerrafundSitesError = Fetcher.ErrorWrapper<undefined>;

export type GetDraftsTerrafundSitesVariables = ApiContext["fetcherOptions"];

export const fetchGetDraftsTerrafundSites = (variables: GetDraftsTerrafundSitesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DraftReadAll, GetDraftsTerrafundSitesError, undefined, {}, {}, {}>({
    url: "/drafts/terrafund_sites",
    method: "get",
    ...variables,
    signal
  });

export const useGetDraftsTerrafundSites = <TData = Schemas.DraftReadAll>(
  variables: GetDraftsTerrafundSitesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.DraftReadAll, GetDraftsTerrafundSitesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DraftReadAll, GetDraftsTerrafundSitesError, TData>(
    queryKeyFn({ path: "/drafts/terrafund_sites", operationId: "getDraftsTerrafundSites", variables }),
    ({ signal }) => fetchGetDraftsTerrafundSites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetDraftsTerrafundNurserySubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetDraftsTerrafundNurserySubmissionsVariables = ApiContext["fetcherOptions"];

export const fetchGetDraftsTerrafundNurserySubmissions = (
  variables: GetDraftsTerrafundNurserySubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.DraftReadAll, GetDraftsTerrafundNurserySubmissionsError, undefined, {}, {}, {}>({
    url: "/drafts/terrafund_nursery_submissions",
    method: "get",
    ...variables,
    signal
  });

export const useGetDraftsTerrafundNurserySubmissions = <TData = Schemas.DraftReadAll>(
  variables: GetDraftsTerrafundNurserySubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.DraftReadAll, GetDraftsTerrafundNurserySubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DraftReadAll, GetDraftsTerrafundNurserySubmissionsError, TData>(
    queryKeyFn({
      path: "/drafts/terrafund_nursery_submissions",
      operationId: "getDraftsTerrafundNurserySubmissions",
      variables
    }),
    ({ signal }) => fetchGetDraftsTerrafundNurserySubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetDraftsOrganisationsError = Fetcher.ErrorWrapper<undefined>;

export type GetDraftsOrganisationsVariables = ApiContext["fetcherOptions"];

export const fetchGetDraftsOrganisations = (variables: GetDraftsOrganisationsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DraftReadAll, GetDraftsOrganisationsError, undefined, {}, {}, {}>({
    url: "/drafts/organisations",
    method: "get",
    ...variables,
    signal
  });

export const useGetDraftsOrganisations = <TData = Schemas.DraftReadAll>(
  variables: GetDraftsOrganisationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.DraftReadAll, GetDraftsOrganisationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DraftReadAll, GetDraftsOrganisationsError, TData>(
    queryKeyFn({ path: "/drafts/organisations", operationId: "getDraftsOrganisations", variables }),
    ({ signal }) => fetchGetDraftsOrganisations({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetDraftsSitesError = Fetcher.ErrorWrapper<undefined>;

export type GetDraftsSitesVariables = ApiContext["fetcherOptions"];

export const fetchGetDraftsSites = (variables: GetDraftsSitesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DraftReadAll, GetDraftsSitesError, undefined, {}, {}, {}>({
    url: "/drafts/sites",
    method: "get",
    ...variables,
    signal
  });

export const useGetDraftsSites = <TData = Schemas.DraftReadAll>(
  variables: GetDraftsSitesVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.DraftReadAll, GetDraftsSitesError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DraftReadAll, GetDraftsSitesError, TData>(
    queryKeyFn({ path: "/drafts/sites", operationId: "getDraftsSites", variables }),
    ({ signal }) => fetchGetDraftsSites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetDraftsSiteSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetDraftsSiteSubmissionsVariables = ApiContext["fetcherOptions"];

export const fetchGetDraftsSiteSubmissions = (variables: GetDraftsSiteSubmissionsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DraftReadAll, GetDraftsSiteSubmissionsError, undefined, {}, {}, {}>({
    url: "/drafts/site_submissions",
    method: "get",
    ...variables,
    signal
  });

export const useGetDraftsSiteSubmissions = <TData = Schemas.DraftReadAll>(
  variables: GetDraftsSiteSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.DraftReadAll, GetDraftsSiteSubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DraftReadAll, GetDraftsSiteSubmissionsError, TData>(
    queryKeyFn({ path: "/drafts/site_submissions", operationId: "getDraftsSiteSubmissions", variables }),
    ({ signal }) => fetchGetDraftsSiteSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetDraftsProgrammeSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetDraftsProgrammeSubmissionsVariables = ApiContext["fetcherOptions"];

export const fetchGetDraftsProgrammeSubmissions = (
  variables: GetDraftsProgrammeSubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.DraftReadAll, GetDraftsProgrammeSubmissionsError, undefined, {}, {}, {}>({
    url: "/drafts/programme_submissions",
    method: "get",
    ...variables,
    signal
  });

export const useGetDraftsProgrammeSubmissions = <TData = Schemas.DraftReadAll>(
  variables: GetDraftsProgrammeSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.DraftReadAll, GetDraftsProgrammeSubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DraftReadAll, GetDraftsProgrammeSubmissionsError, TData>(
    queryKeyFn({ path: "/drafts/programme_submissions", operationId: "getDraftsProgrammeSubmissions", variables }),
    ({ signal }) => fetchGetDraftsProgrammeSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetDraftsTerrafundSiteSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetDraftsTerrafundSiteSubmissionsVariables = ApiContext["fetcherOptions"];

export const fetchGetDraftsTerrafundSiteSubmissions = (
  variables: GetDraftsTerrafundSiteSubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.DraftReadAll, GetDraftsTerrafundSiteSubmissionsError, undefined, {}, {}, {}>({
    url: "/drafts/terrafund_site_submissions",
    method: "get",
    ...variables,
    signal
  });

export const useGetDraftsTerrafundSiteSubmissions = <TData = Schemas.DraftReadAll>(
  variables: GetDraftsTerrafundSiteSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.DraftReadAll, GetDraftsTerrafundSiteSubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DraftReadAll, GetDraftsTerrafundSiteSubmissionsError, TData>(
    queryKeyFn({
      path: "/drafts/terrafund_site_submissions",
      operationId: "getDraftsTerrafundSiteSubmissions",
      variables
    }),
    ({ signal }) => fetchGetDraftsTerrafundSiteSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchDraftsIDPublishPathParams = {
  id: number;
};

export type PatchDraftsIDPublishError = Fetcher.ErrorWrapper<undefined>;

export type PatchDraftsIDPublishResponse = {
  offer_id?: number;
  pitch_id?: number;
};

export type PatchDraftsIDPublishVariables = {
  pathParams: PatchDraftsIDPublishPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchDraftsIDPublish = (variables: PatchDraftsIDPublishVariables, signal?: AbortSignal) =>
  apiFetch<PatchDraftsIDPublishResponse, PatchDraftsIDPublishError, undefined, {}, {}, PatchDraftsIDPublishPathParams>({
    url: "/drafts/{id}/publish",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchDraftsIDPublish = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PatchDraftsIDPublishResponse,
      PatchDraftsIDPublishError,
      PatchDraftsIDPublishVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<PatchDraftsIDPublishResponse, PatchDraftsIDPublishError, PatchDraftsIDPublishVariables>(
    (variables: PatchDraftsIDPublishVariables) => fetchPatchDraftsIDPublish({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchDraftsMergeError = Fetcher.ErrorWrapper<undefined>;

export type PatchDraftsMergeVariables = {
  body?: Schemas.DraftMerge;
} & ApiContext["fetcherOptions"];

export const fetchPatchDraftsMerge = (variables: PatchDraftsMergeVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DraftRead, PatchDraftsMergeError, Schemas.DraftMerge, {}, {}, {}>({
    url: "/drafts/merge",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchDraftsMerge = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.DraftRead, PatchDraftsMergeError, PatchDraftsMergeVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.DraftRead, PatchDraftsMergeError, PatchDraftsMergeVariables>(
    (variables: PatchDraftsMergeVariables) => fetchPatchDraftsMerge({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostMonitoringsError = Fetcher.ErrorWrapper<undefined>;

export type PostMonitoringsVariables = {
  body?: Schemas.MonitoringCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostMonitorings = (variables: PostMonitoringsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.MonitoringRead, PostMonitoringsError, Schemas.MonitoringCreate, {}, {}, {}>({
    url: "/monitorings",
    method: "post",
    ...variables,
    signal
  });

export const usePostMonitorings = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.MonitoringRead, PostMonitoringsError, PostMonitoringsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.MonitoringRead, PostMonitoringsError, PostMonitoringsVariables>(
    (variables: PostMonitoringsVariables) => fetchPostMonitorings({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetMonitoringsError = Fetcher.ErrorWrapper<undefined>;

export type GetMonitoringsVariables = ApiContext["fetcherOptions"];

export const fetchGetMonitorings = (variables: GetMonitoringsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.MonitoringReadAll, GetMonitoringsError, undefined, {}, {}, {}>({
    url: "/monitorings",
    method: "get",
    ...variables,
    signal
  });

export const useGetMonitorings = <TData = Schemas.MonitoringReadAll>(
  variables: GetMonitoringsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.MonitoringReadAll, GetMonitoringsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.MonitoringReadAll, GetMonitoringsError, TData>(
    queryKeyFn({ path: "/monitorings", operationId: "getMonitorings", variables }),
    ({ signal }) => fetchGetMonitorings({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetMonitoringsIDPathParams = {
  id: number;
};

export type GetMonitoringsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetMonitoringsIDVariables = {
  pathParams: GetMonitoringsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetMonitoringsID = (variables: GetMonitoringsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.MonitoringRead, GetMonitoringsIDError, undefined, {}, {}, GetMonitoringsIDPathParams>({
    url: "/monitorings/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetMonitoringsID = <TData = Schemas.MonitoringRead>(
  variables: GetMonitoringsIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.MonitoringRead, GetMonitoringsIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.MonitoringRead, GetMonitoringsIDError, TData>(
    queryKeyFn({ path: "/monitorings/{ID}", operationId: "getMonitoringsID", variables }),
    ({ signal }) => fetchGetMonitoringsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetOffersIDMonitoringsPathParams = {
  id: number;
};

export type GetOffersIDMonitoringsError = Fetcher.ErrorWrapper<undefined>;

export type GetOffersIDMonitoringsVariables = {
  pathParams: GetOffersIDMonitoringsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetOffersIDMonitorings = (variables: GetOffersIDMonitoringsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.MonitoringReadAll, GetOffersIDMonitoringsError, undefined, {}, {}, GetOffersIDMonitoringsPathParams>(
    { url: "/offers/{id}/monitorings", method: "get", ...variables, signal }
  );

export const useGetOffersIDMonitorings = <TData = Schemas.MonitoringReadAll>(
  variables: GetOffersIDMonitoringsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.MonitoringReadAll, GetOffersIDMonitoringsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.MonitoringReadAll, GetOffersIDMonitoringsError, TData>(
    queryKeyFn({ path: "/offers/{ID}/monitorings", operationId: "getOffersIDMonitorings", variables }),
    ({ signal }) => fetchGetOffersIDMonitorings({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetPitchesIDMonitoringsPathParams = {
  id: number;
};

export type GetPitchesIDMonitoringsError = Fetcher.ErrorWrapper<undefined>;

export type GetPitchesIDMonitoringsVariables = {
  pathParams: GetPitchesIDMonitoringsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPitchesIDMonitorings = (variables: GetPitchesIDMonitoringsVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.MonitoringReadAll,
    GetPitchesIDMonitoringsError,
    undefined,
    {},
    {},
    GetPitchesIDMonitoringsPathParams
  >({ url: "/pitches/{id}/monitorings", method: "get", ...variables, signal });

export const useGetPitchesIDMonitorings = <TData = Schemas.MonitoringReadAll>(
  variables: GetPitchesIDMonitoringsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.MonitoringReadAll, GetPitchesIDMonitoringsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.MonitoringReadAll, GetPitchesIDMonitoringsError, TData>(
    queryKeyFn({ path: "/pitches/{ID}/monitorings", operationId: "getPitchesIDMonitorings", variables }),
    ({ signal }) => fetchGetPitchesIDMonitorings({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetMonitoringsIDSummarisePathParams = {
  id: number;
};

export type GetMonitoringsIDSummariseError = Fetcher.ErrorWrapper<undefined>;

export type GetMonitoringsIDSummariseVariables = {
  pathParams: GetMonitoringsIDSummarisePathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetMonitoringsIDSummarise = (variables: GetMonitoringsIDSummariseVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.SummarisedMonitoringRead,
    GetMonitoringsIDSummariseError,
    undefined,
    {},
    {},
    GetMonitoringsIDSummarisePathParams
  >({ url: "/monitorings/{id}/summarise", method: "get", ...variables, signal });

export const useGetMonitoringsIDSummarise = <TData = Schemas.SummarisedMonitoringRead>(
  variables: GetMonitoringsIDSummariseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SummarisedMonitoringRead, GetMonitoringsIDSummariseError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SummarisedMonitoringRead, GetMonitoringsIDSummariseError, TData>(
    queryKeyFn({ path: "/monitorings/{ID}/summarise", operationId: "getMonitoringsIDSummarise", variables }),
    ({ signal }) => fetchGetMonitoringsIDSummarise({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetMonitoringsIDLandGeojsonPathParams = {
  id: number;
};

export type GetMonitoringsIDLandGeojsonError = Fetcher.ErrorWrapper<undefined>;

export type GetMonitoringsIDLandGeojsonVariables = {
  pathParams: GetMonitoringsIDLandGeojsonPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetMonitoringsIDLandGeojson = (
  variables: GetMonitoringsIDLandGeojsonVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetMonitoringsIDLandGeojsonError, undefined, {}, {}, GetMonitoringsIDLandGeojsonPathParams>({
    url: "/monitorings/{id}/land_geojson",
    method: "get",
    ...variables,
    signal
  });

export const useGetMonitoringsIDLandGeojson = <TData = undefined>(
  variables: GetMonitoringsIDLandGeojsonVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetMonitoringsIDLandGeojsonError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetMonitoringsIDLandGeojsonError, TData>(
    queryKeyFn({ path: "/monitorings/{ID}/land_geojson", operationId: "getMonitoringsIDLandGeojson", variables }),
    ({ signal }) => fetchGetMonitoringsIDLandGeojson({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostTargetsError = Fetcher.ErrorWrapper<undefined>;

export type PostTargetsVariables = {
  body?: Schemas.TargetCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTargets = (variables: PostTargetsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TargetRead, PostTargetsError, Schemas.TargetCreate, {}, {}, {}>({
    url: "/targets",
    method: "post",
    ...variables,
    signal
  });

export const usePostTargets = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TargetRead, PostTargetsError, PostTargetsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.TargetRead, PostTargetsError, PostTargetsVariables>(
    (variables: PostTargetsVariables) => fetchPostTargets({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTargetsIDPathParams = {
  id: number;
};

export type GetTargetsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetTargetsIDVariables = {
  pathParams: GetTargetsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetTargetsID = (variables: GetTargetsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TargetRead, GetTargetsIDError, undefined, {}, {}, GetTargetsIDPathParams>({
    url: "/targets/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetTargetsID = <TData = Schemas.TargetRead>(
  variables: GetTargetsIDVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.TargetRead, GetTargetsIDError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TargetRead, GetTargetsIDError, TData>(
    queryKeyFn({ path: "/targets/{ID}", operationId: "getTargetsID", variables }),
    ({ signal }) => fetchGetTargetsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetMonitoringsIDTargetsAcceptedPathParams = {
  id: number;
};

export type GetMonitoringsIDTargetsAcceptedError = Fetcher.ErrorWrapper<undefined>;

export type GetMonitoringsIDTargetsAcceptedVariables = {
  pathParams: GetMonitoringsIDTargetsAcceptedPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetMonitoringsIDTargetsAccepted = (
  variables: GetMonitoringsIDTargetsAcceptedVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TargetRead,
    GetMonitoringsIDTargetsAcceptedError,
    undefined,
    {},
    {},
    GetMonitoringsIDTargetsAcceptedPathParams
  >({ url: "/monitorings/{id}/targets/accepted", method: "get", ...variables, signal });

export const useGetMonitoringsIDTargetsAccepted = <TData = Schemas.TargetRead>(
  variables: GetMonitoringsIDTargetsAcceptedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TargetRead, GetMonitoringsIDTargetsAcceptedError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TargetRead, GetMonitoringsIDTargetsAcceptedError, TData>(
    queryKeyFn({
      path: "/monitorings/{ID}/targets/accepted",
      operationId: "getMonitoringsIDTargetsAccepted",
      variables
    }),
    ({ signal }) => fetchGetMonitoringsIDTargetsAccepted({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetMonitoringsIDTargetsPathParams = {
  id: number;
};

export type GetMonitoringsIDTargetsError = Fetcher.ErrorWrapper<undefined>;

export type GetMonitoringsIDTargetsVariables = {
  pathParams: GetMonitoringsIDTargetsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetMonitoringsIDTargets = (variables: GetMonitoringsIDTargetsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TargetReadAll, GetMonitoringsIDTargetsError, undefined, {}, {}, GetMonitoringsIDTargetsPathParams>({
    url: "/monitorings/{id}/targets",
    method: "get",
    ...variables,
    signal
  });

export const useGetMonitoringsIDTargets = <TData = Schemas.TargetReadAll>(
  variables: GetMonitoringsIDTargetsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TargetReadAll, GetMonitoringsIDTargetsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TargetReadAll, GetMonitoringsIDTargetsError, TData>(
    queryKeyFn({ path: "/monitorings/{ID}/targets", operationId: "getMonitoringsIDTargets", variables }),
    ({ signal }) => fetchGetMonitoringsIDTargets({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchTargetsIDAcceptPathParams = {
  id: number;
};

export type PatchTargetsIDAcceptError = Fetcher.ErrorWrapper<undefined>;

export type PatchTargetsIDAcceptVariables = {
  pathParams: PatchTargetsIDAcceptPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchTargetsIDAccept = (variables: PatchTargetsIDAcceptVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TargetRead, PatchTargetsIDAcceptError, undefined, {}, {}, PatchTargetsIDAcceptPathParams>({
    url: "/targets/{id}/accept",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchTargetsIDAccept = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TargetRead, PatchTargetsIDAcceptError, PatchTargetsIDAcceptVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.TargetRead, PatchTargetsIDAcceptError, PatchTargetsIDAcceptVariables>(
    (variables: PatchTargetsIDAcceptVariables) => fetchPatchTargetsIDAccept({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostProgressUpdatesError = Fetcher.ErrorWrapper<undefined>;

export type PostProgressUpdatesVariables = {
  body?: Schemas.ProgressUpdateCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostProgressUpdates = (variables: PostProgressUpdatesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ProgressUpdateRead, PostProgressUpdatesError, Schemas.ProgressUpdateCreate, {}, {}, {}>({
    url: "/progress_updates",
    method: "post",
    ...variables,
    signal
  });

export const usePostProgressUpdates = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.ProgressUpdateRead, PostProgressUpdatesError, PostProgressUpdatesVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.ProgressUpdateRead, PostProgressUpdatesError, PostProgressUpdatesVariables>(
    (variables: PostProgressUpdatesVariables) => fetchPostProgressUpdates({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetProgressUpdatesIDPathParams = {
  id: number;
};

export type GetProgressUpdatesIDError = Fetcher.ErrorWrapper<undefined>;

export type GetProgressUpdatesIDVariables = {
  pathParams: GetProgressUpdatesIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetProgressUpdatesID = (variables: GetProgressUpdatesIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ProgressUpdateRead, GetProgressUpdatesIDError, undefined, {}, {}, GetProgressUpdatesIDPathParams>({
    url: "/progress_updates/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetProgressUpdatesID = <TData = Schemas.ProgressUpdateRead>(
  variables: GetProgressUpdatesIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ProgressUpdateRead, GetProgressUpdatesIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.ProgressUpdateRead, GetProgressUpdatesIDError, TData>(
    queryKeyFn({ path: "/progress_updates/{ID}", operationId: "getProgressUpdatesID", variables }),
    ({ signal }) => fetchGetProgressUpdatesID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetMonitoringsIDProgressUpdatesPathParams = {
  id: number;
};

export type GetMonitoringsIDProgressUpdatesError = Fetcher.ErrorWrapper<undefined>;

export type GetMonitoringsIDProgressUpdatesVariables = {
  pathParams: GetMonitoringsIDProgressUpdatesPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetMonitoringsIDProgressUpdates = (
  variables: GetMonitoringsIDProgressUpdatesVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.ProgressUpdateReadAll,
    GetMonitoringsIDProgressUpdatesError,
    undefined,
    {},
    {},
    GetMonitoringsIDProgressUpdatesPathParams
  >({ url: "/monitorings/{id}/progress_updates", method: "get", ...variables, signal });

export const useGetMonitoringsIDProgressUpdates = <TData = Schemas.ProgressUpdateReadAll>(
  variables: GetMonitoringsIDProgressUpdatesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ProgressUpdateReadAll, GetMonitoringsIDProgressUpdatesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.ProgressUpdateReadAll, GetMonitoringsIDProgressUpdatesError, TData>(
    queryKeyFn({
      path: "/monitorings/{ID}/progress_updates",
      operationId: "getMonitoringsIDProgressUpdates",
      variables
    }),
    ({ signal }) => fetchGetMonitoringsIDProgressUpdates({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostSatelliteMapsError = Fetcher.ErrorWrapper<undefined>;

export type PostSatelliteMapsVariables = {
  body?: Schemas.SatelliteMapCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostSatelliteMaps = (variables: PostSatelliteMapsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SatelliteMapRead, PostSatelliteMapsError, Schemas.SatelliteMapCreate, {}, {}, {}>({
    url: "/satellite_maps",
    method: "post",
    ...variables,
    signal
  });

export const usePostSatelliteMaps = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.SatelliteMapRead, PostSatelliteMapsError, PostSatelliteMapsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.SatelliteMapRead, PostSatelliteMapsError, PostSatelliteMapsVariables>(
    (variables: PostSatelliteMapsVariables) => fetchPostSatelliteMaps({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetMonitoringsIDSatelliteMapsPathParams = {
  id: number;
};

export type GetMonitoringsIDSatelliteMapsError = Fetcher.ErrorWrapper<undefined>;

export type GetMonitoringsIDSatelliteMapsVariables = {
  pathParams: GetMonitoringsIDSatelliteMapsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetMonitoringsIDSatelliteMaps = (
  variables: GetMonitoringsIDSatelliteMapsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SatelliteMapReadAll,
    GetMonitoringsIDSatelliteMapsError,
    undefined,
    {},
    {},
    GetMonitoringsIDSatelliteMapsPathParams
  >({ url: "/monitorings/{id}/satellite_maps", method: "get", ...variables, signal });

export const useGetMonitoringsIDSatelliteMaps = <TData = Schemas.SatelliteMapReadAll>(
  variables: GetMonitoringsIDSatelliteMapsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SatelliteMapReadAll, GetMonitoringsIDSatelliteMapsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SatelliteMapReadAll, GetMonitoringsIDSatelliteMapsError, TData>(
    queryKeyFn({ path: "/monitorings/{ID}/satellite_maps", operationId: "getMonitoringsIDSatelliteMaps", variables }),
    ({ signal }) => fetchGetMonitoringsIDSatelliteMaps({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetSatelliteMapsIDPathParams = {
  id: number;
};

export type GetSatelliteMapsIDError = Fetcher.ErrorWrapper<undefined>;

export type GetSatelliteMapsIDVariables = {
  pathParams: GetSatelliteMapsIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetSatelliteMapsID = (variables: GetSatelliteMapsIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SatelliteMapRead, GetSatelliteMapsIDError, undefined, {}, {}, GetSatelliteMapsIDPathParams>({
    url: "/satellite_maps/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetSatelliteMapsID = <TData = Schemas.SatelliteMapRead>(
  variables: GetSatelliteMapsIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SatelliteMapRead, GetSatelliteMapsIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SatelliteMapRead, GetSatelliteMapsIDError, TData>(
    queryKeyFn({ path: "/satellite_maps/{ID}", operationId: "getSatelliteMapsID", variables }),
    ({ signal }) => fetchGetSatelliteMapsID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetMonitoringsIDSatelliteMapsLatestPathParams = {
  id: number;
};

export type GetMonitoringsIDSatelliteMapsLatestError = Fetcher.ErrorWrapper<undefined>;

export type GetMonitoringsIDSatelliteMapsLatestVariables = {
  pathParams: GetMonitoringsIDSatelliteMapsLatestPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetMonitoringsIDSatelliteMapsLatest = (
  variables: GetMonitoringsIDSatelliteMapsLatestVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SatelliteMapRead,
    GetMonitoringsIDSatelliteMapsLatestError,
    undefined,
    {},
    {},
    GetMonitoringsIDSatelliteMapsLatestPathParams
  >({ url: "/monitorings/{id}/satellite_maps/latest", method: "get", ...variables, signal });

export const useGetMonitoringsIDSatelliteMapsLatest = <TData = Schemas.SatelliteMapRead>(
  variables: GetMonitoringsIDSatelliteMapsLatestVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SatelliteMapRead, GetMonitoringsIDSatelliteMapsLatestError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SatelliteMapRead, GetMonitoringsIDSatelliteMapsLatestError, TData>(
    queryKeyFn({
      path: "/monitorings/{ID}/satellite_maps/latest",
      operationId: "getMonitoringsIDSatelliteMapsLatest",
      variables
    }),
    ({ signal }) => fetchGetMonitoringsIDSatelliteMapsLatest({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostSatelliteMonitorError = Fetcher.ErrorWrapper<undefined>;

export type PostSatelliteMonitorVariables = {
  body?: Schemas.SatelliteMonitorCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostSatelliteMonitor = (variables: PostSatelliteMonitorVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SatelliteMonitorRead, PostSatelliteMonitorError, Schemas.SatelliteMonitorCreate, {}, {}, {}>({
    url: "/satellite_monitor",
    method: "post",
    ...variables,
    signal
  });

export const usePostSatelliteMonitor = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SatelliteMonitorRead,
      PostSatelliteMonitorError,
      PostSatelliteMonitorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.SatelliteMonitorRead, PostSatelliteMonitorError, PostSatelliteMonitorVariables>(
    (variables: PostSatelliteMonitorVariables) => fetchPostSatelliteMonitor({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetSatelliteMonitorProgrammeIDPathParams = {
  id: number;
};

export type GetSatelliteMonitorProgrammeIDError = Fetcher.ErrorWrapper<undefined>;

export type GetSatelliteMonitorProgrammeIDVariables = {
  pathParams: GetSatelliteMonitorProgrammeIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetSatelliteMonitorProgrammeID = (
  variables: GetSatelliteMonitorProgrammeIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SatelliteMonitorReadAll,
    GetSatelliteMonitorProgrammeIDError,
    undefined,
    {},
    {},
    GetSatelliteMonitorProgrammeIDPathParams
  >({ url: "/satellite_monitor/programme/{id}", method: "get", ...variables, signal });

export const useGetSatelliteMonitorProgrammeID = <TData = Schemas.SatelliteMonitorReadAll>(
  variables: GetSatelliteMonitorProgrammeIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SatelliteMonitorReadAll, GetSatelliteMonitorProgrammeIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SatelliteMonitorReadAll, GetSatelliteMonitorProgrammeIDError, TData>(
    queryKeyFn({ path: "/satellite_monitor/programme/{ID}", operationId: "getSatelliteMonitorProgrammeID", variables }),
    ({ signal }) => fetchGetSatelliteMonitorProgrammeID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetSatelliteMonitorSiteIDPathParams = {
  id: number;
};

export type GetSatelliteMonitorSiteIDError = Fetcher.ErrorWrapper<undefined>;

export type GetSatelliteMonitorSiteIDVariables = {
  pathParams: GetSatelliteMonitorSiteIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetSatelliteMonitorSiteID = (variables: GetSatelliteMonitorSiteIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.SatelliteMonitorReadAll,
    GetSatelliteMonitorSiteIDError,
    undefined,
    {},
    {},
    GetSatelliteMonitorSiteIDPathParams
  >({ url: "/satellite_monitor/site/{id}", method: "get", ...variables, signal });

export const useGetSatelliteMonitorSiteID = <TData = Schemas.SatelliteMonitorReadAll>(
  variables: GetSatelliteMonitorSiteIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SatelliteMonitorReadAll, GetSatelliteMonitorSiteIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SatelliteMonitorReadAll, GetSatelliteMonitorSiteIDError, TData>(
    queryKeyFn({ path: "/satellite_monitor/site/{ID}", operationId: "getSatelliteMonitorSiteID", variables }),
    ({ signal }) => fetchGetSatelliteMonitorSiteID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetSatelliteMonitorProgrammeIDLatestPathParams = {
  id: number;
};

export type GetSatelliteMonitorProgrammeIDLatestError = Fetcher.ErrorWrapper<undefined>;

export type GetSatelliteMonitorProgrammeIDLatestVariables = {
  pathParams: GetSatelliteMonitorProgrammeIDLatestPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetSatelliteMonitorProgrammeIDLatest = (
  variables: GetSatelliteMonitorProgrammeIDLatestVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SatelliteMonitorRead,
    GetSatelliteMonitorProgrammeIDLatestError,
    undefined,
    {},
    {},
    GetSatelliteMonitorProgrammeIDLatestPathParams
  >({ url: "/satellite_monitor/programme/{id}/latest", method: "get", ...variables, signal });

export const useGetSatelliteMonitorProgrammeIDLatest = <TData = Schemas.SatelliteMonitorRead>(
  variables: GetSatelliteMonitorProgrammeIDLatestVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SatelliteMonitorRead, GetSatelliteMonitorProgrammeIDLatestError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SatelliteMonitorRead, GetSatelliteMonitorProgrammeIDLatestError, TData>(
    queryKeyFn({
      path: "/satellite_monitor/programme/{ID}/latest",
      operationId: "getSatelliteMonitorProgrammeIDLatest",
      variables
    }),
    ({ signal }) => fetchGetSatelliteMonitorProgrammeIDLatest({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetSatelliteMonitorSiteIDLatestPathParams = {
  id: number;
};

export type GetSatelliteMonitorSiteIDLatestError = Fetcher.ErrorWrapper<undefined>;

export type GetSatelliteMonitorSiteIDLatestVariables = {
  pathParams: GetSatelliteMonitorSiteIDLatestPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetSatelliteMonitorSiteIDLatest = (
  variables: GetSatelliteMonitorSiteIDLatestVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SatelliteMonitorRead,
    GetSatelliteMonitorSiteIDLatestError,
    undefined,
    {},
    {},
    GetSatelliteMonitorSiteIDLatestPathParams
  >({ url: "/satellite_monitor/site/{id}/latest", method: "get", ...variables, signal });

export const useGetSatelliteMonitorSiteIDLatest = <TData = Schemas.SatelliteMonitorRead>(
  variables: GetSatelliteMonitorSiteIDLatestVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SatelliteMonitorRead, GetSatelliteMonitorSiteIDLatestError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SatelliteMonitorRead, GetSatelliteMonitorSiteIDLatestError, TData>(
    queryKeyFn({
      path: "/satellite_monitor/site/{ID}/latest",
      operationId: "getSatelliteMonitorSiteIDLatest",
      variables
    }),
    ({ signal }) => fetchGetSatelliteMonitorSiteIDLatest({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostProgrammeError = Fetcher.ErrorWrapper<undefined>;

export type PostProgrammeVariables = {
  body?: Schemas.ProgrammeSubmit;
} & ApiContext["fetcherOptions"];

export const fetchPostProgramme = (variables: PostProgrammeVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ProgrammeRead, PostProgrammeError, Schemas.ProgrammeSubmit, {}, {}, {}>({
    url: "/programme",
    method: "post",
    ...variables,
    signal
  });

export const usePostProgramme = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.ProgrammeRead, PostProgrammeError, PostProgrammeVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.ProgrammeRead, PostProgrammeError, PostProgrammeVariables>(
    (variables: PostProgrammeVariables) => fetchPostProgramme({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetProgrammesError = Fetcher.ErrorWrapper<undefined>;

export type GetProgrammesVariables = ApiContext["fetcherOptions"];

export const fetchGetProgrammes = (variables: GetProgrammesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ProgrammeReadAll, GetProgrammesError, undefined, {}, {}, {}>({
    url: "/programmes",
    method: "get",
    ...variables,
    signal
  });

export const useGetProgrammes = <TData = Schemas.ProgrammeReadAll>(
  variables: GetProgrammesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ProgrammeReadAll, GetProgrammesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.ProgrammeReadAll, GetProgrammesError, TData>(
    queryKeyFn({ path: "/programmes", operationId: "getProgrammes", variables }),
    ({ signal }) => fetchGetProgrammes({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetProgrammesPersonalError = Fetcher.ErrorWrapper<undefined>;

export type GetProgrammesPersonalVariables = ApiContext["fetcherOptions"];

export const fetchGetProgrammesPersonal = (variables: GetProgrammesPersonalVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ProgrammeReadAll, GetProgrammesPersonalError, undefined, {}, {}, {}>({
    url: "/programmes/personal",
    method: "get",
    ...variables,
    signal
  });

export const useGetProgrammesPersonal = <TData = Schemas.ProgrammeReadAll>(
  variables: GetProgrammesPersonalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ProgrammeReadAll, GetProgrammesPersonalError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.ProgrammeReadAll, GetProgrammesPersonalError, TData>(
    queryKeyFn({ path: "/programmes/personal", operationId: "getProgrammesPersonal", variables }),
    ({ signal }) => fetchGetProgrammesPersonal({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostFrameworkAccessCodeError = Fetcher.ErrorWrapper<undefined>;

export type PostFrameworkAccessCodeVariables = {
  body?: Schemas.FrameworkCodeCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostFrameworkAccessCode = (variables: PostFrameworkAccessCodeVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.FrameworkCodeRead, PostFrameworkAccessCodeError, Schemas.FrameworkCodeCreate, {}, {}, {}>({
    url: "/framework/access_code",
    method: "post",
    ...variables,
    signal
  });

export const usePostFrameworkAccessCode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FrameworkCodeRead,
      PostFrameworkAccessCodeError,
      PostFrameworkAccessCodeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.FrameworkCodeRead,
    PostFrameworkAccessCodeError,
    PostFrameworkAccessCodeVariables
  >(
    (variables: PostFrameworkAccessCodeVariables) => fetchPostFrameworkAccessCode({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetFrameworkAccessCodeAllError = Fetcher.ErrorWrapper<undefined>;

export type GetFrameworkAccessCodeAllVariables = ApiContext["fetcherOptions"];

export const fetchGetFrameworkAccessCodeAll = (variables: GetFrameworkAccessCodeAllVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.FrameworkCodeReadAll, GetFrameworkAccessCodeAllError, undefined, {}, {}, {}>({
    url: "/framework/access_code/all",
    method: "get",
    ...variables,
    signal
  });

export const useGetFrameworkAccessCodeAll = <TData = Schemas.FrameworkCodeReadAll>(
  variables: GetFrameworkAccessCodeAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.FrameworkCodeReadAll, GetFrameworkAccessCodeAllError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.FrameworkCodeReadAll, GetFrameworkAccessCodeAllError, TData>(
    queryKeyFn({ path: "/framework/access_code/all", operationId: "getFrameworkAccessCodeAll", variables }),
    ({ signal }) => fetchGetFrameworkAccessCodeAll({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostFrameworkAccessCodeJoinError = Fetcher.ErrorWrapper<undefined>;

export type PostFrameworkAccessCodeJoinVariables = {
  body?: Schemas.FrameworkCodeSubmit;
} & ApiContext["fetcherOptions"];

export const fetchPostFrameworkAccessCodeJoin = (
  variables: PostFrameworkAccessCodeJoinVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.FrameworkCodeRead, PostFrameworkAccessCodeJoinError, Schemas.FrameworkCodeSubmit, {}, {}, {}>({
    url: "/framework/access_code/join",
    method: "post",
    ...variables,
    signal
  });

export const usePostFrameworkAccessCodeJoin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FrameworkCodeRead,
      PostFrameworkAccessCodeJoinError,
      PostFrameworkAccessCodeJoinVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.FrameworkCodeRead,
    PostFrameworkAccessCodeJoinError,
    PostFrameworkAccessCodeJoinVariables
  >(
    (variables: PostFrameworkAccessCodeJoinVariables) =>
      fetchPostFrameworkAccessCodeJoin({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteFrameworkAccessCodeIDPathParams = {
  id: number;
};

export type DeleteFrameworkAccessCodeIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteFrameworkAccessCodeIDVariables = {
  pathParams: DeleteFrameworkAccessCodeIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteFrameworkAccessCodeID = (
  variables: DeleteFrameworkAccessCodeIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteFrameworkAccessCodeIDError, undefined, {}, {}, DeleteFrameworkAccessCodeIDPathParams>({
    url: "/framework/access_code/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteFrameworkAccessCodeID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteFrameworkAccessCodeIDError, DeleteFrameworkAccessCodeIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteFrameworkAccessCodeIDError, DeleteFrameworkAccessCodeIDVariables>(
    (variables: DeleteFrameworkAccessCodeIDVariables) =>
      fetchDeleteFrameworkAccessCodeID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostProgrammesTreeSpeciesSearchError = Fetcher.ErrorWrapper<undefined>;

export type PostProgrammesTreeSpeciesSearchVariables = {
  body?: Schemas.ProgrammeTreeSpeciesSearch;
} & ApiContext["fetcherOptions"];

export const fetchPostProgrammesTreeSpeciesSearch = (
  variables: PostProgrammesTreeSpeciesSearchVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.ProgrammeTreeSpeciesSearchAll,
    PostProgrammesTreeSpeciesSearchError,
    Schemas.ProgrammeTreeSpeciesSearch,
    {},
    {},
    {}
  >({ url: "/programmes/tree_species/search", method: "post", ...variables, signal });

export const usePostProgrammesTreeSpeciesSearch = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProgrammeTreeSpeciesSearchAll,
      PostProgrammesTreeSpeciesSearchError,
      PostProgrammesTreeSpeciesSearchVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.ProgrammeTreeSpeciesSearchAll,
    PostProgrammesTreeSpeciesSearchError,
    PostProgrammesTreeSpeciesSearchVariables
  >(
    (variables: PostProgrammesTreeSpeciesSearchVariables) =>
      fetchPostProgrammesTreeSpeciesSearch({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostProgrammeTreeSpeciesError = Fetcher.ErrorWrapper<undefined>;

export type PostProgrammeTreeSpeciesVariables = {
  body?: RequestBodies.ProgrammeTreeSpeciesSubmit;
} & ApiContext["fetcherOptions"];

export const fetchPostProgrammeTreeSpecies = (variables: PostProgrammeTreeSpeciesVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.ProgrammeTreeSpeciesReadAll,
    PostProgrammeTreeSpeciesError,
    RequestBodies.ProgrammeTreeSpeciesSubmit,
    {},
    {},
    {}
  >({ url: "/programme/tree_species", method: "post", ...variables, signal });

export const usePostProgrammeTreeSpecies = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProgrammeTreeSpeciesReadAll,
      PostProgrammeTreeSpeciesError,
      PostProgrammeTreeSpeciesVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.ProgrammeTreeSpeciesReadAll,
    PostProgrammeTreeSpeciesError,
    PostProgrammeTreeSpeciesVariables
  >(
    (variables: PostProgrammeTreeSpeciesVariables) =>
      fetchPostProgrammeTreeSpecies({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetProgrammesTreeSpeciesError = Fetcher.ErrorWrapper<undefined>;

export type GetProgrammesTreeSpeciesVariables = ApiContext["fetcherOptions"];

export const fetchGetProgrammesTreeSpecies = (variables: GetProgrammesTreeSpeciesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.AllProgrammesTreeSpecies, GetProgrammesTreeSpeciesError, undefined, {}, {}, {}>({
    url: "/programmes/tree_species",
    method: "get",
    ...variables,
    signal
  });

export const useGetProgrammesTreeSpecies = <TData = Schemas.AllProgrammesTreeSpecies>(
  variables: GetProgrammesTreeSpeciesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.AllProgrammesTreeSpecies, GetProgrammesTreeSpeciesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.AllProgrammesTreeSpecies, GetProgrammesTreeSpeciesError, TData>(
    queryKeyFn({ path: "/programmes/tree_species", operationId: "getProgrammesTreeSpecies", variables }),
    ({ signal }) => fetchGetProgrammesTreeSpecies({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostProgrammeIDTreeSpeciesManualPathParams = {
  id: number;
};

export type PostProgrammeIDTreeSpeciesManualError = Fetcher.ErrorWrapper<undefined>;

export type PostProgrammeIDTreeSpeciesManualVariables = {
  body?: RequestBodies.ProgrammeTreeSpeciesSubmit;
  pathParams: PostProgrammeIDTreeSpeciesManualPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostProgrammeIDTreeSpeciesManual = (
  variables: PostProgrammeIDTreeSpeciesManualVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.ProgrammeTreeSpeciesReadAll,
    PostProgrammeIDTreeSpeciesManualError,
    RequestBodies.ProgrammeTreeSpeciesSubmit,
    {},
    {},
    PostProgrammeIDTreeSpeciesManualPathParams
  >({ url: "/programme/{id}/tree_species/manual", method: "post", ...variables, signal });

export const usePostProgrammeIDTreeSpeciesManual = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProgrammeTreeSpeciesReadAll,
      PostProgrammeIDTreeSpeciesManualError,
      PostProgrammeIDTreeSpeciesManualVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.ProgrammeTreeSpeciesReadAll,
    PostProgrammeIDTreeSpeciesManualError,
    PostProgrammeIDTreeSpeciesManualVariables
  >(
    (variables: PostProgrammeIDTreeSpeciesManualVariables) =>
      fetchPostProgrammeIDTreeSpeciesManual({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostProgrammeTreeSpeciesCsvError = Fetcher.ErrorWrapper<undefined>;

export type PostProgrammeTreeSpeciesCsvVariables = {
  body?: RequestBodies.ProgrammeTreeSpeciesCsvSubmit;
} & ApiContext["fetcherOptions"];

export const fetchPostProgrammeTreeSpeciesCsv = (
  variables: PostProgrammeTreeSpeciesCsvVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.ProgrammeTreeSpeciesCsvRead,
    PostProgrammeTreeSpeciesCsvError,
    RequestBodies.ProgrammeTreeSpeciesCsvSubmit,
    {},
    {},
    {}
  >({ url: "/programme/tree_species/csv", method: "post", ...variables, signal });

export const usePostProgrammeTreeSpeciesCsv = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProgrammeTreeSpeciesCsvRead,
      PostProgrammeTreeSpeciesCsvError,
      PostProgrammeTreeSpeciesCsvVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.ProgrammeTreeSpeciesCsvRead,
    PostProgrammeTreeSpeciesCsvError,
    PostProgrammeTreeSpeciesCsvVariables
  >(
    (variables: PostProgrammeTreeSpeciesCsvVariables) =>
      fetchPostProgrammeTreeSpeciesCsv({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostProgrammeIDTreeSpeciesCsvPathParams = {
  id: number;
};

export type PostProgrammeIDTreeSpeciesCsvError = Fetcher.ErrorWrapper<undefined>;

export type PostProgrammeIDTreeSpeciesCsvVariables = {
  body?: RequestBodies.ProgrammeTreeSpeciesCsvSubmit;
  pathParams: PostProgrammeIDTreeSpeciesCsvPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostProgrammeIDTreeSpeciesCsv = (
  variables: PostProgrammeIDTreeSpeciesCsvVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.ProgrammeTreeSpeciesCsvRead,
    PostProgrammeIDTreeSpeciesCsvError,
    RequestBodies.ProgrammeTreeSpeciesCsvSubmit,
    {},
    {},
    PostProgrammeIDTreeSpeciesCsvPathParams
  >({ url: "/programme/{id}/tree_species/csv", method: "post", ...variables, signal });

export const usePostProgrammeIDTreeSpeciesCsv = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProgrammeTreeSpeciesCsvRead,
      PostProgrammeIDTreeSpeciesCsvError,
      PostProgrammeIDTreeSpeciesCsvVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.ProgrammeTreeSpeciesCsvRead,
    PostProgrammeIDTreeSpeciesCsvError,
    PostProgrammeIDTreeSpeciesCsvVariables
  >(
    (variables: PostProgrammeIDTreeSpeciesCsvVariables) =>
      fetchPostProgrammeIDTreeSpeciesCsv({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetProgrammeTreeSpeciesCsvIDPathParams = {
  id: number;
};

export type GetProgrammeTreeSpeciesCsvIDError = Fetcher.ErrorWrapper<undefined>;

export type GetProgrammeTreeSpeciesCsvIDVariables = {
  pathParams: GetProgrammeTreeSpeciesCsvIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetProgrammeTreeSpeciesCsvID = (
  variables: GetProgrammeTreeSpeciesCsvIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.ProgrammeTreeSpeciesCsvRead,
    GetProgrammeTreeSpeciesCsvIDError,
    undefined,
    {},
    {},
    GetProgrammeTreeSpeciesCsvIDPathParams
  >({ url: "/programme/tree_species/csv/{id}", method: "get", ...variables, signal });

export const useGetProgrammeTreeSpeciesCsvID = <TData = Schemas.ProgrammeTreeSpeciesCsvRead>(
  variables: GetProgrammeTreeSpeciesCsvIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ProgrammeTreeSpeciesCsvRead, GetProgrammeTreeSpeciesCsvIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.ProgrammeTreeSpeciesCsvRead, GetProgrammeTreeSpeciesCsvIDError, TData>(
    queryKeyFn({ path: "/programme/tree_species/csv/{ID}", operationId: "getProgrammeTreeSpeciesCsvID", variables }),
    ({ signal }) => fetchGetProgrammeTreeSpeciesCsvID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetProgrammeTreeSpeciesCsvIDTreesPathParams = {
  id: number;
};

export type GetProgrammeTreeSpeciesCsvIDTreesError = Fetcher.ErrorWrapper<undefined>;

export type GetProgrammeTreeSpeciesCsvIDTreesVariables = {
  pathParams: GetProgrammeTreeSpeciesCsvIDTreesPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetProgrammeTreeSpeciesCsvIDTrees = (
  variables: GetProgrammeTreeSpeciesCsvIDTreesVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.ProgrammeTreeSpeciesReadAll,
    GetProgrammeTreeSpeciesCsvIDTreesError,
    undefined,
    {},
    {},
    GetProgrammeTreeSpeciesCsvIDTreesPathParams
  >({ url: "/programme/tree_species/csv/{id}/trees", method: "get", ...variables, signal });

export const useGetProgrammeTreeSpeciesCsvIDTrees = <TData = Schemas.ProgrammeTreeSpeciesReadAll>(
  variables: GetProgrammeTreeSpeciesCsvIDTreesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ProgrammeTreeSpeciesReadAll, GetProgrammeTreeSpeciesCsvIDTreesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.ProgrammeTreeSpeciesReadAll, GetProgrammeTreeSpeciesCsvIDTreesError, TData>(
    queryKeyFn({
      path: "/programme/tree_species/csv/{ID}/trees",
      operationId: "getProgrammeTreeSpeciesCsvIDTrees",
      variables
    }),
    ({ signal }) => fetchGetProgrammeTreeSpeciesCsvIDTrees({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteProgrammeTreeSpeciesIDPathParams = {
  id: number;
};

export type DeleteProgrammeTreeSpeciesIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteProgrammeTreeSpeciesIDVariables = {
  pathParams: DeleteProgrammeTreeSpeciesIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteProgrammeTreeSpeciesID = (
  variables: DeleteProgrammeTreeSpeciesIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteProgrammeTreeSpeciesIDError, undefined, {}, {}, DeleteProgrammeTreeSpeciesIDPathParams>({
    url: "/programme/tree_species/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteProgrammeTreeSpeciesID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteProgrammeTreeSpeciesIDError, DeleteProgrammeTreeSpeciesIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteProgrammeTreeSpeciesIDError, DeleteProgrammeTreeSpeciesIDVariables>(
    (variables: DeleteProgrammeTreeSpeciesIDVariables) =>
      fetchDeleteProgrammeTreeSpeciesID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostProgrammeIDAimsPathParams = {
  id: number;
};

export type PostProgrammeIDAimsError = Fetcher.ErrorWrapper<undefined>;

export type PostProgrammeIDAimsVariables = {
  body?: Schemas.ProgrammeTargetsSubmit;
  pathParams: PostProgrammeIDAimsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostProgrammeIDAims = (variables: PostProgrammeIDAimsVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.ProgrammeTargetsRead,
    PostProgrammeIDAimsError,
    Schemas.ProgrammeTargetsSubmit,
    {},
    {},
    PostProgrammeIDAimsPathParams
  >({ url: "/programme/{id}/aims", method: "post", ...variables, signal });

export const usePostProgrammeIDAims = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.ProgrammeTargetsRead, PostProgrammeIDAimsError, PostProgrammeIDAimsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.ProgrammeTargetsRead, PostProgrammeIDAimsError, PostProgrammeIDAimsVariables>(
    (variables: PostProgrammeIDAimsVariables) => fetchPostProgrammeIDAims({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetProgrammeIDAimsPathParams = {
  id: number;
};

export type GetProgrammeIDAimsError = Fetcher.ErrorWrapper<undefined>;

export type GetProgrammeIDAimsVariables = {
  pathParams: GetProgrammeIDAimsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetProgrammeIDAims = (variables: GetProgrammeIDAimsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ProgrammeTargetsRead, GetProgrammeIDAimsError, undefined, {}, {}, GetProgrammeIDAimsPathParams>({
    url: "/programme/{id}/aims",
    method: "get",
    ...variables,
    signal
  });

export const useGetProgrammeIDAims = <TData = Schemas.ProgrammeTargetsRead>(
  variables: GetProgrammeIDAimsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ProgrammeTargetsRead, GetProgrammeIDAimsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.ProgrammeTargetsRead, GetProgrammeIDAimsError, TData>(
    queryKeyFn({ path: "/programme/{ID}/aims", operationId: "getProgrammeIDAims", variables }),
    ({ signal }) => fetchGetProgrammeIDAims({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetProgrammeIDSitesPathParams = {
  id: number;
};

export type GetProgrammeIDSitesQueryParams = {
  /**
   * Page number
   */
  page?: number;
};

export type GetProgrammeIDSitesError = Fetcher.ErrorWrapper<undefined>;

export type GetProgrammeIDSitesVariables = {
  pathParams: GetProgrammeIDSitesPathParams;
  queryParams?: GetProgrammeIDSitesQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetProgrammeIDSites = (variables: GetProgrammeIDSitesVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.SiteReadAllPaginated,
    GetProgrammeIDSitesError,
    undefined,
    {},
    GetProgrammeIDSitesQueryParams,
    GetProgrammeIDSitesPathParams
  >({ url: "/programme/{id}/sites", method: "get", ...variables, signal });

export const useGetProgrammeIDSites = <TData = Schemas.SiteReadAllPaginated>(
  variables: GetProgrammeIDSitesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SiteReadAllPaginated, GetProgrammeIDSitesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SiteReadAllPaginated, GetProgrammeIDSitesError, TData>(
    queryKeyFn({ path: "/programme/{ID}/sites", operationId: "getProgrammeIDSites", variables }),
    ({ signal }) => fetchGetProgrammeIDSites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetProgrammeIDAllSitesPathParams = {
  id: number;
};

export type GetProgrammeIDAllSitesError = Fetcher.ErrorWrapper<undefined>;

export type GetProgrammeIDAllSitesVariables = {
  pathParams: GetProgrammeIDAllSitesPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetProgrammeIDAllSites = (variables: GetProgrammeIDAllSitesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteReadAll, GetProgrammeIDAllSitesError, undefined, {}, {}, GetProgrammeIDAllSitesPathParams>({
    url: "/programme/{id}/all-sites",
    method: "get",
    ...variables,
    signal
  });

export const useGetProgrammeIDAllSites = <TData = Schemas.SiteReadAll>(
  variables: GetProgrammeIDAllSitesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SiteReadAll, GetProgrammeIDAllSitesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SiteReadAll, GetProgrammeIDAllSitesError, TData>(
    queryKeyFn({ path: "/programme/{ID}/all-sites", operationId: "getProgrammeIDAllSites", variables }),
    ({ signal }) => fetchGetProgrammeIDAllSites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostSiteError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteVariables = {
  body?: Schemas.SiteCreateSubmit;
} & ApiContext["fetcherOptions"];

export const fetchPostSite = (variables: PostSiteVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteRead, PostSiteError, Schemas.SiteCreateSubmit, {}, {}, {}>({
    url: "/site",
    method: "post",
    ...variables,
    signal
  });

export const usePostSite = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.SiteRead, PostSiteError, PostSiteVariables>, "mutationFn">
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.SiteRead, PostSiteError, PostSiteVariables>(
    (variables: PostSiteVariables) => fetchPostSite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetSitesQueryParams = {
  /**
   * Page number
   */
  page?: number;
  /**
   * Programme ID
   */
  programme_id?: number;
};

export type GetSitesError = Fetcher.ErrorWrapper<undefined>;

export type GetSitesVariables = {
  queryParams?: GetSitesQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetSites = (variables: GetSitesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteReadAllPaginated, GetSitesError, undefined, {}, GetSitesQueryParams, {}>({
    url: "/sites",
    method: "get",
    ...variables,
    signal
  });

export const useGetSites = <TData = Schemas.SiteReadAllPaginated>(
  variables: GetSitesVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.SiteReadAllPaginated, GetSitesError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SiteReadAllPaginated, GetSitesError, TData>(
    queryKeyFn({ path: "/sites", operationId: "getSites", variables }),
    ({ signal }) => fetchGetSites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetMySitesQueryParams = {
  /**
   * Page number
   */
  page?: number;
};

export type GetMySitesError = Fetcher.ErrorWrapper<undefined>;

export type GetMySitesVariables = {
  queryParams?: GetMySitesQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetMySites = (variables: GetMySitesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteReadAllPaginated, GetMySitesError, undefined, {}, GetMySitesQueryParams, {}>({
    url: "/my/sites",
    method: "get",
    ...variables,
    signal
  });

export const useGetMySites = <TData = Schemas.SiteReadAllPaginated>(
  variables: GetMySitesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SiteReadAllPaginated, GetMySitesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SiteReadAllPaginated, GetMySitesError, TData>(
    queryKeyFn({ path: "/my/sites", operationId: "getMySites", variables }),
    ({ signal }) => fetchGetMySites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetSiteIDOverviewPathParams = {
  id: number;
};

export type GetSiteIDOverviewError = Fetcher.ErrorWrapper<undefined>;

export type GetSiteIDOverviewVariables = {
  pathParams: GetSiteIDOverviewPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetSiteIDOverview = (variables: GetSiteIDOverviewVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteRead, GetSiteIDOverviewError, undefined, {}, {}, GetSiteIDOverviewPathParams>({
    url: "/site/{id}/overview",
    method: "get",
    ...variables,
    signal
  });

export const useGetSiteIDOverview = <TData = Schemas.SiteRead>(
  variables: GetSiteIDOverviewVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.SiteRead, GetSiteIDOverviewError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SiteRead, GetSiteIDOverviewError, TData>(
    queryKeyFn({ path: "/site/{ID}/overview", operationId: "getSiteIDOverview", variables }),
    ({ signal }) => fetchGetSiteIDOverview({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostSiteIDSeedsPathParams = {
  id: number;
};

export type PostSiteIDSeedsError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteIDSeedsVariables = {
  body?: Schemas.SeedDetailSubmit;
  pathParams: PostSiteIDSeedsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostSiteIDSeeds = (variables: PostSiteIDSeedsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SeedDetailRead, PostSiteIDSeedsError, Schemas.SeedDetailSubmit, {}, {}, PostSiteIDSeedsPathParams>({
    url: "/site/{id}/seeds",
    method: "post",
    ...variables,
    signal
  });

export const usePostSiteIDSeeds = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.SeedDetailRead, PostSiteIDSeedsError, PostSiteIDSeedsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.SeedDetailRead, PostSiteIDSeedsError, PostSiteIDSeedsVariables>(
    (variables: PostSiteIDSeedsVariables) => fetchPostSiteIDSeeds({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostSiteIDInvasivesPathParams = {
  id: number;
};

export type PostSiteIDInvasivesError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteIDInvasivesVariables = {
  body?: Schemas.InvasiveSubmit;
  pathParams: PostSiteIDInvasivesPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostSiteIDInvasives = (variables: PostSiteIDInvasivesVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.InvasiveRead,
    PostSiteIDInvasivesError,
    Schemas.InvasiveSubmit,
    {},
    {},
    PostSiteIDInvasivesPathParams
  >({ url: "/site/{id}/invasives", method: "post", ...variables, signal });

export const usePostSiteIDInvasives = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.InvasiveRead, PostSiteIDInvasivesError, PostSiteIDInvasivesVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.InvasiveRead, PostSiteIDInvasivesError, PostSiteIDInvasivesVariables>(
    (variables: PostSiteIDInvasivesVariables) => fetchPostSiteIDInvasives({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostSiteBoundaryError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteBoundaryVariables = {
  body?: Schemas.SiteAddBoundarySubmit;
} & ApiContext["fetcherOptions"];

export const fetchPostSiteBoundary = (variables: PostSiteBoundaryVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteRead, PostSiteBoundaryError, Schemas.SiteAddBoundarySubmit, {}, {}, {}>({
    url: "/site/boundary",
    method: "post",
    ...variables,
    signal
  });

export const usePostSiteBoundary = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.SiteRead, PostSiteBoundaryError, PostSiteBoundaryVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.SiteRead, PostSiteBoundaryError, PostSiteBoundaryVariables>(
    (variables: PostSiteBoundaryVariables) => fetchPostSiteBoundary({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostSiteIDNarrativePathParams = {
  id: number;
};

export type PostSiteIDNarrativeError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteIDNarrativeVariables = {
  body?: Schemas.NarrativeSubmit;
  pathParams: PostSiteIDNarrativePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostSiteIDNarrative = (variables: PostSiteIDNarrativeVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteRead, PostSiteIDNarrativeError, Schemas.NarrativeSubmit, {}, {}, PostSiteIDNarrativePathParams>({
    url: "/site/{id}/narrative",
    method: "post",
    ...variables,
    signal
  });

export const usePostSiteIDNarrative = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.SiteRead, PostSiteIDNarrativeError, PostSiteIDNarrativeVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.SiteRead, PostSiteIDNarrativeError, PostSiteIDNarrativeVariables>(
    (variables: PostSiteIDNarrativeVariables) => fetchPostSiteIDNarrative({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostSiteIDRestorationMethodsPathParams = {
  id: number;
};

export type PostSiteIDRestorationMethodsError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteIDRestorationMethodsVariables = {
  body?: Schemas.SiteRestorationMethodsSubmit;
  pathParams: PostSiteIDRestorationMethodsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostSiteIDRestorationMethods = (
  variables: PostSiteIDRestorationMethodsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SiteRead,
    PostSiteIDRestorationMethodsError,
    Schemas.SiteRestorationMethodsSubmit,
    {},
    {},
    PostSiteIDRestorationMethodsPathParams
  >({ url: "/site/{id}/restoration_methods", method: "post", ...variables, signal });

export const usePostSiteIDRestorationMethods = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SiteRead,
      PostSiteIDRestorationMethodsError,
      PostSiteIDRestorationMethodsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SiteRead,
    PostSiteIDRestorationMethodsError,
    PostSiteIDRestorationMethodsVariables
  >(
    (variables: PostSiteIDRestorationMethodsVariables) =>
      fetchPostSiteIDRestorationMethods({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostSiteIDEstablishmentDatePathParams = {
  id: number;
};

export type PostSiteIDEstablishmentDateError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteIDEstablishmentDateVariables = {
  body?: Schemas.EstablishmentDateSubmit;
  pathParams: PostSiteIDEstablishmentDatePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostSiteIDEstablishmentDate = (
  variables: PostSiteIDEstablishmentDateVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SiteRead,
    PostSiteIDEstablishmentDateError,
    Schemas.EstablishmentDateSubmit,
    {},
    {},
    PostSiteIDEstablishmentDatePathParams
  >({ url: "/site/{id}/establishment_date", method: "post", ...variables, signal });

export const usePostSiteIDEstablishmentDate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SiteRead,
      PostSiteIDEstablishmentDateError,
      PostSiteIDEstablishmentDateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SiteRead,
    PostSiteIDEstablishmentDateError,
    PostSiteIDEstablishmentDateVariables
  >(
    (variables: PostSiteIDEstablishmentDateVariables) =>
      fetchPostSiteIDEstablishmentDate({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostSiteIDLandTenurePathParams = {
  id: number;
};

export type PostSiteIDLandTenureError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteIDLandTenureVariables = {
  body?: Schemas.LandTenureSubmit;
  pathParams: PostSiteIDLandTenurePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostSiteIDLandTenure = (variables: PostSiteIDLandTenureVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.SiteRead,
    PostSiteIDLandTenureError,
    Schemas.LandTenureSubmit,
    {},
    {},
    PostSiteIDLandTenurePathParams
  >({ url: "/site/{id}/land_tenure", method: "post", ...variables, signal });

export const usePostSiteIDLandTenure = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.SiteRead, PostSiteIDLandTenureError, PostSiteIDLandTenureVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.SiteRead, PostSiteIDLandTenureError, PostSiteIDLandTenureVariables>(
    (variables: PostSiteIDLandTenureVariables) => fetchPostSiteIDLandTenure({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostSiteIDAimsPathParams = {
  id: number;
};

export type PostSiteIDAimsError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteIDAimsVariables = {
  body?: Schemas.SiteAimSubmit;
  pathParams: PostSiteIDAimsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostSiteIDAims = (variables: PostSiteIDAimsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteRead, PostSiteIDAimsError, Schemas.SiteAimSubmit, {}, {}, PostSiteIDAimsPathParams>({
    url: "/site/{id}/aims",
    method: "post",
    ...variables,
    signal
  });

export const usePostSiteIDAims = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.SiteRead, PostSiteIDAimsError, PostSiteIDAimsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.SiteRead, PostSiteIDAimsError, PostSiteIDAimsVariables>(
    (variables: PostSiteIDAimsVariables) => fetchPostSiteIDAims({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostSiteSubmissionError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteSubmissionVariables = {
  body?: Schemas.SiteSubmissionSubmit;
} & ApiContext["fetcherOptions"];

export const fetchPostSiteSubmission = (variables: PostSiteSubmissionVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteSubmissionRead, PostSiteSubmissionError, Schemas.SiteSubmissionSubmit, {}, {}, {}>({
    url: "/site/submission",
    method: "post",
    ...variables,
    signal
  });

export const usePostSiteSubmission = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.SiteSubmissionRead, PostSiteSubmissionError, PostSiteSubmissionVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.SiteSubmissionRead, PostSiteSubmissionError, PostSiteSubmissionVariables>(
    (variables: PostSiteSubmissionVariables) => fetchPostSiteSubmission({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetSiteIDSubmissionsPathParams = {
  id: number;
};

export type GetSiteIDSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetSiteIDSubmissionsVariables = {
  pathParams: GetSiteIDSubmissionsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetSiteIDSubmissions = (variables: GetSiteIDSubmissionsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteSubmissionReadAll, GetSiteIDSubmissionsError, undefined, {}, {}, GetSiteIDSubmissionsPathParams>(
    { url: "/site/{id}/submissions", method: "get", ...variables, signal }
  );

export const useGetSiteIDSubmissions = <TData = Schemas.SiteSubmissionReadAll>(
  variables: GetSiteIDSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SiteSubmissionReadAll, GetSiteIDSubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SiteSubmissionReadAll, GetSiteIDSubmissionsError, TData>(
    queryKeyFn({ path: "/site/{ID}/submissions", operationId: "getSiteIDSubmissions", variables }),
    ({ signal }) => fetchGetSiteIDSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetSiteSubmissionIDPathParams = {
  id: number;
};

export type GetSiteSubmissionIDError = Fetcher.ErrorWrapper<undefined>;

export type GetSiteSubmissionIDVariables = {
  pathParams: GetSiteSubmissionIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetSiteSubmissionID = (variables: GetSiteSubmissionIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteSubmissionRead, GetSiteSubmissionIDError, undefined, {}, {}, GetSiteSubmissionIDPathParams>({
    url: "/site/submission/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetSiteSubmissionID = <TData = Schemas.SiteSubmissionRead>(
  variables: GetSiteSubmissionIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SiteSubmissionRead, GetSiteSubmissionIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SiteSubmissionRead, GetSiteSubmissionIDError, TData>(
    queryKeyFn({ path: "/site/submission/{ID}", operationId: "getSiteSubmissionID", variables }),
    ({ signal }) => fetchGetSiteSubmissionID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchSiteSubmissionIDPathParams = {
  id: number;
};

export type PatchSiteSubmissionIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchSiteSubmissionIDVariables = {
  body?: Schemas.SiteSubmissionUpdate;
  pathParams: PatchSiteSubmissionIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchSiteSubmissionID = (variables: PatchSiteSubmissionIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.SiteSubmissionRead,
    PatchSiteSubmissionIDError,
    Schemas.SiteSubmissionUpdate,
    {},
    {},
    PatchSiteSubmissionIDPathParams
  >({ url: "/site/submission/{id}", method: "patch", ...variables, signal });

export const usePatchSiteSubmissionID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SiteSubmissionRead,
      PatchSiteSubmissionIDError,
      PatchSiteSubmissionIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.SiteSubmissionRead, PatchSiteSubmissionIDError, PatchSiteSubmissionIDVariables>(
    (variables: PatchSiteSubmissionIDVariables) => fetchPatchSiteSubmissionID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetProgrammeSubmissionDueError = Fetcher.ErrorWrapper<undefined>;

export type GetProgrammeSubmissionDueVariables = ApiContext["fetcherOptions"];

export const fetchGetProgrammeSubmissionDue = (variables: GetProgrammeSubmissionDueVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DueSubmissionReadAll, GetProgrammeSubmissionDueError, undefined, {}, {}, {}>({
    url: "/programme/submission/due",
    method: "get",
    ...variables,
    signal
  });

export const useGetProgrammeSubmissionDue = <TData = Schemas.DueSubmissionReadAll>(
  variables: GetProgrammeSubmissionDueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.DueSubmissionReadAll, GetProgrammeSubmissionDueError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DueSubmissionReadAll, GetProgrammeSubmissionDueError, TData>(
    queryKeyFn({ path: "/programme/submission/due", operationId: "getProgrammeSubmissionDue", variables }),
    ({ signal }) => fetchGetProgrammeSubmissionDue({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetSiteSubmissionDueError = Fetcher.ErrorWrapper<undefined>;

export type GetSiteSubmissionDueVariables = ApiContext["fetcherOptions"];

export const fetchGetSiteSubmissionDue = (variables: GetSiteSubmissionDueVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DueSubmissionReadAll, GetSiteSubmissionDueError, undefined, {}, {}, {}>({
    url: "/site/submission/due",
    method: "get",
    ...variables,
    signal
  });

export const useGetSiteSubmissionDue = <TData = Schemas.DueSubmissionReadAll>(
  variables: GetSiteSubmissionDueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.DueSubmissionReadAll, GetSiteSubmissionDueError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.DueSubmissionReadAll, GetSiteSubmissionDueError, TData>(
    queryKeyFn({ path: "/site/submission/due", operationId: "getSiteSubmissionDue", variables }),
    ({ signal }) => fetchGetSiteSubmissionDue({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundSubmissionsDueError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundSubmissionsDueVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundSubmissionsDue = (variables: GetTerrafundSubmissionsDueVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TerrafundDueSubmissionByProgrammeReadAll, GetTerrafundSubmissionsDueError, undefined, {}, {}, {}>({
    url: "/terrafund/submissions/due",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundSubmissionsDue = <TData = Schemas.TerrafundDueSubmissionByProgrammeReadAll>(
  variables: GetTerrafundSubmissionsDueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TerrafundDueSubmissionByProgrammeReadAll,
      GetTerrafundSubmissionsDueError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundDueSubmissionByProgrammeReadAll, GetTerrafundSubmissionsDueError, TData>(
    queryKeyFn({ path: "/terrafund/submissions/due", operationId: "getTerrafundSubmissionsDue", variables }),
    ({ signal }) => fetchGetTerrafundSubmissionsDue({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetPendingProgrammeError = Fetcher.ErrorWrapper<undefined>;

export type GetPendingProgrammeVariables = ApiContext["fetcherOptions"];

export const fetchGetPendingProgramme = (variables: GetPendingProgrammeVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ProgrammePendingRead, GetPendingProgrammeError, undefined, {}, {}, {}>({
    url: "/pending/programme",
    method: "get",
    ...variables,
    signal
  });

export const useGetPendingProgramme = <TData = Schemas.ProgrammePendingRead>(
  variables: GetPendingProgrammeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ProgrammePendingRead, GetPendingProgrammeError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.ProgrammePendingRead, GetPendingProgrammeError, TData>(
    queryKeyFn({ path: "/pending/programme", operationId: "getPendingProgramme", variables }),
    ({ signal }) => fetchGetPendingProgramme({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetPendingSiteError = Fetcher.ErrorWrapper<undefined>;

export type GetPendingSiteVariables = ApiContext["fetcherOptions"];

export const fetchGetPendingSite = (variables: GetPendingSiteVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SitePendingRead, GetPendingSiteError, undefined, {}, {}, {}>({
    url: "/pending/site",
    method: "get",
    ...variables,
    signal
  });

export const useGetPendingSite = <TData = Schemas.SitePendingRead>(
  variables: GetPendingSiteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SitePendingRead, GetPendingSiteError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SitePendingRead, GetPendingSiteError, TData>(
    queryKeyFn({ path: "/pending/site", operationId: "getPendingSite", variables }),
    ({ signal }) => fetchGetPendingSite({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostSiteSubmissionDisturbanceError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteSubmissionDisturbanceVariables = {
  body?: Schemas.SiteSubmissionDisturbanceSubmit;
} & ApiContext["fetcherOptions"];

export const fetchPostSiteSubmissionDisturbance = (
  variables: PostSiteSubmissionDisturbanceVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SiteSubmissionDisturbanceRead,
    PostSiteSubmissionDisturbanceError,
    Schemas.SiteSubmissionDisturbanceSubmit,
    {},
    {},
    {}
  >({ url: "/site/submission/disturbance", method: "post", ...variables, signal });

export const usePostSiteSubmissionDisturbance = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SiteSubmissionDisturbanceRead,
      PostSiteSubmissionDisturbanceError,
      PostSiteSubmissionDisturbanceVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SiteSubmissionDisturbanceRead,
    PostSiteSubmissionDisturbanceError,
    PostSiteSubmissionDisturbanceVariables
  >(
    (variables: PostSiteSubmissionDisturbanceVariables) =>
      fetchPostSiteSubmissionDisturbance({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutSiteSubmissionDisturbanceIDPathParams = {
  id: number;
};

export type PutSiteSubmissionDisturbanceIDError = Fetcher.ErrorWrapper<undefined>;

export type PutSiteSubmissionDisturbanceIDVariables = {
  body?: Schemas.SiteSubmissionDisturbanceUpdate;
  pathParams: PutSiteSubmissionDisturbanceIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutSiteSubmissionDisturbanceID = (
  variables: PutSiteSubmissionDisturbanceIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SiteSubmissionDisturbanceRead,
    PutSiteSubmissionDisturbanceIDError,
    Schemas.SiteSubmissionDisturbanceUpdate,
    {},
    {},
    PutSiteSubmissionDisturbanceIDPathParams
  >({ url: "/site/submission/disturbance/{id}", method: "put", ...variables, signal });

export const usePutSiteSubmissionDisturbanceID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SiteSubmissionDisturbanceRead,
      PutSiteSubmissionDisturbanceIDError,
      PutSiteSubmissionDisturbanceIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SiteSubmissionDisturbanceRead,
    PutSiteSubmissionDisturbanceIDError,
    PutSiteSubmissionDisturbanceIDVariables
  >(
    (variables: PutSiteSubmissionDisturbanceIDVariables) =>
      fetchPutSiteSubmissionDisturbanceID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteSiteSubmissionDisturbanceIDPathParams = {
  id: number;
};

export type DeleteSiteSubmissionDisturbanceIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteSiteSubmissionDisturbanceIDVariables = {
  pathParams: DeleteSiteSubmissionDisturbanceIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteSiteSubmissionDisturbanceID = (
  variables: DeleteSiteSubmissionDisturbanceIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteSiteSubmissionDisturbanceIDError,
    undefined,
    {},
    {},
    DeleteSiteSubmissionDisturbanceIDPathParams
  >({ url: "/site/submission/disturbance/{id}", method: "delete", ...variables, signal });

export const useDeleteSiteSubmissionDisturbanceID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteSiteSubmissionDisturbanceIDError,
      DeleteSiteSubmissionDisturbanceIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteSiteSubmissionDisturbanceIDError,
    DeleteSiteSubmissionDisturbanceIDVariables
  >(
    (variables: DeleteSiteSubmissionDisturbanceIDVariables) =>
      fetchDeleteSiteSubmissionDisturbanceID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostSiteSubmissionDisturbanceInformationError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteSubmissionDisturbanceInformationVariables = {
  body?: Schemas.SiteSubmissionDisturbanceInformationSubmit;
} & ApiContext["fetcherOptions"];

export const fetchPostSiteSubmissionDisturbanceInformation = (
  variables: PostSiteSubmissionDisturbanceInformationVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SiteSubmissionRead,
    PostSiteSubmissionDisturbanceInformationError,
    Schemas.SiteSubmissionDisturbanceInformationSubmit,
    {},
    {},
    {}
  >({ url: "/site/submission/disturbance_information", method: "post", ...variables, signal });

export const usePostSiteSubmissionDisturbanceInformation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SiteSubmissionRead,
      PostSiteSubmissionDisturbanceInformationError,
      PostSiteSubmissionDisturbanceInformationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SiteSubmissionRead,
    PostSiteSubmissionDisturbanceInformationError,
    PostSiteSubmissionDisturbanceInformationVariables
  >(
    (variables: PostSiteSubmissionDisturbanceInformationVariables) =>
      fetchPostSiteSubmissionDisturbanceInformation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutSiteSubmissionDisturbanceInformationIDPathParams = {
  id: number;
};

export type PutSiteSubmissionDisturbanceInformationIDError = Fetcher.ErrorWrapper<undefined>;

export type PutSiteSubmissionDisturbanceInformationIDVariables = {
  body?: Schemas.SiteSubmissionDisturbanceInformationUpdate;
  pathParams: PutSiteSubmissionDisturbanceInformationIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutSiteSubmissionDisturbanceInformationID = (
  variables: PutSiteSubmissionDisturbanceInformationIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SiteSubmissionRead,
    PutSiteSubmissionDisturbanceInformationIDError,
    Schemas.SiteSubmissionDisturbanceInformationUpdate,
    {},
    {},
    PutSiteSubmissionDisturbanceInformationIDPathParams
  >({ url: "/site/submission/disturbance_information/{id}", method: "put", ...variables, signal });

export const usePutSiteSubmissionDisturbanceInformationID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SiteSubmissionRead,
      PutSiteSubmissionDisturbanceInformationIDError,
      PutSiteSubmissionDisturbanceInformationIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SiteSubmissionRead,
    PutSiteSubmissionDisturbanceInformationIDError,
    PutSiteSubmissionDisturbanceInformationIDVariables
  >(
    (variables: PutSiteSubmissionDisturbanceInformationIDVariables) =>
      fetchPutSiteSubmissionDisturbanceInformationID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteSiteSubmissionDisturbanceInformationIDPathParams = {
  id: number;
};

export type DeleteSiteSubmissionDisturbanceInformationIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteSiteSubmissionDisturbanceInformationIDVariables = {
  pathParams: DeleteSiteSubmissionDisturbanceInformationIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteSiteSubmissionDisturbanceInformationID = (
  variables: DeleteSiteSubmissionDisturbanceInformationIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteSiteSubmissionDisturbanceInformationIDError,
    undefined,
    {},
    {},
    DeleteSiteSubmissionDisturbanceInformationIDPathParams
  >({ url: "/site/submission/disturbance_information/{id}", method: "delete", ...variables, signal });

export const useDeleteSiteSubmissionDisturbanceInformationID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteSiteSubmissionDisturbanceInformationIDError,
      DeleteSiteSubmissionDisturbanceInformationIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteSiteSubmissionDisturbanceInformationIDError,
    DeleteSiteSubmissionDisturbanceInformationIDVariables
  >(
    (variables: DeleteSiteSubmissionDisturbanceInformationIDVariables) =>
      fetchDeleteSiteSubmissionDisturbanceInformationID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetSiteRestorationMethodsError = Fetcher.ErrorWrapper<undefined>;

export type GetSiteRestorationMethodsVariables = ApiContext["fetcherOptions"];

export const fetchGetSiteRestorationMethods = (variables: GetSiteRestorationMethodsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteRestorationMethodReadAll, GetSiteRestorationMethodsError, undefined, {}, {}, {}>({
    url: "/site/restoration_methods",
    method: "get",
    ...variables,
    signal
  });

export const useGetSiteRestorationMethods = <TData = Schemas.SiteRestorationMethodReadAll>(
  variables: GetSiteRestorationMethodsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SiteRestorationMethodReadAll, GetSiteRestorationMethodsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SiteRestorationMethodReadAll, GetSiteRestorationMethodsError, TData>(
    queryKeyFn({ path: "/site/restoration_methods", operationId: "getSiteRestorationMethods", variables }),
    ({ signal }) => fetchGetSiteRestorationMethods({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetSiteLandTenuresError = Fetcher.ErrorWrapper<undefined>;

export type GetSiteLandTenuresVariables = ApiContext["fetcherOptions"];

export const fetchGetSiteLandTenures = (variables: GetSiteLandTenuresVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.LandTenureReadAll, GetSiteLandTenuresError, undefined, {}, {}, {}>({
    url: "/site/land_tenures",
    method: "get",
    ...variables,
    signal
  });

export const useGetSiteLandTenures = <TData = Schemas.LandTenureReadAll>(
  variables: GetSiteLandTenuresVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.LandTenureReadAll, GetSiteLandTenuresError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.LandTenureReadAll, GetSiteLandTenuresError, TData>(
    queryKeyFn({ path: "/site/land_tenures", operationId: "getSiteLandTenures", variables }),
    ({ signal }) => fetchGetSiteLandTenures({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteSiteTreeSpeciesIDPathParams = {
  id: number;
};

export type DeleteSiteTreeSpeciesIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteSiteTreeSpeciesIDVariables = {
  pathParams: DeleteSiteTreeSpeciesIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteSiteTreeSpeciesID = (variables: DeleteSiteTreeSpeciesIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteSiteTreeSpeciesIDError, undefined, {}, {}, DeleteSiteTreeSpeciesIDPathParams>({
    url: "/site/tree_species/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteSiteTreeSpeciesID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteSiteTreeSpeciesIDError, DeleteSiteTreeSpeciesIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteSiteTreeSpeciesIDError, DeleteSiteTreeSpeciesIDVariables>(
    (variables: DeleteSiteTreeSpeciesIDVariables) => fetchDeleteSiteTreeSpeciesID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostSiteIDTreeSpeciesCsvPathParams = {
  id: number;
};

export type PostSiteIDTreeSpeciesCsvError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteIDTreeSpeciesCsvVariables = {
  body?: Schemas.SiteTreeSpeciesCsvSubmit;
  pathParams: PostSiteIDTreeSpeciesCsvPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostSiteIDTreeSpeciesCsv = (variables: PostSiteIDTreeSpeciesCsvVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.SiteTreeSpeciesCsvRead,
    PostSiteIDTreeSpeciesCsvError,
    Schemas.SiteTreeSpeciesCsvSubmit,
    {},
    {},
    PostSiteIDTreeSpeciesCsvPathParams
  >({ url: "/site/{id}/tree_species/csv", method: "post", ...variables, signal });

export const usePostSiteIDTreeSpeciesCsv = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SiteTreeSpeciesCsvRead,
      PostSiteIDTreeSpeciesCsvError,
      PostSiteIDTreeSpeciesCsvVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SiteTreeSpeciesCsvRead,
    PostSiteIDTreeSpeciesCsvError,
    PostSiteIDTreeSpeciesCsvVariables
  >(
    (variables: PostSiteIDTreeSpeciesCsvVariables) =>
      fetchPostSiteIDTreeSpeciesCsv({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetSitesTreeSpeciesError = Fetcher.ErrorWrapper<undefined>;

export type GetSitesTreeSpeciesVariables = ApiContext["fetcherOptions"];

export const fetchGetSitesTreeSpecies = (variables: GetSitesTreeSpeciesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.AllSiteTreeSpecies, GetSitesTreeSpeciesError, undefined, {}, {}, {}>({
    url: "/sites/tree_species",
    method: "get",
    ...variables,
    signal
  });

export const useGetSitesTreeSpecies = <TData = Schemas.AllSiteTreeSpecies>(
  variables: GetSitesTreeSpeciesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.AllSiteTreeSpecies, GetSitesTreeSpeciesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.AllSiteTreeSpecies, GetSitesTreeSpeciesError, TData>(
    queryKeyFn({ path: "/sites/tree_species", operationId: "getSitesTreeSpecies", variables }),
    ({ signal }) => fetchGetSitesTreeSpecies({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostSiteIDTreeSpeciesManualPathParams = {
  id: number;
};

export type PostSiteIDTreeSpeciesManualError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteIDTreeSpeciesManualVariables = {
  body?: Schemas.SiteTreeSpeciesManualSubmit;
  pathParams: PostSiteIDTreeSpeciesManualPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostSiteIDTreeSpeciesManual = (
  variables: PostSiteIDTreeSpeciesManualVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SiteTreeSpeciesManualRead,
    PostSiteIDTreeSpeciesManualError,
    Schemas.SiteTreeSpeciesManualSubmit,
    {},
    {},
    PostSiteIDTreeSpeciesManualPathParams
  >({ url: "/site/{id}/tree_species/manual", method: "post", ...variables, signal });

export const usePostSiteIDTreeSpeciesManual = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SiteTreeSpeciesManualRead,
      PostSiteIDTreeSpeciesManualError,
      PostSiteIDTreeSpeciesManualVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SiteTreeSpeciesManualRead,
    PostSiteIDTreeSpeciesManualError,
    PostSiteIDTreeSpeciesManualVariables
  >(
    (variables: PostSiteIDTreeSpeciesManualVariables) =>
      fetchPostSiteIDTreeSpeciesManual({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetSiteTreeSpeciesCsvIDPathParams = {
  id: number;
};

export type GetSiteTreeSpeciesCsvIDError = Fetcher.ErrorWrapper<undefined>;

export type GetSiteTreeSpeciesCsvIDVariables = {
  pathParams: GetSiteTreeSpeciesCsvIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetSiteTreeSpeciesCsvID = (variables: GetSiteTreeSpeciesCsvIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.SiteTreeSpeciesCsvRead,
    GetSiteTreeSpeciesCsvIDError,
    undefined,
    {},
    {},
    GetSiteTreeSpeciesCsvIDPathParams
  >({ url: "/site/tree_species/csv/{id}", method: "get", ...variables, signal });

export const useGetSiteTreeSpeciesCsvID = <TData = Schemas.SiteTreeSpeciesCsvRead>(
  variables: GetSiteTreeSpeciesCsvIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SiteTreeSpeciesCsvRead, GetSiteTreeSpeciesCsvIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SiteTreeSpeciesCsvRead, GetSiteTreeSpeciesCsvIDError, TData>(
    queryKeyFn({ path: "/site/tree_species/csv/{ID}", operationId: "getSiteTreeSpeciesCsvID", variables }),
    ({ signal }) => fetchGetSiteTreeSpeciesCsvID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetSiteTreeSpeciesCsvIDTreesPathParams = {
  id: number;
};

export type GetSiteTreeSpeciesCsvIDTreesError = Fetcher.ErrorWrapper<undefined>;

export type GetSiteTreeSpeciesCsvIDTreesVariables = {
  pathParams: GetSiteTreeSpeciesCsvIDTreesPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetSiteTreeSpeciesCsvIDTrees = (
  variables: GetSiteTreeSpeciesCsvIDTreesVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SiteTreeSpeciesReadAll,
    GetSiteTreeSpeciesCsvIDTreesError,
    undefined,
    {},
    {},
    GetSiteTreeSpeciesCsvIDTreesPathParams
  >({ url: "/site/tree_species/csv/{id}/trees", method: "get", ...variables, signal });

export const useGetSiteTreeSpeciesCsvIDTrees = <TData = Schemas.SiteTreeSpeciesReadAll>(
  variables: GetSiteTreeSpeciesCsvIDTreesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SiteTreeSpeciesReadAll, GetSiteTreeSpeciesCsvIDTreesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SiteTreeSpeciesReadAll, GetSiteTreeSpeciesCsvIDTreesError, TData>(
    queryKeyFn({ path: "/site/tree_species/csv/{ID}/trees", operationId: "getSiteTreeSpeciesCsvIDTrees", variables }),
    ({ signal }) => fetchGetSiteTreeSpeciesCsvIDTrees({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostProgrammeIDInvitePathParams = {
  id: number;
};

export type PostProgrammeIDInviteError = Fetcher.ErrorWrapper<undefined>;

export type PostProgrammeIDInviteVariables = {
  body?: Schemas.ProgrammeInviteSubmit;
  pathParams: PostProgrammeIDInvitePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostProgrammeIDInvite = (variables: PostProgrammeIDInviteVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.ProgrammeInviteRead,
    PostProgrammeIDInviteError,
    Schemas.ProgrammeInviteSubmit,
    {},
    {},
    PostProgrammeIDInvitePathParams
  >({ url: "/programme/{id}/invite", method: "post", ...variables, signal });

export const usePostProgrammeIDInvite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProgrammeInviteRead,
      PostProgrammeIDInviteError,
      PostProgrammeIDInviteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.ProgrammeInviteRead,
    PostProgrammeIDInviteError,
    PostProgrammeIDInviteVariables
  >(
    (variables: PostProgrammeIDInviteVariables) => fetchPostProgrammeIDInvite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteProgrammeInviteIDPathParams = {
  id: number;
};

export type DeleteProgrammeInviteIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteProgrammeInviteIDVariables = {
  pathParams: DeleteProgrammeInviteIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteProgrammeInviteID = (variables: DeleteProgrammeInviteIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteProgrammeInviteIDError, undefined, {}, {}, DeleteProgrammeInviteIDPathParams>({
    url: "/programme/invite/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteProgrammeInviteID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteProgrammeInviteIDError, DeleteProgrammeInviteIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteProgrammeInviteIDError, DeleteProgrammeInviteIDVariables>(
    (variables: DeleteProgrammeInviteIDVariables) => fetchDeleteProgrammeInviteID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostProgrammeInviteAcceptError = Fetcher.ErrorWrapper<undefined>;

export type PostProgrammeInviteAcceptVariables = {
  body?: Schemas.ProgrammeAccept;
} & ApiContext["fetcherOptions"];

export const fetchPostProgrammeInviteAccept = (variables: PostProgrammeInviteAcceptVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ProgrammeInviteRead, PostProgrammeInviteAcceptError, Schemas.ProgrammeAccept, {}, {}, {}>({
    url: "/programme/invite/accept",
    method: "post",
    ...variables,
    signal
  });

export const usePostProgrammeInviteAccept = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProgrammeInviteRead,
      PostProgrammeInviteAcceptError,
      PostProgrammeInviteAcceptVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.ProgrammeInviteRead,
    PostProgrammeInviteAcceptError,
    PostProgrammeInviteAcceptVariables
  >(
    (variables: PostProgrammeInviteAcceptVariables) =>
      fetchPostProgrammeInviteAccept({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetProgrammeProgrammePartnersPathParams = {
  programme: number;
};

export type GetProgrammeProgrammePartnersError = Fetcher.ErrorWrapper<undefined>;

export type GetProgrammeProgrammePartnersVariables = {
  pathParams: GetProgrammeProgrammePartnersPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetProgrammeProgrammePartners = (
  variables: GetProgrammeProgrammePartnersVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.UserReadAll,
    GetProgrammeProgrammePartnersError,
    undefined,
    {},
    {},
    GetProgrammeProgrammePartnersPathParams
  >({ url: "/programme/{programme}/partners", method: "get", ...variables, signal });

export const useGetProgrammeProgrammePartners = <TData = Schemas.UserReadAll>(
  variables: GetProgrammeProgrammePartnersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.UserReadAll, GetProgrammeProgrammePartnersError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.UserReadAll, GetProgrammeProgrammePartnersError, TData>(
    queryKeyFn({ path: "/programme/{programme}/partners", operationId: "getProgrammeProgrammePartners", variables }),
    ({ signal }) => fetchGetProgrammeProgrammePartners({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteProgrammeInviteRemoveError = Fetcher.ErrorWrapper<undefined>;

export type DeleteProgrammeInviteRemoveVariables = {
  body?: Schemas.ProgrammeRemove;
} & ApiContext["fetcherOptions"];

export const fetchDeleteProgrammeInviteRemove = (
  variables: DeleteProgrammeInviteRemoveVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.Empty, DeleteProgrammeInviteRemoveError, Schemas.ProgrammeRemove, {}, {}, {}>({
    url: "/programme/invite/remove",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteProgrammeInviteRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Empty,
      DeleteProgrammeInviteRemoveError,
      DeleteProgrammeInviteRemoveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.Empty, DeleteProgrammeInviteRemoveError, DeleteProgrammeInviteRemoveVariables>(
    (variables: DeleteProgrammeInviteRemoveVariables) =>
      fetchDeleteProgrammeInviteRemove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostProgrammeBoundaryError = Fetcher.ErrorWrapper<undefined>;

export type PostProgrammeBoundaryVariables = {
  body?: Schemas.ProgrammeAddBoundary;
} & ApiContext["fetcherOptions"];

export const fetchPostProgrammeBoundary = (variables: PostProgrammeBoundaryVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ProgrammeBoundary, PostProgrammeBoundaryError, Schemas.ProgrammeAddBoundary, {}, {}, {}>({
    url: "/programme/boundary",
    method: "post",
    ...variables,
    signal
  });

export const usePostProgrammeBoundary = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProgrammeBoundary,
      PostProgrammeBoundaryError,
      PostProgrammeBoundaryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.ProgrammeBoundary, PostProgrammeBoundaryError, PostProgrammeBoundaryVariables>(
    (variables: PostProgrammeBoundaryVariables) => fetchPostProgrammeBoundary({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetProgrammeIDOverviewPathParams = {
  id: number;
};

export type GetProgrammeIDOverviewError = Fetcher.ErrorWrapper<undefined>;

export type GetProgrammeIDOverviewVariables = {
  pathParams: GetProgrammeIDOverviewPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetProgrammeIDOverview = (variables: GetProgrammeIDOverviewVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.ProgrammeOverviewRead,
    GetProgrammeIDOverviewError,
    undefined,
    {},
    {},
    GetProgrammeIDOverviewPathParams
  >({ url: "/programme/{id}/overview", method: "get", ...variables, signal });

export const useGetProgrammeIDOverview = <TData = Schemas.ProgrammeOverviewRead>(
  variables: GetProgrammeIDOverviewVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ProgrammeOverviewRead, GetProgrammeIDOverviewError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.ProgrammeOverviewRead, GetProgrammeIDOverviewError, TData>(
    queryKeyFn({ path: "/programme/{ID}/overview", operationId: "getProgrammeIDOverview", variables }),
    ({ signal }) => fetchGetProgrammeIDOverview({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetProgrammeIDSubmissionsPathParams = {
  id: number;
};

export type GetProgrammeIDSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetProgrammeIDSubmissionsVariables = {
  pathParams: GetProgrammeIDSubmissionsPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetProgrammeIDSubmissions = (variables: GetProgrammeIDSubmissionsVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.SubmissionReadAll,
    GetProgrammeIDSubmissionsError,
    undefined,
    {},
    {},
    GetProgrammeIDSubmissionsPathParams
  >({ url: "/programme/{id}/submissions", method: "get", ...variables, signal });

export const useGetProgrammeIDSubmissions = <TData = Schemas.SubmissionReadAll>(
  variables: GetProgrammeIDSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SubmissionReadAll, GetProgrammeIDSubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SubmissionReadAll, GetProgrammeIDSubmissionsError, TData>(
    queryKeyFn({ path: "/programme/{ID}/submissions", operationId: "getProgrammeIDSubmissions", variables }),
    ({ signal }) => fetchGetProgrammeIDSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetProgrammeSubmissionIDPathParams = {
  id: number;
};

export type GetProgrammeSubmissionIDError = Fetcher.ErrorWrapper<undefined>;

export type GetProgrammeSubmissionIDVariables = {
  pathParams: GetProgrammeSubmissionIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetProgrammeSubmissionID = (variables: GetProgrammeSubmissionIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.SubmissionRead,
    GetProgrammeSubmissionIDError,
    undefined,
    {},
    {},
    GetProgrammeSubmissionIDPathParams
  >({ url: "/programme/submission/{id}", method: "get", ...variables, signal });

export const useGetProgrammeSubmissionID = <TData = Schemas.SubmissionRead>(
  variables: GetProgrammeSubmissionIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SubmissionRead, GetProgrammeSubmissionIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SubmissionRead, GetProgrammeSubmissionIDError, TData>(
    queryKeyFn({ path: "/programme/submission/{ID}", operationId: "getProgrammeSubmissionID", variables }),
    ({ signal }) => fetchGetProgrammeSubmissionID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchProgrammeSubmissionIDPathParams = {
  id: number;
};

export type PatchProgrammeSubmissionIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchProgrammeSubmissionIDVariables = {
  body?: Schemas.SubmissionUpdate;
  pathParams: PatchProgrammeSubmissionIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchProgrammeSubmissionID = (variables: PatchProgrammeSubmissionIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.SubmissionRead,
    PatchProgrammeSubmissionIDError,
    Schemas.SubmissionUpdate,
    {},
    {},
    PatchProgrammeSubmissionIDPathParams
  >({ url: "/programme/submission/{id}", method: "patch", ...variables, signal });

export const usePatchProgrammeSubmissionID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SubmissionRead,
      PatchProgrammeSubmissionIDError,
      PatchProgrammeSubmissionIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SubmissionRead,
    PatchProgrammeSubmissionIDError,
    PatchProgrammeSubmissionIDVariables
  >(
    (variables: PatchProgrammeSubmissionIDVariables) =>
      fetchPatchProgrammeSubmissionID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchProgrammeSubmissionIDApprovePathParams = {
  id: number;
};

export type PatchProgrammeSubmissionIDApproveError = Fetcher.ErrorWrapper<undefined>;

export type PatchProgrammeSubmissionIDApproveVariables = {
  pathParams: PatchProgrammeSubmissionIDApprovePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchProgrammeSubmissionIDApprove = (
  variables: PatchProgrammeSubmissionIDApproveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SubmissionRead,
    PatchProgrammeSubmissionIDApproveError,
    undefined,
    {},
    {},
    PatchProgrammeSubmissionIDApprovePathParams
  >({ url: "/programme/submission/{id}/approve", method: "patch", ...variables, signal });

export const usePatchProgrammeSubmissionIDApprove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SubmissionRead,
      PatchProgrammeSubmissionIDApproveError,
      PatchProgrammeSubmissionIDApproveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SubmissionRead,
    PatchProgrammeSubmissionIDApproveError,
    PatchProgrammeSubmissionIDApproveVariables
  >(
    (variables: PatchProgrammeSubmissionIDApproveVariables) =>
      fetchPatchProgrammeSubmissionIDApprove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostProgrammeIDSubmissionPathParams = {
  id: number;
};

export type PostProgrammeIDSubmissionError = Fetcher.ErrorWrapper<undefined>;

export type PostProgrammeIDSubmissionVariables = {
  body?: Schemas.SubmissionCreate;
  pathParams: PostProgrammeIDSubmissionPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostProgrammeIDSubmission = (variables: PostProgrammeIDSubmissionVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.SubmissionRead,
    PostProgrammeIDSubmissionError,
    Schemas.SubmissionCreate,
    {},
    {},
    PostProgrammeIDSubmissionPathParams
  >({ url: "/programme/{id}/submission", method: "post", ...variables, signal });

export const usePostProgrammeIDSubmission = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SubmissionRead,
      PostProgrammeIDSubmissionError,
      PostProgrammeIDSubmissionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SubmissionRead,
    PostProgrammeIDSubmissionError,
    PostProgrammeIDSubmissionVariables
  >(
    (variables: PostProgrammeIDSubmissionVariables) =>
      fetchPostProgrammeIDSubmission({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostSiteSubmissionIDDirectSeedingPathParams = {
  id: number;
};

export type PostSiteSubmissionIDDirectSeedingError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteSubmissionIDDirectSeedingVariables = {
  body?: Schemas.DirectSeedingSubmit;
  pathParams: PostSiteSubmissionIDDirectSeedingPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostSiteSubmissionIDDirectSeeding = (
  variables: PostSiteSubmissionIDDirectSeedingVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.DirectSeedingRead,
    PostSiteSubmissionIDDirectSeedingError,
    Schemas.DirectSeedingSubmit,
    {},
    {},
    PostSiteSubmissionIDDirectSeedingPathParams
  >({ url: "/site/submission/{id}/direct_seeding", method: "post", ...variables, signal });

export const usePostSiteSubmissionIDDirectSeeding = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DirectSeedingRead,
      PostSiteSubmissionIDDirectSeedingError,
      PostSiteSubmissionIDDirectSeedingVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.DirectSeedingRead,
    PostSiteSubmissionIDDirectSeedingError,
    PostSiteSubmissionIDDirectSeedingVariables
  >(
    (variables: PostSiteSubmissionIDDirectSeedingVariables) =>
      fetchPostSiteSubmissionIDDirectSeeding({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchSiteSubmissionIDApproveError = Fetcher.ErrorWrapper<undefined>;

export type PatchSiteSubmissionIDApproveVariables = ApiContext["fetcherOptions"];

export const fetchPatchSiteSubmissionIDApprove = (
  variables: PatchSiteSubmissionIDApproveVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.SiteSubmissionRead, PatchSiteSubmissionIDApproveError, undefined, {}, {}, {}>({
    url: "/site/submission/{id}/approve",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchSiteSubmissionIDApprove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SiteSubmissionRead,
      PatchSiteSubmissionIDApproveError,
      PatchSiteSubmissionIDApproveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SiteSubmissionRead,
    PatchSiteSubmissionIDApproveError,
    PatchSiteSubmissionIDApproveVariables
  >(
    (variables: PatchSiteSubmissionIDApproveVariables) =>
      fetchPatchSiteSubmissionIDApprove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteSiteSubmissionDirectSeedingIDPathParams = {
  id: number;
};

export type DeleteSiteSubmissionDirectSeedingIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteSiteSubmissionDirectSeedingIDVariables = {
  pathParams: DeleteSiteSubmissionDirectSeedingIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteSiteSubmissionDirectSeedingID = (
  variables: DeleteSiteSubmissionDirectSeedingIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteSiteSubmissionDirectSeedingIDError,
    undefined,
    {},
    {},
    DeleteSiteSubmissionDirectSeedingIDPathParams
  >({ url: "/site/submission/direct_seeding/{id}", method: "delete", ...variables, signal });

export const useDeleteSiteSubmissionDirectSeedingID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteSiteSubmissionDirectSeedingIDError,
      DeleteSiteSubmissionDirectSeedingIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteSiteSubmissionDirectSeedingIDError,
    DeleteSiteSubmissionDirectSeedingIDVariables
  >(
    (variables: DeleteSiteSubmissionDirectSeedingIDVariables) =>
      fetchDeleteSiteSubmissionDirectSeedingID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostSubmissionIDTreeSpeciesCsvPathParams = {
  id: number;
};

export type PostSubmissionIDTreeSpeciesCsvError = Fetcher.ErrorWrapper<undefined>;

export type PostSubmissionIDTreeSpeciesCsvVariables = {
  body?: Schemas.SubmissionTreeSpeciesCsvSubmit;
  pathParams: PostSubmissionIDTreeSpeciesCsvPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostSubmissionIDTreeSpeciesCsv = (
  variables: PostSubmissionIDTreeSpeciesCsvVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SubmissionTreeSpeciesCsvRead,
    PostSubmissionIDTreeSpeciesCsvError,
    Schemas.SubmissionTreeSpeciesCsvSubmit,
    {},
    {},
    PostSubmissionIDTreeSpeciesCsvPathParams
  >({ url: "/submission/{id}/tree_species/csv", method: "post", ...variables, signal });

export const usePostSubmissionIDTreeSpeciesCsv = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SubmissionTreeSpeciesCsvRead,
      PostSubmissionIDTreeSpeciesCsvError,
      PostSubmissionIDTreeSpeciesCsvVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SubmissionTreeSpeciesCsvRead,
    PostSubmissionIDTreeSpeciesCsvError,
    PostSubmissionIDTreeSpeciesCsvVariables
  >(
    (variables: PostSubmissionIDTreeSpeciesCsvVariables) =>
      fetchPostSubmissionIDTreeSpeciesCsv({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostSubmissionIDTreeSpeciesManualPathParams = {
  id: number;
};

export type PostSubmissionIDTreeSpeciesManualError = Fetcher.ErrorWrapper<undefined>;

export type PostSubmissionIDTreeSpeciesManualVariables = {
  body?: Schemas.SubmissionTreeSpeciesManualSubmit;
  pathParams: PostSubmissionIDTreeSpeciesManualPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostSubmissionIDTreeSpeciesManual = (
  variables: PostSubmissionIDTreeSpeciesManualVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SubmissionTreeSpeciesManualRead,
    PostSubmissionIDTreeSpeciesManualError,
    Schemas.SubmissionTreeSpeciesManualSubmit,
    {},
    {},
    PostSubmissionIDTreeSpeciesManualPathParams
  >({ url: "/submission/{id}/tree_species/manual", method: "post", ...variables, signal });

export const usePostSubmissionIDTreeSpeciesManual = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SubmissionTreeSpeciesManualRead,
      PostSubmissionIDTreeSpeciesManualError,
      PostSubmissionIDTreeSpeciesManualVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SubmissionTreeSpeciesManualRead,
    PostSubmissionIDTreeSpeciesManualError,
    PostSubmissionIDTreeSpeciesManualVariables
  >(
    (variables: PostSubmissionIDTreeSpeciesManualVariables) =>
      fetchPostSubmissionIDTreeSpeciesManual({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteSubmissionTreeSpeciesIDPathParams = {
  id: number;
};

export type DeleteSubmissionTreeSpeciesIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteSubmissionTreeSpeciesIDVariables = {
  pathParams: DeleteSubmissionTreeSpeciesIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteSubmissionTreeSpeciesID = (
  variables: DeleteSubmissionTreeSpeciesIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteSubmissionTreeSpeciesIDError, undefined, {}, {}, DeleteSubmissionTreeSpeciesIDPathParams>({
    url: "/submission/tree_species/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteSubmissionTreeSpeciesID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteSubmissionTreeSpeciesIDError,
      DeleteSubmissionTreeSpeciesIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteSubmissionTreeSpeciesIDError, DeleteSubmissionTreeSpeciesIDVariables>(
    (variables: DeleteSubmissionTreeSpeciesIDVariables) =>
      fetchDeleteSubmissionTreeSpeciesID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetSubmissionTreeSpeciesCsvIDPathParams = {
  id: number;
};

export type GetSubmissionTreeSpeciesCsvIDError = Fetcher.ErrorWrapper<undefined>;

export type GetSubmissionTreeSpeciesCsvIDVariables = {
  pathParams: GetSubmissionTreeSpeciesCsvIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetSubmissionTreeSpeciesCsvID = (
  variables: GetSubmissionTreeSpeciesCsvIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SubmissionTreeSpeciesCsvRead,
    GetSubmissionTreeSpeciesCsvIDError,
    undefined,
    {},
    {},
    GetSubmissionTreeSpeciesCsvIDPathParams
  >({ url: "/submission/tree_species/csv/{id}", method: "get", ...variables, signal });

export const useGetSubmissionTreeSpeciesCsvID = <TData = Schemas.SubmissionTreeSpeciesCsvRead>(
  variables: GetSubmissionTreeSpeciesCsvIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SubmissionTreeSpeciesCsvRead, GetSubmissionTreeSpeciesCsvIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SubmissionTreeSpeciesCsvRead, GetSubmissionTreeSpeciesCsvIDError, TData>(
    queryKeyFn({ path: "/submission/tree_species/csv/{ID}", operationId: "getSubmissionTreeSpeciesCsvID", variables }),
    ({ signal }) => fetchGetSubmissionTreeSpeciesCsvID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetSubmissionTreeSpeciesCsvIDTreesPathParams = {
  id: number;
};

export type GetSubmissionTreeSpeciesCsvIDTreesError = Fetcher.ErrorWrapper<undefined>;

export type GetSubmissionTreeSpeciesCsvIDTreesVariables = {
  pathParams: GetSubmissionTreeSpeciesCsvIDTreesPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetSubmissionTreeSpeciesCsvIDTrees = (
  variables: GetSubmissionTreeSpeciesCsvIDTreesVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SubmissionTreeSpeciesReadAll,
    GetSubmissionTreeSpeciesCsvIDTreesError,
    undefined,
    {},
    {},
    GetSubmissionTreeSpeciesCsvIDTreesPathParams
  >({ url: "/submission/tree_species/csv/{id}/trees", method: "get", ...variables, signal });

export const useGetSubmissionTreeSpeciesCsvIDTrees = <TData = Schemas.SubmissionTreeSpeciesReadAll>(
  variables: GetSubmissionTreeSpeciesCsvIDTreesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SubmissionTreeSpeciesReadAll, GetSubmissionTreeSpeciesCsvIDTreesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SubmissionTreeSpeciesReadAll, GetSubmissionTreeSpeciesCsvIDTreesError, TData>(
    queryKeyFn({
      path: "/submission/tree_species/csv/{ID}/trees",
      operationId: "getSubmissionTreeSpeciesCsvIDTrees",
      variables
    }),
    ({ signal }) => fetchGetSubmissionTreeSpeciesCsvIDTrees({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostSubmissionUploadSubmissionMediaError = Fetcher.ErrorWrapper<undefined>;

export type PostSubmissionUploadSubmissionMediaVariables = {
  body?: Schemas.SubmissionUploadMedia;
} & ApiContext["fetcherOptions"];

export const fetchPostSubmissionUploadSubmissionMedia = (
  variables: PostSubmissionUploadSubmissionMediaVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SubmissionUploadMediaRead,
    PostSubmissionUploadSubmissionMediaError,
    Schemas.SubmissionUploadMedia,
    {},
    {},
    {}
  >({ url: "/submission/upload/submission_media", method: "post", ...variables, signal });

export const usePostSubmissionUploadSubmissionMedia = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SubmissionUploadMediaRead,
      PostSubmissionUploadSubmissionMediaError,
      PostSubmissionUploadSubmissionMediaVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SubmissionUploadMediaRead,
    PostSubmissionUploadSubmissionMediaError,
    PostSubmissionUploadSubmissionMediaVariables
  >(
    (variables: PostSubmissionUploadSubmissionMediaVariables) =>
      fetchPostSubmissionUploadSubmissionMedia({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteSubmissionUploadSubmissionMediaIDPathParams = {
  id: number;
};

export type DeleteSubmissionUploadSubmissionMediaIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteSubmissionUploadSubmissionMediaIDVariables = {
  pathParams: DeleteSubmissionUploadSubmissionMediaIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteSubmissionUploadSubmissionMediaID = (
  variables: DeleteSubmissionUploadSubmissionMediaIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteSubmissionUploadSubmissionMediaIDError,
    undefined,
    {},
    {},
    DeleteSubmissionUploadSubmissionMediaIDPathParams
  >({ url: "/submission/upload/submission_media/{id}", method: "delete", ...variables, signal });

export const useDeleteSubmissionUploadSubmissionMediaID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteSubmissionUploadSubmissionMediaIDError,
      DeleteSubmissionUploadSubmissionMediaIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteSubmissionUploadSubmissionMediaIDError,
    DeleteSubmissionUploadSubmissionMediaIDVariables
  >(
    (variables: DeleteSubmissionUploadSubmissionMediaIDVariables) =>
      fetchDeleteSubmissionUploadSubmissionMediaID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetSubmissionSubmissionQuestionsError = Fetcher.ErrorWrapper<undefined>;

export type GetSubmissionSubmissionQuestionsVariables = ApiContext["fetcherOptions"];

export const fetchGetSubmissionSubmissionQuestions = (
  variables: GetSubmissionSubmissionQuestionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetSubmissionSubmissionQuestionsError, undefined, {}, {}, {}>({
    url: "/submission/submission_questions",
    method: "get",
    ...variables,
    signal
  });

export const useGetSubmissionSubmissionQuestions = <TData = undefined>(
  variables: GetSubmissionSubmissionQuestionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetSubmissionSubmissionQuestionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetSubmissionSubmissionQuestionsError, TData>(
    queryKeyFn({
      path: "/submission/submission_questions",
      operationId: "getSubmissionSubmissionQuestions",
      variables
    }),
    ({ signal }) => fetchGetSubmissionSubmissionQuestions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundProgrammesError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundProgrammesVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundProgrammes = (variables: GetTerrafundProgrammesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TerrafundProgrammeReadAll, GetTerrafundProgrammesError, undefined, {}, {}, {}>({
    url: "/terrafund/programmes",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundProgrammes = <TData = Schemas.TerrafundProgrammeReadAll>(
  variables: GetTerrafundProgrammesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TerrafundProgrammeReadAll, GetTerrafundProgrammesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundProgrammeReadAll, GetTerrafundProgrammesError, TData>(
    queryKeyFn({ path: "/terrafund/programmes", operationId: "getTerrafundProgrammes", variables }),
    ({ signal }) => fetchGetTerrafundProgrammes({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostTerrafundProgrammeError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundProgrammeVariables = {
  body?: RequestBodies.TerrafundProgrammeCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundProgramme = (variables: PostTerrafundProgrammeVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.TerrafundProgrammeRead,
    PostTerrafundProgrammeError,
    RequestBodies.TerrafundProgrammeCreate,
    {},
    {},
    {}
  >({ url: "/terrafund/programme", method: "post", ...variables, signal });

export const usePostTerrafundProgramme = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundProgrammeRead,
      PostTerrafundProgrammeError,
      PostTerrafundProgrammeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundProgrammeRead,
    PostTerrafundProgrammeError,
    PostTerrafundProgrammeVariables
  >(
    (variables: PostTerrafundProgrammeVariables) => fetchPostTerrafundProgramme({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostTerrafundNoneTreeSpeciesError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundNoneTreeSpeciesVariables = {
  body: Schemas.TerrafundNoneTreeSpeciesRead;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundNoneTreeSpecies = (
  variables: PostTerrafundNoneTreeSpeciesVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TerrafundNoneTreeSpeciesCreate,
    PostTerrafundNoneTreeSpeciesError,
    Schemas.TerrafundNoneTreeSpeciesRead,
    {},
    {},
    {}
  >({ url: "/terrafund/none_tree_species", method: "post", ...variables, signal });

export const usePostTerrafundNoneTreeSpecies = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundNoneTreeSpeciesCreate,
      PostTerrafundNoneTreeSpeciesError,
      PostTerrafundNoneTreeSpeciesVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundNoneTreeSpeciesCreate,
    PostTerrafundNoneTreeSpeciesError,
    PostTerrafundNoneTreeSpeciesVariables
  >(
    (variables: PostTerrafundNoneTreeSpeciesVariables) =>
      fetchPostTerrafundNoneTreeSpecies({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostTerrafundTreeSpeciesError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundTreeSpeciesVariables = {
  body: Schemas.TerrafundTreeSpeciesCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundTreeSpecies = (variables: PostTerrafundTreeSpeciesVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.TerrafundTreeSpeciesReadAll,
    PostTerrafundTreeSpeciesError,
    Schemas.TerrafundTreeSpeciesCreate,
    {},
    {},
    {}
  >({ url: "/terrafund/tree_species", method: "post", ...variables, signal });

export const usePostTerrafundTreeSpecies = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundTreeSpeciesReadAll,
      PostTerrafundTreeSpeciesError,
      PostTerrafundTreeSpeciesVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundTreeSpeciesReadAll,
    PostTerrafundTreeSpeciesError,
    PostTerrafundTreeSpeciesVariables
  >(
    (variables: PostTerrafundTreeSpeciesVariables) =>
      fetchPostTerrafundTreeSpecies({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostTerrafundTreeSpeciesBulkError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundTreeSpeciesBulkVariables = {
  body: Schemas.TerrafundTreeSpeciesBulkCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundTreeSpeciesBulk = (
  variables: PostTerrafundTreeSpeciesBulkVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TerrafundTreeSpeciesReadAll,
    PostTerrafundTreeSpeciesBulkError,
    Schemas.TerrafundTreeSpeciesBulkCreate,
    {},
    {},
    {}
  >({ url: "/terrafund/tree_species_bulk", method: "post", ...variables, signal });

export const usePostTerrafundTreeSpeciesBulk = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundTreeSpeciesReadAll,
      PostTerrafundTreeSpeciesBulkError,
      PostTerrafundTreeSpeciesBulkVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundTreeSpeciesReadAll,
    PostTerrafundTreeSpeciesBulkError,
    PostTerrafundTreeSpeciesBulkVariables
  >(
    (variables: PostTerrafundTreeSpeciesBulkVariables) =>
      fetchPostTerrafundTreeSpeciesBulk({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostTerrafundNoneTreeSpeciesBulkError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundNoneTreeSpeciesBulkVariables = {
  body: Schemas.TerrafundNonTreeSpeciesBulkCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundNoneTreeSpeciesBulk = (
  variables: PostTerrafundNoneTreeSpeciesBulkVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PostTerrafundNoneTreeSpeciesBulkError, Schemas.TerrafundNonTreeSpeciesBulkCreate, {}, {}, {}>({
    url: "/terrafund/none_tree_species_bulk",
    method: "post",
    ...variables,
    signal
  });

export const usePostTerrafundNoneTreeSpeciesBulk = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PostTerrafundNoneTreeSpeciesBulkError,
      PostTerrafundNoneTreeSpeciesBulkVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    PostTerrafundNoneTreeSpeciesBulkError,
    PostTerrafundNoneTreeSpeciesBulkVariables
  >(
    (variables: PostTerrafundNoneTreeSpeciesBulkVariables) =>
      fetchPostTerrafundNoneTreeSpeciesBulk({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostTerrafundTreeSpeciesCsvError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundTreeSpeciesCsvVariables = {
  body?: Schemas.TerrafundCsvCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundTreeSpeciesCsv = (
  variables: PostTerrafundTreeSpeciesCsvVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.TerrafundCsvRead, PostTerrafundTreeSpeciesCsvError, Schemas.TerrafundCsvCreate, {}, {}, {}>({
    url: "/terrafund/tree_species/csv",
    method: "post",
    ...variables,
    signal
  });

export const usePostTerrafundTreeSpeciesCsv = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundCsvRead,
      PostTerrafundTreeSpeciesCsvError,
      PostTerrafundTreeSpeciesCsvVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundCsvRead,
    PostTerrafundTreeSpeciesCsvError,
    PostTerrafundTreeSpeciesCsvVariables
  >(
    (variables: PostTerrafundTreeSpeciesCsvVariables) =>
      fetchPostTerrafundTreeSpeciesCsv({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteTerrafundTreeSpeciesIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteTerrafundTreeSpeciesIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteTerrafundTreeSpeciesID = (
  variables: DeleteTerrafundTreeSpeciesIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteTerrafundTreeSpeciesIDError, undefined, {}, {}, {}>({
    url: "/terrafund/tree_species/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteTerrafundTreeSpeciesID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteTerrafundTreeSpeciesIDError, DeleteTerrafundTreeSpeciesIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteTerrafundTreeSpeciesIDError, DeleteTerrafundTreeSpeciesIDVariables>(
    (variables: DeleteTerrafundTreeSpeciesIDVariables) =>
      fetchDeleteTerrafundTreeSpeciesID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteTerrafundNoneTreeSpeciesIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteTerrafundNoneTreeSpeciesIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteTerrafundNoneTreeSpeciesID = (
  variables: DeleteTerrafundNoneTreeSpeciesIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteTerrafundNoneTreeSpeciesIDError, undefined, {}, {}, {}>({
    url: "/terrafund/none_tree_species/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteTerrafundNoneTreeSpeciesID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteTerrafundNoneTreeSpeciesIDError,
      DeleteTerrafundNoneTreeSpeciesIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteTerrafundNoneTreeSpeciesIDError,
    DeleteTerrafundNoneTreeSpeciesIDVariables
  >(
    (variables: DeleteTerrafundNoneTreeSpeciesIDVariables) =>
      fetchDeleteTerrafundNoneTreeSpeciesID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostTerrafundFileError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundFileVariables = {
  body?: Schemas.TerrafundFileCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundFile = (variables: PostTerrafundFileVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TerrafundFileRead, PostTerrafundFileError, Schemas.TerrafundFileCreate, {}, {}, {}>({
    url: "/terrafund/file",
    method: "post",
    ...variables,
    signal
  });

export const usePostTerrafundFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TerrafundFileRead, PostTerrafundFileError, PostTerrafundFileVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.TerrafundFileRead, PostTerrafundFileError, PostTerrafundFileVariables>(
    (variables: PostTerrafundFileVariables) => fetchPostTerrafundFile({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostDocumentFilesFileError = Fetcher.ErrorWrapper<undefined>;

export type PostDocumentFilesFileVariables = {
  body?: Schemas.DocumentFileCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostDocumentFilesFile = (variables: PostDocumentFilesFileVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DocumentFileRead, PostDocumentFilesFileError, Schemas.DocumentFileCreate, {}, {}, {}>({
    url: "/document_files/file",
    method: "post",
    ...variables,
    signal
  });

export const usePostDocumentFilesFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.DocumentFileRead, PostDocumentFilesFileError, PostDocumentFilesFileVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.DocumentFileRead, PostDocumentFilesFileError, PostDocumentFilesFileVariables>(
    (variables: PostDocumentFilesFileVariables) => fetchPostDocumentFilesFile({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutDocumentFilesUUIDPathParams = {
  uuid: string;
};

export type PutDocumentFilesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutDocumentFilesUUIDVariables = {
  pathParams: PutDocumentFilesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutDocumentFilesUUID = (variables: PutDocumentFilesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.DocumentFileRead, PutDocumentFilesUUIDError, undefined, {}, {}, PutDocumentFilesUUIDPathParams>({
    url: "/document_files/{uuid}",
    method: "put",
    ...variables,
    signal
  });

export const usePutDocumentFilesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.DocumentFileRead, PutDocumentFilesUUIDError, PutDocumentFilesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.DocumentFileRead, PutDocumentFilesUUIDError, PutDocumentFilesUUIDVariables>(
    (variables: PutDocumentFilesUUIDVariables) => fetchPutDocumentFilesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteDocumentFilesUUIDPathParams = {
  uuid: string;
};

export type DeleteDocumentFilesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteDocumentFilesUUIDVariables = {
  pathParams: DeleteDocumentFilesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteDocumentFilesUUID = (variables: DeleteDocumentFilesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteDocumentFilesUUIDError, undefined, {}, {}, DeleteDocumentFilesUUIDPathParams>({
    url: "/document_files/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteDocumentFilesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteDocumentFilesUUIDError, DeleteDocumentFilesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteDocumentFilesUUIDError, DeleteDocumentFilesUUIDVariables>(
    (variables: DeleteDocumentFilesUUIDVariables) => fetchDeleteDocumentFilesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostTerrafundFileBulkError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundFileBulkVariables = {
  body?: Schemas.TerrafundFileCreateAll;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundFileBulk = (variables: PostTerrafundFileBulkVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TerrafundFileReadAll, PostTerrafundFileBulkError, Schemas.TerrafundFileCreateAll, {}, {}, {}>({
    url: "/terrafund/file/bulk",
    method: "post",
    ...variables,
    signal
  });

export const usePostTerrafundFileBulk = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundFileReadAll,
      PostTerrafundFileBulkError,
      PostTerrafundFileBulkVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundFileReadAll,
    PostTerrafundFileBulkError,
    PostTerrafundFileBulkVariables
  >(
    (variables: PostTerrafundFileBulkVariables) => fetchPostTerrafundFileBulk({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTerrafundProgrammeIDError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundProgrammeIDVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundProgrammeID = (variables: GetTerrafundProgrammeIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TerrafundProgrammeRead, GetTerrafundProgrammeIDError, undefined, {}, {}, {}>({
    url: "/terrafund/programme/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundProgrammeID = <TData = Schemas.TerrafundProgrammeRead>(
  variables: GetTerrafundProgrammeIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TerrafundProgrammeRead, GetTerrafundProgrammeIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundProgrammeRead, GetTerrafundProgrammeIDError, TData>(
    queryKeyFn({ path: "/terrafund/programme/{ID}", operationId: "getTerrafundProgrammeID", variables }),
    ({ signal }) => fetchGetTerrafundProgrammeID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchTerrafundProgrammeIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchTerrafundProgrammeIDVariables = {
  body?: RequestBodies.TerrafundProgrammeCreate;
} & ApiContext["fetcherOptions"];

export const fetchPatchTerrafundProgrammeID = (variables: PatchTerrafundProgrammeIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.TerrafundProgrammeRead,
    PatchTerrafundProgrammeIDError,
    RequestBodies.TerrafundProgrammeCreate,
    {},
    {},
    {}
  >({ url: "/terrafund/programme/{id}", method: "patch", ...variables, signal });

export const usePatchTerrafundProgrammeID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundProgrammeRead,
      PatchTerrafundProgrammeIDError,
      PatchTerrafundProgrammeIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundProgrammeRead,
    PatchTerrafundProgrammeIDError,
    PatchTerrafundProgrammeIDVariables
  >(
    (variables: PatchTerrafundProgrammeIDVariables) =>
      fetchPatchTerrafundProgrammeID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostTerrafundNurseryError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundNurseryVariables = {
  body?: Schemas.TerrafundNurseryCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundNursery = (variables: PostTerrafundNurseryVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TerrafundNurseryRead, PostTerrafundNurseryError, Schemas.TerrafundNurseryCreate, {}, {}, {}>({
    url: "/terrafund/nursery",
    method: "post",
    ...variables,
    signal
  });

export const usePostTerrafundNursery = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundNurseryRead,
      PostTerrafundNurseryError,
      PostTerrafundNurseryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.TerrafundNurseryRead, PostTerrafundNurseryError, PostTerrafundNurseryVariables>(
    (variables: PostTerrafundNurseryVariables) => fetchPostTerrafundNursery({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTerrafundNurseryIDError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundNurseryIDVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundNurseryID = (variables: GetTerrafundNurseryIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TerrafundNurseryRead, GetTerrafundNurseryIDError, undefined, {}, {}, {}>({
    url: "/terrafund/nursery/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundNurseryID = <TData = Schemas.TerrafundNurseryRead>(
  variables: GetTerrafundNurseryIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TerrafundNurseryRead, GetTerrafundNurseryIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundNurseryRead, GetTerrafundNurseryIDError, TData>(
    queryKeyFn({ path: "/terrafund/nursery/{ID}", operationId: "getTerrafundNurseryID", variables }),
    ({ signal }) => fetchGetTerrafundNurseryID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchTerrafundNurseryIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchTerrafundNurseryIDVariables = {
  body?: Schemas.TerrafundNurseryUpdate;
} & ApiContext["fetcherOptions"];

export const fetchPatchTerrafundNurseryID = (variables: PatchTerrafundNurseryIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TerrafundNurseryRead, PatchTerrafundNurseryIDError, Schemas.TerrafundNurseryUpdate, {}, {}, {}>({
    url: "/terrafund/nursery/{id}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchTerrafundNurseryID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundNurseryRead,
      PatchTerrafundNurseryIDError,
      PatchTerrafundNurseryIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundNurseryRead,
    PatchTerrafundNurseryIDError,
    PatchTerrafundNurseryIDVariables
  >(
    (variables: PatchTerrafundNurseryIDVariables) => fetchPatchTerrafundNurseryID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostOrganisationsPhotoError = Fetcher.ErrorWrapper<undefined>;

export type PostOrganisationsPhotoVariables = {
  body?: Schemas.OrganisationPhotoCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostOrganisationsPhoto = (variables: PostOrganisationsPhotoVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OrganisationPhotoRead, PostOrganisationsPhotoError, Schemas.OrganisationPhotoCreate, {}, {}, {}>({
    url: "/organisations/photo",
    method: "post",
    ...variables,
    signal
  });

export const usePostOrganisationsPhoto = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganisationPhotoRead,
      PostOrganisationsPhotoError,
      PostOrganisationsPhotoVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.OrganisationPhotoRead,
    PostOrganisationsPhotoError,
    PostOrganisationsPhotoVariables
  >(
    (variables: PostOrganisationsPhotoVariables) => fetchPostOrganisationsPhoto({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostOrganisationsFileError = Fetcher.ErrorWrapper<undefined>;

export type PostOrganisationsFileVariables = {
  body?: Schemas.OrganisationFileCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostOrganisationsFile = (variables: PostOrganisationsFileVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OrganisationFileRead, PostOrganisationsFileError, Schemas.OrganisationFileCreate, {}, {}, {}>({
    url: "/organisations/file",
    method: "post",
    ...variables,
    signal
  });

export const usePostOrganisationsFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.OrganisationFileRead,
      PostOrganisationsFileError,
      PostOrganisationsFileVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.OrganisationFileRead,
    PostOrganisationsFileError,
    PostOrganisationsFileVariables
  >(
    (variables: PostOrganisationsFileVariables) => fetchPostOrganisationsFile({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteOrganisationsPhotoIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteOrganisationsPhotoIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteOrganisationsPhotoID = (variables: DeleteOrganisationsPhotoIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteOrganisationsPhotoIDError, undefined, {}, {}, {}>({
    url: "/organisations/photo/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteOrganisationsPhotoID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteOrganisationsPhotoIDError, DeleteOrganisationsPhotoIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteOrganisationsPhotoIDError, DeleteOrganisationsPhotoIDVariables>(
    (variables: DeleteOrganisationsPhotoIDVariables) =>
      fetchDeleteOrganisationsPhotoID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTerrafundSiteIDPathParams = {
  id: string;
};

export type GetTerrafundSiteIDError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundSiteIDVariables = {
  pathParams: GetTerrafundSiteIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetTerrafundSiteID = (variables: GetTerrafundSiteIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TerrafundSiteRead, GetTerrafundSiteIDError, undefined, {}, {}, GetTerrafundSiteIDPathParams>({
    url: "/terrafund/site/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundSiteID = <TData = Schemas.TerrafundSiteRead>(
  variables: GetTerrafundSiteIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TerrafundSiteRead, GetTerrafundSiteIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundSiteRead, GetTerrafundSiteIDError, TData>(
    queryKeyFn({ path: "/terrafund/site/{ID}", operationId: "getTerrafundSiteID", variables }),
    ({ signal }) => fetchGetTerrafundSiteID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchTerrafundSiteIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchTerrafundSiteIDVariables = {
  body?: Schemas.TerrafundSiteUpdate;
} & ApiContext["fetcherOptions"];

export const fetchPatchTerrafundSiteID = (variables: PatchTerrafundSiteIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TerrafundSiteRead, PatchTerrafundSiteIDError, Schemas.TerrafundSiteUpdate, {}, {}, {}>({
    url: "/terrafund/site/{id}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchTerrafundSiteID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TerrafundSiteRead, PatchTerrafundSiteIDError, PatchTerrafundSiteIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.TerrafundSiteRead, PatchTerrafundSiteIDError, PatchTerrafundSiteIDVariables>(
    (variables: PatchTerrafundSiteIDVariables) => fetchPatchTerrafundSiteID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteOrganisationsFileIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteOrganisationsFileIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteOrganisationsFileID = (variables: DeleteOrganisationsFileIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteOrganisationsFileIDError, undefined, {}, {}, {}>({
    url: "/organisations/file/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteOrganisationsFileID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteOrganisationsFileIDError, DeleteOrganisationsFileIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteOrganisationsFileIDError, DeleteOrganisationsFileIDVariables>(
    (variables: DeleteOrganisationsFileIDVariables) =>
      fetchDeleteOrganisationsFileID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostTerrafundSiteError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundSiteVariables = ApiContext["fetcherOptions"];

export const fetchPostTerrafundSite = (variables: PostTerrafundSiteVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TerrafundSiteCreate, PostTerrafundSiteError, undefined, {}, {}, {}>({
    url: "/terrafund/site",
    method: "post",
    ...variables,
    signal
  });

export const usePostTerrafundSite = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TerrafundSiteCreate, PostTerrafundSiteError, PostTerrafundSiteVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.TerrafundSiteCreate, PostTerrafundSiteError, PostTerrafundSiteVariables>(
    (variables: PostTerrafundSiteVariables) => fetchPostTerrafundSite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTerrafundProgrammeIDSitesQueryParams = {
  /**
   * Page number
   */
  page?: number;
};

export type GetTerrafundProgrammeIDSitesError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundProgrammeIDSitesResponse = {
  data?: Schemas.TerrafundSiteRead[];
  meta?: {
    first?: number;
    current?: number;
    last?: number;
    total?: number;
  };
};

export type GetTerrafundProgrammeIDSitesVariables = {
  queryParams?: GetTerrafundProgrammeIDSitesQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetTerrafundProgrammeIDSites = (
  variables: GetTerrafundProgrammeIDSitesVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetTerrafundProgrammeIDSitesResponse,
    GetTerrafundProgrammeIDSitesError,
    undefined,
    {},
    GetTerrafundProgrammeIDSitesQueryParams,
    {}
  >({ url: "/terrafund/programme/{id}/sites", method: "get", ...variables, signal });

export const useGetTerrafundProgrammeIDSites = <TData = GetTerrafundProgrammeIDSitesResponse>(
  variables: GetTerrafundProgrammeIDSitesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetTerrafundProgrammeIDSitesResponse, GetTerrafundProgrammeIDSitesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetTerrafundProgrammeIDSitesResponse, GetTerrafundProgrammeIDSitesError, TData>(
    queryKeyFn({ path: "/terrafund/programme/{ID}/sites", operationId: "getTerrafundProgrammeIDSites", variables }),
    ({ signal }) => fetchGetTerrafundProgrammeIDSites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundProgrammeIDAllSitesError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundProgrammeIDAllSitesVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundProgrammeIDAllSites = (
  variables: GetTerrafundProgrammeIDAllSitesVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.TerrafundSiteReadAll, GetTerrafundProgrammeIDAllSitesError, undefined, {}, {}, {}>({
    url: "/terrafund/programme/{id}/all-sites",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundProgrammeIDAllSites = <TData = Schemas.TerrafundSiteReadAll>(
  variables: GetTerrafundProgrammeIDAllSitesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TerrafundSiteReadAll, GetTerrafundProgrammeIDAllSitesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundSiteReadAll, GetTerrafundProgrammeIDAllSitesError, TData>(
    queryKeyFn({
      path: "/terrafund/programme/{ID}/all-sites",
      operationId: "getTerrafundProgrammeIDAllSites",
      variables
    }),
    ({ signal }) => fetchGetTerrafundProgrammeIDAllSites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundProgrammeIDHasSitesError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundProgrammeIDHasSitesResponse = {
  programme_id?: number;
  has_sites?: boolean;
};

export type GetTerrafundProgrammeIDHasSitesVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundProgrammeIDHasSites = (
  variables: GetTerrafundProgrammeIDHasSitesVariables,
  signal?: AbortSignal
) =>
  apiFetch<GetTerrafundProgrammeIDHasSitesResponse, GetTerrafundProgrammeIDHasSitesError, undefined, {}, {}, {}>({
    url: "/terrafund/programme/{id}/has_sites",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundProgrammeIDHasSites = <TData = GetTerrafundProgrammeIDHasSitesResponse>(
  variables: GetTerrafundProgrammeIDHasSitesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetTerrafundProgrammeIDHasSitesResponse, GetTerrafundProgrammeIDHasSitesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetTerrafundProgrammeIDHasSitesResponse, GetTerrafundProgrammeIDHasSitesError, TData>(
    queryKeyFn({
      path: "/terrafund/programme/{ID}/has_sites",
      operationId: "getTerrafundProgrammeIDHasSites",
      variables
    }),
    ({ signal }) => fetchGetTerrafundProgrammeIDHasSites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundProgrammeIDNurseriesQueryParams = {
  /**
   * Page number
   */
  page?: number;
};

export type GetTerrafundProgrammeIDNurseriesError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundProgrammeIDNurseriesResponse = {
  data?: Schemas.TerrafundNurseryRead[];
  meta?: {
    first?: number;
    current?: number;
    last?: number;
    total?: number;
  };
};

export type GetTerrafundProgrammeIDNurseriesVariables = {
  queryParams?: GetTerrafundProgrammeIDNurseriesQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetTerrafundProgrammeIDNurseries = (
  variables: GetTerrafundProgrammeIDNurseriesVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetTerrafundProgrammeIDNurseriesResponse,
    GetTerrafundProgrammeIDNurseriesError,
    undefined,
    {},
    GetTerrafundProgrammeIDNurseriesQueryParams,
    {}
  >({ url: "/terrafund/programme/{id}/nurseries", method: "get", ...variables, signal });

export const useGetTerrafundProgrammeIDNurseries = <TData = GetTerrafundProgrammeIDNurseriesResponse>(
  variables: GetTerrafundProgrammeIDNurseriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetTerrafundProgrammeIDNurseriesResponse, GetTerrafundProgrammeIDNurseriesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetTerrafundProgrammeIDNurseriesResponse, GetTerrafundProgrammeIDNurseriesError, TData>(
    queryKeyFn({
      path: "/terrafund/programme/{ID}/nurseries",
      operationId: "getTerrafundProgrammeIDNurseries",
      variables
    }),
    ({ signal }) => fetchGetTerrafundProgrammeIDNurseries({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundProgrammeIDSubmissionsQueryParams = {
  /**
   * Page number
   */
  page?: number;
};

export type GetTerrafundProgrammeIDSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundProgrammeIDSubmissionsResponse = {
  data?: Schemas.TerrafundGenericSubmissionsReadAll;
  meta?: {
    first?: number;
    current?: number;
    last?: number;
    total?: number;
  };
};

export type GetTerrafundProgrammeIDSubmissionsVariables = {
  queryParams?: GetTerrafundProgrammeIDSubmissionsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetTerrafundProgrammeIDSubmissions = (
  variables: GetTerrafundProgrammeIDSubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetTerrafundProgrammeIDSubmissionsResponse,
    GetTerrafundProgrammeIDSubmissionsError,
    undefined,
    {},
    GetTerrafundProgrammeIDSubmissionsQueryParams,
    {}
  >({ url: "/terrafund/programme/{id}/submissions", method: "get", ...variables, signal });

export const useGetTerrafundProgrammeIDSubmissions = <TData = GetTerrafundProgrammeIDSubmissionsResponse>(
  variables: GetTerrafundProgrammeIDSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetTerrafundProgrammeIDSubmissionsResponse,
      GetTerrafundProgrammeIDSubmissionsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetTerrafundProgrammeIDSubmissionsResponse,
    GetTerrafundProgrammeIDSubmissionsError,
    TData
  >(
    queryKeyFn({
      path: "/terrafund/programme/{ID}/submissions",
      operationId: "getTerrafundProgrammeIDSubmissions",
      variables
    }),
    ({ signal }) => fetchGetTerrafundProgrammeIDSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundProgrammeIDAimsError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundProgrammeIDAimsVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundProgrammeIDAims = (
  variables: GetTerrafundProgrammeIDAimsVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.TerrafundAimsRead, GetTerrafundProgrammeIDAimsError, undefined, {}, {}, {}>({
    url: "/terrafund/programme/{id}/aims",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundProgrammeIDAims = <TData = Schemas.TerrafundAimsRead>(
  variables: GetTerrafundProgrammeIDAimsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TerrafundAimsRead, GetTerrafundProgrammeIDAimsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundAimsRead, GetTerrafundProgrammeIDAimsError, TData>(
    queryKeyFn({ path: "/terrafund/programme/{ID}/aims", operationId: "getTerrafundProgrammeIDAims", variables }),
    ({ signal }) => fetchGetTerrafundProgrammeIDAims({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundProgrammeIDHasNurseriesError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundProgrammeIDHasNurseriesResponse = {
  programme_id?: number;
  has_nurseries?: boolean;
};

export type GetTerrafundProgrammeIDHasNurseriesVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundProgrammeIDHasNurseries = (
  variables: GetTerrafundProgrammeIDHasNurseriesVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetTerrafundProgrammeIDHasNurseriesResponse,
    GetTerrafundProgrammeIDHasNurseriesError,
    undefined,
    {},
    {},
    {}
  >({ url: "/terrafund/programme/{id}/has_nurseries", method: "get", ...variables, signal });

export const useGetTerrafundProgrammeIDHasNurseries = <TData = GetTerrafundProgrammeIDHasNurseriesResponse>(
  variables: GetTerrafundProgrammeIDHasNurseriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetTerrafundProgrammeIDHasNurseriesResponse,
      GetTerrafundProgrammeIDHasNurseriesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetTerrafundProgrammeIDHasNurseriesResponse,
    GetTerrafundProgrammeIDHasNurseriesError,
    TData
  >(
    queryKeyFn({
      path: "/terrafund/programme/{ID}/has_nurseries",
      operationId: "getTerrafundProgrammeIDHasNurseries",
      variables
    }),
    ({ signal }) => fetchGetTerrafundProgrammeIDHasNurseries({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostTerrafundProgrammeIDInviteError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundProgrammeIDInviteVariables = {
  body?: Schemas.TerrafundProgrammeInviteCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundProgrammeIDInvite = (
  variables: PostTerrafundProgrammeIDInviteVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TerrafundProgrammeInviteRead,
    PostTerrafundProgrammeIDInviteError,
    Schemas.TerrafundProgrammeInviteCreate,
    {},
    {},
    {}
  >({ url: "/terrafund/programme/{id}/invite", method: "post", ...variables, signal });

export const usePostTerrafundProgrammeIDInvite = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundProgrammeInviteRead,
      PostTerrafundProgrammeIDInviteError,
      PostTerrafundProgrammeIDInviteVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundProgrammeInviteRead,
    PostTerrafundProgrammeIDInviteError,
    PostTerrafundProgrammeIDInviteVariables
  >(
    (variables: PostTerrafundProgrammeIDInviteVariables) =>
      fetchPostTerrafundProgrammeIDInvite({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostTerrafundProgrammeInviteAcceptError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundProgrammeInviteAcceptVariables = {
  body?: Schemas.TerrafundProgrammeInviteAccept;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundProgrammeInviteAccept = (
  variables: PostTerrafundProgrammeInviteAcceptVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Record<string, any>,
    PostTerrafundProgrammeInviteAcceptError,
    Schemas.TerrafundProgrammeInviteAccept,
    {},
    {},
    {}
  >({ url: "/terrafund/programme/invite/accept", method: "post", ...variables, signal });

export const usePostTerrafundProgrammeInviteAccept = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Record<string, any>,
      PostTerrafundProgrammeInviteAcceptError,
      PostTerrafundProgrammeInviteAcceptVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Record<string, any>,
    PostTerrafundProgrammeInviteAcceptError,
    PostTerrafundProgrammeInviteAcceptVariables
  >(
    (variables: PostTerrafundProgrammeInviteAcceptVariables) =>
      fetchPostTerrafundProgrammeInviteAccept({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchUsersIDRoleError = Fetcher.ErrorWrapper<undefined>;

export type PatchUsersIDRoleVariables = {
  body?: Schemas.UserRoleUpdate;
} & ApiContext["fetcherOptions"];

export const fetchPatchUsersIDRole = (variables: PatchUsersIDRoleVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UserRead, PatchUsersIDRoleError, Schemas.UserRoleUpdate, {}, {}, {}>({
    url: "/users/{id}/role",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchUsersIDRole = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.UserRead, PatchUsersIDRoleError, PatchUsersIDRoleVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.UserRead, PatchUsersIDRoleError, PatchUsersIDRoleVariables>(
    (variables: PatchUsersIDRoleVariables) => fetchPatchUsersIDRole({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostTerrafundNurserySubmissionError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundNurserySubmissionVariables = {
  body?: Schemas.TerrafundNurserySubmissionCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundNurserySubmission = (
  variables: PostTerrafundNurserySubmissionVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TerrafundNurserySubmissionRead,
    PostTerrafundNurserySubmissionError,
    Schemas.TerrafundNurserySubmissionCreate,
    {},
    {},
    {}
  >({ url: "/terrafund/nursery/submission", method: "post", ...variables, signal });

export const usePostTerrafundNurserySubmission = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundNurserySubmissionRead,
      PostTerrafundNurserySubmissionError,
      PostTerrafundNurserySubmissionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundNurserySubmissionRead,
    PostTerrafundNurserySubmissionError,
    PostTerrafundNurserySubmissionVariables
  >(
    (variables: PostTerrafundNurserySubmissionVariables) =>
      fetchPostTerrafundNurserySubmission({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTerrafundNurserySubmissionIDError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundNurserySubmissionIDVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundNurserySubmissionID = (
  variables: GetTerrafundNurserySubmissionIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.TerrafundNurserySubmissionRead, GetTerrafundNurserySubmissionIDError, undefined, {}, {}, {}>({
    url: "/terrafund/nursery/submission/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundNurserySubmissionID = <TData = Schemas.TerrafundNurserySubmissionRead>(
  variables: GetTerrafundNurserySubmissionIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TerrafundNurserySubmissionRead, GetTerrafundNurserySubmissionIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundNurserySubmissionRead, GetTerrafundNurserySubmissionIDError, TData>(
    queryKeyFn({
      path: "/terrafund/nursery/submission/{ID}",
      operationId: "getTerrafundNurserySubmissionID",
      variables
    }),
    ({ signal }) => fetchGetTerrafundNurserySubmissionID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchTerrafundNurserySubmissionIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchTerrafundNurserySubmissionIDVariables = {
  body?: Schemas.TerrafundNurserySubmissionUpdate;
} & ApiContext["fetcherOptions"];

export const fetchPatchTerrafundNurserySubmissionID = (
  variables: PatchTerrafundNurserySubmissionIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TerrafundNurserySubmissionRead,
    PatchTerrafundNurserySubmissionIDError,
    Schemas.TerrafundNurserySubmissionUpdate,
    {},
    {},
    {}
  >({ url: "/terrafund/nursery/submission/{id}", method: "patch", ...variables, signal });

export const usePatchTerrafundNurserySubmissionID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundNurserySubmissionRead,
      PatchTerrafundNurserySubmissionIDError,
      PatchTerrafundNurserySubmissionIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundNurserySubmissionRead,
    PatchTerrafundNurserySubmissionIDError,
    PatchTerrafundNurserySubmissionIDVariables
  >(
    (variables: PatchTerrafundNurserySubmissionIDVariables) =>
      fetchPatchTerrafundNurserySubmissionID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTerrafundProgrammeSubmissionIDError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundProgrammeSubmissionIDVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundProgrammeSubmissionID = (
  variables: GetTerrafundProgrammeSubmissionIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.TerrafundProgrammeSubmissionRead, GetTerrafundProgrammeSubmissionIDError, undefined, {}, {}, {}>({
    url: "/terrafund/programme/submission/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundProgrammeSubmissionID = <TData = Schemas.TerrafundProgrammeSubmissionRead>(
  variables: GetTerrafundProgrammeSubmissionIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TerrafundProgrammeSubmissionRead, GetTerrafundProgrammeSubmissionIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundProgrammeSubmissionRead, GetTerrafundProgrammeSubmissionIDError, TData>(
    queryKeyFn({
      path: "/terrafund/programme/submission/{ID}",
      operationId: "getTerrafundProgrammeSubmissionID",
      variables
    }),
    ({ signal }) => fetchGetTerrafundProgrammeSubmissionID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchTerrafundProgrammeSubmissionIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchTerrafundProgrammeSubmissionIDVariables = {
  body?: Schemas.TerrafundProgrammeSubmissionUpdate;
} & ApiContext["fetcherOptions"];

export const fetchPatchTerrafundProgrammeSubmissionID = (
  variables: PatchTerrafundProgrammeSubmissionIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TerrafundProgrammeSubmissionRead,
    PatchTerrafundProgrammeSubmissionIDError,
    Schemas.TerrafundProgrammeSubmissionUpdate,
    {},
    {},
    {}
  >({ url: "/terrafund/programme/submission/{id}", method: "patch", ...variables, signal });

export const usePatchTerrafundProgrammeSubmissionID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundProgrammeSubmissionRead,
      PatchTerrafundProgrammeSubmissionIDError,
      PatchTerrafundProgrammeSubmissionIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundProgrammeSubmissionRead,
    PatchTerrafundProgrammeSubmissionIDError,
    PatchTerrafundProgrammeSubmissionIDVariables
  >(
    (variables: PatchTerrafundProgrammeSubmissionIDVariables) =>
      fetchPatchTerrafundProgrammeSubmissionID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostTerrafundSubmissionIDUnableError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundSubmissionIDUnableVariables = {
  body?: Schemas.TerrafundDueSubmissionUnableCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundSubmissionIDUnable = (
  variables: PostTerrafundSubmissionIDUnableVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TerrafundDueSubmissionRead,
    PostTerrafundSubmissionIDUnableError,
    Schemas.TerrafundDueSubmissionUnableCreate,
    {},
    {},
    {}
  >({ url: "/terrafund/submission/{id}/unable", method: "post", ...variables, signal });

export const usePostTerrafundSubmissionIDUnable = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundDueSubmissionRead,
      PostTerrafundSubmissionIDUnableError,
      PostTerrafundSubmissionIDUnableVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundDueSubmissionRead,
    PostTerrafundSubmissionIDUnableError,
    PostTerrafundSubmissionIDUnableVariables
  >(
    (variables: PostTerrafundSubmissionIDUnableVariables) =>
      fetchPostTerrafundSubmissionIDUnable({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTerrafundSiteSubmissionsSubmittedError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundSiteSubmissionsSubmittedVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundSiteSubmissionsSubmitted = (
  variables: GetTerrafundSiteSubmissionsSubmittedVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.TerrafundDueSubmissionReadAll, GetTerrafundSiteSubmissionsSubmittedError, undefined, {}, {}, {}>({
    url: "/terrafund/site/submissions/submitted",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundSiteSubmissionsSubmitted = <TData = Schemas.TerrafundDueSubmissionReadAll>(
  variables: GetTerrafundSiteSubmissionsSubmittedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TerrafundDueSubmissionReadAll, GetTerrafundSiteSubmissionsSubmittedError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundDueSubmissionReadAll, GetTerrafundSiteSubmissionsSubmittedError, TData>(
    queryKeyFn({
      path: "/terrafund/site/submissions/submitted",
      operationId: "getTerrafundSiteSubmissionsSubmitted",
      variables
    }),
    ({ signal }) => fetchGetTerrafundSiteSubmissionsSubmitted({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundSiteIDSubmissionsQueryParams = {
  /**
   * Page number
   */
  page?: number;
};

export type GetTerrafundSiteIDSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundSiteIDSubmissionsResponse = {
  data?: Schemas.TerrafundGenericSubmissionsReadAll;
  meta?: {
    first?: number;
    current?: number;
    last?: number;
    total?: number;
  };
};

export type GetTerrafundSiteIDSubmissionsVariables = {
  queryParams?: GetTerrafundSiteIDSubmissionsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetTerrafundSiteIDSubmissions = (
  variables: GetTerrafundSiteIDSubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetTerrafundSiteIDSubmissionsResponse,
    GetTerrafundSiteIDSubmissionsError,
    undefined,
    {},
    GetTerrafundSiteIDSubmissionsQueryParams,
    {}
  >({ url: "/terrafund/site/{id}/submissions", method: "get", ...variables, signal });

export const useGetTerrafundSiteIDSubmissions = <TData = GetTerrafundSiteIDSubmissionsResponse>(
  variables: GetTerrafundSiteIDSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetTerrafundSiteIDSubmissionsResponse, GetTerrafundSiteIDSubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetTerrafundSiteIDSubmissionsResponse, GetTerrafundSiteIDSubmissionsError, TData>(
    queryKeyFn({ path: "/terrafund/site/{ID}/submissions", operationId: "getTerrafundSiteIDSubmissions", variables }),
    ({ signal }) => fetchGetTerrafundSiteIDSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundNurserySubmissionsSubmittedError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundNurserySubmissionsSubmittedVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundNurserySubmissionsSubmitted = (
  variables: GetTerrafundNurserySubmissionsSubmittedVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.TerrafundDueSubmissionReadAll, GetTerrafundNurserySubmissionsSubmittedError, undefined, {}, {}, {}>({
    url: "/terrafund/nursery/submissions/submitted",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundNurserySubmissionsSubmitted = <TData = Schemas.TerrafundDueSubmissionReadAll>(
  variables: GetTerrafundNurserySubmissionsSubmittedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TerrafundDueSubmissionReadAll,
      GetTerrafundNurserySubmissionsSubmittedError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.TerrafundDueSubmissionReadAll,
    GetTerrafundNurserySubmissionsSubmittedError,
    TData
  >(
    queryKeyFn({
      path: "/terrafund/nursery/submissions/submitted",
      operationId: "getTerrafundNurserySubmissionsSubmitted",
      variables
    }),
    ({ signal }) => fetchGetTerrafundNurserySubmissionsSubmitted({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundNurseryIDSubmissionsQueryParams = {
  /**
   * Page number
   */
  page?: number;
};

export type GetTerrafundNurseryIDSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundNurseryIDSubmissionsResponse = {
  data?: Schemas.TerrafundGenericSubmissionsReadAll;
  meta?: {
    first?: number;
    current?: number;
    last?: number;
    total?: number;
  };
};

export type GetTerrafundNurseryIDSubmissionsVariables = {
  queryParams?: GetTerrafundNurseryIDSubmissionsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetTerrafundNurseryIDSubmissions = (
  variables: GetTerrafundNurseryIDSubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetTerrafundNurseryIDSubmissionsResponse,
    GetTerrafundNurseryIDSubmissionsError,
    undefined,
    {},
    GetTerrafundNurseryIDSubmissionsQueryParams,
    {}
  >({ url: "/terrafund/nursery/{id}/submissions", method: "get", ...variables, signal });

export const useGetTerrafundNurseryIDSubmissions = <TData = GetTerrafundNurseryIDSubmissionsResponse>(
  variables: GetTerrafundNurseryIDSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetTerrafundNurseryIDSubmissionsResponse, GetTerrafundNurseryIDSubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetTerrafundNurseryIDSubmissionsResponse, GetTerrafundNurseryIDSubmissionsError, TData>(
    queryKeyFn({
      path: "/terrafund/nursery/{ID}/submissions",
      operationId: "getTerrafundNurseryIDSubmissions",
      variables
    }),
    ({ signal }) => fetchGetTerrafundNurseryIDSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetOrganisationsIDFilesError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationsIDFilesVariables = ApiContext["fetcherOptions"];

export const fetchGetOrganisationsIDFiles = (variables: GetOrganisationsIDFilesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OrganisationFileReadAll, GetOrganisationsIDFilesError, undefined, {}, {}, {}>({
    url: "/organisations/{id}/files",
    method: "get",
    ...variables,
    signal
  });

export const useGetOrganisationsIDFiles = <TData = Schemas.OrganisationFileReadAll>(
  variables: GetOrganisationsIDFilesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.OrganisationFileReadAll, GetOrganisationsIDFilesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.OrganisationFileReadAll, GetOrganisationsIDFilesError, TData>(
    queryKeyFn({ path: "/organisations/{ID}/files", operationId: "getOrganisationsIDFiles", variables }),
    ({ signal }) => fetchGetOrganisationsIDFiles({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostTerrafundDisturbanceError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundDisturbanceVariables = {
  body?: Schemas.TerrafundDisturbanceCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundDisturbance = (variables: PostTerrafundDisturbanceVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.TerrafundDisturbanceRead,
    PostTerrafundDisturbanceError,
    Schemas.TerrafundDisturbanceCreate,
    {},
    {},
    {}
  >({ url: "/terrafund/disturbance", method: "post", ...variables, signal });

export const usePostTerrafundDisturbance = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundDisturbanceRead,
      PostTerrafundDisturbanceError,
      PostTerrafundDisturbanceVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundDisturbanceRead,
    PostTerrafundDisturbanceError,
    PostTerrafundDisturbanceVariables
  >(
    (variables: PostTerrafundDisturbanceVariables) =>
      fetchPostTerrafundDisturbance({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteTerrafundFileIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteTerrafundFileIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteTerrafundFileID = (variables: DeleteTerrafundFileIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteTerrafundFileIDError, undefined, {}, {}, {}>({
    url: "/terrafund/file/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteTerrafundFileID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteTerrafundFileIDError, DeleteTerrafundFileIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteTerrafundFileIDError, DeleteTerrafundFileIDVariables>(
    (variables: DeleteTerrafundFileIDVariables) => fetchDeleteTerrafundFileID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTerrafundNurserySubmissionDueError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundNurserySubmissionDueVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundNurserySubmissionDue = (
  variables: GetTerrafundNurserySubmissionDueVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.TerrafundDueSubmissionReadAll, GetTerrafundNurserySubmissionDueError, undefined, {}, {}, {}>({
    url: "/terrafund/nursery/submission/due",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundNurserySubmissionDue = <TData = Schemas.TerrafundDueSubmissionReadAll>(
  variables: GetTerrafundNurserySubmissionDueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TerrafundDueSubmissionReadAll, GetTerrafundNurserySubmissionDueError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundDueSubmissionReadAll, GetTerrafundNurserySubmissionDueError, TData>(
    queryKeyFn({
      path: "/terrafund/nursery/submission/due",
      operationId: "getTerrafundNurserySubmissionDue",
      variables
    }),
    ({ signal }) => fetchGetTerrafundNurserySubmissionDue({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundSiteSubmissionDueError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundSiteSubmissionDueVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundSiteSubmissionDue = (
  variables: GetTerrafundSiteSubmissionDueVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.TerrafundDueSubmissionReadAll, GetTerrafundSiteSubmissionDueError, undefined, {}, {}, {}>({
    url: "/terrafund/site/submission/due",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundSiteSubmissionDue = <TData = Schemas.TerrafundDueSubmissionReadAll>(
  variables: GetTerrafundSiteSubmissionDueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TerrafundDueSubmissionReadAll, GetTerrafundSiteSubmissionDueError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundDueSubmissionReadAll, GetTerrafundSiteSubmissionDueError, TData>(
    queryKeyFn({ path: "/terrafund/site/submission/due", operationId: "getTerrafundSiteSubmissionDue", variables }),
    ({ signal }) => fetchGetTerrafundSiteSubmissionDue({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostTerrafundSiteSubmissionError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundSiteSubmissionVariables = {
  body?: Schemas.TerrafundSiteSubmissionCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundSiteSubmission = (
  variables: PostTerrafundSiteSubmissionVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TerrafundSiteSubmissionRead,
    PostTerrafundSiteSubmissionError,
    Schemas.TerrafundSiteSubmissionCreate,
    {},
    {},
    {}
  >({ url: "/terrafund/site/submission", method: "post", ...variables, signal });

export const usePostTerrafundSiteSubmission = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundSiteSubmissionRead,
      PostTerrafundSiteSubmissionError,
      PostTerrafundSiteSubmissionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundSiteSubmissionRead,
    PostTerrafundSiteSubmissionError,
    PostTerrafundSiteSubmissionVariables
  >(
    (variables: PostTerrafundSiteSubmissionVariables) =>
      fetchPostTerrafundSiteSubmission({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTerrafundSiteSubmissionIDError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundSiteSubmissionIDVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundSiteSubmissionID = (
  variables: GetTerrafundSiteSubmissionIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.TerrafundSiteSubmissionRead, GetTerrafundSiteSubmissionIDError, undefined, {}, {}, {}>({
    url: "/terrafund/site/submission/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundSiteSubmissionID = <TData = Schemas.TerrafundSiteSubmissionRead>(
  variables: GetTerrafundSiteSubmissionIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TerrafundSiteSubmissionRead, GetTerrafundSiteSubmissionIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundSiteSubmissionRead, GetTerrafundSiteSubmissionIDError, TData>(
    queryKeyFn({ path: "/terrafund/site/submission/{ID}", operationId: "getTerrafundSiteSubmissionID", variables }),
    ({ signal }) => fetchGetTerrafundSiteSubmissionID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchTerrafundSiteSubmissionIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchTerrafundSiteSubmissionIDVariables = {
  body?: Schemas.TerrafundSiteSubmissionUpdate;
} & ApiContext["fetcherOptions"];

export const fetchPatchTerrafundSiteSubmissionID = (
  variables: PatchTerrafundSiteSubmissionIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TerrafundSiteSubmissionRead,
    PatchTerrafundSiteSubmissionIDError,
    Schemas.TerrafundSiteSubmissionUpdate,
    {},
    {},
    {}
  >({ url: "/terrafund/site/submission/{id}", method: "patch", ...variables, signal });

export const usePatchTerrafundSiteSubmissionID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundSiteSubmissionRead,
      PatchTerrafundSiteSubmissionIDError,
      PatchTerrafundSiteSubmissionIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundSiteSubmissionRead,
    PatchTerrafundSiteSubmissionIDError,
    PatchTerrafundSiteSubmissionIDVariables
  >(
    (variables: PatchTerrafundSiteSubmissionIDVariables) =>
      fetchPatchTerrafundSiteSubmissionID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTerrafundSiteLandTenuresError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundSiteLandTenuresVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundSiteLandTenures = (
  variables: GetTerrafundSiteLandTenuresVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.TerrafundLandTenureReadAll, GetTerrafundSiteLandTenuresError, undefined, {}, {}, {}>({
    url: "/terrafund/site/land_tenures",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundSiteLandTenures = <TData = Schemas.TerrafundLandTenureReadAll>(
  variables: GetTerrafundSiteLandTenuresVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TerrafundLandTenureReadAll, GetTerrafundSiteLandTenuresError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundLandTenureReadAll, GetTerrafundSiteLandTenuresError, TData>(
    queryKeyFn({ path: "/terrafund/site/land_tenures", operationId: "getTerrafundSiteLandTenures", variables }),
    ({ signal }) => fetchGetTerrafundSiteLandTenures({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundSiteRestorationMethodsError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundSiteRestorationMethodsVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundSiteRestorationMethods = (
  variables: GetTerrafundSiteRestorationMethodsVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.TerrafundRestorationMethodsReadAll, GetTerrafundSiteRestorationMethodsError, undefined, {}, {}, {}>({
    url: "/terrafund/site/restoration_methods",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundSiteRestorationMethods = <TData = Schemas.TerrafundRestorationMethodsReadAll>(
  variables: GetTerrafundSiteRestorationMethodsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TerrafundRestorationMethodsReadAll,
      GetTerrafundSiteRestorationMethodsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.TerrafundRestorationMethodsReadAll,
    GetTerrafundSiteRestorationMethodsError,
    TData
  >(
    queryKeyFn({
      path: "/terrafund/site/restoration_methods",
      operationId: "getTerrafundSiteRestorationMethods",
      variables
    }),
    ({ signal }) => fetchGetTerrafundSiteRestorationMethods({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostTerrafundProgrammeSubmissionError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundProgrammeSubmissionVariables = {
  body?: Schemas.TerrafundProgrammeSubmissionCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundProgrammeSubmission = (
  variables: PostTerrafundProgrammeSubmissionVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TerrafundProgrammeSubmissionRead,
    PostTerrafundProgrammeSubmissionError,
    Schemas.TerrafundProgrammeSubmissionCreate,
    {},
    {},
    {}
  >({ url: "/terrafund/programme/submission", method: "post", ...variables, signal });

export const usePostTerrafundProgrammeSubmission = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundProgrammeSubmissionRead,
      PostTerrafundProgrammeSubmissionError,
      PostTerrafundProgrammeSubmissionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundProgrammeSubmissionRead,
    PostTerrafundProgrammeSubmissionError,
    PostTerrafundProgrammeSubmissionVariables
  >(
    (variables: PostTerrafundProgrammeSubmissionVariables) =>
      fetchPostTerrafundProgrammeSubmission({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTerrafundProgrammesPersonalQueryParams = {
  /**
   * Scope to organisation ID
   */
  organisation_id?: number;
};

export type GetTerrafundProgrammesPersonalError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundProgrammesPersonalVariables = {
  queryParams?: GetTerrafundProgrammesPersonalQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetTerrafundProgrammesPersonal = (
  variables: GetTerrafundProgrammesPersonalVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TerrafundProgrammeReadAll,
    GetTerrafundProgrammesPersonalError,
    undefined,
    {},
    GetTerrafundProgrammesPersonalQueryParams,
    {}
  >({ url: "/terrafund/programmes/personal", method: "get", ...variables, signal });

export const useGetTerrafundProgrammesPersonal = <TData = Schemas.TerrafundProgrammeReadAll>(
  variables: GetTerrafundProgrammesPersonalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TerrafundProgrammeReadAll, GetTerrafundProgrammesPersonalError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundProgrammeReadAll, GetTerrafundProgrammesPersonalError, TData>(
    queryKeyFn({ path: "/terrafund/programmes/personal", operationId: "getTerrafundProgrammesPersonal", variables }),
    ({ signal }) => fetchGetTerrafundProgrammesPersonal({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundMyNurseriesError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundMyNurseriesResponse = Schemas.TerrafundNurseryRead[];

export type GetTerrafundMyNurseriesVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundMyNurseries = (variables: GetTerrafundMyNurseriesVariables, signal?: AbortSignal) =>
  apiFetch<GetTerrafundMyNurseriesResponse, GetTerrafundMyNurseriesError, undefined, {}, {}, {}>({
    url: "/terrafund/my/nurseries",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundMyNurseries = <TData = GetTerrafundMyNurseriesResponse>(
  variables: GetTerrafundMyNurseriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetTerrafundMyNurseriesResponse, GetTerrafundMyNurseriesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetTerrafundMyNurseriesResponse, GetTerrafundMyNurseriesError, TData>(
    queryKeyFn({ path: "/terrafund/my/nurseries", operationId: "getTerrafundMyNurseries", variables }),
    ({ signal }) => fetchGetTerrafundMyNurseries({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundMySitesError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundMySitesResponse = Schemas.TerrafundSiteRead[];

export type GetTerrafundMySitesVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundMySites = (variables: GetTerrafundMySitesVariables, signal?: AbortSignal) =>
  apiFetch<GetTerrafundMySitesResponse, GetTerrafundMySitesError, undefined, {}, {}, {}>({
    url: "/terrafund/my/sites",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundMySites = <TData = GetTerrafundMySitesResponse>(
  variables: GetTerrafundMySitesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetTerrafundMySitesResponse, GetTerrafundMySitesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetTerrafundMySitesResponse, GetTerrafundMySitesError, TData>(
    queryKeyFn({ path: "/terrafund/my/sites", operationId: "getTerrafundMySites", variables }),
    ({ signal }) => fetchGetTerrafundMySites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostTerrafundProgrammeSubmissionFilterError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundProgrammeSubmissionFilterResponse = Schemas.TerrafundProgrammeSubmissionRead[];

export type PostTerrafundProgrammeSubmissionFilterVariables = {
  body?: RequestBodies.TerrafundDateFilterCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundProgrammeSubmissionFilter = (
  variables: PostTerrafundProgrammeSubmissionFilterVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostTerrafundProgrammeSubmissionFilterResponse,
    PostTerrafundProgrammeSubmissionFilterError,
    RequestBodies.TerrafundDateFilterCreate,
    {},
    {},
    {}
  >({ url: "/terrafund/programme/submission/filter", method: "post", ...variables, signal });

export const usePostTerrafundProgrammeSubmissionFilter = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostTerrafundProgrammeSubmissionFilterResponse,
      PostTerrafundProgrammeSubmissionFilterError,
      PostTerrafundProgrammeSubmissionFilterVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostTerrafundProgrammeSubmissionFilterResponse,
    PostTerrafundProgrammeSubmissionFilterError,
    PostTerrafundProgrammeSubmissionFilterVariables
  >(
    (variables: PostTerrafundProgrammeSubmissionFilterVariables) =>
      fetchPostTerrafundProgrammeSubmissionFilter({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostTerrafundNurserySubmissionFilterError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundNurserySubmissionFilterResponse = Schemas.TerrafundNurserySubmissionRead[];

export type PostTerrafundNurserySubmissionFilterVariables = {
  body?: RequestBodies.TerrafundDateFilterCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundNurserySubmissionFilter = (
  variables: PostTerrafundNurserySubmissionFilterVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostTerrafundNurserySubmissionFilterResponse,
    PostTerrafundNurserySubmissionFilterError,
    RequestBodies.TerrafundDateFilterCreate,
    {},
    {},
    {}
  >({ url: "/terrafund/nursery/submission/filter", method: "post", ...variables, signal });

export const usePostTerrafundNurserySubmissionFilter = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostTerrafundNurserySubmissionFilterResponse,
      PostTerrafundNurserySubmissionFilterError,
      PostTerrafundNurserySubmissionFilterVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostTerrafundNurserySubmissionFilterResponse,
    PostTerrafundNurserySubmissionFilterError,
    PostTerrafundNurserySubmissionFilterVariables
  >(
    (variables: PostTerrafundNurserySubmissionFilterVariables) =>
      fetchPostTerrafundNurserySubmissionFilter({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostTerrafundSiteSubmissionFilterError = Fetcher.ErrorWrapper<undefined>;

export type PostTerrafundSiteSubmissionFilterResponse = Schemas.TerrafundSiteSubmissionRead[];

export type PostTerrafundSiteSubmissionFilterVariables = {
  body?: RequestBodies.TerrafundDateFilterCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostTerrafundSiteSubmissionFilter = (
  variables: PostTerrafundSiteSubmissionFilterVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    PostTerrafundSiteSubmissionFilterResponse,
    PostTerrafundSiteSubmissionFilterError,
    RequestBodies.TerrafundDateFilterCreate,
    {},
    {},
    {}
  >({ url: "/terrafund/site/submission/filter", method: "post", ...variables, signal });

export const usePostTerrafundSiteSubmissionFilter = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostTerrafundSiteSubmissionFilterResponse,
      PostTerrafundSiteSubmissionFilterError,
      PostTerrafundSiteSubmissionFilterVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostTerrafundSiteSubmissionFilterResponse,
    PostTerrafundSiteSubmissionFilterError,
    PostTerrafundSiteSubmissionFilterVariables
  >(
    (variables: PostTerrafundSiteSubmissionFilterVariables) =>
      fetchPostTerrafundSiteSubmissionFilter({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTerrafundNurseryTreeSpeciesError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundNurseryTreeSpeciesResponse = Schemas.TerrafundTreeSpeciesRead[];

export type GetTerrafundNurseryTreeSpeciesVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundNurseryTreeSpecies = (
  variables: GetTerrafundNurseryTreeSpeciesVariables,
  signal?: AbortSignal
) =>
  apiFetch<GetTerrafundNurseryTreeSpeciesResponse, GetTerrafundNurseryTreeSpeciesError, undefined, {}, {}, {}>({
    url: "/terrafund/nursery/tree_species",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundNurseryTreeSpecies = <TData = GetTerrafundNurseryTreeSpeciesResponse>(
  variables: GetTerrafundNurseryTreeSpeciesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetTerrafundNurseryTreeSpeciesResponse, GetTerrafundNurseryTreeSpeciesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetTerrafundNurseryTreeSpeciesResponse, GetTerrafundNurseryTreeSpeciesError, TData>(
    queryKeyFn({ path: "/terrafund/nursery/tree_species", operationId: "getTerrafundNurseryTreeSpecies", variables }),
    ({ signal }) => fetchGetTerrafundNurseryTreeSpecies({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundSiteTreeSpeciesError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundSiteTreeSpeciesResponse = Schemas.TerrafundTreeSpeciesRead[];

export type GetTerrafundSiteTreeSpeciesVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundSiteTreeSpecies = (
  variables: GetTerrafundSiteTreeSpeciesVariables,
  signal?: AbortSignal
) =>
  apiFetch<GetTerrafundSiteTreeSpeciesResponse, GetTerrafundSiteTreeSpeciesError, undefined, {}, {}, {}>({
    url: "/terrafund/site/tree_species",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundSiteTreeSpecies = <TData = GetTerrafundSiteTreeSpeciesResponse>(
  variables: GetTerrafundSiteTreeSpeciesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetTerrafundSiteTreeSpeciesResponse, GetTerrafundSiteTreeSpeciesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetTerrafundSiteTreeSpeciesResponse, GetTerrafundSiteTreeSpeciesError, TData>(
    queryKeyFn({ path: "/terrafund/site/tree_species", operationId: "getTerrafundSiteTreeSpecies", variables }),
    ({ signal }) => fetchGetTerrafundSiteTreeSpecies({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetSatelliteMonitorTerrafundProgrammeIDPathParams = {
  id: number;
};

export type GetSatelliteMonitorTerrafundProgrammeIDError = Fetcher.ErrorWrapper<undefined>;

export type GetSatelliteMonitorTerrafundProgrammeIDVariables = {
  pathParams: GetSatelliteMonitorTerrafundProgrammeIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetSatelliteMonitorTerrafundProgrammeID = (
  variables: GetSatelliteMonitorTerrafundProgrammeIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SatelliteMonitorReadAll,
    GetSatelliteMonitorTerrafundProgrammeIDError,
    undefined,
    {},
    {},
    GetSatelliteMonitorTerrafundProgrammeIDPathParams
  >({ url: "/satellite_monitor/terrafund_programme/{id}", method: "get", ...variables, signal });

export const useGetSatelliteMonitorTerrafundProgrammeID = <TData = Schemas.SatelliteMonitorReadAll>(
  variables: GetSatelliteMonitorTerrafundProgrammeIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SatelliteMonitorReadAll, GetSatelliteMonitorTerrafundProgrammeIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SatelliteMonitorReadAll, GetSatelliteMonitorTerrafundProgrammeIDError, TData>(
    queryKeyFn({
      path: "/satellite_monitor/terrafund_programme/{ID}",
      operationId: "getSatelliteMonitorTerrafundProgrammeID",
      variables
    }),
    ({ signal }) => fetchGetSatelliteMonitorTerrafundProgrammeID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetSatelliteMonitorTerrafundProgrammeIDLatestPathParams = {
  id: number;
};

export type GetSatelliteMonitorTerrafundProgrammeIDLatestError = Fetcher.ErrorWrapper<undefined>;

export type GetSatelliteMonitorTerrafundProgrammeIDLatestVariables = {
  pathParams: GetSatelliteMonitorTerrafundProgrammeIDLatestPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetSatelliteMonitorTerrafundProgrammeIDLatest = (
  variables: GetSatelliteMonitorTerrafundProgrammeIDLatestVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TerrafundShapefileReadAll,
    GetSatelliteMonitorTerrafundProgrammeIDLatestError,
    undefined,
    {},
    {},
    GetSatelliteMonitorTerrafundProgrammeIDLatestPathParams
  >({ url: "/satellite_monitor/terrafund_programme/{id}/latest", method: "get", ...variables, signal });

export const useGetSatelliteMonitorTerrafundProgrammeIDLatest = <TData = Schemas.TerrafundShapefileReadAll>(
  variables: GetSatelliteMonitorTerrafundProgrammeIDLatestVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TerrafundShapefileReadAll,
      GetSatelliteMonitorTerrafundProgrammeIDLatestError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.TerrafundShapefileReadAll,
    GetSatelliteMonitorTerrafundProgrammeIDLatestError,
    TData
  >(
    queryKeyFn({
      path: "/satellite_monitor/terrafund_programme/{ID}/latest",
      operationId: "getSatelliteMonitorTerrafundProgrammeIDLatest",
      variables
    }),
    ({ signal }) => fetchGetSatelliteMonitorTerrafundProgrammeIDLatest({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchProgrammeIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchProgrammeIDVariables = {
  body?: Schemas.ProgrammeUpdate;
} & ApiContext["fetcherOptions"];

export const fetchPatchProgrammeID = (variables: PatchProgrammeIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ProgrammeRead, PatchProgrammeIDError, Schemas.ProgrammeUpdate, {}, {}, {}>({
    url: "/programme/{id}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchProgrammeID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.ProgrammeRead, PatchProgrammeIDError, PatchProgrammeIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.ProgrammeRead, PatchProgrammeIDError, PatchProgrammeIDVariables>(
    (variables: PatchProgrammeIDVariables) => fetchPatchProgrammeID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchSiteIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchSiteIDVariables = {
  body?: Schemas.SiteUpdate;
} & ApiContext["fetcherOptions"];

export const fetchPatchSiteID = (variables: PatchSiteIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteRead, PatchSiteIDError, Schemas.SiteUpdate, {}, {}, {}>({
    url: "/site/{id}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchSiteID = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.SiteRead, PatchSiteIDError, PatchSiteIDVariables>, "mutationFn">
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.SiteRead, PatchSiteIDError, PatchSiteIDVariables>(
    (variables: PatchSiteIDVariables) => fetchPatchSiteID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetSitesExporterError = Fetcher.ErrorWrapper<undefined>;

export type GetSitesExporterVariables = {
  body?: Schemas.PPCSiteExport;
} & ApiContext["fetcherOptions"];

export const fetchGetSitesExporter = (variables: GetSitesExporterVariables, signal?: AbortSignal) =>
  apiFetch<Blob, GetSitesExporterError, Schemas.PPCSiteExport, {}, {}, {}>({
    url: "/sites/exporter",
    method: "get",
    ...variables,
    signal
  });

export const useGetSitesExporter = <TData = Blob>(
  variables: GetSitesExporterVariables,
  options?: Omit<reactQuery.UseQueryOptions<Blob, GetSitesExporterError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetSitesExporterError, TData>(
    queryKeyFn({ path: "/sites/exporter", operationId: "getSitesExporter", variables }),
    ({ signal }) => fetchGetSitesExporter({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetPpcExportProgrammeIDShapefilesError = Fetcher.ErrorWrapper<undefined>;

export type GetPpcExportProgrammeIDShapefilesVariables = ApiContext["fetcherOptions"];

export const fetchGetPpcExportProgrammeIDShapefiles = (
  variables: GetPpcExportProgrammeIDShapefilesVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetPpcExportProgrammeIDShapefilesError, undefined, {}, {}, {}>({
    url: "/ppc/export/programme/{id}/shapefiles",
    method: "get",
    ...variables,
    signal
  });

export const useGetPpcExportProgrammeIDShapefiles = <TData = Blob>(
  variables: GetPpcExportProgrammeIDShapefilesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Blob, GetPpcExportProgrammeIDShapefilesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetPpcExportProgrammeIDShapefilesError, TData>(
    queryKeyFn({
      path: "/ppc/export/programme/{ID}/shapefiles",
      operationId: "getPpcExportProgrammeIDShapefiles",
      variables
    }),
    ({ signal }) => fetchGetPpcExportProgrammeIDShapefiles({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetPpcExportProgrammeSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetPpcExportProgrammeSubmissionsVariables = ApiContext["fetcherOptions"];

export const fetchGetPpcExportProgrammeSubmissions = (
  variables: GetPpcExportProgrammeSubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetPpcExportProgrammeSubmissionsError, undefined, {}, {}, {}>({
    url: "/ppc/export/programme/submissions",
    method: "get",
    ...variables,
    signal
  });

export const useGetPpcExportProgrammeSubmissions = <TData = Blob>(
  variables: GetPpcExportProgrammeSubmissionsVariables,
  options?: Omit<reactQuery.UseQueryOptions<Blob, GetPpcExportProgrammeSubmissionsError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetPpcExportProgrammeSubmissionsError, TData>(
    queryKeyFn({
      path: "/ppc/export/programme/submissions",
      operationId: "getPpcExportProgrammeSubmissions",
      variables
    }),
    ({ signal }) => fetchGetPpcExportProgrammeSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetPpcExportProgrammeIDSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetPpcExportProgrammeIDSubmissionsVariables = ApiContext["fetcherOptions"];

export const fetchGetPpcExportProgrammeIDSubmissions = (
  variables: GetPpcExportProgrammeIDSubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetPpcExportProgrammeIDSubmissionsError, undefined, {}, {}, {}>({
    url: "/ppc/export/programme/{id}/submissions",
    method: "get",
    ...variables,
    signal
  });

export const useGetPpcExportProgrammeIDSubmissions = <TData = Blob>(
  variables: GetPpcExportProgrammeIDSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Blob, GetPpcExportProgrammeIDSubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetPpcExportProgrammeIDSubmissionsError, TData>(
    queryKeyFn({
      path: "/ppc/export/programme/{ID}/submissions",
      operationId: "getPpcExportProgrammeIDSubmissions",
      variables
    }),
    ({ signal }) => fetchGetPpcExportProgrammeIDSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetPpcExportSiteIDSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetPpcExportSiteIDSubmissionsVariables = ApiContext["fetcherOptions"];

export const fetchGetPpcExportSiteIDSubmissions = (
  variables: GetPpcExportSiteIDSubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetPpcExportSiteIDSubmissionsError, undefined, {}, {}, {}>({
    url: "/ppc/export/site/{id}/submissions",
    method: "get",
    ...variables,
    signal
  });

export const useGetPpcExportSiteIDSubmissions = <TData = Blob>(
  variables: GetPpcExportSiteIDSubmissionsVariables,
  options?: Omit<reactQuery.UseQueryOptions<Blob, GetPpcExportSiteIDSubmissionsError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetPpcExportSiteIDSubmissionsError, TData>(
    queryKeyFn({ path: "/ppc/export/site/{ID}/submissions", operationId: "getPpcExportSiteIDSubmissions", variables }),
    ({ signal }) => fetchGetPpcExportSiteIDSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetPpcExportSiteSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetPpcExportSiteSubmissionsVariables = ApiContext["fetcherOptions"];

export const fetchGetPpcExportSiteSubmissions = (
  variables: GetPpcExportSiteSubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetPpcExportSiteSubmissionsError, undefined, {}, {}, {}>({
    url: "/ppc/export/site/submissions",
    method: "get",
    ...variables,
    signal
  });

export const useGetPpcExportSiteSubmissions = <TData = Blob>(
  variables: GetPpcExportSiteSubmissionsVariables,
  options?: Omit<reactQuery.UseQueryOptions<Blob, GetPpcExportSiteSubmissionsError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetPpcExportSiteSubmissionsError, TData>(
    queryKeyFn({ path: "/ppc/export/site/submissions", operationId: "getPpcExportSiteSubmissions", variables }),
    ({ signal }) => fetchGetPpcExportSiteSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetPpcExportProgrammeIDImagesError = Fetcher.ErrorWrapper<undefined>;

export type GetPpcExportProgrammeIDImagesVariables = ApiContext["fetcherOptions"];

export const fetchGetPpcExportProgrammeIDImages = (
  variables: GetPpcExportProgrammeIDImagesVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetPpcExportProgrammeIDImagesError, undefined, {}, {}, {}>({
    url: "/ppc/export/programme/{id}/images",
    method: "get",
    ...variables,
    signal
  });

export const useGetPpcExportProgrammeIDImages = <TData = Blob>(
  variables: GetPpcExportProgrammeIDImagesVariables,
  options?: Omit<reactQuery.UseQueryOptions<Blob, GetPpcExportProgrammeIDImagesError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetPpcExportProgrammeIDImagesError, TData>(
    queryKeyFn({ path: "/ppc/export/programme/{ID}/images", operationId: "getPpcExportProgrammeIDImages", variables }),
    ({ signal }) => fetchGetPpcExportProgrammeIDImages({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundExportSiteSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundExportSiteSubmissionsVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundExportSiteSubmissions = (
  variables: GetTerrafundExportSiteSubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetTerrafundExportSiteSubmissionsError, undefined, {}, {}, {}>({
    url: "/terrafund/export/site/submissions",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundExportSiteSubmissions = <TData = Blob>(
  variables: GetTerrafundExportSiteSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Blob, GetTerrafundExportSiteSubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetTerrafundExportSiteSubmissionsError, TData>(
    queryKeyFn({
      path: "/terrafund/export/site/submissions",
      operationId: "getTerrafundExportSiteSubmissions",
      variables
    }),
    ({ signal }) => fetchGetTerrafundExportSiteSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundExportNurserySubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundExportNurserySubmissionsVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundExportNurserySubmissions = (
  variables: GetTerrafundExportNurserySubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetTerrafundExportNurserySubmissionsError, undefined, {}, {}, {}>({
    url: "/terrafund/export/nursery/submissions",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundExportNurserySubmissions = <TData = Blob>(
  variables: GetTerrafundExportNurserySubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Blob, GetTerrafundExportNurserySubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetTerrafundExportNurserySubmissionsError, TData>(
    queryKeyFn({
      path: "/terrafund/export/nursery/submissions",
      operationId: "getTerrafundExportNurserySubmissions",
      variables
    }),
    ({ signal }) => fetchGetTerrafundExportNurserySubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundExportProgrammeSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundExportProgrammeSubmissionsVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundExportProgrammeSubmissions = (
  variables: GetTerrafundExportProgrammeSubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetTerrafundExportProgrammeSubmissionsError, undefined, {}, {}, {}>({
    url: "/terrafund/export/programme/submissions",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundExportProgrammeSubmissions = <TData = Blob>(
  variables: GetTerrafundExportProgrammeSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Blob, GetTerrafundExportProgrammeSubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetTerrafundExportProgrammeSubmissionsError, TData>(
    queryKeyFn({
      path: "/terrafund/export/programme/submissions",
      operationId: "getTerrafundExportProgrammeSubmissions",
      variables
    }),
    ({ signal }) => fetchGetTerrafundExportProgrammeSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundExportProgrammeIDSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundExportProgrammeIDSubmissionsVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundExportProgrammeIDSubmissions = (
  variables: GetTerrafundExportProgrammeIDSubmissionsVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetTerrafundExportProgrammeIDSubmissionsError, undefined, {}, {}, {}>({
    url: "/terrafund/export/programme/{id}/submissions",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundExportProgrammeIDSubmissions = <TData = Blob>(
  variables: GetTerrafundExportProgrammeIDSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Blob, GetTerrafundExportProgrammeIDSubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetTerrafundExportProgrammeIDSubmissionsError, TData>(
    queryKeyFn({
      path: "/terrafund/export/programme/{ID}/submissions",
      operationId: "getTerrafundExportProgrammeIDSubmissions",
      variables
    }),
    ({ signal }) => fetchGetTerrafundExportProgrammeIDSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundExportProgrammeIDImagesError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundExportProgrammeIDImagesVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundExportProgrammeIDImages = (
  variables: GetTerrafundExportProgrammeIDImagesVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetTerrafundExportProgrammeIDImagesError, undefined, {}, {}, {}>({
    url: "/terrafund/export/programme/{id}/images",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundExportProgrammeIDImages = <TData = Blob>(
  variables: GetTerrafundExportProgrammeIDImagesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Blob, GetTerrafundExportProgrammeIDImagesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetTerrafundExportProgrammeIDImagesError, TData>(
    queryKeyFn({
      path: "/terrafund/export/programme/{ID}/images",
      operationId: "getTerrafundExportProgrammeIDImages",
      variables
    }),
    ({ signal }) => fetchGetTerrafundExportProgrammeIDImages({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundExportProgrammeIDShapefilesError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundExportProgrammeIDShapefilesVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundExportProgrammeIDShapefiles = (
  variables: GetTerrafundExportProgrammeIDShapefilesVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.TerrafundShapefileReadAll, GetTerrafundExportProgrammeIDShapefilesError, undefined, {}, {}, {}>({
    url: "/terrafund/export/programme/{id}/shapefiles",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundExportProgrammeIDShapefiles = <TData = Schemas.TerrafundShapefileReadAll>(
  variables: GetTerrafundExportProgrammeIDShapefilesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TerrafundShapefileReadAll, GetTerrafundExportProgrammeIDShapefilesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundShapefileReadAll, GetTerrafundExportProgrammeIDShapefilesError, TData>(
    queryKeyFn({
      path: "/terrafund/export/programme/{ID}/shapefiles",
      operationId: "getTerrafundExportProgrammeIDShapefiles",
      variables
    }),
    ({ signal }) => fetchGetTerrafundExportProgrammeIDShapefiles({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundProgrammeIDPartnersError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundProgrammeIDPartnersVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundProgrammeIDPartners = (
  variables: GetTerrafundProgrammeIDPartnersVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.UserReadAll, GetTerrafundProgrammeIDPartnersError, undefined, {}, {}, {}>({
    url: "/terrafund/programme/{id}/partners",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundProgrammeIDPartners = <TData = Schemas.UserReadAll>(
  variables: GetTerrafundProgrammeIDPartnersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.UserReadAll, GetTerrafundProgrammeIDPartnersError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.UserReadAll, GetTerrafundProgrammeIDPartnersError, TData>(
    queryKeyFn({
      path: "/terrafund/programme/{ID}/partners",
      operationId: "getTerrafundProgrammeIDPartners",
      variables
    }),
    ({ signal }) => fetchGetTerrafundProgrammeIDPartners({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteTerrafundDisturbanceIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteTerrafundDisturbanceIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteTerrafundDisturbanceID = (
  variables: DeleteTerrafundDisturbanceIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.Empty, DeleteTerrafundDisturbanceIDError, undefined, {}, {}, {}>({
    url: "/terrafund/disturbance/{id}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteTerrafundDisturbanceID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Empty,
      DeleteTerrafundDisturbanceIDError,
      DeleteTerrafundDisturbanceIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Empty,
    DeleteTerrafundDisturbanceIDError,
    DeleteTerrafundDisturbanceIDVariables
  >(
    (variables: DeleteTerrafundDisturbanceIDVariables) =>
      fetchDeleteTerrafundDisturbanceID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchTerrafundDisturbanceIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchTerrafundDisturbanceIDVariables = {
  body?: Schemas.TerrafundDisturbanceUpdate;
} & ApiContext["fetcherOptions"];

export const fetchPatchTerrafundDisturbanceID = (
  variables: PatchTerrafundDisturbanceIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.TerrafundDisturbanceRead,
    PatchTerrafundDisturbanceIDError,
    Schemas.TerrafundDisturbanceUpdate,
    {},
    {},
    {}
  >({ url: "/terrafund/disturbance/{id}", method: "patch", ...variables, signal });

export const usePatchTerrafundDisturbanceID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TerrafundDisturbanceRead,
      PatchTerrafundDisturbanceIDError,
      PatchTerrafundDisturbanceIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TerrafundDisturbanceRead,
    PatchTerrafundDisturbanceIDError,
    PatchTerrafundDisturbanceIDVariables
  >(
    (variables: PatchTerrafundDisturbanceIDVariables) =>
      fetchPatchTerrafundDisturbanceID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTerrafundExportSiteSubmissionIDError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundExportSiteSubmissionIDVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundExportSiteSubmissionID = (
  variables: GetTerrafundExportSiteSubmissionIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetTerrafundExportSiteSubmissionIDError, undefined, {}, {}, {}>({
    url: "/terrafund/export/site/submission/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundExportSiteSubmissionID = <TData = Blob>(
  variables: GetTerrafundExportSiteSubmissionIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Blob, GetTerrafundExportSiteSubmissionIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetTerrafundExportSiteSubmissionIDError, TData>(
    queryKeyFn({
      path: "/terrafund/export/site/submission/{ID}",
      operationId: "getTerrafundExportSiteSubmissionID",
      variables
    }),
    ({ signal }) => fetchGetTerrafundExportSiteSubmissionID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundExportNurserySubmissionIDError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundExportNurserySubmissionIDVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundExportNurserySubmissionID = (
  variables: GetTerrafundExportNurserySubmissionIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetTerrafundExportNurserySubmissionIDError, undefined, {}, {}, {}>({
    url: "/terrafund/export/nursery/submission/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundExportNurserySubmissionID = <TData = Blob>(
  variables: GetTerrafundExportNurserySubmissionIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Blob, GetTerrafundExportNurserySubmissionIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetTerrafundExportNurserySubmissionIDError, TData>(
    queryKeyFn({
      path: "/terrafund/export/nursery/submission/{ID}",
      operationId: "getTerrafundExportNurserySubmissionID",
      variables
    }),
    ({ signal }) => fetchGetTerrafundExportNurserySubmissionID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundExportNurseryIDSubmissionError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundExportNurseryIDSubmissionVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundExportNurseryIDSubmission = (
  variables: GetTerrafundExportNurseryIDSubmissionVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetTerrafundExportNurseryIDSubmissionError, undefined, {}, {}, {}>({
    url: "/terrafund/export/nursery/{id}/submission",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundExportNurseryIDSubmission = <TData = Blob>(
  variables: GetTerrafundExportNurseryIDSubmissionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Blob, GetTerrafundExportNurseryIDSubmissionError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetTerrafundExportNurseryIDSubmissionError, TData>(
    queryKeyFn({
      path: "/terrafund/export/nursery/{ID}/submission",
      operationId: "getTerrafundExportNurseryIDSubmission",
      variables
    }),
    ({ signal }) => fetchGetTerrafundExportNurseryIDSubmission({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundExportSiteIDSubmissionError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundExportSiteIDSubmissionVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundExportSiteIDSubmission = (
  variables: GetTerrafundExportSiteIDSubmissionVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetTerrafundExportSiteIDSubmissionError, undefined, {}, {}, {}>({
    url: "/terrafund/export/site/{id}/submission",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundExportSiteIDSubmission = <TData = Blob>(
  variables: GetTerrafundExportSiteIDSubmissionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Blob, GetTerrafundExportSiteIDSubmissionError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetTerrafundExportSiteIDSubmissionError, TData>(
    queryKeyFn({
      path: "/terrafund/export/site/{ID}/submission",
      operationId: "getTerrafundExportSiteIDSubmission",
      variables
    }),
    ({ signal }) => fetchGetTerrafundExportSiteIDSubmission({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostExportsCustomError = Fetcher.ErrorWrapper<undefined>;

export type PostExportsCustomVariables = {
  body?: Schemas.CustomReportCreate;
} & ApiContext["fetcherOptions"];

/**
 * This endpoint allows you to specify what fields and files you'd like to return as well as a duration. current reports are 'programme', 'submission', 'site' and , 'site_submission', 'control_site' and 'control_site_submission'.
 */
export const fetchPostExportsCustom = (variables: PostExportsCustomVariables, signal?: AbortSignal) =>
  apiFetch<Blob, PostExportsCustomError, Schemas.CustomReportCreate, {}, {}, {}>({
    url: "/exports/custom",
    method: "post",
    ...variables,
    signal
  });

/**
 * This endpoint allows you to specify what fields and files you'd like to return as well as a duration. current reports are 'programme', 'submission', 'site' and , 'site_submission', 'control_site' and 'control_site_submission'.
 */
export const usePostExportsCustom = (
  options?: Omit<reactQuery.UseMutationOptions<Blob, PostExportsCustomError, PostExportsCustomVariables>, "mutationFn">
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Blob, PostExportsCustomError, PostExportsCustomVariables>(
    (variables: PostExportsCustomVariables) => fetchPostExportsCustom({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetExportsIDFieldListError = Fetcher.ErrorWrapper<undefined>;

export type GetExportsIDFieldListResponse = {
  field_name1?: string;
  field_name2?: string;
  field_name3?: string;
}[];

export type GetExportsIDFieldListVariables = ApiContext["fetcherOptions"];

/**
 * This endpoint retrieves a list of available fields for a specified custom report. Currently the available ID's are 'programme', 'submission', 'site', 'site_submission', 'control_site' and 'control_site_submission'.
 */
export const fetchGetExportsIDFieldList = (variables: GetExportsIDFieldListVariables, signal?: AbortSignal) =>
  apiFetch<GetExportsIDFieldListResponse, GetExportsIDFieldListError, undefined, {}, {}, {}>({
    url: "/exports/{id}/field_list",
    method: "get",
    ...variables,
    signal
  });

/**
 * This endpoint retrieves a list of available fields for a specified custom report. Currently the available ID's are 'programme', 'submission', 'site', 'site_submission', 'control_site' and 'control_site_submission'.
 */
export const useGetExportsIDFieldList = <TData = GetExportsIDFieldListResponse>(
  variables: GetExportsIDFieldListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetExportsIDFieldListResponse, GetExportsIDFieldListError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetExportsIDFieldListResponse, GetExportsIDFieldListError, TData>(
    queryKeyFn({ path: "/exports/{ID}/field_list", operationId: "getExportsIDFieldList", variables }),
    ({ signal }) => fetchGetExportsIDFieldList({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetOrganisationsIDTerrafundProgrammesError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganisationsIDTerrafundProgrammesVariables = ApiContext["fetcherOptions"];

export const fetchGetOrganisationsIDTerrafundProgrammes = (
  variables: GetOrganisationsIDTerrafundProgrammesVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.TerrafundProgrammeReadAll, GetOrganisationsIDTerrafundProgrammesError, undefined, {}, {}, {}>({
    url: "/organisations/{id}/terrafund/programmes",
    method: "get",
    ...variables,
    signal
  });

export const useGetOrganisationsIDTerrafundProgrammes = <TData = Schemas.TerrafundProgrammeReadAll>(
  variables: GetOrganisationsIDTerrafundProgrammesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TerrafundProgrammeReadAll, GetOrganisationsIDTerrafundProgrammesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.TerrafundProgrammeReadAll, GetOrganisationsIDTerrafundProgrammesError, TData>(
    queryKeyFn({
      path: "/organisations/{ID}/terrafund/programmes",
      operationId: "getOrganisationsIDTerrafundProgrammes",
      variables
    }),
    ({ signal }) => fetchGetOrganisationsIDTerrafundProgrammes({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ProjectMetricsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectMetricsResponse = Schemas.ProjectMetricReadAll[];

export type GetV2ProjectMetricsVariables = ApiContext["fetcherOptions"];

export const fetchGetV2ProjectMetrics = (variables: GetV2ProjectMetricsVariables, signal?: AbortSignal) =>
  apiFetch<GetV2ProjectMetricsResponse, GetV2ProjectMetricsError, undefined, {}, {}, {}>({
    url: "/v2/project-metrics",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ProjectMetrics = <TData = GetV2ProjectMetricsResponse>(
  variables: GetV2ProjectMetricsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectMetricsResponse, GetV2ProjectMetricsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectMetricsResponse, GetV2ProjectMetricsError, TData>(
    queryKeyFn({ path: "/v2/project-metrics", operationId: "getV2ProjectMetrics", variables }),
    ({ signal }) => fetchGetV2ProjectMetrics({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2ProjectMetricsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2ProjectMetricsVariables = {
  body: Schemas.ProjectMetricCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostV2ProjectMetrics = (variables: PostV2ProjectMetricsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ProjectMetricRead, PostV2ProjectMetricsError, Schemas.ProjectMetricCreate, {}, {}, {}>({
    url: "/v2/project-metrics",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2ProjectMetrics = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.ProjectMetricRead, PostV2ProjectMetricsError, PostV2ProjectMetricsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.ProjectMetricRead, PostV2ProjectMetricsError, PostV2ProjectMetricsVariables>(
    (variables: PostV2ProjectMetricsVariables) => fetchPostV2ProjectMetrics({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FundingProgrammeQueryParams = {
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2FundingProgrammeError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FundingProgrammeResponse = {
  data?: Schemas.FundingProgramme[];
  links?: Schemas.V2PaginationLinks;
  meta?: Schemas.V2PaginationMeta;
};

export type GetV2FundingProgrammeVariables = {
  queryParams?: GetV2FundingProgrammeQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FundingProgramme = (variables: GetV2FundingProgrammeVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2FundingProgrammeResponse,
    GetV2FundingProgrammeError,
    undefined,
    {},
    GetV2FundingProgrammeQueryParams,
    {}
  >({ url: "/v2/funding-programme", method: "get", ...variables, signal });

export const useGetV2FundingProgramme = <TData = GetV2FundingProgrammeResponse>(
  variables: GetV2FundingProgrammeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FundingProgrammeResponse, GetV2FundingProgrammeError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FundingProgrammeResponse, GetV2FundingProgrammeError, TData>(
    queryKeyFn({ path: "/v2/funding-programme", operationId: "getV2FundingProgramme", variables }),
    ({ signal }) => fetchGetV2FundingProgramme({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFundingProgrammeQueryParams = {
  /**
   * page number you want results from
   */
  page?: number;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
};

export type GetV2AdminFundingProgrammeError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFundingProgrammeResponse = {
  data?: Schemas.FundingProgramme[];
  links?: Schemas.V2PaginationLinks;
  meta?: Schemas.V2PaginationMeta;
};

export type GetV2AdminFundingProgrammeVariables = {
  queryParams?: GetV2AdminFundingProgrammeQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFundingProgramme = (variables: GetV2AdminFundingProgrammeVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminFundingProgrammeResponse,
    GetV2AdminFundingProgrammeError,
    undefined,
    {},
    GetV2AdminFundingProgrammeQueryParams,
    {}
  >({ url: "/v2/admin/funding-programme", method: "get", ...variables, signal });

export const useGetV2AdminFundingProgramme = <TData = GetV2AdminFundingProgrammeResponse>(
  variables: GetV2AdminFundingProgrammeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFundingProgrammeResponse, GetV2AdminFundingProgrammeError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFundingProgrammeResponse, GetV2AdminFundingProgrammeError, TData>(
    queryKeyFn({ path: "/v2/admin/funding-programme", operationId: "getV2AdminFundingProgramme", variables }),
    ({ signal }) => fetchGetV2AdminFundingProgramme({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2AdminFundingProgrammeError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminFundingProgrammeVariables = {
  body?: RequestBodies.FundingProgrammeCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminFundingProgramme = (
  variables: PostV2AdminFundingProgrammeVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.FundingProgramme,
    PostV2AdminFundingProgrammeError,
    RequestBodies.FundingProgrammeCreate,
    {},
    {},
    {}
  >({ url: "/v2/admin/funding-programme", method: "post", ...variables, signal });

export const usePostV2AdminFundingProgramme = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FundingProgramme,
      PostV2AdminFundingProgrammeError,
      PostV2AdminFundingProgrammeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.FundingProgramme,
    PostV2AdminFundingProgrammeError,
    PostV2AdminFundingProgrammeVariables
  >(
    (variables: PostV2AdminFundingProgrammeVariables) =>
      fetchPostV2AdminFundingProgramme({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FundingProgrammeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FundingProgrammeUUIDVariables = {
  body?: RequestBodies.FundingProgramme;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FundingProgrammeUUID = (variables: GetV2FundingProgrammeUUIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.FundingProgramme, GetV2FundingProgrammeUUIDError, RequestBodies.FundingProgramme, {}, {}, {}>({
    url: "/v2/funding-programme/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2FundingProgrammeUUID = <TData = Schemas.FundingProgramme>(
  variables: GetV2FundingProgrammeUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.FundingProgramme, GetV2FundingProgrammeUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.FundingProgramme, GetV2FundingProgrammeUUIDError, TData>(
    queryKeyFn({ path: "/v2/funding-programme/{UUID}", operationId: "getV2FundingProgrammeUUID", variables }),
    ({ signal }) => fetchGetV2FundingProgrammeUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFundingProgrammeUUIDPathParams = {
  uuid: string;
};

export type GetV2AdminFundingProgrammeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFundingProgrammeUUIDVariables = {
  body?: RequestBodies.FundingProgramme;
  pathParams: GetV2AdminFundingProgrammeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFundingProgrammeUUID = (
  variables: GetV2AdminFundingProgrammeUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.FundingProgramme,
    GetV2AdminFundingProgrammeUUIDError,
    RequestBodies.FundingProgramme,
    {},
    {},
    GetV2AdminFundingProgrammeUUIDPathParams
  >({ url: "/v2/admin/funding-programme/{uuid}", method: "get", ...variables, signal });

export const useGetV2AdminFundingProgrammeUUID = <TData = Schemas.FundingProgramme>(
  variables: GetV2AdminFundingProgrammeUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.FundingProgramme, GetV2AdminFundingProgrammeUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.FundingProgramme, GetV2AdminFundingProgrammeUUIDError, TData>(
    queryKeyFn({
      path: "/v2/admin/funding-programme/{UUID}",
      operationId: "getV2AdminFundingProgrammeUUID",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFundingProgrammeUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2AdminFundingProgrammeUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminFundingProgrammeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminFundingProgrammeUUIDVariables = {
  body?: RequestBodies.FundingProgrammeCreate;
  pathParams: PutV2AdminFundingProgrammeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminFundingProgrammeUUID = (
  variables: PutV2AdminFundingProgrammeUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.FundingProgramme,
    PutV2AdminFundingProgrammeUUIDError,
    RequestBodies.FundingProgrammeCreate,
    {},
    {},
    PutV2AdminFundingProgrammeUUIDPathParams
  >({ url: "/v2/admin/funding-programme/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminFundingProgrammeUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FundingProgramme,
      PutV2AdminFundingProgrammeUUIDError,
      PutV2AdminFundingProgrammeUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.FundingProgramme,
    PutV2AdminFundingProgrammeUUIDError,
    PutV2AdminFundingProgrammeUUIDVariables
  >(
    (variables: PutV2AdminFundingProgrammeUUIDVariables) =>
      fetchPutV2AdminFundingProgrammeUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminFundingProgrammeUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminFundingProgrammeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFundingProgrammeUUIDVariables = {
  pathParams: DeleteV2AdminFundingProgrammeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFundingProgrammeUUID = (
  variables: DeleteV2AdminFundingProgrammeUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminFundingProgrammeUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminFundingProgrammeUUIDPathParams
  >({ url: "/v2/admin/funding-programme/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminFundingProgrammeUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminFundingProgrammeUUIDError,
      DeleteV2AdminFundingProgrammeUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminFundingProgrammeUUIDError,
    DeleteV2AdminFundingProgrammeUUIDVariables
  >(
    (variables: DeleteV2AdminFundingProgrammeUUIDVariables) =>
      fetchDeleteV2AdminFundingProgrammeUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AdminFundingProgrammeUUIDStatusError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFundingProgrammeUUIDStatusVariables = {
  body?: RequestBodies.FundingProgrammeCreate;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFundingProgrammeUUIDStatus = (
  variables: PatchV2AdminFundingProgrammeUUIDStatusVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.FundingProgrammeStatus,
    PatchV2AdminFundingProgrammeUUIDStatusError,
    RequestBodies.FundingProgrammeCreate,
    {},
    {},
    {}
  >({ url: "/v2/admin/funding-programme/{uuid}/status", method: "patch", ...variables, signal });

export const usePatchV2AdminFundingProgrammeUUIDStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FundingProgrammeStatus,
      PatchV2AdminFundingProgrammeUUIDStatusError,
      PatchV2AdminFundingProgrammeUUIDStatusVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.FundingProgrammeStatus,
    PatchV2AdminFundingProgrammeUUIDStatusError,
    PatchV2AdminFundingProgrammeUUIDStatusVariables
  >(
    (variables: PatchV2AdminFundingProgrammeUUIDStatusVariables) =>
      fetchPatchV2AdminFundingProgrammeUUIDStatus({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ProjectMetricsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectMetricsUUIDResponse = Schemas.ProjectMetricRead[];

export type GetV2ProjectMetricsUUIDVariables = ApiContext["fetcherOptions"];

export const fetchGetV2ProjectMetricsUUID = (variables: GetV2ProjectMetricsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2ProjectMetricsUUIDResponse, GetV2ProjectMetricsUUIDError, undefined, {}, {}, {}>({
    url: "/v2/project-metrics/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ProjectMetricsUUID = <TData = GetV2ProjectMetricsUUIDResponse>(
  variables: GetV2ProjectMetricsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectMetricsUUIDResponse, GetV2ProjectMetricsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectMetricsUUIDResponse, GetV2ProjectMetricsUUIDError, TData>(
    queryKeyFn({ path: "/v2/project-metrics/{UUID}", operationId: "getV2ProjectMetricsUUID", variables }),
    ({ signal }) => fetchGetV2ProjectMetricsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2ProjectMetricsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2ProjectMetricsUUIDVariables = {
  body: Schemas.ProjectMetricUpdate;
} & ApiContext["fetcherOptions"];

export const fetchPutV2ProjectMetricsUUID = (variables: PutV2ProjectMetricsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ProjectMetricRead, PutV2ProjectMetricsUUIDError, Schemas.ProjectMetricUpdate, {}, {}, {}>({
    url: "/v2/project-metrics/{uuid}",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2ProjectMetricsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectMetricRead,
      PutV2ProjectMetricsUUIDError,
      PutV2ProjectMetricsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.ProjectMetricRead,
    PutV2ProjectMetricsUUIDError,
    PutV2ProjectMetricsUUIDVariables
  >(
    (variables: PutV2ProjectMetricsUUIDVariables) => fetchPutV2ProjectMetricsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2ProjectMetricsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2ProjectMetricsUUIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2ProjectMetricsUUID = (variables: DeleteV2ProjectMetricsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2ProjectMetricsUUIDError, undefined, {}, {}, {}>({
    url: "/v2/project-metrics/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2ProjectMetricsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2ProjectMetricsUUIDError, DeleteV2ProjectMetricsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2ProjectMetricsUUIDError, DeleteV2ProjectMetricsUUIDVariables>(
    (variables: DeleteV2ProjectMetricsUUIDVariables) =>
      fetchDeleteV2ProjectMetricsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2ProjectMetricsUploadError = Fetcher.ErrorWrapper<undefined>;

export type PostV2ProjectMetricsUploadVariables = ApiContext["fetcherOptions"];

/**
 * For project metrics, the supported collections are 'cover', 'gallery', 'support' and 'reportPDF'
 */
export const fetchPostV2ProjectMetricsUpload = (variables: PostV2ProjectMetricsUploadVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ProjectMetricRead, PostV2ProjectMetricsUploadError, undefined, {}, {}, {}>({
    url: "/v2/project-metrics/upload",
    method: "post",
    ...variables,
    signal
  });

/**
 * For project metrics, the supported collections are 'cover', 'gallery', 'support' and 'reportPDF'
 */
export const usePostV2ProjectMetricsUpload = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectMetricRead,
      PostV2ProjectMetricsUploadError,
      PostV2ProjectMetricsUploadVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.ProjectMetricRead,
    PostV2ProjectMetricsUploadError,
    PostV2ProjectMetricsUploadVariables
  >(
    (variables: PostV2ProjectMetricsUploadVariables) =>
      fetchPostV2ProjectMetricsUpload({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ProjectMetricsUUIDDownloadError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectMetricsUUIDDownloadVariables = ApiContext["fetcherOptions"];

export const fetchGetV2ProjectMetricsUUIDDownload = (
  variables: GetV2ProjectMetricsUUIDDownloadVariables,
  signal?: AbortSignal
) =>
  apiFetch<Blob, GetV2ProjectMetricsUUIDDownloadError, undefined, {}, {}, {}>({
    url: "/v2/project-metrics/{uuid}/download",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ProjectMetricsUUIDDownload = <TData = Blob>(
  variables: GetV2ProjectMetricsUUIDDownloadVariables,
  options?: Omit<reactQuery.UseQueryOptions<Blob, GetV2ProjectMetricsUUIDDownloadError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Blob, GetV2ProjectMetricsUUIDDownloadError, TData>(
    queryKeyFn({
      path: "/v2/project-metrics/{UUID}/download",
      operationId: "getV2ProjectMetricsUUIDDownload",
      variables
    }),
    ({ signal }) => fetchGetV2ProjectMetricsUUIDDownload({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2SiteMetricsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2SiteMetricsResponse = Schemas.SiteMetricReadAll[];

export type GetV2SiteMetricsVariables = ApiContext["fetcherOptions"];

export const fetchGetV2SiteMetrics = (variables: GetV2SiteMetricsVariables, signal?: AbortSignal) =>
  apiFetch<GetV2SiteMetricsResponse, GetV2SiteMetricsError, undefined, {}, {}, {}>({
    url: "/v2/site-metrics",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2SiteMetrics = <TData = GetV2SiteMetricsResponse>(
  variables: GetV2SiteMetricsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2SiteMetricsResponse, GetV2SiteMetricsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2SiteMetricsResponse, GetV2SiteMetricsError, TData>(
    queryKeyFn({ path: "/v2/site-metrics", operationId: "getV2SiteMetrics", variables }),
    ({ signal }) => fetchGetV2SiteMetrics({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2SiteMetricsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2SiteMetricsVariables = {
  body: Schemas.SiteMetricCreate;
} & ApiContext["fetcherOptions"];

/**
 * The property monitorable_type options are accept site or terrafund_site
 */
export const fetchPostV2SiteMetrics = (variables: PostV2SiteMetricsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteMetricRead, PostV2SiteMetricsError, Schemas.SiteMetricCreate, {}, {}, {}>({
    url: "/v2/site-metrics",
    method: "post",
    ...variables,
    signal
  });

/**
 * The property monitorable_type options are accept site or terrafund_site
 */
export const usePostV2SiteMetrics = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.SiteMetricRead, PostV2SiteMetricsError, PostV2SiteMetricsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.SiteMetricRead, PostV2SiteMetricsError, PostV2SiteMetricsVariables>(
    (variables: PostV2SiteMetricsVariables) => fetchPostV2SiteMetrics({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2SiteMetricsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2SiteMetricsUUIDResponse = Schemas.SiteMetricRead[];

export type GetV2SiteMetricsUUIDVariables = ApiContext["fetcherOptions"];

export const fetchGetV2SiteMetricsUUID = (variables: GetV2SiteMetricsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<GetV2SiteMetricsUUIDResponse, GetV2SiteMetricsUUIDError, undefined, {}, {}, {}>({
    url: "/v2/site-metrics/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2SiteMetricsUUID = <TData = GetV2SiteMetricsUUIDResponse>(
  variables: GetV2SiteMetricsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2SiteMetricsUUIDResponse, GetV2SiteMetricsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2SiteMetricsUUIDResponse, GetV2SiteMetricsUUIDError, TData>(
    queryKeyFn({ path: "/v2/site-metrics/{UUID}", operationId: "getV2SiteMetricsUUID", variables }),
    ({ signal }) => fetchGetV2SiteMetricsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2SiteMetricsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2SiteMetricsUUIDVariables = {
  body: Schemas.SiteMetricUpdate;
} & ApiContext["fetcherOptions"];

export const fetchPutV2SiteMetricsUUID = (variables: PutV2SiteMetricsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteMetricRead, PutV2SiteMetricsUUIDError, Schemas.SiteMetricUpdate, {}, {}, {}>({
    url: "/v2/site-metrics/{uuid}",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2SiteMetricsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.SiteMetricRead, PutV2SiteMetricsUUIDError, PutV2SiteMetricsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.SiteMetricRead, PutV2SiteMetricsUUIDError, PutV2SiteMetricsUUIDVariables>(
    (variables: PutV2SiteMetricsUUIDVariables) => fetchPutV2SiteMetricsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2SiteMetricsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2SiteMetricsUUIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2SiteMetricsUUID = (variables: DeleteV2SiteMetricsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2SiteMetricsUUIDError, undefined, {}, {}, {}>({
    url: "/v2/site-metrics/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2SiteMetricsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2SiteMetricsUUIDError, DeleteV2SiteMetricsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2SiteMetricsUUIDError, DeleteV2SiteMetricsUUIDVariables>(
    (variables: DeleteV2SiteMetricsUUIDVariables) => fetchDeleteV2SiteMetricsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2MediaUUIDCOLLECTIONError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2MediaUUIDCOLLECTIONVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2MediaUUIDCOLLECTION = (
  variables: DeleteV2MediaUUIDCOLLECTIONVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteV2MediaUUIDCOLLECTIONError, undefined, {}, {}, {}>({
    url: "/v2/media/{uuid}/{collection}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2MediaUUIDCOLLECTION = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2MediaUUIDCOLLECTIONError, DeleteV2MediaUUIDCOLLECTIONVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2MediaUUIDCOLLECTIONError, DeleteV2MediaUUIDCOLLECTIONVariables>(
    (variables: DeleteV2MediaUUIDCOLLECTIONVariables) =>
      fetchDeleteV2MediaUUIDCOLLECTION({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2MediaUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2MediaUUIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2MediaUUID = (variables: DeleteV2MediaUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2MediaUUIDError, undefined, {}, {}, {}>({
    url: "/v2/media/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2MediaUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2MediaUUIDError, DeleteV2MediaUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2MediaUUIDError, DeleteV2MediaUUIDVariables>(
    (variables: DeleteV2MediaUUIDVariables) => fetchDeleteV2MediaUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetProgrammeIDMetricSitesError = Fetcher.ErrorWrapper<undefined>;

export type GetProgrammeIDMetricSitesVariables = ApiContext["fetcherOptions"];

export const fetchGetProgrammeIDMetricSites = (variables: GetProgrammeIDMetricSitesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteMetricReadAll, GetProgrammeIDMetricSitesError, undefined, {}, {}, {}>({
    url: "/programme/{id}/metric-sites",
    method: "get",
    ...variables,
    signal
  });

export const useGetProgrammeIDMetricSites = <TData = Schemas.SiteMetricReadAll>(
  variables: GetProgrammeIDMetricSitesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SiteMetricReadAll, GetProgrammeIDMetricSitesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SiteMetricReadAll, GetProgrammeIDMetricSitesError, TData>(
    queryKeyFn({ path: "/programme/{ID}/metric-sites", operationId: "getProgrammeIDMetricSites", variables }),
    ({ signal }) => fetchGetProgrammeIDMetricSites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetTerrafundProgrammeIDMetricSitesError = Fetcher.ErrorWrapper<undefined>;

export type GetTerrafundProgrammeIDMetricSitesVariables = ApiContext["fetcherOptions"];

export const fetchGetTerrafundProgrammeIDMetricSites = (
  variables: GetTerrafundProgrammeIDMetricSitesVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.SiteMetricReadAll, GetTerrafundProgrammeIDMetricSitesError, undefined, {}, {}, {}>({
    url: "/terrafund/programme/{id}/metric-sites",
    method: "get",
    ...variables,
    signal
  });

export const useGetTerrafundProgrammeIDMetricSites = <TData = Schemas.SiteMetricReadAll>(
  variables: GetTerrafundProgrammeIDMetricSitesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SiteMetricReadAll, GetTerrafundProgrammeIDMetricSitesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.SiteMetricReadAll, GetTerrafundProgrammeIDMetricSitesError, TData>(
    queryKeyFn({
      path: "/terrafund/programme/{ID}/metric-sites",
      operationId: "getTerrafundProgrammeIDMetricSites",
      variables
    }),
    ({ signal }) => fetchGetTerrafundProgrammeIDMetricSites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostEditHistoryError = Fetcher.ErrorWrapper<undefined>;

export type PostEditHistoryVariables = {
  body: Schemas.EditHistoryCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostEditHistory = (variables: PostEditHistoryVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.EditHistoryRead, PostEditHistoryError, Schemas.EditHistoryCreate, {}, {}, {}>({
    url: "/edit-history",
    method: "post",
    ...variables,
    signal
  });

export const usePostEditHistory = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.EditHistoryRead, PostEditHistoryError, PostEditHistoryVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.EditHistoryRead, PostEditHistoryError, PostEditHistoryVariables>(
    (variables: PostEditHistoryVariables) => fetchPostEditHistory({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetEditHistoryQueryParams = {
  /**
   * number of items (per page) to return
   */
  items?: number;
  /**
   * page number you want results from
   */
  page?: number;
  /**
   * filter to a specific status. recognised options are: requested, approved, rejected
   */
  status?: string;
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * the value to sort the collection results
   */
  sort?: string;
  /**
   * direct to sort the collection results asc or desc
   */
  order?: string;
};

export type GetEditHistoryError = Fetcher.ErrorWrapper<undefined>;

export type GetEditHistoryResponse = {
  data?: Schemas.EditHistoryRead[];
  meta?: {
    first?: number;
    current?: number;
    last?: number;
    total?: number;
    per_page?: number;
  };
};

export type GetEditHistoryVariables = {
  queryParams?: GetEditHistoryQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetEditHistory = (variables: GetEditHistoryVariables, signal?: AbortSignal) =>
  apiFetch<GetEditHistoryResponse, GetEditHistoryError, undefined, {}, GetEditHistoryQueryParams, {}>({
    url: "/edit-history",
    method: "get",
    ...variables,
    signal
  });

export const useGetEditHistory = <TData = GetEditHistoryResponse>(
  variables: GetEditHistoryVariables,
  options?: Omit<reactQuery.UseQueryOptions<GetEditHistoryResponse, GetEditHistoryError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetEditHistoryResponse, GetEditHistoryError, TData>(
    queryKeyFn({ path: "/edit-history", operationId: "getEditHistory", variables }),
    ({ signal }) => fetchGetEditHistory({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetEditHistoryUUIDQueryParams = {
  /**
   * filter to a specific status. recognised options are: requested, approved, rejected
   */
  status?: string;
};

export type GetEditHistoryUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetEditHistoryUUIDVariables = {
  queryParams?: GetEditHistoryUUIDQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetEditHistoryUUID = (variables: GetEditHistoryUUIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.EditHistoryRead, GetEditHistoryUUIDError, undefined, {}, GetEditHistoryUUIDQueryParams, {}>({
    url: "/edit-history/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetEditHistoryUUID = <TData = Schemas.EditHistoryRead>(
  variables: GetEditHistoryUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.EditHistoryRead, GetEditHistoryUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.EditHistoryRead, GetEditHistoryUUIDError, TData>(
    queryKeyFn({ path: "/edit-history/{UUID}", operationId: "getEditHistoryUUID", variables }),
    ({ signal }) => fetchGetEditHistoryUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutEditHistoryUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutEditHistoryUUIDRequestBody = {
  /**
   * content is a string of json of the updated entity
   */
  content: string;
};

export type PutEditHistoryUUIDVariables = {
  body: PutEditHistoryUUIDRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPutEditHistoryUUID = (variables: PutEditHistoryUUIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.EditHistoryRead, PutEditHistoryUUIDError, PutEditHistoryUUIDRequestBody, {}, {}, {}>({
    url: "/edit-history/{uuid}",
    method: "put",
    ...variables,
    signal
  });

export const usePutEditHistoryUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.EditHistoryRead, PutEditHistoryUUIDError, PutEditHistoryUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.EditHistoryRead, PutEditHistoryUUIDError, PutEditHistoryUUIDVariables>(
    (variables: PutEditHistoryUUIDVariables) => fetchPutEditHistoryUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetEditHistoryTYPEIDError = Fetcher.ErrorWrapper<undefined>;

export type GetEditHistoryTYPEIDVariables = ApiContext["fetcherOptions"];

export const fetchGetEditHistoryTYPEID = (variables: GetEditHistoryTYPEIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.EditHistoryRead, GetEditHistoryTYPEIDError, undefined, {}, {}, {}>({
    url: "/edit-history/{type}/{id}",
    method: "get",
    ...variables,
    signal
  });

export const useGetEditHistoryTYPEID = <TData = Schemas.EditHistoryRead>(
  variables: GetEditHistoryTYPEIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.EditHistoryRead, GetEditHistoryTYPEIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.EditHistoryRead, GetEditHistoryTYPEIDError, TData>(
    queryKeyFn({ path: "/edit-history/{TYPE}/{ID}", operationId: "getEditHistoryTYPEID", variables }),
    ({ signal }) => fetchGetEditHistoryTYPEID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutEditHistoryApproveError = Fetcher.ErrorWrapper<undefined>;

export type PutEditHistoryApproveVariables = {
  body: RequestBodies.PutEditHistoryApproveBody;
} & ApiContext["fetcherOptions"];

export const fetchPutEditHistoryApprove = (variables: PutEditHistoryApproveVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.EditHistoryRead, PutEditHistoryApproveError, RequestBodies.PutEditHistoryApproveBody, {}, {}, {}>({
    url: "/edit-history/approve",
    method: "put",
    ...variables,
    signal
  });

export const usePutEditHistoryApprove = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.EditHistoryRead, PutEditHistoryApproveError, PutEditHistoryApproveVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.EditHistoryRead, PutEditHistoryApproveError, PutEditHistoryApproveVariables>(
    (variables: PutEditHistoryApproveVariables) => fetchPutEditHistoryApprove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutEditHistoryRejectError = Fetcher.ErrorWrapper<undefined>;

export type PutEditHistoryRejectRequestBody = {
  uuid: string;
  comments: string;
};

export type PutEditHistoryRejectVariables = {
  body: PutEditHistoryRejectRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPutEditHistoryReject = (variables: PutEditHistoryRejectVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.EditHistoryRead, PutEditHistoryRejectError, PutEditHistoryRejectRequestBody, {}, {}, {}>({
    url: "/edit-history/reject",
    method: "put",
    ...variables,
    signal
  });

export const usePutEditHistoryReject = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.EditHistoryRead, PutEditHistoryRejectError, PutEditHistoryRejectVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.EditHistoryRead, PutEditHistoryRejectError, PutEditHistoryRejectVariables>(
    (variables: PutEditHistoryRejectVariables) => fetchPutEditHistoryReject({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostSiteIDSeedsBulkError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteIDSeedsBulkRequestBody = {
  collection?: Schemas.SeedDetailSubmit[];
};

export type PostSiteIDSeedsBulkVariables = {
  body?: PostSiteIDSeedsBulkRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostSiteIDSeedsBulk = (variables: PostSiteIDSeedsBulkVariables, signal?: AbortSignal) =>
  apiFetch<undefined, PostSiteIDSeedsBulkError, PostSiteIDSeedsBulkRequestBody, {}, {}, {}>({
    url: "/site/{id}/seeds/bulk",
    method: "post",
    ...variables,
    signal
  });

export const usePostSiteIDSeedsBulk = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PostSiteIDSeedsBulkError, PostSiteIDSeedsBulkVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PostSiteIDSeedsBulkError, PostSiteIDSeedsBulkVariables>(
    (variables: PostSiteIDSeedsBulkVariables) => fetchPostSiteIDSeedsBulk({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2AdminFormsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminFormsVariables = {
  body?: Schemas.FormCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminForms = (variables: PostV2AdminFormsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.FormRead, PostV2AdminFormsError, Schemas.FormCreate, {}, {}, {}>({
    url: "/v2/admin/forms",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2AdminForms = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.FormRead, PostV2AdminFormsError, PostV2AdminFormsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.FormRead, PostV2AdminFormsError, PostV2AdminFormsVariables>(
    (variables: PostV2AdminFormsVariables) => fetchPostV2AdminForms({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminFormsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsVariables = {
  body?: RequestBodies.V2SearchFilterSort;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminForms = (variables: GetV2AdminFormsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.FormPaginated, GetV2AdminFormsError, RequestBodies.V2SearchFilterSort, {}, {}, {}>({
    url: "/v2/admin/forms",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminForms = <TData = Schemas.FormPaginated>(
  variables: GetV2AdminFormsVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.FormPaginated, GetV2AdminFormsError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.FormPaginated, GetV2AdminFormsError, TData>(
    queryKeyFn({ path: "/v2/admin/forms", operationId: "getV2AdminForms", variables }),
    ({ signal }) => fetchGetV2AdminForms({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FormsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsVariables = {
  body?: RequestBodies.V2SearchFilterSort;
} & ApiContext["fetcherOptions"];

export const fetchGetV2Forms = (variables: GetV2FormsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.FormPaginated, GetV2FormsError, RequestBodies.V2SearchFilterSort, {}, {}, {}>({
    url: "/v2/forms",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2Forms = <TData = Schemas.FormPaginated>(
  variables: GetV2FormsVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.FormPaginated, GetV2FormsError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.FormPaginated, GetV2FormsError, TData>(
    queryKeyFn({ path: "/v2/forms", operationId: "getV2Forms", variables }),
    ({ signal }) => fetchGetV2Forms({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchV2AdminFormsUUIDPublishError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFormsUUIDPublishVariables = ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFormsUUIDPublish = (
  variables: PatchV2AdminFormsUUIDPublishVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.FormRead, PatchV2AdminFormsUUIDPublishError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms/{uuid}/publish",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2AdminFormsUUIDPublish = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FormRead,
      PatchV2AdminFormsUUIDPublishError,
      PatchV2AdminFormsUUIDPublishVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.FormRead,
    PatchV2AdminFormsUUIDPublishError,
    PatchV2AdminFormsUUIDPublishVariables
  >(
    (variables: PatchV2AdminFormsUUIDPublishVariables) =>
      fetchPatchV2AdminFormsUUIDPublish({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2AdminFormsSectionError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminFormsSectionVariables = {
  body?: Schemas.FormSectionCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminFormsSection = (variables: PostV2AdminFormsSectionVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.FormSectionRead, PostV2AdminFormsSectionError, Schemas.FormSectionCreate, {}, {}, {}>({
    url: "/v2/admin/forms/section",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2AdminFormsSection = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FormSectionRead,
      PostV2AdminFormsSectionError,
      PostV2AdminFormsSectionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.FormSectionRead,
    PostV2AdminFormsSectionError,
    PostV2AdminFormsSectionVariables
  >(
    (variables: PostV2AdminFormsSectionVariables) => fetchPostV2AdminFormsSection({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminFormsQuestionUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFormsQuestionUUIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFormsQuestionUUID = (
  variables: DeleteV2AdminFormsQuestionUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.FormQuestionRead, DeleteV2AdminFormsQuestionUUIDError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms/question/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminFormsQuestionUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FormQuestionRead,
      DeleteV2AdminFormsQuestionUUIDError,
      DeleteV2AdminFormsQuestionUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.FormQuestionRead,
    DeleteV2AdminFormsQuestionUUIDError,
    DeleteV2AdminFormsQuestionUUIDVariables
  >(
    (variables: DeleteV2AdminFormsQuestionUUIDVariables) =>
      fetchDeleteV2AdminFormsQuestionUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminFormsSectionUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFormsSectionUUIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFormsSectionUUID = (
  variables: DeleteV2AdminFormsSectionUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.FormSectionRead, DeleteV2AdminFormsSectionUUIDError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms/section/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminFormsSectionUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FormSectionRead,
      DeleteV2AdminFormsSectionUUIDError,
      DeleteV2AdminFormsSectionUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.FormSectionRead,
    DeleteV2AdminFormsSectionUUIDError,
    DeleteV2AdminFormsSectionUUIDVariables
  >(
    (variables: DeleteV2AdminFormsSectionUUIDVariables) =>
      fetchDeleteV2AdminFormsSectionUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AdminFormsSectionUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFormsSectionUUIDVariables = {
  body?: Schemas.FormSectionUpdate;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFormsSectionUUID = (
  variables: PatchV2AdminFormsSectionUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.FormSectionRead, PatchV2AdminFormsSectionUUIDError, Schemas.FormSectionUpdate, {}, {}, {}>({
    url: "/v2/admin/forms/section/{uuid}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2AdminFormsSectionUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FormSectionRead,
      PatchV2AdminFormsSectionUUIDError,
      PatchV2AdminFormsSectionUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.FormSectionRead,
    PatchV2AdminFormsSectionUUIDError,
    PatchV2AdminFormsSectionUUIDVariables
  >(
    (variables: PatchV2AdminFormsSectionUUIDVariables) =>
      fetchPatchV2AdminFormsSectionUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminFormsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFormsUUIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFormsUUID = (variables: DeleteV2AdminFormsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2AdminFormsUUIDError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminFormsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2AdminFormsUUIDError, DeleteV2AdminFormsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2AdminFormsUUIDError, DeleteV2AdminFormsUUIDVariables>(
    (variables: DeleteV2AdminFormsUUIDVariables) => fetchDeleteV2AdminFormsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AdminFormsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFormsUUIDVariables = {
  body?: Schemas.FormUpdate;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFormsUUID = (variables: PatchV2AdminFormsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.FormCreate, PatchV2AdminFormsUUIDError, Schemas.FormUpdate, {}, {}, {}>({
    url: "/v2/admin/forms/{uuid}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2AdminFormsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.FormCreate, PatchV2AdminFormsUUIDError, PatchV2AdminFormsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.FormCreate, PatchV2AdminFormsUUIDError, PatchV2AdminFormsUUIDVariables>(
    (variables: PatchV2AdminFormsUUIDVariables) => fetchPatchV2AdminFormsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FormsLinkedFieldListingError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsLinkedFieldListingVariables = ApiContext["fetcherOptions"];

export const fetchGetV2FormsLinkedFieldListing = (
  variables: GetV2FormsLinkedFieldListingVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.V2GenericList, GetV2FormsLinkedFieldListingError, undefined, {}, {}, {}>({
    url: "/v2/forms/linked-field-listing",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2FormsLinkedFieldListing = <TData = Schemas.V2GenericList>(
  variables: GetV2FormsLinkedFieldListingVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.V2GenericList, GetV2FormsLinkedFieldListingError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.V2GenericList, GetV2FormsLinkedFieldListingError, TData>(
    queryKeyFn({ path: "/v2/forms/linked-field-listing", operationId: "getV2FormsLinkedFieldListing", variables }),
    ({ signal }) => fetchGetV2FormsLinkedFieldListing({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FormsOptionLabelsQueryParams = {
  /**
   * the option keys you want to retrieve
   */
  keys?: string;
  /**
   * the language to use for the label translation
   */
  lang?: string;
};

export type GetV2FormsOptionLabelsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsOptionLabelsVariables = {
  queryParams?: GetV2FormsOptionLabelsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsOptionLabels = (variables: GetV2FormsOptionLabelsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.V2GenericList, GetV2FormsOptionLabelsError, undefined, {}, GetV2FormsOptionLabelsQueryParams, {}>({
    url: "/v2/forms/option-labels",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2FormsOptionLabels = <TData = Schemas.V2GenericList>(
  variables: GetV2FormsOptionLabelsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.V2GenericList, GetV2FormsOptionLabelsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.V2GenericList, GetV2FormsOptionLabelsError, TData>(
    queryKeyFn({ path: "/v2/forms/option-labels", operationId: "getV2FormsOptionLabels", variables }),
    ({ signal }) => fetchGetV2FormsOptionLabels({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFormsCommonOptionsBUCKETPathParams = {
  /**
   * name of the bucket/collection of common options
   */
  bucket: string;
};

export type GetV2AdminFormsCommonOptionsBUCKETQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
};

export type GetV2AdminFormsCommonOptionsBUCKETError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsCommonOptionsBUCKETVariables = {
  pathParams: GetV2AdminFormsCommonOptionsBUCKETPathParams;
  queryParams?: GetV2AdminFormsCommonOptionsBUCKETQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsCommonOptionsBUCKET = (
  variables: GetV2AdminFormsCommonOptionsBUCKETVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.V2CommonOptions,
    GetV2AdminFormsCommonOptionsBUCKETError,
    undefined,
    {},
    GetV2AdminFormsCommonOptionsBUCKETQueryParams,
    GetV2AdminFormsCommonOptionsBUCKETPathParams
  >({ url: "/v2/admin/forms/common-options/{bucket}", method: "get", ...variables, signal });

export const useGetV2AdminFormsCommonOptionsBUCKET = <TData = Schemas.V2CommonOptions>(
  variables: GetV2AdminFormsCommonOptionsBUCKETVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.V2CommonOptions, GetV2AdminFormsCommonOptionsBUCKETError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.V2CommonOptions, GetV2AdminFormsCommonOptionsBUCKETError, TData>(
    queryKeyFn({
      path: "/v2/admin/forms/common-options/{BUCKET}",
      operationId: "getV2AdminFormsCommonOptionsBUCKET",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsCommonOptionsBUCKET({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminOrganisationsQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminOrganisationsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminOrganisationsResponse = {
  data?: Schemas.V2AdminOrganisationRead[];
  links?: Schemas.V2PaginationLinks;
  meta?: Schemas.V2PaginationMeta;
};

export type GetV2AdminOrganisationsVariables = {
  queryParams?: GetV2AdminOrganisationsQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Currently available sort is status, type, trees_grown_total, name, fin_budget_1year, created_at
 */
export const fetchGetV2AdminOrganisations = (variables: GetV2AdminOrganisationsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminOrganisationsResponse,
    GetV2AdminOrganisationsError,
    undefined,
    {},
    GetV2AdminOrganisationsQueryParams,
    {}
  >({ url: "/v2/admin/organisations", method: "get", ...variables, signal });

/**
 * Currently available sort is status, type, trees_grown_total, name, fin_budget_1year, created_at
 */
export const useGetV2AdminOrganisations = <TData = GetV2AdminOrganisationsResponse>(
  variables: GetV2AdminOrganisationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminOrganisationsResponse, GetV2AdminOrganisationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminOrganisationsResponse, GetV2AdminOrganisationsError, TData>(
    queryKeyFn({ path: "/v2/admin/organisations", operationId: "getV2AdminOrganisations", variables }),
    ({ signal }) => fetchGetV2AdminOrganisations({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminOrganisationsMultiQueryParams = {
  /**
   * comma separated list of values. eg ?ids=uuid1,uuid2
   */
  ids: string;
};

export type GetV2AdminOrganisationsMultiError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminOrganisationsMultiVariables = {
  queryParams: GetV2AdminOrganisationsMultiQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminOrganisationsMulti = (
  variables: GetV2AdminOrganisationsMultiVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.V2AdminOrganisationRead,
    GetV2AdminOrganisationsMultiError,
    undefined,
    {},
    GetV2AdminOrganisationsMultiQueryParams,
    {}
  >({ url: "/v2/admin/organisations/multi", method: "get", ...variables, signal });

export const useGetV2AdminOrganisationsMulti = <TData = Schemas.V2AdminOrganisationRead>(
  variables: GetV2AdminOrganisationsMultiVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.V2AdminOrganisationRead, GetV2AdminOrganisationsMultiError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.V2AdminOrganisationRead, GetV2AdminOrganisationsMultiError, TData>(
    queryKeyFn({ path: "/v2/admin/organisations/multi", operationId: "getV2AdminOrganisationsMulti", variables }),
    ({ signal }) => fetchGetV2AdminOrganisationsMulti({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminOrganisationsUUIDPathParams = {
  uuid: string;
};

export type GetV2AdminOrganisationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminOrganisationsUUIDVariables = {
  pathParams: GetV2AdminOrganisationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminOrganisationsUUID = (
  variables: GetV2AdminOrganisationsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.V2AdminOrganisationRead,
    GetV2AdminOrganisationsUUIDError,
    undefined,
    {},
    {},
    GetV2AdminOrganisationsUUIDPathParams
  >({ url: "/v2/admin/organisations/{uuid}", method: "get", ...variables, signal });

export const useGetV2AdminOrganisationsUUID = <TData = Schemas.V2AdminOrganisationRead>(
  variables: GetV2AdminOrganisationsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.V2AdminOrganisationRead, GetV2AdminOrganisationsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.V2AdminOrganisationRead, GetV2AdminOrganisationsUUIDError, TData>(
    queryKeyFn({ path: "/v2/admin/organisations/{UUID}", operationId: "getV2AdminOrganisationsUUID", variables }),
    ({ signal }) => fetchGetV2AdminOrganisationsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2AdminOrganisationsUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminOrganisationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminOrganisationsUUIDVariables = {
  body?: Schemas.V2AdminOrganisationUpdate;
  pathParams: PutV2AdminOrganisationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminOrganisationsUUID = (
  variables: PutV2AdminOrganisationsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.V2AdminOrganisationRead,
    PutV2AdminOrganisationsUUIDError,
    Schemas.V2AdminOrganisationUpdate,
    {},
    {},
    PutV2AdminOrganisationsUUIDPathParams
  >({ url: "/v2/admin/organisations/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminOrganisationsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.V2AdminOrganisationRead,
      PutV2AdminOrganisationsUUIDError,
      PutV2AdminOrganisationsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.V2AdminOrganisationRead,
    PutV2AdminOrganisationsUUIDError,
    PutV2AdminOrganisationsUUIDVariables
  >(
    (variables: PutV2AdminOrganisationsUUIDVariables) =>
      fetchPutV2AdminOrganisationsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminOrganisationsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminOrganisationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminOrganisationsUUIDVariables = {
  pathParams: DeleteV2AdminOrganisationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminOrganisationsUUID = (
  variables: DeleteV2AdminOrganisationsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteV2AdminOrganisationsUUIDError, undefined, {}, {}, DeleteV2AdminOrganisationsUUIDPathParams>(
    { url: "/v2/admin/organisations/{uuid}", method: "delete", ...variables, signal }
  );

export const useDeleteV2AdminOrganisationsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminOrganisationsUUIDError,
      DeleteV2AdminOrganisationsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminOrganisationsUUIDError,
    DeleteV2AdminOrganisationsUUIDVariables
  >(
    (variables: DeleteV2AdminOrganisationsUUIDVariables) =>
      fetchDeleteV2AdminOrganisationsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2AdminOrganisationsApproveError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminOrganisationsApproveVariables = {
  body: RequestBodies.PutEditHistoryApproveBody;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminOrganisationsApprove = (
  variables: PutV2AdminOrganisationsApproveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.V2AdminOrganisationUpdate,
    PutV2AdminOrganisationsApproveError,
    RequestBodies.PutEditHistoryApproveBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/organisations/approve", method: "put", ...variables, signal });

export const usePutV2AdminOrganisationsApprove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.V2AdminOrganisationUpdate,
      PutV2AdminOrganisationsApproveError,
      PutV2AdminOrganisationsApproveVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.V2AdminOrganisationUpdate,
    PutV2AdminOrganisationsApproveError,
    PutV2AdminOrganisationsApproveVariables
  >(
    (variables: PutV2AdminOrganisationsApproveVariables) =>
      fetchPutV2AdminOrganisationsApprove({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2AdminOrganisationsRejectError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminOrganisationsRejectVariables = {
  body: RequestBodies.PutEditHistoryApproveBody;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminOrganisationsReject = (
  variables: PutV2AdminOrganisationsRejectVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.V2AdminOrganisationUpdate,
    PutV2AdminOrganisationsRejectError,
    RequestBodies.PutEditHistoryApproveBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/organisations/reject", method: "put", ...variables, signal });

export const usePutV2AdminOrganisationsReject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.V2AdminOrganisationUpdate,
      PutV2AdminOrganisationsRejectError,
      PutV2AdminOrganisationsRejectVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.V2AdminOrganisationUpdate,
    PutV2AdminOrganisationsRejectError,
    PutV2AdminOrganisationsRejectVariables
  >(
    (variables: PutV2AdminOrganisationsRejectVariables) =>
      fetchPutV2AdminOrganisationsReject({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminOrganisationsExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminOrganisationsExportVariables = ApiContext["fetcherOptions"];

export const fetchGetV2AdminOrganisationsExport = (
  variables: GetV2AdminOrganisationsExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetV2AdminOrganisationsExportError, undefined, {}, {}, {}>({
    url: "/v2/admin/organisations/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminOrganisationsExport = <TData = undefined>(
  variables: GetV2AdminOrganisationsExportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetV2AdminOrganisationsExportError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetV2AdminOrganisationsExportError, TData>(
    queryKeyFn({ path: "/v2/admin/organisations/export", operationId: "getV2AdminOrganisationsExport", variables }),
    ({ signal }) => fetchGetV2AdminOrganisationsExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2OrganisationsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2OrganisationsVariables = {
  body?: RequestBodies.V2OrganisationUpdate;
} & ApiContext["fetcherOptions"];

export const fetchPostV2Organisations = (variables: PostV2OrganisationsVariables, signal?: AbortSignal) =>
  apiFetch<undefined, PostV2OrganisationsError, RequestBodies.V2OrganisationUpdate, {}, {}, {}>({
    url: "/v2/organisations",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2Organisations = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PostV2OrganisationsError, PostV2OrganisationsVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PostV2OrganisationsError, PostV2OrganisationsVariables>(
    (variables: PostV2OrganisationsVariables) => fetchPostV2Organisations({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2OrganisationsUUIDPathParams = {
  uuid: string;
};

export type GetV2OrganisationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2OrganisationsUUIDVariables = {
  pathParams: GetV2OrganisationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2OrganisationsUUID = (variables: GetV2OrganisationsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.V2OrganisationRead,
    GetV2OrganisationsUUIDError,
    undefined,
    {},
    {},
    GetV2OrganisationsUUIDPathParams
  >({ url: "/v2/organisations/{uuid}", method: "get", ...variables, signal });

export const useGetV2OrganisationsUUID = <TData = Schemas.V2OrganisationRead>(
  variables: GetV2OrganisationsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.V2OrganisationRead, GetV2OrganisationsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.V2OrganisationRead, GetV2OrganisationsUUIDError, TData>(
    queryKeyFn({ path: "/v2/organisations/{UUID}", operationId: "getV2OrganisationsUUID", variables }),
    ({ signal }) => fetchGetV2OrganisationsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2OrganisationsUUIDPathParams = {
  uuid: string;
};

export type PutV2OrganisationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2OrganisationsUUIDVariables = {
  body?: RequestBodies.V2OrganisationUpdate;
  pathParams: PutV2OrganisationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2OrganisationsUUID = (variables: PutV2OrganisationsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    undefined,
    PutV2OrganisationsUUIDError,
    RequestBodies.V2OrganisationUpdate,
    {},
    {},
    PutV2OrganisationsUUIDPathParams
  >({ url: "/v2/organisations/{uuid}", method: "put", ...variables, signal });

export const usePutV2OrganisationsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PutV2OrganisationsUUIDError, PutV2OrganisationsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2OrganisationsUUIDError, PutV2OrganisationsUUIDVariables>(
    (variables: PutV2OrganisationsUUIDVariables) => fetchPutV2OrganisationsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2OrganisationsListingQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
};

export type GetV2OrganisationsListingError = Fetcher.ErrorWrapper<undefined>;

export type GetV2OrganisationsListingResponse = {
  data?: Schemas.V2GenericList[];
};

export type GetV2OrganisationsListingVariables = {
  queryParams?: GetV2OrganisationsListingQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2OrganisationsListing = (variables: GetV2OrganisationsListingVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2OrganisationsListingResponse,
    GetV2OrganisationsListingError,
    undefined,
    {},
    GetV2OrganisationsListingQueryParams,
    {}
  >({ url: "/v2/organisations/listing", method: "get", ...variables, signal });

export const useGetV2OrganisationsListing = <TData = GetV2OrganisationsListingResponse>(
  variables: GetV2OrganisationsListingVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2OrganisationsListingResponse, GetV2OrganisationsListingError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2OrganisationsListingResponse, GetV2OrganisationsListingError, TData>(
    queryKeyFn({ path: "/v2/organisations/listing", operationId: "getV2OrganisationsListing", variables }),
    ({ signal }) => fetchGetV2OrganisationsListing({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2OrganisationsJoinExistingError = Fetcher.ErrorWrapper<undefined>;

export type PostV2OrganisationsJoinExistingRequestBody = {
  organisation_uuid: string;
};

export type PostV2OrganisationsJoinExistingVariables = {
  body: PostV2OrganisationsJoinExistingRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostV2OrganisationsJoinExisting = (
  variables: PostV2OrganisationsJoinExistingVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.V2OrganisationRead,
    PostV2OrganisationsJoinExistingError,
    PostV2OrganisationsJoinExistingRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/organisations/join-existing", method: "post", ...variables, signal });

export const usePostV2OrganisationsJoinExisting = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.V2OrganisationRead,
      PostV2OrganisationsJoinExistingError,
      PostV2OrganisationsJoinExistingVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.V2OrganisationRead,
    PostV2OrganisationsJoinExistingError,
    PostV2OrganisationsJoinExistingVariables
  >(
    (variables: PostV2OrganisationsJoinExistingVariables) =>
      fetchPostV2OrganisationsJoinExisting({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2OrganisationsUserRequestsUUIDPathParams = {
  uuid: string;
};

export type GetV2OrganisationsUserRequestsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2OrganisationsUserRequestsUUIDVariables = {
  pathParams: GetV2OrganisationsUserRequestsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2OrganisationsUserRequestsUUID = (
  variables: GetV2OrganisationsUserRequestsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.UserReadAll,
    GetV2OrganisationsUserRequestsUUIDError,
    undefined,
    {},
    {},
    GetV2OrganisationsUserRequestsUUIDPathParams
  >({ url: "/v2/organisations/user-requests/{uuid}", method: "get", ...variables, signal });

export const useGetV2OrganisationsUserRequestsUUID = <TData = Schemas.UserReadAll>(
  variables: GetV2OrganisationsUserRequestsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.UserReadAll, GetV2OrganisationsUserRequestsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.UserReadAll, GetV2OrganisationsUserRequestsUUIDError, TData>(
    queryKeyFn({
      path: "/v2/organisations/user-requests/{UUID}",
      operationId: "getV2OrganisationsUserRequestsUUID",
      variables
    }),
    ({ signal }) => fetchGetV2OrganisationsUserRequestsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2OrganisationsApprovedUsersUUIDPathParams = {
  uuid: string;
};

export type GetV2OrganisationsApprovedUsersUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2OrganisationsApprovedUsersUUIDVariables = {
  pathParams: GetV2OrganisationsApprovedUsersUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2OrganisationsApprovedUsersUUID = (
  variables: GetV2OrganisationsApprovedUsersUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.UserReadAll,
    GetV2OrganisationsApprovedUsersUUIDError,
    undefined,
    {},
    {},
    GetV2OrganisationsApprovedUsersUUIDPathParams
  >({ url: "/v2/organisations/approved-users/{uuid}", method: "get", ...variables, signal });

export const useGetV2OrganisationsApprovedUsersUUID = <TData = Schemas.UserReadAll>(
  variables: GetV2OrganisationsApprovedUsersUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.UserReadAll, GetV2OrganisationsApprovedUsersUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.UserReadAll, GetV2OrganisationsApprovedUsersUUIDError, TData>(
    queryKeyFn({
      path: "/v2/organisations/approved-users/{UUID}",
      operationId: "getV2OrganisationsApprovedUsersUUID",
      variables
    }),
    ({ signal }) => fetchGetV2OrganisationsApprovedUsersUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2OrganisationsApproveUserError = Fetcher.ErrorWrapper<undefined>;

export type PutV2OrganisationsApproveUserVariables = {
  body: RequestBodies.V2OrganisationApproveRejectUser;
} & ApiContext["fetcherOptions"];

export const fetchPutV2OrganisationsApproveUser = (
  variables: PutV2OrganisationsApproveUserVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PutV2OrganisationsApproveUserError, RequestBodies.V2OrganisationApproveRejectUser, {}, {}, {}>({
    url: "/v2/organisations/approve-user",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2OrganisationsApproveUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PutV2OrganisationsApproveUserError,
      PutV2OrganisationsApproveUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2OrganisationsApproveUserError, PutV2OrganisationsApproveUserVariables>(
    (variables: PutV2OrganisationsApproveUserVariables) =>
      fetchPutV2OrganisationsApproveUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2OrganisationsRejectUserError = Fetcher.ErrorWrapper<undefined>;

export type PutV2OrganisationsRejectUserVariables = {
  body: RequestBodies.V2OrganisationApproveRejectUser;
} & ApiContext["fetcherOptions"];

export const fetchPutV2OrganisationsRejectUser = (
  variables: PutV2OrganisationsRejectUserVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PutV2OrganisationsRejectUserError, RequestBodies.V2OrganisationApproveRejectUser, {}, {}, {}>({
    url: "/v2/organisations/reject-user",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2OrganisationsRejectUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PutV2OrganisationsRejectUserError, PutV2OrganisationsRejectUserVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2OrganisationsRejectUserError, PutV2OrganisationsRejectUserVariables>(
    (variables: PutV2OrganisationsRejectUserVariables) =>
      fetchPutV2OrganisationsRejectUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2OrganisationsSubmitUUIDPathParams = {
  uuid: string;
};

export type PutV2OrganisationsSubmitUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2OrganisationsSubmitUUIDVariables = {
  pathParams: PutV2OrganisationsSubmitUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2OrganisationsSubmitUUID = (
  variables: PutV2OrganisationsSubmitUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PutV2OrganisationsSubmitUUIDError, undefined, {}, {}, PutV2OrganisationsSubmitUUIDPathParams>({
    url: "/v2/organisations/submit/{uuid}",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2OrganisationsSubmitUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PutV2OrganisationsSubmitUUIDError, PutV2OrganisationsSubmitUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2OrganisationsSubmitUUIDError, PutV2OrganisationsSubmitUUIDVariables>(
    (variables: PutV2OrganisationsSubmitUUIDVariables) =>
      fetchPutV2OrganisationsSubmitUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2OrganisationsRetractMyDraftError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2OrganisationsRetractMyDraftVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2OrganisationsRetractMyDraft = (
  variables: DeleteV2OrganisationsRetractMyDraftVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteV2OrganisationsRetractMyDraftError, undefined, {}, {}, {}>({
    url: "/v2/organisations/retract-my-draft",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2OrganisationsRetractMyDraft = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2OrganisationsRetractMyDraftError,
      DeleteV2OrganisationsRetractMyDraftVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2OrganisationsRetractMyDraftError,
    DeleteV2OrganisationsRetractMyDraftVariables
  >(
    (variables: DeleteV2OrganisationsRetractMyDraftVariables) =>
      fetchDeleteV2OrganisationsRetractMyDraft({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminUsersQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[verified]=true
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminUsersError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminUsersResponse = {
  data?: Schemas.V2AdminUserRead[];
  links?: Schemas.V2PaginationLinks;
  meta?: Schemas.V2PaginationMeta;
};

export type GetV2AdminUsersVariables = {
  queryParams?: GetV2AdminUsersQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Currently available sort is last_logged_in_at, created_at, first_name, last_name, email_address, organisation_name
 */
export const fetchGetV2AdminUsers = (variables: GetV2AdminUsersVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminUsersResponse, GetV2AdminUsersError, undefined, {}, GetV2AdminUsersQueryParams, {}>({
    url: "/v2/admin/users",
    method: "get",
    ...variables,
    signal
  });

/**
 * Currently available sort is last_logged_in_at, created_at, first_name, last_name, email_address, organisation_name
 */
export const useGetV2AdminUsers = <TData = GetV2AdminUsersResponse>(
  variables: GetV2AdminUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminUsersResponse, GetV2AdminUsersError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminUsersResponse, GetV2AdminUsersError, TData>(
    queryKeyFn({ path: "/v2/admin/users", operationId: "getV2AdminUsers", variables }),
    ({ signal }) => fetchGetV2AdminUsers({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminUsersUUIDPathParams = {
  uuid: string;
};

export type GetV2AdminUsersUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminUsersUUIDVariables = {
  pathParams: GetV2AdminUsersUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminUsersUUID = (variables: GetV2AdminUsersUUIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.V2AdminUserRead, GetV2AdminUsersUUIDError, undefined, {}, {}, GetV2AdminUsersUUIDPathParams>({
    url: "/v2/admin/users/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminUsersUUID = <TData = Schemas.V2AdminUserRead>(
  variables: GetV2AdminUsersUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.V2AdminUserRead, GetV2AdminUsersUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.V2AdminUserRead, GetV2AdminUsersUUIDError, TData>(
    queryKeyFn({ path: "/v2/admin/users/{UUID}", operationId: "getV2AdminUsersUUID", variables }),
    ({ signal }) => fetchGetV2AdminUsersUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2AdminUsersUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminUsersUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminUsersUUIDVariables = {
  body?: Schemas.V2AdminUserUpdate;
  pathParams: PutV2AdminUsersUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminUsersUUID = (variables: PutV2AdminUsersUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.V2AdminUserRead,
    PutV2AdminUsersUUIDError,
    Schemas.V2AdminUserUpdate,
    {},
    {},
    PutV2AdminUsersUUIDPathParams
  >({ url: "/v2/admin/users/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminUsersUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.V2AdminUserRead, PutV2AdminUsersUUIDError, PutV2AdminUsersUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.V2AdminUserRead, PutV2AdminUsersUUIDError, PutV2AdminUsersUUIDVariables>(
    (variables: PutV2AdminUsersUUIDVariables) => fetchPutV2AdminUsersUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminUsersUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminUsersUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminUsersUUIDVariables = {
  pathParams: DeleteV2AdminUsersUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminUsersUUID = (variables: DeleteV2AdminUsersUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2AdminUsersUUIDError, undefined, {}, {}, DeleteV2AdminUsersUUIDPathParams>({
    url: "/v2/admin/users/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminUsersUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2AdminUsersUUIDError, DeleteV2AdminUsersUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2AdminUsersUUIDError, DeleteV2AdminUsersUUIDVariables>(
    (variables: DeleteV2AdminUsersUUIDVariables) => fetchDeleteV2AdminUsersUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminUsersMultiQueryParams = {
  ids?: string;
};

export type GetV2AdminUsersMultiError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminUsersMultiVariables = {
  queryParams?: GetV2AdminUsersMultiQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminUsersMulti = (variables: GetV2AdminUsersMultiVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.V2AdminUserRead, GetV2AdminUsersMultiError, undefined, {}, GetV2AdminUsersMultiQueryParams, {}>({
    url: "/v2/admin/users/multi",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminUsersMulti = <TData = Schemas.V2AdminUserRead>(
  variables: GetV2AdminUsersMultiVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.V2AdminUserRead, GetV2AdminUsersMultiError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.V2AdminUserRead, GetV2AdminUsersMultiError, TData>(
    queryKeyFn({ path: "/v2/admin/users/multi", operationId: "getV2AdminUsersMulti", variables }),
    ({ signal }) => fetchGetV2AdminUsersMulti({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminUsersExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminUsersExportVariables = ApiContext["fetcherOptions"];

export const fetchGetV2AdminUsersExport = (variables: GetV2AdminUsersExportVariables, signal?: AbortSignal) =>
  apiFetch<undefined, GetV2AdminUsersExportError, undefined, {}, {}, {}>({
    url: "/v2/admin/users/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminUsersExport = <TData = undefined>(
  variables: GetV2AdminUsersExportVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetV2AdminUsersExportError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetV2AdminUsersExportError, TData>(
    queryKeyFn({ path: "/v2/admin/users/export", operationId: "getV2AdminUsersExport", variables }),
    ({ signal }) => fetchGetV2AdminUsersExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PutV2AdminUsersResetPasswordUUIDPathParams = {
  uuid: string;
};

export type PutV2AdminUsersResetPasswordUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2AdminUsersResetPasswordUUIDVariables = {
  pathParams: PutV2AdminUsersResetPasswordUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2AdminUsersResetPasswordUUID = (
  variables: PutV2AdminUsersResetPasswordUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    PutV2AdminUsersResetPasswordUUIDError,
    undefined,
    {},
    {},
    PutV2AdminUsersResetPasswordUUIDPathParams
  >({ url: "/v2/admin/users/reset-password/{uuid}", method: "put", ...variables, signal });

export const usePutV2AdminUsersResetPasswordUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PutV2AdminUsersResetPasswordUUIDError,
      PutV2AdminUsersResetPasswordUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    PutV2AdminUsersResetPasswordUUIDError,
    PutV2AdminUsersResetPasswordUUIDVariables
  >(
    (variables: PutV2AdminUsersResetPasswordUUIDVariables) =>
      fetchPutV2AdminUsersResetPasswordUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AdminUsersVerifyUUIDPathParams = {
  uuid: string;
};

export type PatchV2AdminUsersVerifyUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminUsersVerifyUUIDVariables = {
  pathParams: PatchV2AdminUsersVerifyUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AdminUsersVerifyUUID = (
  variables: PatchV2AdminUsersVerifyUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PatchV2AdminUsersVerifyUUIDError, undefined, {}, {}, PatchV2AdminUsersVerifyUUIDPathParams>({
    url: "/v2/admin/users/verify/{uuid}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2AdminUsersVerifyUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, PatchV2AdminUsersVerifyUUIDError, PatchV2AdminUsersVerifyUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PatchV2AdminUsersVerifyUUIDError, PatchV2AdminUsersVerifyUUIDVariables>(
    (variables: PatchV2AdminUsersVerifyUUIDVariables) =>
      fetchPatchV2AdminUsersVerifyUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2FileUploadMODELCOLLECTIONUUIDPathParams = {
  /**
   * Currently only organisation, funding-programme and project-pitch are set up
   */
  model: string;
  collection: string;
  uuid: string;
};

export type PostV2FileUploadMODELCOLLECTIONUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FileUploadMODELCOLLECTIONUUIDRequestBody = {
  title?: string;
  /**
   * @format binary
   */
  upload_file?: Blob;
};

export type PostV2FileUploadMODELCOLLECTIONUUIDVariables = {
  body?: PostV2FileUploadMODELCOLLECTIONUUIDRequestBody;
  pathParams: PostV2FileUploadMODELCOLLECTIONUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FileUploadMODELCOLLECTIONUUID = (
  variables: PostV2FileUploadMODELCOLLECTIONUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.V2FileRead,
    PostV2FileUploadMODELCOLLECTIONUUIDError,
    PostV2FileUploadMODELCOLLECTIONUUIDRequestBody,
    {},
    {},
    PostV2FileUploadMODELCOLLECTIONUUIDPathParams
  >({ url: "/v2/file/upload/{model}/{collection}/{uuid}", method: "post", ...variables, signal });

export const usePostV2FileUploadMODELCOLLECTIONUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.V2FileRead,
      PostV2FileUploadMODELCOLLECTIONUUIDError,
      PostV2FileUploadMODELCOLLECTIONUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.V2FileRead,
    PostV2FileUploadMODELCOLLECTIONUUIDError,
    PostV2FileUploadMODELCOLLECTIONUUIDVariables
  >(
    (variables: PostV2FileUploadMODELCOLLECTIONUUIDVariables) =>
      fetchPostV2FileUploadMODELCOLLECTIONUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2FilesUUIDPathParams = {
  uuid: string;
};

export type PutV2FilesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2FilesUUIDRequestBody = {
  title: string;
};

export type PutV2FilesUUIDVariables = {
  body: PutV2FilesUUIDRequestBody;
  pathParams: PutV2FilesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2FilesUUID = (variables: PutV2FilesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.V2FileRead, PutV2FilesUUIDError, PutV2FilesUUIDRequestBody, {}, {}, PutV2FilesUUIDPathParams>({
    url: "/v2/files/{uuid}",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2FilesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.V2FileRead, PutV2FilesUUIDError, PutV2FilesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.V2FileRead, PutV2FilesUUIDError, PutV2FilesUUIDVariables>(
    (variables: PutV2FilesUUIDVariables) => fetchPutV2FilesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2FilesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2FilesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2FilesUUIDVariables = {
  pathParams: DeleteV2FilesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2FilesUUID = (variables: DeleteV2FilesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2FilesUUIDError, undefined, {}, {}, DeleteV2FilesUUIDPathParams>({
    url: "/v2/files/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2FilesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2FilesUUIDError, DeleteV2FilesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2FilesUUIDError, DeleteV2FilesUUIDVariables>(
    (variables: DeleteV2FilesUUIDVariables) => fetchDeleteV2FilesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2TreeSpeciesError = Fetcher.ErrorWrapper<undefined>;

export type PostV2TreeSpeciesVariables = {
  body?: Schemas.V2TreeSpeciesCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostV2TreeSpecies = (variables: PostV2TreeSpeciesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.V2TreeSpeciesRead, PostV2TreeSpeciesError, Schemas.V2TreeSpeciesCreate, {}, {}, {}>({
    url: "/v2/tree-species",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2TreeSpecies = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.V2TreeSpeciesRead, PostV2TreeSpeciesError, PostV2TreeSpeciesVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.V2TreeSpeciesRead, PostV2TreeSpeciesError, PostV2TreeSpeciesVariables>(
    (variables: PostV2TreeSpeciesVariables) => fetchPostV2TreeSpecies({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2TreeSpeciesUUIDPathParams = {
  uuid: string;
};

export type PatchV2TreeSpeciesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2TreeSpeciesUUIDVariables = {
  body?: Schemas.V2TreeSpeciesUpdate;
  pathParams: PatchV2TreeSpeciesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2TreeSpeciesUUID = (variables: PatchV2TreeSpeciesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.V2TreeSpeciesCreate,
    PatchV2TreeSpeciesUUIDError,
    Schemas.V2TreeSpeciesUpdate,
    {},
    {},
    PatchV2TreeSpeciesUUIDPathParams
  >({ url: "/v2/tree-species/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2TreeSpeciesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.V2TreeSpeciesCreate,
      PatchV2TreeSpeciesUUIDError,
      PatchV2TreeSpeciesUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.V2TreeSpeciesCreate,
    PatchV2TreeSpeciesUUIDError,
    PatchV2TreeSpeciesUUIDVariables
  >(
    (variables: PatchV2TreeSpeciesUUIDVariables) => fetchPatchV2TreeSpeciesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2TreeSpeciesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2TreeSpeciesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2TreeSpeciesUUIDVariables = {
  pathParams: DeleteV2TreeSpeciesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2TreeSpeciesUUID = (variables: DeleteV2TreeSpeciesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.V2TreeSpeciesRead,
    DeleteV2TreeSpeciesUUIDError,
    undefined,
    {},
    {},
    DeleteV2TreeSpeciesUUIDPathParams
  >({ url: "/v2/tree-species/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2TreeSpeciesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.V2TreeSpeciesRead,
      DeleteV2TreeSpeciesUUIDError,
      DeleteV2TreeSpeciesUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.V2TreeSpeciesRead,
    DeleteV2TreeSpeciesUUIDError,
    DeleteV2TreeSpeciesUUIDVariables
  >(
    (variables: DeleteV2TreeSpeciesUUIDVariables) => fetchDeleteV2TreeSpeciesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2FundingTypeError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FundingTypeVariables = {
  body?: Schemas.V2FundingTypeCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FundingType = (variables: PostV2FundingTypeVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.V2FundingTypeRead, PostV2FundingTypeError, Schemas.V2FundingTypeCreate, {}, {}, {}>({
    url: "/v2/funding-type",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2FundingType = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.V2FundingTypeRead, PostV2FundingTypeError, PostV2FundingTypeVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.V2FundingTypeRead, PostV2FundingTypeError, PostV2FundingTypeVariables>(
    (variables: PostV2FundingTypeVariables) => fetchPostV2FundingType({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2FundingTypeUUIDPathParams = {
  uuid: string;
};

export type PatchV2FundingTypeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2FundingTypeUUIDVariables = {
  body?: Schemas.V2FundingTypeUpdate;
  pathParams: PatchV2FundingTypeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2FundingTypeUUID = (variables: PatchV2FundingTypeUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.V2FundingTypeRead,
    PatchV2FundingTypeUUIDError,
    Schemas.V2FundingTypeUpdate,
    {},
    {},
    PatchV2FundingTypeUUIDPathParams
  >({ url: "/v2/funding-type/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2FundingTypeUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.V2FundingTypeRead,
      PatchV2FundingTypeUUIDError,
      PatchV2FundingTypeUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.V2FundingTypeRead,
    PatchV2FundingTypeUUIDError,
    PatchV2FundingTypeUUIDVariables
  >(
    (variables: PatchV2FundingTypeUUIDVariables) => fetchPatchV2FundingTypeUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2FundingTypeUUIDPathParams = {
  uuid: string;
};

export type DeleteV2FundingTypeUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2FundingTypeUUIDVariables = {
  pathParams: DeleteV2FundingTypeUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2FundingTypeUUID = (variables: DeleteV2FundingTypeUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.V2FundingTypeRead,
    DeleteV2FundingTypeUUIDError,
    undefined,
    {},
    {},
    DeleteV2FundingTypeUUIDPathParams
  >({ url: "/v2/funding-type/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2FundingTypeUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.V2FundingTypeRead,
      DeleteV2FundingTypeUUIDError,
      DeleteV2FundingTypeUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.V2FundingTypeRead,
    DeleteV2FundingTypeUUIDError,
    DeleteV2FundingTypeUUIDVariables
  >(
    (variables: DeleteV2FundingTypeUUIDVariables) => fetchDeleteV2FundingTypeUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2CoreTeamLeaderError = Fetcher.ErrorWrapper<undefined>;

export type PostV2CoreTeamLeaderVariables = {
  body?: Schemas.V2CoreTeamLeaderCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostV2CoreTeamLeader = (variables: PostV2CoreTeamLeaderVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.V2CoreTeamLeaderRead, PostV2CoreTeamLeaderError, Schemas.V2CoreTeamLeaderCreate, {}, {}, {}>({
    url: "/v2/core-team-leader",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2CoreTeamLeader = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.V2CoreTeamLeaderRead,
      PostV2CoreTeamLeaderError,
      PostV2CoreTeamLeaderVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.V2CoreTeamLeaderRead, PostV2CoreTeamLeaderError, PostV2CoreTeamLeaderVariables>(
    (variables: PostV2CoreTeamLeaderVariables) => fetchPostV2CoreTeamLeader({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2CoreTeamLeaderUUIDPathParams = {
  uuid: string;
};

export type PatchV2CoreTeamLeaderUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2CoreTeamLeaderUUIDVariables = {
  body?: Schemas.V2CoreTeamLeaderUpdate;
  pathParams: PatchV2CoreTeamLeaderUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2CoreTeamLeaderUUID = (variables: PatchV2CoreTeamLeaderUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.V2CoreTeamLeaderRead,
    PatchV2CoreTeamLeaderUUIDError,
    Schemas.V2CoreTeamLeaderUpdate,
    {},
    {},
    PatchV2CoreTeamLeaderUUIDPathParams
  >({ url: "/v2/core-team-leader/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2CoreTeamLeaderUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.V2CoreTeamLeaderRead,
      PatchV2CoreTeamLeaderUUIDError,
      PatchV2CoreTeamLeaderUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.V2CoreTeamLeaderRead,
    PatchV2CoreTeamLeaderUUIDError,
    PatchV2CoreTeamLeaderUUIDVariables
  >(
    (variables: PatchV2CoreTeamLeaderUUIDVariables) =>
      fetchPatchV2CoreTeamLeaderUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2CoreTeamLeaderUUIDPathParams = {
  uuid: string;
};

export type DeleteV2CoreTeamLeaderUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2CoreTeamLeaderUUIDVariables = {
  pathParams: DeleteV2CoreTeamLeaderUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2CoreTeamLeaderUUID = (variables: DeleteV2CoreTeamLeaderUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.V2CoreTeamLeaderRead,
    DeleteV2CoreTeamLeaderUUIDError,
    undefined,
    {},
    {},
    DeleteV2CoreTeamLeaderUUIDPathParams
  >({ url: "/v2/core-team-leader/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2CoreTeamLeaderUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.V2CoreTeamLeaderRead,
      DeleteV2CoreTeamLeaderUUIDError,
      DeleteV2CoreTeamLeaderUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.V2CoreTeamLeaderRead,
    DeleteV2CoreTeamLeaderUUIDError,
    DeleteV2CoreTeamLeaderUUIDVariables
  >(
    (variables: DeleteV2CoreTeamLeaderUUIDVariables) =>
      fetchDeleteV2CoreTeamLeaderUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2LeadershipTeamError = Fetcher.ErrorWrapper<undefined>;

export type PostV2LeadershipTeamVariables = {
  body?: Schemas.V2LeadershipTeamCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostV2LeadershipTeam = (variables: PostV2LeadershipTeamVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.V2LeadershipTeamRead, PostV2LeadershipTeamError, Schemas.V2LeadershipTeamCreate, {}, {}, {}>({
    url: "/v2/leadership-team",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2LeadershipTeam = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.V2LeadershipTeamRead,
      PostV2LeadershipTeamError,
      PostV2LeadershipTeamVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.V2LeadershipTeamRead, PostV2LeadershipTeamError, PostV2LeadershipTeamVariables>(
    (variables: PostV2LeadershipTeamVariables) => fetchPostV2LeadershipTeam({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2LeadershipTeamUUIDPathParams = {
  uuid: string;
};

export type PatchV2LeadershipTeamUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2LeadershipTeamUUIDVariables = {
  body?: Schemas.V2LeadershipTeamUpdate;
  pathParams: PatchV2LeadershipTeamUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2LeadershipTeamUUID = (variables: PatchV2LeadershipTeamUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.V2LeadershipTeamRead,
    PatchV2LeadershipTeamUUIDError,
    Schemas.V2LeadershipTeamUpdate,
    {},
    {},
    PatchV2LeadershipTeamUUIDPathParams
  >({ url: "/v2/leadership-team/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2LeadershipTeamUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.V2LeadershipTeamRead,
      PatchV2LeadershipTeamUUIDError,
      PatchV2LeadershipTeamUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.V2LeadershipTeamRead,
    PatchV2LeadershipTeamUUIDError,
    PatchV2LeadershipTeamUUIDVariables
  >(
    (variables: PatchV2LeadershipTeamUUIDVariables) =>
      fetchPatchV2LeadershipTeamUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2LeadershipTeamUUIDPathParams = {
  uuid: string;
};

export type DeleteV2LeadershipTeamUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2LeadershipTeamUUIDVariables = {
  pathParams: DeleteV2LeadershipTeamUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2LeadershipTeamUUID = (variables: DeleteV2LeadershipTeamUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.V2LeadershipTeamRead,
    DeleteV2LeadershipTeamUUIDError,
    undefined,
    {},
    {},
    DeleteV2LeadershipTeamUUIDPathParams
  >({ url: "/v2/leadership-team/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2LeadershipTeamUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.V2LeadershipTeamRead,
      DeleteV2LeadershipTeamUUIDError,
      DeleteV2LeadershipTeamUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.V2LeadershipTeamRead,
    DeleteV2LeadershipTeamUUIDError,
    DeleteV2LeadershipTeamUUIDVariables
  >(
    (variables: DeleteV2LeadershipTeamUUIDVariables) =>
      fetchDeleteV2LeadershipTeamUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminSitesQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminSitesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminSitesResponse = {
  data?: Schemas.V2SiteRead[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminSitesVariables = {
  queryParams?: GetV2AdminSitesQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminSites = (variables: GetV2AdminSitesVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminSitesResponse, GetV2AdminSitesError, undefined, {}, GetV2AdminSitesQueryParams, {}>({
    url: "/v2/admin/sites",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminSites = <TData = GetV2AdminSitesResponse>(
  variables: GetV2AdminSitesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminSitesResponse, GetV2AdminSitesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminSitesResponse, GetV2AdminSitesError, TData>(
    queryKeyFn({ path: "/v2/admin/sites", operationId: "getV2AdminSites", variables }),
    ({ signal }) => fetchGetV2AdminSites({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminSitesPpcQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminSitesPpcError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminSitesPpcResponse = {
  data?: Schemas.V2SiteRead[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminSitesPpcVariables = {
  queryParams?: GetV2AdminSitesPpcQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminSitesPpc = (variables: GetV2AdminSitesPpcVariables, signal?: AbortSignal) =>
  apiFetch<GetV2AdminSitesPpcResponse, GetV2AdminSitesPpcError, undefined, {}, GetV2AdminSitesPpcQueryParams, {}>({
    url: "/v2/admin/sites/ppc",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminSitesPpc = <TData = GetV2AdminSitesPpcResponse>(
  variables: GetV2AdminSitesPpcVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminSitesPpcResponse, GetV2AdminSitesPpcError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminSitesPpcResponse, GetV2AdminSitesPpcError, TData>(
    queryKeyFn({ path: "/v2/admin/sites/ppc", operationId: "getV2AdminSitesPpc", variables }),
    ({ signal }) => fetchGetV2AdminSitesPpc({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminSitesTerrafundQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminSitesTerrafundError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminSitesTerrafundResponse = {
  data?: Schemas.V2SiteRead[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminSitesTerrafundVariables = {
  queryParams?: GetV2AdminSitesTerrafundQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminSitesTerrafund = (variables: GetV2AdminSitesTerrafundVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminSitesTerrafundResponse,
    GetV2AdminSitesTerrafundError,
    undefined,
    {},
    GetV2AdminSitesTerrafundQueryParams,
    {}
  >({ url: "/v2/admin/sites/terrafund", method: "get", ...variables, signal });

export const useGetV2AdminSitesTerrafund = <TData = GetV2AdminSitesTerrafundResponse>(
  variables: GetV2AdminSitesTerrafundVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminSitesTerrafundResponse, GetV2AdminSitesTerrafundError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminSitesTerrafundResponse, GetV2AdminSitesTerrafundError, TData>(
    queryKeyFn({ path: "/v2/admin/sites/terrafund", operationId: "getV2AdminSitesTerrafund", variables }),
    ({ signal }) => fetchGetV2AdminSitesTerrafund({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminProjectPitchesQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminProjectPitchesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminProjectPitchesResponse = {
  data?: Schemas.ProjectPitchRead[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2AdminProjectPitchesVariables = {
  queryParams?: GetV2AdminProjectPitchesQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminProjectPitches = (variables: GetV2AdminProjectPitchesVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminProjectPitchesResponse,
    GetV2AdminProjectPitchesError,
    undefined,
    {},
    GetV2AdminProjectPitchesQueryParams,
    {}
  >({ url: "/v2/admin/project-pitches", method: "get", ...variables, signal });

export const useGetV2AdminProjectPitches = <TData = GetV2AdminProjectPitchesResponse>(
  variables: GetV2AdminProjectPitchesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminProjectPitchesResponse, GetV2AdminProjectPitchesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminProjectPitchesResponse, GetV2AdminProjectPitchesError, TData>(
    queryKeyFn({ path: "/v2/admin/project-pitches", operationId: "getV2AdminProjectPitches", variables }),
    ({ signal }) => fetchGetV2AdminProjectPitches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminProjectPitchesExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminProjectPitchesExportVariables = ApiContext["fetcherOptions"];

export const fetchGetV2AdminProjectPitchesExport = (
  variables: GetV2AdminProjectPitchesExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<Record<string, any>, GetV2AdminProjectPitchesExportError, undefined, {}, {}, {}>({
    url: "/v2/admin/project-pitches/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminProjectPitchesExport = <TData = Record<string, any>>(
  variables: GetV2AdminProjectPitchesExportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Record<string, any>, GetV2AdminProjectPitchesExportError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Record<string, any>, GetV2AdminProjectPitchesExportError, TData>(
    queryKeyFn({ path: "/v2/admin/project-pitches/export", operationId: "getV2AdminProjectPitchesExport", variables }),
    ({ signal }) => fetchGetV2AdminProjectPitchesExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ProjectPitchesQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2ProjectPitchesError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectPitchesResponse = {
  data?: Schemas.ProjectPitchRead[];
  links?: {
    first?: string;
    last?: string;
    prev?: string;
    next?: string;
  };
  meta?: {
    current_page?: number;
    from?: number;
    last_page?: number;
    next?: number;
  };
};

export type GetV2ProjectPitchesVariables = {
  queryParams?: GetV2ProjectPitchesQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectPitches = (variables: GetV2ProjectPitchesVariables, signal?: AbortSignal) =>
  apiFetch<GetV2ProjectPitchesResponse, GetV2ProjectPitchesError, undefined, {}, GetV2ProjectPitchesQueryParams, {}>({
    url: "/v2/project-pitches",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ProjectPitches = <TData = GetV2ProjectPitchesResponse>(
  variables: GetV2ProjectPitchesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2ProjectPitchesResponse, GetV2ProjectPitchesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2ProjectPitchesResponse, GetV2ProjectPitchesError, TData>(
    queryKeyFn({ path: "/v2/project-pitches", operationId: "getV2ProjectPitches", variables }),
    ({ signal }) => fetchGetV2ProjectPitches({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2ProjectPitchesError = Fetcher.ErrorWrapper<undefined>;

export type PostV2ProjectPitchesVariables = {
  body?: Schemas.ProjectPitchCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostV2ProjectPitches = (variables: PostV2ProjectPitchesVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ProjectPitchRead, PostV2ProjectPitchesError, Schemas.ProjectPitchCreate, {}, {}, {}>({
    url: "/v2/project-pitches",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2ProjectPitches = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.ProjectPitchRead, PostV2ProjectPitchesError, PostV2ProjectPitchesVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.ProjectPitchRead, PostV2ProjectPitchesError, PostV2ProjectPitchesVariables>(
    (variables: PostV2ProjectPitchesVariables) => fetchPostV2ProjectPitches({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2ProjectPitchesUUIDPathParams = {
  uuid: string;
};

export type GetV2ProjectPitchesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ProjectPitchesUUIDVariables = {
  pathParams: GetV2ProjectPitchesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ProjectPitchesUUID = (variables: GetV2ProjectPitchesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.ProjectPitchRead,
    GetV2ProjectPitchesUUIDError,
    undefined,
    {},
    {},
    GetV2ProjectPitchesUUIDPathParams
  >({ url: "/v2/project-pitches/{uuid}", method: "get", ...variables, signal });

export const useGetV2ProjectPitchesUUID = <TData = Schemas.ProjectPitchRead>(
  variables: GetV2ProjectPitchesUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ProjectPitchRead, GetV2ProjectPitchesUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.ProjectPitchRead, GetV2ProjectPitchesUUIDError, TData>(
    queryKeyFn({ path: "/v2/project-pitches/{UUID}", operationId: "getV2ProjectPitchesUUID", variables }),
    ({ signal }) => fetchGetV2ProjectPitchesUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchV2ProjectPitchesUUIDPathParams = {
  uuid: string;
};

export type PatchV2ProjectPitchesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2ProjectPitchesUUIDVariables = {
  body?: Schemas.ProjectPitchUpdate;
  pathParams: PatchV2ProjectPitchesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2ProjectPitchesUUID = (variables: PatchV2ProjectPitchesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.ProjectPitchRead,
    PatchV2ProjectPitchesUUIDError,
    Schemas.ProjectPitchUpdate,
    {},
    {},
    PatchV2ProjectPitchesUUIDPathParams
  >({ url: "/v2/project-pitches/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2ProjectPitchesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectPitchRead,
      PatchV2ProjectPitchesUUIDError,
      PatchV2ProjectPitchesUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.ProjectPitchRead,
    PatchV2ProjectPitchesUUIDError,
    PatchV2ProjectPitchesUUIDVariables
  >(
    (variables: PatchV2ProjectPitchesUUIDVariables) =>
      fetchPatchV2ProjectPitchesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2ProjectPitchesUUIDPathParams = {
  uuid: string;
};

export type DeleteV2ProjectPitchesUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2ProjectPitchesUUIDVariables = {
  pathParams: DeleteV2ProjectPitchesUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2ProjectPitchesUUID = (variables: DeleteV2ProjectPitchesUUIDVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DeleteV2ProjectPitchesUUIDError, undefined, {}, {}, DeleteV2ProjectPitchesUUIDPathParams>({
    url: "/v2/project-pitches/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2ProjectPitchesUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2ProjectPitchesUUIDError, DeleteV2ProjectPitchesUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2ProjectPitchesUUIDError, DeleteV2ProjectPitchesUUIDVariables>(
    (variables: DeleteV2ProjectPitchesUUIDVariables) =>
      fetchDeleteV2ProjectPitchesUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2ProjectPitchesSubmitUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2ProjectPitchesSubmitUUIDVariables = ApiContext["fetcherOptions"];

export const fetchPutV2ProjectPitchesSubmitUUID = (
  variables: PutV2ProjectPitchesSubmitUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, PutV2ProjectPitchesSubmitUUIDError, undefined, {}, {}, {}>({
    url: "/v2/project-pitches/submit/{uuid}",
    method: "put",
    ...variables,
    signal
  });

export const usePutV2ProjectPitchesSubmitUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PutV2ProjectPitchesSubmitUUIDError,
      PutV2ProjectPitchesSubmitUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, PutV2ProjectPitchesSubmitUUIDError, PutV2ProjectPitchesSubmitUUIDVariables>(
    (variables: PutV2ProjectPitchesSubmitUUIDVariables) =>
      fetchPutV2ProjectPitchesSubmitUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminFormsSubmissionsUUIDPathParams = {
  uuid: string;
};

export type GetV2AdminFormsSubmissionsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsSubmissionsUUIDVariables = {
  pathParams: GetV2AdminFormsSubmissionsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsSubmissionsUUID = (
  variables: GetV2AdminFormsSubmissionsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.FormSubmissionRead,
    GetV2AdminFormsSubmissionsUUIDError,
    undefined,
    {},
    {},
    GetV2AdminFormsSubmissionsUUIDPathParams
  >({ url: "/v2/admin/forms/submissions/{uuid}", method: "get", ...variables, signal });

export const useGetV2AdminFormsSubmissionsUUID = <TData = Schemas.FormSubmissionRead>(
  variables: GetV2AdminFormsSubmissionsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.FormSubmissionRead, GetV2AdminFormsSubmissionsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.FormSubmissionRead, GetV2AdminFormsSubmissionsUUIDError, TData>(
    queryKeyFn({
      path: "/v2/admin/forms/submissions/{UUID}",
      operationId: "getV2AdminFormsSubmissionsUUID",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsSubmissionsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2AdminFormsSubmissionsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminFormsSubmissionsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFormsSubmissionsUUIDVariables = {
  pathParams: DeleteV2AdminFormsSubmissionsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFormsSubmissionsUUID = (
  variables: DeleteV2AdminFormsSubmissionsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminFormsSubmissionsUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminFormsSubmissionsUUIDPathParams
  >({ url: "/v2/admin/forms/submissions/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminFormsSubmissionsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminFormsSubmissionsUUIDError,
      DeleteV2AdminFormsSubmissionsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminFormsSubmissionsUUIDError,
    DeleteV2AdminFormsSubmissionsUUIDVariables
  >(
    (variables: DeleteV2AdminFormsSubmissionsUUIDVariables) =>
      fetchDeleteV2AdminFormsSubmissionsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminFormsSubmissionsExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsSubmissionsExportVariables = ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsSubmissionsExport = (
  variables: GetV2AdminFormsSubmissionsExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<Record<string, any>, GetV2AdminFormsSubmissionsExportError, undefined, {}, {}, {}>({
    url: "/v2/admin/forms/submissions/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2AdminFormsSubmissionsExport = <TData = Record<string, any>>(
  variables: GetV2AdminFormsSubmissionsExportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Record<string, any>, GetV2AdminFormsSubmissionsExportError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Record<string, any>, GetV2AdminFormsSubmissionsExportError, TData>(
    queryKeyFn({
      path: "/v2/admin/forms/submissions/export",
      operationId: "getV2AdminFormsSubmissionsExport",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsSubmissionsExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFormsSubmissionsQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminFormsSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsSubmissionsResponse = {
  data?: Schemas.FormSubmissionRead[];
  links?: Schemas.V2PaginationLinks;
  meta?: Schemas.V2PaginationMeta;
};

export type GetV2AdminFormsSubmissionsVariables = {
  queryParams?: GetV2AdminFormsSubmissionsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsSubmissions = (variables: GetV2AdminFormsSubmissionsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2AdminFormsSubmissionsResponse,
    GetV2AdminFormsSubmissionsError,
    undefined,
    {},
    GetV2AdminFormsSubmissionsQueryParams,
    {}
  >({ url: "/v2/admin/forms/submissions", method: "get", ...variables, signal });

export const useGetV2AdminFormsSubmissions = <TData = GetV2AdminFormsSubmissionsResponse>(
  variables: GetV2AdminFormsSubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFormsSubmissionsResponse, GetV2AdminFormsSubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFormsSubmissionsResponse, GetV2AdminFormsSubmissionsError, TData>(
    queryKeyFn({ path: "/v2/admin/forms/submissions", operationId: "getV2AdminFormsSubmissions", variables }),
    ({ signal }) => fetchGetV2AdminFormsSubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FormsMySubmissionsQueryParams = {
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2FormsMySubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsMySubmissionsResponse = {
  data?: Schemas.FormSubmissionRead[];
  links?: Schemas.V2PaginationLinks;
  meta?: Schemas.V2PaginationMeta;
};

export type GetV2FormsMySubmissionsVariables = {
  queryParams?: GetV2FormsMySubmissionsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsMySubmissions = (variables: GetV2FormsMySubmissionsVariables, signal?: AbortSignal) =>
  apiFetch<
    GetV2FormsMySubmissionsResponse,
    GetV2FormsMySubmissionsError,
    undefined,
    {},
    GetV2FormsMySubmissionsQueryParams,
    {}
  >({ url: "/v2/forms/my/submissions", method: "get", ...variables, signal });

export const useGetV2FormsMySubmissions = <TData = GetV2FormsMySubmissionsResponse>(
  variables: GetV2FormsMySubmissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2FormsMySubmissionsResponse, GetV2FormsMySubmissionsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2FormsMySubmissionsResponse, GetV2FormsMySubmissionsError, TData>(
    queryKeyFn({ path: "/v2/forms/my/submissions", operationId: "getV2FormsMySubmissions", variables }),
    ({ signal }) => fetchGetV2FormsMySubmissions({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FormsUUIDPathParams = {
  uuid: string;
};

export type GetV2FormsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsUUIDVariables = {
  pathParams: GetV2FormsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsUUID = (variables: GetV2FormsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.FormRead, GetV2FormsUUIDError, undefined, {}, {}, GetV2FormsUUIDPathParams>({
    url: "/v2/forms/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2FormsUUID = <TData = Schemas.FormRead>(
  variables: GetV2FormsUUIDVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.FormRead, GetV2FormsUUIDError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.FormRead, GetV2FormsUUIDError, TData>(
    queryKeyFn({ path: "/v2/forms/{UUID}", operationId: "getV2FormsUUID", variables }),
    ({ signal }) => fetchGetV2FormsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PostV2AdminFundingProgrammeStageError = Fetcher.ErrorWrapper<undefined>;

export type PostV2AdminFundingProgrammeStageVariables = {
  body?: RequestBodies.StageCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostV2AdminFundingProgrammeStage = (
  variables: PostV2AdminFundingProgrammeStageVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.StageRead, PostV2AdminFundingProgrammeStageError, RequestBodies.StageCreate, {}, {}, {}>({
    url: "/v2/admin/funding-programme/stage",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2AdminFundingProgrammeStage = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.StageRead,
      PostV2AdminFundingProgrammeStageError,
      PostV2AdminFundingProgrammeStageVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.StageRead,
    PostV2AdminFundingProgrammeStageError,
    PostV2AdminFundingProgrammeStageVariables
  >(
    (variables: PostV2AdminFundingProgrammeStageVariables) =>
      fetchPostV2AdminFundingProgrammeStage({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2AdminFundingProgrammeStageUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFundingProgrammeStageUUIDVariables = ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFundingProgrammeStageUUID = (
  variables: DeleteV2AdminFundingProgrammeStageUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.StageRead, DeleteV2AdminFundingProgrammeStageUUIDError, undefined, {}, {}, {}>({
    url: "/v2/admin/funding-programme/stage/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2AdminFundingProgrammeStageUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.StageRead,
      DeleteV2AdminFundingProgrammeStageUUIDError,
      DeleteV2AdminFundingProgrammeStageUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.StageRead,
    DeleteV2AdminFundingProgrammeStageUUIDError,
    DeleteV2AdminFundingProgrammeStageUUIDVariables
  >(
    (variables: DeleteV2AdminFundingProgrammeStageUUIDVariables) =>
      fetchDeleteV2AdminFundingProgrammeStageUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AdminFundingProgrammeStageUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFundingProgrammeStageUUIDVariables = {
  body?: RequestBodies.StageCreate;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFundingProgrammeStageUUID = (
  variables: PatchV2AdminFundingProgrammeStageUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.StageRead, PatchV2AdminFundingProgrammeStageUUIDError, RequestBodies.StageCreate, {}, {}, {}>({
    url: "/v2/admin/funding-programme/stage/{uuid}",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2AdminFundingProgrammeStageUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.StageRead,
      PatchV2AdminFundingProgrammeStageUUIDError,
      PatchV2AdminFundingProgrammeStageUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.StageRead,
    PatchV2AdminFundingProgrammeStageUUIDError,
    PatchV2AdminFundingProgrammeStageUUIDVariables
  >(
    (variables: PatchV2AdminFundingProgrammeStageUUIDVariables) =>
      fetchPatchV2AdminFundingProgrammeStageUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FundingProgrammeStageQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2FundingProgrammeStageError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FundingProgrammeStageVariables = {
  queryParams?: GetV2FundingProgrammeStageQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FundingProgrammeStage = (variables: GetV2FundingProgrammeStageVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.StagePaginated,
    GetV2FundingProgrammeStageError,
    undefined,
    {},
    GetV2FundingProgrammeStageQueryParams,
    {}
  >({ url: "/v2/funding-programme/stage", method: "get", ...variables, signal });

export const useGetV2FundingProgrammeStage = <TData = Schemas.StagePaginated>(
  variables: GetV2FundingProgrammeStageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.StagePaginated, GetV2FundingProgrammeStageError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.StagePaginated, GetV2FundingProgrammeStageError, TData>(
    queryKeyFn({ path: "/v2/funding-programme/stage", operationId: "getV2FundingProgrammeStage", variables }),
    ({ signal }) => fetchGetV2FundingProgrammeStage({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2FundingProgrammeStageUUIDPathParams = {
  uuid: string;
};

export type GetV2FundingProgrammeStageUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FundingProgrammeStageUUIDVariables = {
  pathParams: GetV2FundingProgrammeStageUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FundingProgrammeStageUUID = (
  variables: GetV2FundingProgrammeStageUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.StageRead,
    GetV2FundingProgrammeStageUUIDError,
    undefined,
    {},
    {},
    GetV2FundingProgrammeStageUUIDPathParams
  >({ url: "/v2/funding-programme/stage/{uuid}", method: "get", ...variables, signal });

export const useGetV2FundingProgrammeStageUUID = <TData = Schemas.StageRead>(
  variables: GetV2FundingProgrammeStageUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.StageRead, GetV2FundingProgrammeStageUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.StageRead, GetV2FundingProgrammeStageUUIDError, TData>(
    queryKeyFn({
      path: "/v2/funding-programme/stage/{UUID}",
      operationId: "getV2FundingProgrammeStageUUID",
      variables
    }),
    ({ signal }) => fetchGetV2FundingProgrammeStageUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchV2AdminFundingProgrammeStageUUIDStatusError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFundingProgrammeStageUUIDStatusVariables = ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFundingProgrammeStageUUIDStatus = (
  variables: PatchV2AdminFundingProgrammeStageUUIDStatusVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.StageRead, PatchV2AdminFundingProgrammeStageUUIDStatusError, undefined, {}, {}, {}>({
    url: "/v2/admin/funding-programme/stage/{uuid}/status",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2AdminFundingProgrammeStageUUIDStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.StageRead,
      PatchV2AdminFundingProgrammeStageUUIDStatusError,
      PatchV2AdminFundingProgrammeStageUUIDStatusVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.StageRead,
    PatchV2AdminFundingProgrammeStageUUIDStatusError,
    PatchV2AdminFundingProgrammeStageUUIDStatusVariables
  >(
    (variables: PatchV2AdminFundingProgrammeStageUUIDStatusVariables) =>
      fetchPatchV2AdminFundingProgrammeStageUUIDStatus({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2AdminFormsSubmissionsUUIDStatusError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2AdminFormsSubmissionsUUIDStatusRequestBody = {
  feedback?: string;
  feedback_fields?: string[];
  status?: "started" | "awaiting-approval" | "approved" | "requires-more-information" | "rejected";
};

export type PatchV2AdminFormsSubmissionsUUIDStatusVariables = {
  body?: PatchV2AdminFormsSubmissionsUUIDStatusRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2AdminFormsSubmissionsUUIDStatus = (
  variables: PatchV2AdminFormsSubmissionsUUIDStatusVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.FormSubmissionRead,
    PatchV2AdminFormsSubmissionsUUIDStatusError,
    PatchV2AdminFormsSubmissionsUUIDStatusRequestBody,
    {},
    {},
    {}
  >({ url: "/v2/admin/forms/submissions/{uuid}/status", method: "patch", ...variables, signal });

export const usePatchV2AdminFormsSubmissionsUUIDStatus = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FormSubmissionRead,
      PatchV2AdminFormsSubmissionsUUIDStatusError,
      PatchV2AdminFormsSubmissionsUUIDStatusVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.FormSubmissionRead,
    PatchV2AdminFormsSubmissionsUUIDStatusError,
    PatchV2AdminFormsSubmissionsUUIDStatusVariables
  >(
    (variables: PatchV2AdminFormsSubmissionsUUIDStatusVariables) =>
      fetchPatchV2AdminFormsSubmissionsUUIDStatus({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2FormsSubmissionsError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FormsSubmissionsVariables = {
  body?: Schemas.FormSubmissionCreate;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FormsSubmissions = (variables: PostV2FormsSubmissionsVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.FormSubmissionRead, PostV2FormsSubmissionsError, Schemas.FormSubmissionCreate, {}, {}, {}>({
    url: "/v2/forms/submissions",
    method: "post",
    ...variables,
    signal
  });

export const usePostV2FormsSubmissions = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FormSubmissionRead,
      PostV2FormsSubmissionsError,
      PostV2FormsSubmissionsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.FormSubmissionRead,
    PostV2FormsSubmissionsError,
    PostV2FormsSubmissionsVariables
  >(
    (variables: PostV2FormsSubmissionsVariables) => fetchPostV2FormsSubmissions({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2FormsSubmissionsUUIDPathParams = {
  uuid: string;
};

export type GetV2FormsSubmissionsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2FormsSubmissionsUUIDVariables = {
  pathParams: GetV2FormsSubmissionsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2FormsSubmissionsUUID = (variables: GetV2FormsSubmissionsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.FormSubmissionRead,
    GetV2FormsSubmissionsUUIDError,
    undefined,
    {},
    {},
    GetV2FormsSubmissionsUUIDPathParams
  >({ url: "/v2/forms/submissions/{uuid}", method: "get", ...variables, signal });

export const useGetV2FormsSubmissionsUUID = <TData = Schemas.FormSubmissionRead>(
  variables: GetV2FormsSubmissionsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.FormSubmissionRead, GetV2FormsSubmissionsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.FormSubmissionRead, GetV2FormsSubmissionsUUIDError, TData>(
    queryKeyFn({ path: "/v2/forms/submissions/{UUID}", operationId: "getV2FormsSubmissionsUUID", variables }),
    ({ signal }) => fetchGetV2FormsSubmissionsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type PatchV2FormsSubmissionsUUIDPathParams = {
  uuid: string;
};

export type PatchV2FormsSubmissionsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2FormsSubmissionsUUIDVariables = {
  body?: Schemas.FormSubmissionUpdate;
  pathParams: PatchV2FormsSubmissionsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2FormsSubmissionsUUID = (
  variables: PatchV2FormsSubmissionsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.FormSubmissionRead,
    PatchV2FormsSubmissionsUUIDError,
    Schemas.FormSubmissionUpdate,
    {},
    {},
    PatchV2FormsSubmissionsUUIDPathParams
  >({ url: "/v2/forms/submissions/{uuid}", method: "patch", ...variables, signal });

export const usePatchV2FormsSubmissionsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FormSubmissionRead,
      PatchV2FormsSubmissionsUUIDError,
      PatchV2FormsSubmissionsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.FormSubmissionRead,
    PatchV2FormsSubmissionsUUIDError,
    PatchV2FormsSubmissionsUUIDVariables
  >(
    (variables: PatchV2FormsSubmissionsUUIDVariables) =>
      fetchPatchV2FormsSubmissionsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteV2FormsSubmissionsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2FormsSubmissionsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2FormsSubmissionsUUIDVariables = {
  pathParams: DeleteV2FormsSubmissionsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2FormsSubmissionsUUID = (
  variables: DeleteV2FormsSubmissionsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, DeleteV2FormsSubmissionsUUIDError, undefined, {}, {}, DeleteV2FormsSubmissionsUUIDPathParams>({
    url: "/v2/forms/submissions/{uuid}",
    method: "delete",
    ...variables,
    signal
  });

export const useDeleteV2FormsSubmissionsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DeleteV2FormsSubmissionsUUIDError, DeleteV2FormsSubmissionsUUIDVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DeleteV2FormsSubmissionsUUIDError, DeleteV2FormsSubmissionsUUIDVariables>(
    (variables: DeleteV2FormsSubmissionsUUIDVariables) =>
      fetchDeleteV2FormsSubmissionsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostV2FormsSubmissionsUUIDNextStagePathParams = {
  uuid: string;
};

export type PostV2FormsSubmissionsUUIDNextStageError = Fetcher.ErrorWrapper<undefined>;

export type PostV2FormsSubmissionsUUIDNextStageVariables = {
  pathParams: PostV2FormsSubmissionsUUIDNextStagePathParams;
} & ApiContext["fetcherOptions"];

export const fetchPostV2FormsSubmissionsUUIDNextStage = (
  variables: PostV2FormsSubmissionsUUIDNextStageVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.FormSubmissionRead,
    PostV2FormsSubmissionsUUIDNextStageError,
    undefined,
    {},
    {},
    PostV2FormsSubmissionsUUIDNextStagePathParams
  >({ url: "/v2/forms/submissions/{uuid}/next-stage", method: "post", ...variables, signal });

export const usePostV2FormsSubmissionsUUIDNextStage = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FormSubmissionRead,
      PostV2FormsSubmissionsUUIDNextStageError,
      PostV2FormsSubmissionsUUIDNextStageVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.FormSubmissionRead,
    PostV2FormsSubmissionsUUIDNextStageError,
    PostV2FormsSubmissionsUUIDNextStageVariables
  >(
    (variables: PostV2FormsSubmissionsUUIDNextStageVariables) =>
      fetchPostV2FormsSubmissionsUUIDNextStage({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PutV2FormsSubmissionsSubmitUUIDPathParams = {
  uuid: string;
};

export type PutV2FormsSubmissionsSubmitUUIDError = Fetcher.ErrorWrapper<undefined>;

export type PutV2FormsSubmissionsSubmitUUIDVariables = {
  pathParams: PutV2FormsSubmissionsSubmitUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchPutV2FormsSubmissionsSubmitUUID = (
  variables: PutV2FormsSubmissionsSubmitUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.FormSubmissionRead,
    PutV2FormsSubmissionsSubmitUUIDError,
    undefined,
    {},
    {},
    PutV2FormsSubmissionsSubmitUUIDPathParams
  >({ url: "/v2/forms/submissions/submit/{uuid}", method: "put", ...variables, signal });

export const usePutV2FormsSubmissionsSubmitUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FormSubmissionRead,
      PutV2FormsSubmissionsSubmitUUIDError,
      PutV2FormsSubmissionsSubmitUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.FormSubmissionRead,
    PutV2FormsSubmissionsSubmitUUIDError,
    PutV2FormsSubmissionsSubmitUUIDVariables
  >(
    (variables: PutV2FormsSubmissionsSubmitUUIDVariables) =>
      fetchPutV2FormsSubmissionsSubmitUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostSiteIDTreeSpeciesBulkError = Fetcher.ErrorWrapper<undefined>;

export type PostSiteIDTreeSpeciesBulkRequestBody = {
  site_submission_id?: number;
  tree_species?: Schemas.TreeSpeciesWithAmountBulkSubmit[];
};

export type PostSiteIDTreeSpeciesBulkVariables = {
  body?: PostSiteIDTreeSpeciesBulkRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostSiteIDTreeSpeciesBulk = (variables: PostSiteIDTreeSpeciesBulkVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SiteRead, PostSiteIDTreeSpeciesBulkError, PostSiteIDTreeSpeciesBulkRequestBody, {}, {}, {}>({
    url: "/site/{id}/tree_species/bulk",
    method: "post",
    ...variables,
    signal
  });

export const usePostSiteIDTreeSpeciesBulk = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.SiteRead, PostSiteIDTreeSpeciesBulkError, PostSiteIDTreeSpeciesBulkVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.SiteRead, PostSiteIDTreeSpeciesBulkError, PostSiteIDTreeSpeciesBulkVariables>(
    (variables: PostSiteIDTreeSpeciesBulkVariables) =>
      fetchPostSiteIDTreeSpeciesBulk({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostProgrammeIDTreeSpeciesBulkError = Fetcher.ErrorWrapper<undefined>;

export type PostProgrammeIDTreeSpeciesBulkRequestBody = {
  tree_species?: Schemas.TreeSpeciesBulkSubmit[];
};

export type PostProgrammeIDTreeSpeciesBulkVariables = {
  body?: PostProgrammeIDTreeSpeciesBulkRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostProgrammeIDTreeSpeciesBulk = (
  variables: PostProgrammeIDTreeSpeciesBulkVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.ProgrammeRead,
    PostProgrammeIDTreeSpeciesBulkError,
    PostProgrammeIDTreeSpeciesBulkRequestBody,
    {},
    {},
    {}
  >({ url: "/programme/{id}/tree_species/bulk", method: "post", ...variables, signal });

export const usePostProgrammeIDTreeSpeciesBulk = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProgrammeRead,
      PostProgrammeIDTreeSpeciesBulkError,
      PostProgrammeIDTreeSpeciesBulkVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.ProgrammeRead,
    PostProgrammeIDTreeSpeciesBulkError,
    PostProgrammeIDTreeSpeciesBulkVariables
  >(
    (variables: PostProgrammeIDTreeSpeciesBulkVariables) =>
      fetchPostProgrammeIDTreeSpeciesBulk({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PostProgrammeSubmissionIDTreeSpeciesBulkError = Fetcher.ErrorWrapper<undefined>;

export type PostProgrammeSubmissionIDTreeSpeciesBulkRequestBody = {
  tree_species?: Schemas.TreeSpeciesWithAmountBulkSubmit[];
};

export type PostProgrammeSubmissionIDTreeSpeciesBulkVariables = {
  body?: PostProgrammeSubmissionIDTreeSpeciesBulkRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostProgrammeSubmissionIDTreeSpeciesBulk = (
  variables: PostProgrammeSubmissionIDTreeSpeciesBulkVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SubmissionRead,
    PostProgrammeSubmissionIDTreeSpeciesBulkError,
    PostProgrammeSubmissionIDTreeSpeciesBulkRequestBody,
    {},
    {},
    {}
  >({ url: "/programme/submission/{id}/tree_species/bulk", method: "post", ...variables, signal });

export const usePostProgrammeSubmissionIDTreeSpeciesBulk = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SubmissionRead,
      PostProgrammeSubmissionIDTreeSpeciesBulkError,
      PostProgrammeSubmissionIDTreeSpeciesBulkVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SubmissionRead,
    PostProgrammeSubmissionIDTreeSpeciesBulkError,
    PostProgrammeSubmissionIDTreeSpeciesBulkVariables
  >(
    (variables: PostProgrammeSubmissionIDTreeSpeciesBulkVariables) =>
      fetchPostProgrammeSubmissionIDTreeSpeciesBulk({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PatchV2MyBannersError = Fetcher.ErrorWrapper<undefined>;

export type PatchV2MyBannersRequestBody = {
  banners?: Record<string, any>[];
};

export type PatchV2MyBannersVariables = {
  body?: PatchV2MyBannersRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPatchV2MyBanners = (variables: PatchV2MyBannersVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UserRead, PatchV2MyBannersError, PatchV2MyBannersRequestBody, {}, {}, {}>({
    url: "/v2/my/banners",
    method: "patch",
    ...variables,
    signal
  });

export const usePatchV2MyBanners = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.UserRead, PatchV2MyBannersError, PatchV2MyBannersVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<Schemas.UserRead, PatchV2MyBannersError, PatchV2MyBannersVariables>(
    (variables: PatchV2MyBannersVariables) => fetchPatchV2MyBanners({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminFormsApplicationsQueryParams = {
  /**
   * search term to use on the collection
   */
  search?: string;
  /**
   * multiple filters can be applied. syntax is ?filter[foo]=value1,value2$filter[bar]=value3
   */
  filter?: string;
  /**
   * sorting can be applied, default is ascending or use - for descending. For Example ?sort=-last_name
   */
  sort?: string;
  /**
   * number of results (per page) to return
   */
  per_page?: number;
  /**
   * page number you want results from
   */
  page?: number;
};

export type GetV2AdminFormsApplicationsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsApplicationsResponse = {
  data?: Schemas.ApplicationLiteRead[];
  links?: Schemas.V2PaginationLinks;
  meta?: Schemas.V2PaginationMeta;
};

export type GetV2AdminFormsApplicationsVariables = {
  queryParams?: GetV2AdminFormsApplicationsQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * Available Filters : funding_programme_uuid,current_stage, current_submission_status (Current stage is the stage uuid) Available Sorts : created_at, updated_at, organisation_name, funding_programme_name, organisation_name (Prefix with a '-' for descending
 */
export const fetchGetV2AdminFormsApplications = (
  variables: GetV2AdminFormsApplicationsVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetV2AdminFormsApplicationsResponse,
    GetV2AdminFormsApplicationsError,
    undefined,
    {},
    GetV2AdminFormsApplicationsQueryParams,
    {}
  >({ url: "/v2/admin/forms/applications", method: "get", ...variables, signal });

/**
 * Available Filters : funding_programme_uuid,current_stage, current_submission_status (Current stage is the stage uuid) Available Sorts : created_at, updated_at, organisation_name, funding_programme_name, organisation_name (Prefix with a '-' for descending
 */
export const useGetV2AdminFormsApplications = <TData = GetV2AdminFormsApplicationsResponse>(
  variables: GetV2AdminFormsApplicationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2AdminFormsApplicationsResponse, GetV2AdminFormsApplicationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2AdminFormsApplicationsResponse, GetV2AdminFormsApplicationsError, TData>(
    queryKeyFn({ path: "/v2/admin/forms/applications", operationId: "getV2AdminFormsApplications", variables }),
    ({ signal }) => fetchGetV2AdminFormsApplications({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2AdminFormsApplicationsUUIDPathParams = {
  uuid: string;
};

export type GetV2AdminFormsApplicationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsApplicationsUUIDVariables = {
  pathParams: GetV2AdminFormsApplicationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2AdminFormsApplicationsUUID = (
  variables: GetV2AdminFormsApplicationsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.ApplicationRead,
    GetV2AdminFormsApplicationsUUIDError,
    undefined,
    {},
    {},
    GetV2AdminFormsApplicationsUUIDPathParams
  >({ url: "/v2/admin/forms/applications/{uuid}", method: "get", ...variables, signal });

export const useGetV2AdminFormsApplicationsUUID = <TData = Schemas.ApplicationRead>(
  variables: GetV2AdminFormsApplicationsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ApplicationRead, GetV2AdminFormsApplicationsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.ApplicationRead, GetV2AdminFormsApplicationsUUIDError, TData>(
    queryKeyFn({
      path: "/v2/admin/forms/applications/{UUID}",
      operationId: "getV2AdminFormsApplicationsUUID",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsApplicationsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type DeleteV2AdminFormsApplicationsUUIDPathParams = {
  uuid: string;
};

export type DeleteV2AdminFormsApplicationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type DeleteV2AdminFormsApplicationsUUIDVariables = {
  pathParams: DeleteV2AdminFormsApplicationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDeleteV2AdminFormsApplicationsUUID = (
  variables: DeleteV2AdminFormsApplicationsUUIDVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    DeleteV2AdminFormsApplicationsUUIDError,
    undefined,
    {},
    {},
    DeleteV2AdminFormsApplicationsUUIDPathParams
  >({ url: "/v2/admin/forms/applications/{uuid}", method: "delete", ...variables, signal });

export const useDeleteV2AdminFormsApplicationsUUID = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteV2AdminFormsApplicationsUUIDError,
      DeleteV2AdminFormsApplicationsUUIDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeleteV2AdminFormsApplicationsUUIDError,
    DeleteV2AdminFormsApplicationsUUIDVariables
  >(
    (variables: DeleteV2AdminFormsApplicationsUUIDVariables) =>
      fetchDeleteV2AdminFormsApplicationsUUID({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetV2AdminFormsApplicationsUUIDExportPathParams = {
  uuid: string;
};

export type GetV2AdminFormsApplicationsUUIDExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2AdminFormsApplicationsUUIDExportVariables = {
  pathParams: GetV2AdminFormsApplicationsUUIDExportPathParams;
} & ApiContext["fetcherOptions"];

/**
 * The UUID provided is the Funding Programme ID that the applications are for
 */
export const fetchGetV2AdminFormsApplicationsUUIDExport = (
  variables: GetV2AdminFormsApplicationsUUIDExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    GetV2AdminFormsApplicationsUUIDExportError,
    undefined,
    {},
    {},
    GetV2AdminFormsApplicationsUUIDExportPathParams
  >({ url: "/v2/admin/forms/applications/{uuid}/export", method: "get", ...variables, signal });

/**
 * The UUID provided is the Funding Programme ID that the applications are for
 */
export const useGetV2AdminFormsApplicationsUUIDExport = <TData = undefined>(
  variables: GetV2AdminFormsApplicationsUUIDExportVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetV2AdminFormsApplicationsUUIDExportError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetV2AdminFormsApplicationsUUIDExportError, TData>(
    queryKeyFn({
      path: "/v2/admin/forms/applications/{UUID}/export",
      operationId: "getV2AdminFormsApplicationsUUIDExport",
      variables
    }),
    ({ signal }) => fetchGetV2AdminFormsApplicationsUUIDExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2MyApplicationsError = Fetcher.ErrorWrapper<undefined>;

export type GetV2MyApplicationsResponse = {
  data?: Schemas.ApplicationLiteRead[];
  links?: Schemas.V2PaginationLinks;
  meta?: Schemas.V2PaginationMeta;
};

export type GetV2MyApplicationsVariables = ApiContext["fetcherOptions"];

export const fetchGetV2MyApplications = (variables: GetV2MyApplicationsVariables, signal?: AbortSignal) =>
  apiFetch<GetV2MyApplicationsResponse, GetV2MyApplicationsError, undefined, {}, {}, {}>({
    url: "/v2/my/applications",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2MyApplications = <TData = GetV2MyApplicationsResponse>(
  variables: GetV2MyApplicationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetV2MyApplicationsResponse, GetV2MyApplicationsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetV2MyApplicationsResponse, GetV2MyApplicationsError, TData>(
    queryKeyFn({ path: "/v2/my/applications", operationId: "getV2MyApplications", variables }),
    ({ signal }) => fetchGetV2MyApplications({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ApplicationsUUIDPathParams = {
  uuid: string;
};

export type GetV2ApplicationsUUIDError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ApplicationsUUIDVariables = {
  pathParams: GetV2ApplicationsUUIDPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ApplicationsUUID = (variables: GetV2ApplicationsUUIDVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ApplicationRead, GetV2ApplicationsUUIDError, undefined, {}, {}, GetV2ApplicationsUUIDPathParams>({
    url: "/v2/applications/{uuid}",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ApplicationsUUID = <TData = Schemas.ApplicationRead>(
  variables: GetV2ApplicationsUUIDVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ApplicationRead, GetV2ApplicationsUUIDError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.ApplicationRead, GetV2ApplicationsUUIDError, TData>(
    queryKeyFn({ path: "/v2/applications/{UUID}", operationId: "getV2ApplicationsUUID", variables }),
    ({ signal }) => fetchGetV2ApplicationsUUID({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type GetV2ApplicationsUUIDExportPathParams = {
  uuid: string;
};

export type GetV2ApplicationsUUIDExportError = Fetcher.ErrorWrapper<undefined>;

export type GetV2ApplicationsUUIDExportVariables = {
  pathParams: GetV2ApplicationsUUIDExportPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetV2ApplicationsUUIDExport = (
  variables: GetV2ApplicationsUUIDExportVariables,
  signal?: AbortSignal
) =>
  apiFetch<undefined, GetV2ApplicationsUUIDExportError, undefined, {}, {}, GetV2ApplicationsUUIDExportPathParams>({
    url: "/v2/applications/{uuid}/export",
    method: "get",
    ...variables,
    signal
  });

export const useGetV2ApplicationsUUIDExport = <TData = undefined>(
  variables: GetV2ApplicationsUUIDExportVariables,
  options?: Omit<reactQuery.UseQueryOptions<undefined, GetV2ApplicationsUUIDExportError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetV2ApplicationsUUIDExportError, TData>(
    queryKeyFn({ path: "/v2/applications/{UUID}/export", operationId: "getV2ApplicationsUUIDExport", variables }),
    ({ signal }) => fetchGetV2ApplicationsUUIDExport({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions
    }
  );
};

export type QueryOperation =
  | {
      path: "/organisations/{ID}/users";
      operationId: "getOrganisationsIDUsers";
      variables: GetOrganisationsIDUsersVariables;
    }
  | {
      path: "/organisations/{ID}/users/inspect";
      operationId: "getOrganisationsIDUsersInspect";
      variables: GetOrganisationsIDUsersInspectVariables;
    }
  | {
      path: "/users/{ID}";
      operationId: "getUsersID";
      variables: GetUsersIDVariables;
    }
  | {
      path: "/admins";
      operationId: "getAdmins";
      variables: GetAdminsVariables;
    }
  | {
      path: "/admins/{ID}";
      operationId: "getAdminsID";
      variables: GetAdminsIDVariables;
    }
  | {
      path: "/auth/logout";
      operationId: "getAuthLogout";
      variables: GetAuthLogoutVariables;
    }
  | {
      path: "/auth/refresh";
      operationId: "getAuthRefresh";
      variables: GetAuthRefreshVariables;
    }
  | {
      path: "/auth/resend";
      operationId: "getAuthResend";
      variables: GetAuthResendVariables;
    }
  | {
      path: "/auth/me";
      operationId: "getAuthMe";
      variables: GetAuthMeVariables;
    }
  | {
      path: "/countries";
      operationId: "getCountries";
      variables: GetCountriesVariables;
    }
  | {
      path: "/organisation_categories";
      operationId: "getOrganisationCategories";
      variables: GetOrganisationCategoriesVariables;
    }
  | {
      path: "/organisations";
      operationId: "getOrganisations";
      variables: GetOrganisationsVariables;
    }
  | {
      path: "/organisations/{ID}";
      operationId: "getOrganisationsID";
      variables: GetOrganisationsIDVariables;
    }
  | {
      path: "/organisations/{ID}/inspect";
      operationId: "getOrganisationsIDInspect";
      variables: GetOrganisationsIDInspectVariables;
    }
  | {
      path: "/organisation_versions/{ID}";
      operationId: "getOrganisationVersionsID";
      variables: GetOrganisationVersionsIDVariables;
    }
  | {
      path: "/organisations/{ID}/organisation_versions";
      operationId: "getOrganisationsIDOrganisationVersions";
      variables: GetOrganisationsIDOrganisationVersionsVariables;
    }
  | {
      path: "/uploads/socioeconomic_benefits/template";
      operationId: "getUploadsSocioeconomicBenefitsTemplate";
      variables: GetUploadsSocioeconomicBenefitsTemplateVariables;
    }
  | {
      path: "/uploads/socioeconomic_benefits/template/programme_submission";
      operationId: "getUploadsSocioeconomicBenefitsTemplateProgrammeSubmission";
      variables: GetUploadsSocioeconomicBenefitsTemplateProgrammeSubmissionVariables;
    }
  | {
      path: "/uploads/socioeconomic_benefits/template/site_submission";
      operationId: "getUploadsSocioeconomicBenefitsTemplateSiteSubmission";
      variables: GetUploadsSocioeconomicBenefitsTemplateSiteSubmissionVariables;
    }
  | {
      path: "/uploads/stratification/example";
      operationId: "getUploadsStratificationExample";
      variables: GetUploadsStratificationExampleVariables;
    }
  | {
      path: "/uploads/socioeconomic_benefits/template/csv";
      operationId: "getUploadsSocioeconomicBenefitsTemplateCsv";
      variables: GetUploadsSocioeconomicBenefitsTemplateCsvVariables;
    }
  | {
      path: "/site/tree_species/template/csv";
      operationId: "getSiteTreeSpeciesTemplateCsv";
      variables: GetSiteTreeSpeciesTemplateCsvVariables;
    }
  | {
      path: "/submission/tree_species/template/csv";
      operationId: "getSubmissionTreeSpeciesTemplateCsv";
      variables: GetSubmissionTreeSpeciesTemplateCsvVariables;
    }
  | {
      path: "/submission/tree_species/template/csv/example";
      operationId: "getSubmissionTreeSpeciesTemplateCsvExample";
      variables: GetSubmissionTreeSpeciesTemplateCsvExampleVariables;
    }
  | {
      path: "/team_members/{ID}";
      operationId: "getTeamMembersID";
      variables: GetTeamMembersIDVariables;
    }
  | {
      path: "/organisations/{ID}/team_members";
      operationId: "getOrganisationsIDTeamMembers";
      variables: GetOrganisationsIDTeamMembersVariables;
    }
  | {
      path: "/organisations/{ID}/team_members/inspect";
      operationId: "getOrganisationsIDTeamMembersInspect";
      variables: GetOrganisationsIDTeamMembersInspectVariables;
    }
  | {
      path: "/offer_documents/{ID}";
      operationId: "getOfferDocumentsID";
      variables: GetOfferDocumentsIDVariables;
    }
  | {
      path: "/offers/{ID}/offer_documents";
      operationId: "getOffersIDOfferDocuments";
      variables: GetOffersIDOfferDocumentsVariables;
    }
  | {
      path: "/document_types";
      operationId: "getDocumentTypes";
      variables: GetDocumentTypesVariables;
    }
  | {
      path: "/organisation_documents/{ID}";
      operationId: "getOrganisationDocumentsID";
      variables: GetOrganisationDocumentsIDVariables;
    }
  | {
      path: "/organisations/{ID}/organisation_documents";
      operationId: "getOrganisationsIDOrganisationDocuments";
      variables: GetOrganisationsIDOrganisationDocumentsVariables;
    }
  | {
      path: "/organisations/{ID}/organisation_documents/inspect";
      operationId: "getOrganisationsIDOrganisationDocumentsInspect";
      variables: GetOrganisationsIDOrganisationDocumentsInspectVariables;
    }
  | {
      path: "/organisation_document_versions/{ID}";
      operationId: "getOrganisationDocumentVersionsID";
      variables: GetOrganisationDocumentVersionsIDVariables;
    }
  | {
      path: "/organisation_documents/{ID}/organisation_document_versions";
      operationId: "getOrganisationDocumentsIDOrganisationDocumentVersions";
      variables: GetOrganisationDocumentsIDOrganisationDocumentVersionsVariables;
    }
  | {
      path: "/offers/most_recent";
      operationId: "getOffersMostRecent";
      variables: GetOffersMostRecentVariables;
    }
  | {
      path: "/offers/{ID}";
      operationId: "getOffersID";
      variables: GetOffersIDVariables;
    }
  | {
      path: "/organisations/{ID}/offers";
      operationId: "getOrganisationsIDOffers";
      variables: GetOrganisationsIDOffersVariables;
    }
  | {
      path: "/organisations/{ID}/offers/inspect";
      operationId: "getOrganisationsIDOffersInspect";
      variables: GetOrganisationsIDOffersInspectVariables;
    }
  | {
      path: "/offers/{ID}/offer_contacts";
      operationId: "getOffersIDOfferContacts";
      variables: GetOffersIDOfferContactsVariables;
    }
  | {
      path: "/pitches/{ID}/pitch_contacts";
      operationId: "getPitchesIDPitchContacts";
      variables: GetPitchesIDPitchContactsVariables;
    }
  | {
      path: "/land_types";
      operationId: "getLandTypes";
      variables: GetLandTypesVariables;
    }
  | {
      path: "/funding_brackets";
      operationId: "getFundingBrackets";
      variables: GetFundingBracketsVariables;
    }
  | {
      path: "/restoration_methods";
      operationId: "getRestorationMethods";
      variables: GetRestorationMethodsVariables;
    }
  | {
      path: "/visibilities";
      operationId: "getVisibilities";
      variables: GetVisibilitiesVariables;
    }
  | {
      path: "/revenue_drivers";
      operationId: "getRevenueDrivers";
      variables: GetRevenueDriversVariables;
    }
  | {
      path: "/continents/pitches";
      operationId: "getContinentsPitches";
      variables: GetContinentsPitchesVariables;
    }
  | {
      path: "/pitches/most_recent";
      operationId: "getPitchesMostRecent";
      variables: GetPitchesMostRecentVariables;
    }
  | {
      path: "/continents/{CONTINENT}/pitches";
      operationId: "getContinentsCONTINENTPitches";
      variables: GetContinentsCONTINENTPitchesVariables;
    }
  | {
      path: "/users/all";
      operationId: "getUsersAll";
      variables: GetUsersAllVariables;
    }
  | {
      path: "/users/unverified";
      operationId: "getUsersUnverified";
      variables: GetUsersUnverifiedVariables;
    }
  | {
      path: "/pitches/{ID}";
      operationId: "getPitchesID";
      variables: GetPitchesIDVariables;
    }
  | {
      path: "/organisations/{ID}/pitches";
      operationId: "getOrganisationsIDPitches";
      variables: GetOrganisationsIDPitchesVariables;
    }
  | {
      path: "/organisations/{ID}/pitches/inspect";
      operationId: "getOrganisationsIDPitchesInspect";
      variables: GetOrganisationsIDPitchesInspectVariables;
    }
  | {
      path: "/pitch_versions/{ID}";
      operationId: "getPitchVersionsID";
      variables: GetPitchVersionsIDVariables;
    }
  | {
      path: "/pitches/{ID}/pitch_versions";
      operationId: "getPitchesIDPitchVersions";
      variables: GetPitchesIDPitchVersionsVariables;
    }
  | {
      path: "/carbon_certifications/{ID}";
      operationId: "getCarbonCertificationsID";
      variables: GetCarbonCertificationsIDVariables;
    }
  | {
      path: "/pitches/{ID}/carbon_certifications";
      operationId: "getPitchesIDCarbonCertifications";
      variables: GetPitchesIDCarbonCertificationsVariables;
    }
  | {
      path: "/pitches/{ID}/carbon_certifications/inspect";
      operationId: "getPitchesIDCarbonCertificationsInspect";
      variables: GetPitchesIDCarbonCertificationsInspectVariables;
    }
  | {
      path: "/carbon_certification_versions/{ID}";
      operationId: "getCarbonCertificationVersionsID";
      variables: GetCarbonCertificationVersionsIDVariables;
    }
  | {
      path: "/carbon_certifications/{ID}/carbon_certification_versions";
      operationId: "getCarbonCertificationsIDCarbonCertificationVersions";
      variables: GetCarbonCertificationsIDCarbonCertificationVersionsVariables;
    }
  | {
      path: "/pitch_documents/{ID}";
      operationId: "getPitchDocumentsID";
      variables: GetPitchDocumentsIDVariables;
    }
  | {
      path: "/pitches/{ID}/pitch_documents";
      operationId: "getPitchesIDPitchDocuments";
      variables: GetPitchesIDPitchDocumentsVariables;
    }
  | {
      path: "/pitches/{ID}/pitch_documents/inspect";
      operationId: "getPitchesIDPitchDocumentsInspect";
      variables: GetPitchesIDPitchDocumentsInspectVariables;
    }
  | {
      path: "/pitch_document_versions/{ID}";
      operationId: "getPitchDocumentVersionsID";
      variables: GetPitchDocumentVersionsIDVariables;
    }
  | {
      path: "/pitch_documents/{ID}/pitch_document_versions";
      operationId: "getPitchDocumentsIDPitchDocumentVersions";
      variables: GetPitchDocumentsIDPitchDocumentVersionsVariables;
    }
  | {
      path: "/restoration_method_metrics/{ID}";
      operationId: "getRestorationMethodMetricsID";
      variables: GetRestorationMethodMetricsIDVariables;
    }
  | {
      path: "/pitches/{ID}/restoration_method_metrics";
      operationId: "getPitchesIDRestorationMethodMetrics";
      variables: GetPitchesIDRestorationMethodMetricsVariables;
    }
  | {
      path: "/pitches/{ID}/restoration_method_metrics/inspect";
      operationId: "getPitchesIDRestorationMethodMetricsInspect";
      variables: GetPitchesIDRestorationMethodMetricsInspectVariables;
    }
  | {
      path: "/restoration_method_metric_versions/{ID}";
      operationId: "getRestorationMethodMetricVersionsID";
      variables: GetRestorationMethodMetricVersionsIDVariables;
    }
  | {
      path: "/restoration_method_metrics/{ID}/restoration_method_metric_versions";
      operationId: "getRestorationMethodMetricsIDRestorationMethodMetricVersions";
      variables: GetRestorationMethodMetricsIDRestorationMethodMetricVersionsVariables;
    }
  | {
      path: "/tree_species/{ID}";
      operationId: "getTreeSpeciesID";
      variables: GetTreeSpeciesIDVariables;
    }
  | {
      path: "/programme/{ID}/tree_species";
      operationId: "getProgrammeIDTreeSpecies";
      variables: GetProgrammeIDTreeSpeciesVariables;
    }
  | {
      path: "/site/{ID}/tree_species";
      operationId: "getSiteIDTreeSpecies";
      variables: GetSiteIDTreeSpeciesVariables;
    }
  | {
      path: "/pitches/{ID}/tree_species";
      operationId: "getPitchesIDTreeSpecies";
      variables: GetPitchesIDTreeSpeciesVariables;
    }
  | {
      path: "/pitches/{ID}/tree_species/inspect";
      operationId: "getPitchesIDTreeSpeciesInspect";
      variables: GetPitchesIDTreeSpeciesInspectVariables;
    }
  | {
      path: "/tree_species_versions/{ID}";
      operationId: "getTreeSpeciesVersionsID";
      variables: GetTreeSpeciesVersionsIDVariables;
    }
  | {
      path: "/tree_species/{ID}/tree_species_versions";
      operationId: "getTreeSpeciesIDTreeSpeciesVersions";
      variables: GetTreeSpeciesIDTreeSpeciesVersionsVariables;
    }
  | {
      path: "/tasks/organisations";
      operationId: "getTasksOrganisations";
      variables: GetTasksOrganisationsVariables;
    }
  | {
      path: "/tasks/pitches";
      operationId: "getTasksPitches";
      variables: GetTasksPitchesVariables;
    }
  | {
      path: "/tasks/matches";
      operationId: "getTasksMatches";
      variables: GetTasksMatchesVariables;
    }
  | {
      path: "/tasks/monitorings";
      operationId: "getTasksMonitorings";
      variables: GetTasksMonitoringsVariables;
    }
  | {
      path: "/interests/initiated";
      operationId: "getInterestsInitiated";
      variables: GetInterestsInitiatedVariables;
    }
  | {
      path: "/interests/received";
      operationId: "getInterestsReceived";
      variables: GetInterestsReceivedVariables;
    }
  | {
      path: "/matches";
      operationId: "getMatches";
      variables: GetMatchesVariables;
    }
  | {
      path: "/matches/{ID}";
      operationId: "getMatchesID";
      variables: GetMatchesIDVariables;
    }
  | {
      path: "/notifications";
      operationId: "getNotifications";
      variables: GetNotificationsVariables;
    }
  | {
      path: "/devices/{ID}";
      operationId: "getDevicesID";
      variables: GetDevicesIDVariables;
    }
  | {
      path: "/devices";
      operationId: "getDevices";
      variables: GetDevicesVariables;
    }
  | {
      path: "/reports/organisations";
      operationId: "getReportsOrganisations";
      variables: GetReportsOrganisationsVariables;
    }
  | {
      path: "/reports/pitches";
      operationId: "getReportsPitches";
      variables: GetReportsPitchesVariables;
    }
  | {
      path: "/reports/approved_organisations";
      operationId: "getReportsApprovedOrganisations";
      variables: GetReportsApprovedOrganisationsVariables;
    }
  | {
      path: "/reports/rejected_organisations";
      operationId: "getReportsRejectedOrganisations";
      variables: GetReportsRejectedOrganisationsVariables;
    }
  | {
      path: "/reports/users";
      operationId: "getReportsUsers";
      variables: GetReportsUsersVariables;
    }
  | {
      path: "/reports/offers";
      operationId: "getReportsOffers";
      variables: GetReportsOffersVariables;
    }
  | {
      path: "/reports/approved_pitches";
      operationId: "getReportsApprovedPitches";
      variables: GetReportsApprovedPitchesVariables;
    }
  | {
      path: "/reports/rejected_pitches";
      operationId: "getReportsRejectedPitches";
      variables: GetReportsRejectedPitchesVariables;
    }
  | {
      path: "/reports/interests";
      operationId: "getReportsInterests";
      variables: GetReportsInterestsVariables;
    }
  | {
      path: "/reports/matches";
      operationId: "getReportsMatches";
      variables: GetReportsMatchesVariables;
    }
  | {
      path: "/reports/filter_records";
      operationId: "getReportsFilterRecords";
      variables: GetReportsFilterRecordsVariables;
    }
  | {
      path: "/reports/monitorings";
      operationId: "getReportsMonitorings";
      variables: GetReportsMonitoringsVariables;
    }
  | {
      path: "/reports/progress_updates";
      operationId: "getReportsProgressUpdates";
      variables: GetReportsProgressUpdatesVariables;
    }
  | {
      path: "/elevator_videos/{ID}";
      operationId: "getElevatorVideosID";
      variables: GetElevatorVideosIDVariables;
    }
  | {
      path: "/drafts/{ID}";
      operationId: "getDraftsID";
      variables: GetDraftsIDVariables;
    }
  | {
      path: "/drafts/offers";
      operationId: "getDraftsOffers";
      variables: GetDraftsOffersVariables;
    }
  | {
      path: "/drafts/terrafund_programme_submissions";
      operationId: "getDraftsTerrafundProgrammeSubmissions";
      variables: GetDraftsTerrafundProgrammeSubmissionsVariables;
    }
  | {
      path: "/drafts/pitches";
      operationId: "getDraftsPitches";
      variables: GetDraftsPitchesVariables;
    }
  | {
      path: "/drafts/programmes";
      operationId: "getDraftsProgrammes";
      variables: GetDraftsProgrammesVariables;
    }
  | {
      path: "/drafts/terrafund_programmes";
      operationId: "getDraftsTerrafundProgrammes";
      variables: GetDraftsTerrafundProgrammesVariables;
    }
  | {
      path: "/drafts/terrafund_nurserys";
      operationId: "getDraftsTerrafundNurserys";
      variables: GetDraftsTerrafundNurserysVariables;
    }
  | {
      path: "/drafts/terrafund_sites";
      operationId: "getDraftsTerrafundSites";
      variables: GetDraftsTerrafundSitesVariables;
    }
  | {
      path: "/drafts/terrafund_nursery_submissions";
      operationId: "getDraftsTerrafundNurserySubmissions";
      variables: GetDraftsTerrafundNurserySubmissionsVariables;
    }
  | {
      path: "/drafts/organisations";
      operationId: "getDraftsOrganisations";
      variables: GetDraftsOrganisationsVariables;
    }
  | {
      path: "/drafts/sites";
      operationId: "getDraftsSites";
      variables: GetDraftsSitesVariables;
    }
  | {
      path: "/drafts/site_submissions";
      operationId: "getDraftsSiteSubmissions";
      variables: GetDraftsSiteSubmissionsVariables;
    }
  | {
      path: "/drafts/programme_submissions";
      operationId: "getDraftsProgrammeSubmissions";
      variables: GetDraftsProgrammeSubmissionsVariables;
    }
  | {
      path: "/drafts/terrafund_site_submissions";
      operationId: "getDraftsTerrafundSiteSubmissions";
      variables: GetDraftsTerrafundSiteSubmissionsVariables;
    }
  | {
      path: "/monitorings";
      operationId: "getMonitorings";
      variables: GetMonitoringsVariables;
    }
  | {
      path: "/monitorings/{ID}";
      operationId: "getMonitoringsID";
      variables: GetMonitoringsIDVariables;
    }
  | {
      path: "/offers/{ID}/monitorings";
      operationId: "getOffersIDMonitorings";
      variables: GetOffersIDMonitoringsVariables;
    }
  | {
      path: "/pitches/{ID}/monitorings";
      operationId: "getPitchesIDMonitorings";
      variables: GetPitchesIDMonitoringsVariables;
    }
  | {
      path: "/monitorings/{ID}/summarise";
      operationId: "getMonitoringsIDSummarise";
      variables: GetMonitoringsIDSummariseVariables;
    }
  | {
      path: "/monitorings/{ID}/land_geojson";
      operationId: "getMonitoringsIDLandGeojson";
      variables: GetMonitoringsIDLandGeojsonVariables;
    }
  | {
      path: "/targets/{ID}";
      operationId: "getTargetsID";
      variables: GetTargetsIDVariables;
    }
  | {
      path: "/monitorings/{ID}/targets/accepted";
      operationId: "getMonitoringsIDTargetsAccepted";
      variables: GetMonitoringsIDTargetsAcceptedVariables;
    }
  | {
      path: "/monitorings/{ID}/targets";
      operationId: "getMonitoringsIDTargets";
      variables: GetMonitoringsIDTargetsVariables;
    }
  | {
      path: "/progress_updates/{ID}";
      operationId: "getProgressUpdatesID";
      variables: GetProgressUpdatesIDVariables;
    }
  | {
      path: "/monitorings/{ID}/progress_updates";
      operationId: "getMonitoringsIDProgressUpdates";
      variables: GetMonitoringsIDProgressUpdatesVariables;
    }
  | {
      path: "/monitorings/{ID}/satellite_maps";
      operationId: "getMonitoringsIDSatelliteMaps";
      variables: GetMonitoringsIDSatelliteMapsVariables;
    }
  | {
      path: "/satellite_maps/{ID}";
      operationId: "getSatelliteMapsID";
      variables: GetSatelliteMapsIDVariables;
    }
  | {
      path: "/monitorings/{ID}/satellite_maps/latest";
      operationId: "getMonitoringsIDSatelliteMapsLatest";
      variables: GetMonitoringsIDSatelliteMapsLatestVariables;
    }
  | {
      path: "/satellite_monitor/programme/{ID}";
      operationId: "getSatelliteMonitorProgrammeID";
      variables: GetSatelliteMonitorProgrammeIDVariables;
    }
  | {
      path: "/satellite_monitor/site/{ID}";
      operationId: "getSatelliteMonitorSiteID";
      variables: GetSatelliteMonitorSiteIDVariables;
    }
  | {
      path: "/satellite_monitor/programme/{ID}/latest";
      operationId: "getSatelliteMonitorProgrammeIDLatest";
      variables: GetSatelliteMonitorProgrammeIDLatestVariables;
    }
  | {
      path: "/satellite_monitor/site/{ID}/latest";
      operationId: "getSatelliteMonitorSiteIDLatest";
      variables: GetSatelliteMonitorSiteIDLatestVariables;
    }
  | {
      path: "/programmes";
      operationId: "getProgrammes";
      variables: GetProgrammesVariables;
    }
  | {
      path: "/programmes/personal";
      operationId: "getProgrammesPersonal";
      variables: GetProgrammesPersonalVariables;
    }
  | {
      path: "/framework/access_code/all";
      operationId: "getFrameworkAccessCodeAll";
      variables: GetFrameworkAccessCodeAllVariables;
    }
  | {
      path: "/programmes/tree_species";
      operationId: "getProgrammesTreeSpecies";
      variables: GetProgrammesTreeSpeciesVariables;
    }
  | {
      path: "/programme/tree_species/csv/{ID}";
      operationId: "getProgrammeTreeSpeciesCsvID";
      variables: GetProgrammeTreeSpeciesCsvIDVariables;
    }
  | {
      path: "/programme/tree_species/csv/{ID}/trees";
      operationId: "getProgrammeTreeSpeciesCsvIDTrees";
      variables: GetProgrammeTreeSpeciesCsvIDTreesVariables;
    }
  | {
      path: "/programme/{ID}/aims";
      operationId: "getProgrammeIDAims";
      variables: GetProgrammeIDAimsVariables;
    }
  | {
      path: "/programme/{ID}/sites";
      operationId: "getProgrammeIDSites";
      variables: GetProgrammeIDSitesVariables;
    }
  | {
      path: "/programme/{ID}/all-sites";
      operationId: "getProgrammeIDAllSites";
      variables: GetProgrammeIDAllSitesVariables;
    }
  | {
      path: "/sites";
      operationId: "getSites";
      variables: GetSitesVariables;
    }
  | {
      path: "/my/sites";
      operationId: "getMySites";
      variables: GetMySitesVariables;
    }
  | {
      path: "/site/{ID}/overview";
      operationId: "getSiteIDOverview";
      variables: GetSiteIDOverviewVariables;
    }
  | {
      path: "/site/{ID}/submissions";
      operationId: "getSiteIDSubmissions";
      variables: GetSiteIDSubmissionsVariables;
    }
  | {
      path: "/site/submission/{ID}";
      operationId: "getSiteSubmissionID";
      variables: GetSiteSubmissionIDVariables;
    }
  | {
      path: "/programme/submission/due";
      operationId: "getProgrammeSubmissionDue";
      variables: GetProgrammeSubmissionDueVariables;
    }
  | {
      path: "/site/submission/due";
      operationId: "getSiteSubmissionDue";
      variables: GetSiteSubmissionDueVariables;
    }
  | {
      path: "/terrafund/submissions/due";
      operationId: "getTerrafundSubmissionsDue";
      variables: GetTerrafundSubmissionsDueVariables;
    }
  | {
      path: "/pending/programme";
      operationId: "getPendingProgramme";
      variables: GetPendingProgrammeVariables;
    }
  | {
      path: "/pending/site";
      operationId: "getPendingSite";
      variables: GetPendingSiteVariables;
    }
  | {
      path: "/site/restoration_methods";
      operationId: "getSiteRestorationMethods";
      variables: GetSiteRestorationMethodsVariables;
    }
  | {
      path: "/site/land_tenures";
      operationId: "getSiteLandTenures";
      variables: GetSiteLandTenuresVariables;
    }
  | {
      path: "/sites/tree_species";
      operationId: "getSitesTreeSpecies";
      variables: GetSitesTreeSpeciesVariables;
    }
  | {
      path: "/site/tree_species/csv/{ID}";
      operationId: "getSiteTreeSpeciesCsvID";
      variables: GetSiteTreeSpeciesCsvIDVariables;
    }
  | {
      path: "/site/tree_species/csv/{ID}/trees";
      operationId: "getSiteTreeSpeciesCsvIDTrees";
      variables: GetSiteTreeSpeciesCsvIDTreesVariables;
    }
  | {
      path: "/programme/{programme}/partners";
      operationId: "getProgrammeProgrammePartners";
      variables: GetProgrammeProgrammePartnersVariables;
    }
  | {
      path: "/programme/{ID}/overview";
      operationId: "getProgrammeIDOverview";
      variables: GetProgrammeIDOverviewVariables;
    }
  | {
      path: "/programme/{ID}/submissions";
      operationId: "getProgrammeIDSubmissions";
      variables: GetProgrammeIDSubmissionsVariables;
    }
  | {
      path: "/programme/submission/{ID}";
      operationId: "getProgrammeSubmissionID";
      variables: GetProgrammeSubmissionIDVariables;
    }
  | {
      path: "/submission/tree_species/csv/{ID}";
      operationId: "getSubmissionTreeSpeciesCsvID";
      variables: GetSubmissionTreeSpeciesCsvIDVariables;
    }
  | {
      path: "/submission/tree_species/csv/{ID}/trees";
      operationId: "getSubmissionTreeSpeciesCsvIDTrees";
      variables: GetSubmissionTreeSpeciesCsvIDTreesVariables;
    }
  | {
      path: "/submission/submission_questions";
      operationId: "getSubmissionSubmissionQuestions";
      variables: GetSubmissionSubmissionQuestionsVariables;
    }
  | {
      path: "/terrafund/programmes";
      operationId: "getTerrafundProgrammes";
      variables: GetTerrafundProgrammesVariables;
    }
  | {
      path: "/terrafund/programme/{ID}";
      operationId: "getTerrafundProgrammeID";
      variables: GetTerrafundProgrammeIDVariables;
    }
  | {
      path: "/terrafund/nursery/{ID}";
      operationId: "getTerrafundNurseryID";
      variables: GetTerrafundNurseryIDVariables;
    }
  | {
      path: "/terrafund/site/{ID}";
      operationId: "getTerrafundSiteID";
      variables: GetTerrafundSiteIDVariables;
    }
  | {
      path: "/terrafund/programme/{ID}/sites";
      operationId: "getTerrafundProgrammeIDSites";
      variables: GetTerrafundProgrammeIDSitesVariables;
    }
  | {
      path: "/terrafund/programme/{ID}/all-sites";
      operationId: "getTerrafundProgrammeIDAllSites";
      variables: GetTerrafundProgrammeIDAllSitesVariables;
    }
  | {
      path: "/terrafund/programme/{ID}/has_sites";
      operationId: "getTerrafundProgrammeIDHasSites";
      variables: GetTerrafundProgrammeIDHasSitesVariables;
    }
  | {
      path: "/terrafund/programme/{ID}/nurseries";
      operationId: "getTerrafundProgrammeIDNurseries";
      variables: GetTerrafundProgrammeIDNurseriesVariables;
    }
  | {
      path: "/terrafund/programme/{ID}/submissions";
      operationId: "getTerrafundProgrammeIDSubmissions";
      variables: GetTerrafundProgrammeIDSubmissionsVariables;
    }
  | {
      path: "/terrafund/programme/{ID}/aims";
      operationId: "getTerrafundProgrammeIDAims";
      variables: GetTerrafundProgrammeIDAimsVariables;
    }
  | {
      path: "/terrafund/programme/{ID}/has_nurseries";
      operationId: "getTerrafundProgrammeIDHasNurseries";
      variables: GetTerrafundProgrammeIDHasNurseriesVariables;
    }
  | {
      path: "/terrafund/nursery/submission/{ID}";
      operationId: "getTerrafundNurserySubmissionID";
      variables: GetTerrafundNurserySubmissionIDVariables;
    }
  | {
      path: "/terrafund/programme/submission/{ID}";
      operationId: "getTerrafundProgrammeSubmissionID";
      variables: GetTerrafundProgrammeSubmissionIDVariables;
    }
  | {
      path: "/terrafund/site/submissions/submitted";
      operationId: "getTerrafundSiteSubmissionsSubmitted";
      variables: GetTerrafundSiteSubmissionsSubmittedVariables;
    }
  | {
      path: "/terrafund/site/{ID}/submissions";
      operationId: "getTerrafundSiteIDSubmissions";
      variables: GetTerrafundSiteIDSubmissionsVariables;
    }
  | {
      path: "/terrafund/nursery/submissions/submitted";
      operationId: "getTerrafundNurserySubmissionsSubmitted";
      variables: GetTerrafundNurserySubmissionsSubmittedVariables;
    }
  | {
      path: "/terrafund/nursery/{ID}/submissions";
      operationId: "getTerrafundNurseryIDSubmissions";
      variables: GetTerrafundNurseryIDSubmissionsVariables;
    }
  | {
      path: "/organisations/{ID}/files";
      operationId: "getOrganisationsIDFiles";
      variables: GetOrganisationsIDFilesVariables;
    }
  | {
      path: "/terrafund/nursery/submission/due";
      operationId: "getTerrafundNurserySubmissionDue";
      variables: GetTerrafundNurserySubmissionDueVariables;
    }
  | {
      path: "/terrafund/site/submission/due";
      operationId: "getTerrafundSiteSubmissionDue";
      variables: GetTerrafundSiteSubmissionDueVariables;
    }
  | {
      path: "/terrafund/site/submission/{ID}";
      operationId: "getTerrafundSiteSubmissionID";
      variables: GetTerrafundSiteSubmissionIDVariables;
    }
  | {
      path: "/terrafund/site/land_tenures";
      operationId: "getTerrafundSiteLandTenures";
      variables: GetTerrafundSiteLandTenuresVariables;
    }
  | {
      path: "/terrafund/site/restoration_methods";
      operationId: "getTerrafundSiteRestorationMethods";
      variables: GetTerrafundSiteRestorationMethodsVariables;
    }
  | {
      path: "/terrafund/programmes/personal";
      operationId: "getTerrafundProgrammesPersonal";
      variables: GetTerrafundProgrammesPersonalVariables;
    }
  | {
      path: "/terrafund/my/nurseries";
      operationId: "getTerrafundMyNurseries";
      variables: GetTerrafundMyNurseriesVariables;
    }
  | {
      path: "/terrafund/my/sites";
      operationId: "getTerrafundMySites";
      variables: GetTerrafundMySitesVariables;
    }
  | {
      path: "/terrafund/nursery/tree_species";
      operationId: "getTerrafundNurseryTreeSpecies";
      variables: GetTerrafundNurseryTreeSpeciesVariables;
    }
  | {
      path: "/terrafund/site/tree_species";
      operationId: "getTerrafundSiteTreeSpecies";
      variables: GetTerrafundSiteTreeSpeciesVariables;
    }
  | {
      path: "/satellite_monitor/terrafund_programme/{ID}";
      operationId: "getSatelliteMonitorTerrafundProgrammeID";
      variables: GetSatelliteMonitorTerrafundProgrammeIDVariables;
    }
  | {
      path: "/satellite_monitor/terrafund_programme/{ID}/latest";
      operationId: "getSatelliteMonitorTerrafundProgrammeIDLatest";
      variables: GetSatelliteMonitorTerrafundProgrammeIDLatestVariables;
    }
  | {
      path: "/sites/exporter";
      operationId: "getSitesExporter";
      variables: GetSitesExporterVariables;
    }
  | {
      path: "/ppc/export/programme/{ID}/shapefiles";
      operationId: "getPpcExportProgrammeIDShapefiles";
      variables: GetPpcExportProgrammeIDShapefilesVariables;
    }
  | {
      path: "/ppc/export/programme/submissions";
      operationId: "getPpcExportProgrammeSubmissions";
      variables: GetPpcExportProgrammeSubmissionsVariables;
    }
  | {
      path: "/ppc/export/programme/{ID}/submissions";
      operationId: "getPpcExportProgrammeIDSubmissions";
      variables: GetPpcExportProgrammeIDSubmissionsVariables;
    }
  | {
      path: "/ppc/export/site/{ID}/submissions";
      operationId: "getPpcExportSiteIDSubmissions";
      variables: GetPpcExportSiteIDSubmissionsVariables;
    }
  | {
      path: "/ppc/export/site/submissions";
      operationId: "getPpcExportSiteSubmissions";
      variables: GetPpcExportSiteSubmissionsVariables;
    }
  | {
      path: "/ppc/export/programme/{ID}/images";
      operationId: "getPpcExportProgrammeIDImages";
      variables: GetPpcExportProgrammeIDImagesVariables;
    }
  | {
      path: "/terrafund/export/site/submissions";
      operationId: "getTerrafundExportSiteSubmissions";
      variables: GetTerrafundExportSiteSubmissionsVariables;
    }
  | {
      path: "/terrafund/export/nursery/submissions";
      operationId: "getTerrafundExportNurserySubmissions";
      variables: GetTerrafundExportNurserySubmissionsVariables;
    }
  | {
      path: "/terrafund/export/programme/submissions";
      operationId: "getTerrafundExportProgrammeSubmissions";
      variables: GetTerrafundExportProgrammeSubmissionsVariables;
    }
  | {
      path: "/terrafund/export/programme/{ID}/submissions";
      operationId: "getTerrafundExportProgrammeIDSubmissions";
      variables: GetTerrafundExportProgrammeIDSubmissionsVariables;
    }
  | {
      path: "/terrafund/export/programme/{ID}/images";
      operationId: "getTerrafundExportProgrammeIDImages";
      variables: GetTerrafundExportProgrammeIDImagesVariables;
    }
  | {
      path: "/terrafund/export/programme/{ID}/shapefiles";
      operationId: "getTerrafundExportProgrammeIDShapefiles";
      variables: GetTerrafundExportProgrammeIDShapefilesVariables;
    }
  | {
      path: "/terrafund/programme/{ID}/partners";
      operationId: "getTerrafundProgrammeIDPartners";
      variables: GetTerrafundProgrammeIDPartnersVariables;
    }
  | {
      path: "/terrafund/export/site/submission/{ID}";
      operationId: "getTerrafundExportSiteSubmissionID";
      variables: GetTerrafundExportSiteSubmissionIDVariables;
    }
  | {
      path: "/terrafund/export/nursery/submission/{ID}";
      operationId: "getTerrafundExportNurserySubmissionID";
      variables: GetTerrafundExportNurserySubmissionIDVariables;
    }
  | {
      path: "/terrafund/export/nursery/{ID}/submission";
      operationId: "getTerrafundExportNurseryIDSubmission";
      variables: GetTerrafundExportNurseryIDSubmissionVariables;
    }
  | {
      path: "/terrafund/export/site/{ID}/submission";
      operationId: "getTerrafundExportSiteIDSubmission";
      variables: GetTerrafundExportSiteIDSubmissionVariables;
    }
  | {
      path: "/exports/{ID}/field_list";
      operationId: "getExportsIDFieldList";
      variables: GetExportsIDFieldListVariables;
    }
  | {
      path: "/organisations/{ID}/terrafund/programmes";
      operationId: "getOrganisationsIDTerrafundProgrammes";
      variables: GetOrganisationsIDTerrafundProgrammesVariables;
    }
  | {
      path: "/v2/project-metrics";
      operationId: "getV2ProjectMetrics";
      variables: GetV2ProjectMetricsVariables;
    }
  | {
      path: "/v2/funding-programme";
      operationId: "getV2FundingProgramme";
      variables: GetV2FundingProgrammeVariables;
    }
  | {
      path: "/v2/admin/funding-programme";
      operationId: "getV2AdminFundingProgramme";
      variables: GetV2AdminFundingProgrammeVariables;
    }
  | {
      path: "/v2/funding-programme/{UUID}";
      operationId: "getV2FundingProgrammeUUID";
      variables: GetV2FundingProgrammeUUIDVariables;
    }
  | {
      path: "/v2/admin/funding-programme/{UUID}";
      operationId: "getV2AdminFundingProgrammeUUID";
      variables: GetV2AdminFundingProgrammeUUIDVariables;
    }
  | {
      path: "/v2/project-metrics/{UUID}";
      operationId: "getV2ProjectMetricsUUID";
      variables: GetV2ProjectMetricsUUIDVariables;
    }
  | {
      path: "/v2/project-metrics/{UUID}/download";
      operationId: "getV2ProjectMetricsUUIDDownload";
      variables: GetV2ProjectMetricsUUIDDownloadVariables;
    }
  | {
      path: "/v2/site-metrics";
      operationId: "getV2SiteMetrics";
      variables: GetV2SiteMetricsVariables;
    }
  | {
      path: "/v2/site-metrics/{UUID}";
      operationId: "getV2SiteMetricsUUID";
      variables: GetV2SiteMetricsUUIDVariables;
    }
  | {
      path: "/programme/{ID}/metric-sites";
      operationId: "getProgrammeIDMetricSites";
      variables: GetProgrammeIDMetricSitesVariables;
    }
  | {
      path: "/terrafund/programme/{ID}/metric-sites";
      operationId: "getTerrafundProgrammeIDMetricSites";
      variables: GetTerrafundProgrammeIDMetricSitesVariables;
    }
  | {
      path: "/edit-history";
      operationId: "getEditHistory";
      variables: GetEditHistoryVariables;
    }
  | {
      path: "/edit-history/{UUID}";
      operationId: "getEditHistoryUUID";
      variables: GetEditHistoryUUIDVariables;
    }
  | {
      path: "/edit-history/{TYPE}/{ID}";
      operationId: "getEditHistoryTYPEID";
      variables: GetEditHistoryTYPEIDVariables;
    }
  | {
      path: "/v2/admin/forms";
      operationId: "getV2AdminForms";
      variables: GetV2AdminFormsVariables;
    }
  | {
      path: "/v2/forms";
      operationId: "getV2Forms";
      variables: GetV2FormsVariables;
    }
  | {
      path: "/v2/forms/linked-field-listing";
      operationId: "getV2FormsLinkedFieldListing";
      variables: GetV2FormsLinkedFieldListingVariables;
    }
  | {
      path: "/v2/forms/option-labels";
      operationId: "getV2FormsOptionLabels";
      variables: GetV2FormsOptionLabelsVariables;
    }
  | {
      path: "/v2/admin/forms/common-options/{BUCKET}";
      operationId: "getV2AdminFormsCommonOptionsBUCKET";
      variables: GetV2AdminFormsCommonOptionsBUCKETVariables;
    }
  | {
      path: "/v2/admin/organisations";
      operationId: "getV2AdminOrganisations";
      variables: GetV2AdminOrganisationsVariables;
    }
  | {
      path: "/v2/admin/organisations/multi";
      operationId: "getV2AdminOrganisationsMulti";
      variables: GetV2AdminOrganisationsMultiVariables;
    }
  | {
      path: "/v2/admin/organisations/{UUID}";
      operationId: "getV2AdminOrganisationsUUID";
      variables: GetV2AdminOrganisationsUUIDVariables;
    }
  | {
      path: "/v2/admin/organisations/export";
      operationId: "getV2AdminOrganisationsExport";
      variables: GetV2AdminOrganisationsExportVariables;
    }
  | {
      path: "/v2/organisations/{UUID}";
      operationId: "getV2OrganisationsUUID";
      variables: GetV2OrganisationsUUIDVariables;
    }
  | {
      path: "/v2/organisations/listing";
      operationId: "getV2OrganisationsListing";
      variables: GetV2OrganisationsListingVariables;
    }
  | {
      path: "/v2/organisations/user-requests/{UUID}";
      operationId: "getV2OrganisationsUserRequestsUUID";
      variables: GetV2OrganisationsUserRequestsUUIDVariables;
    }
  | {
      path: "/v2/organisations/approved-users/{UUID}";
      operationId: "getV2OrganisationsApprovedUsersUUID";
      variables: GetV2OrganisationsApprovedUsersUUIDVariables;
    }
  | {
      path: "/v2/admin/users";
      operationId: "getV2AdminUsers";
      variables: GetV2AdminUsersVariables;
    }
  | {
      path: "/v2/admin/users/{UUID}";
      operationId: "getV2AdminUsersUUID";
      variables: GetV2AdminUsersUUIDVariables;
    }
  | {
      path: "/v2/admin/users/multi";
      operationId: "getV2AdminUsersMulti";
      variables: GetV2AdminUsersMultiVariables;
    }
  | {
      path: "/v2/admin/users/export";
      operationId: "getV2AdminUsersExport";
      variables: GetV2AdminUsersExportVariables;
    }
  | {
      path: "/v2/admin/sites";
      operationId: "getV2AdminSites";
      variables: GetV2AdminSitesVariables;
    }
  | {
      path: "/v2/admin/sites/ppc";
      operationId: "getV2AdminSitesPpc";
      variables: GetV2AdminSitesPpcVariables;
    }
  | {
      path: "/v2/admin/sites/terrafund";
      operationId: "getV2AdminSitesTerrafund";
      variables: GetV2AdminSitesTerrafundVariables;
    }
  | {
      path: "/v2/admin/project-pitches";
      operationId: "getV2AdminProjectPitches";
      variables: GetV2AdminProjectPitchesVariables;
    }
  | {
      path: "/v2/admin/project-pitches/export";
      operationId: "getV2AdminProjectPitchesExport";
      variables: GetV2AdminProjectPitchesExportVariables;
    }
  | {
      path: "/v2/project-pitches";
      operationId: "getV2ProjectPitches";
      variables: GetV2ProjectPitchesVariables;
    }
  | {
      path: "/v2/project-pitches/{UUID}";
      operationId: "getV2ProjectPitchesUUID";
      variables: GetV2ProjectPitchesUUIDVariables;
    }
  | {
      path: "/v2/admin/forms/submissions/{UUID}";
      operationId: "getV2AdminFormsSubmissionsUUID";
      variables: GetV2AdminFormsSubmissionsUUIDVariables;
    }
  | {
      path: "/v2/admin/forms/submissions/export";
      operationId: "getV2AdminFormsSubmissionsExport";
      variables: GetV2AdminFormsSubmissionsExportVariables;
    }
  | {
      path: "/v2/admin/forms/submissions";
      operationId: "getV2AdminFormsSubmissions";
      variables: GetV2AdminFormsSubmissionsVariables;
    }
  | {
      path: "/v2/forms/my/submissions";
      operationId: "getV2FormsMySubmissions";
      variables: GetV2FormsMySubmissionsVariables;
    }
  | {
      path: "/v2/forms/{UUID}";
      operationId: "getV2FormsUUID";
      variables: GetV2FormsUUIDVariables;
    }
  | {
      path: "/v2/funding-programme/stage";
      operationId: "getV2FundingProgrammeStage";
      variables: GetV2FundingProgrammeStageVariables;
    }
  | {
      path: "/v2/funding-programme/stage/{UUID}";
      operationId: "getV2FundingProgrammeStageUUID";
      variables: GetV2FundingProgrammeStageUUIDVariables;
    }
  | {
      path: "/v2/forms/submissions/{UUID}";
      operationId: "getV2FormsSubmissionsUUID";
      variables: GetV2FormsSubmissionsUUIDVariables;
    }
  | {
      path: "/v2/admin/forms/applications";
      operationId: "getV2AdminFormsApplications";
      variables: GetV2AdminFormsApplicationsVariables;
    }
  | {
      path: "/v2/admin/forms/applications/{UUID}";
      operationId: "getV2AdminFormsApplicationsUUID";
      variables: GetV2AdminFormsApplicationsUUIDVariables;
    }
  | {
      path: "/v2/admin/forms/applications/{UUID}/export";
      operationId: "getV2AdminFormsApplicationsUUIDExport";
      variables: GetV2AdminFormsApplicationsUUIDExportVariables;
    }
  | {
      path: "/v2/my/applications";
      operationId: "getV2MyApplications";
      variables: GetV2MyApplicationsVariables;
    }
  | {
      path: "/v2/applications/{UUID}";
      operationId: "getV2ApplicationsUUID";
      variables: GetV2ApplicationsUUIDVariables;
    }
  | {
      path: "/v2/applications/{UUID}/export";
      operationId: "getV2ApplicationsUUIDExport";
      variables: GetV2ApplicationsUUIDExportVariables;
    };
