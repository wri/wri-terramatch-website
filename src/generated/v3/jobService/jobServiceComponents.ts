/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import { V3ApiEndpoint } from "../utils";
import type * as Fetcher from "./jobServiceFetcher";
import type * as Schemas from "./jobServiceSchemas";

export type ListDelayedJobsError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: {
    /**
     * @example 401
     */
    statusCode: number;
    /**
     * @example Unauthorized
     */
    message: string;
  };
}>;

export type ListDelayedJobsResponse = {
  meta?: {
    /**
     * @example delayedJobs
     */
    resourceType?: string;
    indices?: {
      /**
       * The resource type for this included index
       */
      resource?: string;
      /**
       * The full stable (sorted query param) request path for this request, suitable for use as a store key in the FE React app
       */
      requestPath?: string;
      /**
       * The ordered set of resource IDs for this index. If this is omitted, the ids in the main `data` object of the response should be used.
       */
      ids?: string[];
      /**
       * The total number of records available.
       *
       * @example 42
       */
      total?: number;
    }[];
  };
  data?: {
    /**
     * @example delayedJobs
     */
    type?: string;
    /**
     * @format uuid
     */
    id?: string;
    attributes?: Schemas.DelayedJobDto;
  }[];
};

/**
 * Retrieve a list of all delayed jobs.
 */
export const listDelayedJobs = new V3ApiEndpoint<ListDelayedJobsResponse, ListDelayedJobsError, {}, {}>(
  "/jobs/v3/delayedJobs",
  "GET"
);

export type DelayedJobsFindPathParams = {
  uuid: string;
};

export type DelayedJobsFindError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: {
        /**
         * @example 401
         */
        statusCode: number;
        /**
         * @example Unauthorized
         */
        message: string;
      };
    }
  | {
      status: 404;
      payload: {
        /**
         * @example 404
         */
        statusCode: number;
        /**
         * @example Not Found
         */
        message: string;
      };
    }
>;

export type DelayedJobsFindResponse = {
  meta?: {
    /**
     * @example delayedJobs
     */
    resourceType?: string;
  };
  data?: {
    /**
     * @example delayedJobs
     */
    type?: string;
    /**
     * @format uuid
     */
    id?: string;
    attributes?: Schemas.DelayedJobDto;
  };
};

export type DelayedJobsFindVariables = {
  pathParams: DelayedJobsFindPathParams;
};

/**
 * Get the current status and potentially payload or error from a delayed job.
 */
export const delayedJobsFind = new V3ApiEndpoint<
  DelayedJobsFindResponse,
  DelayedJobsFindError,
  DelayedJobsFindVariables,
  {}
>("/jobs/v3/delayedJobs/{uuid}", "GET");

export type BulkUpdateJobsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        /**
         * @example 400
         */
        statusCode: number;
        /**
         * @example Bad Request
         */
        message: string;
      };
    }
  | {
      status: 401;
      payload: {
        /**
         * @example 401
         */
        statusCode: number;
        /**
         * @example Unauthorized
         */
        message: string;
      };
    }
  | {
      status: 404;
      payload: {
        /**
         * @example 404
         */
        statusCode: number;
        /**
         * @example Not Found
         */
        message: string;
      };
    }
>;

export type BulkUpdateJobsResponse = {
  meta?: {
    /**
     * @example delayedJobs
     */
    resourceType?: string;
  };
  data?: {
    /**
     * @example delayedJobs
     */
    type?: string;
    /**
     * @format uuid
     */
    id?: string;
    attributes?: Schemas.DelayedJobDto;
  };
};

export type BulkUpdateJobsVariables = {
  body: Schemas.DelayedJobBulkUpdateBodyDto;
};

/**
 * Accepts a JSON:API-compliant payload to bulk update jobs, allowing each job's isAcknowledged attribute to be set to true or false.
 */
export const bulkUpdateJobs = new V3ApiEndpoint<
  BulkUpdateJobsResponse,
  BulkUpdateJobsError,
  BulkUpdateJobsVariables,
  {}
>("/jobs/v3/delayedJobs/bulk-update", "PATCH");

export const operationsByTag = { delayedJobs: { listDelayedJobs, delayedJobsFind, bulkUpdateJobs } };
