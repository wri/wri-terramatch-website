/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import { V3ApiEndpoint } from "../utils";
import type * as Fetcher from "./researchServiceFetcher";
import type * as Schemas from "./researchServiceSchemas";

export type SitePolygonsIndexQueryParams = {
  /**
   * The size of page being requested
   *
   * @minimum 1
   * @maximum 100
   * @default 100
   */
  ["page[size]"]?: number;
  /**
   * The last record before the page being requested. The value is a UUID. If page[after] is not provided, the first page is returned.
   */
  ["page[after]"]?: string;
  /**
   * The page number to return. If page[number] is not provided, the first page is returned.
   */
  ["page[number]"]?: number;
  /**
   * Filter results by polygon status
   */
  ["polygonStatus[]"]?: ("draft" | "submitted" | "needs-more-information" | "approved")[];
  /**
   * Filter results by validation status
   */
  ["validationStatus[]"]?: string[];
  /**
   * Filter results by project UUID(s). May not be used with siteId[], projectCohort or landscape
   */
  ["projectId[]"]?: string[];
  /**
   * Filter results by project short name(s)
   */
  ["projectShortNames[]"]?: string[];
  /**
   * Filter results by site UUID(s). May not be used with projectId[], projectCohort or landscape
   */
  ["siteId[]"]?: string[];
  /**
   * Filter results by polygon UUID(s)
   */
  ["polygonUuid[]"]?: string[];
  /**
   * Filter results by project cohorts. May not be used with projectId[] or siteId[]
   */
  ["projectCohort[]"]?: string[];
  /**
   * Filter results by project landscape. May not be used with projectId[] or siteId[]
   */
  landscape?: "gcb" | "grv" | "ikr";
  /**
   * Filter results by polygons that are missing at least one of the indicators listed
   */
  ["missingIndicator[]"]?: (
    | "treeCover"
    | "treeCoverLoss"
    | "treeCoverLossFires"
    | "restorationByEcoRegion"
    | "restorationByStrategy"
    | "restorationByLandUse"
    | "treeCount"
    | "earlyTreeVerification"
    | "fieldMonitoring"
    | "msuCarbon"
  )[];
  /**
   * Filter results by polygons that have all of the indicators listed
   */
  ["presentIndicator[]"]?: (
    | "treeCover"
    | "treeCoverLoss"
    | "treeCoverLossFires"
    | "restorationByEcoRegion"
    | "restorationByStrategy"
    | "restorationByLandUse"
    | "treeCount"
    | "earlyTreeVerification"
    | "fieldMonitoring"
    | "msuCarbon"
  )[];
  /**
   * Filter results by polygons that have been modified since the date provided
   *
   * @format date-time
   */
  lastModifiedDate?: string;
  /**
   * Include polygons for test projects in the results.
   *
   * @default false
   */
  includeTestProjects?: boolean;
  search?: string;
  /**
   * Whether to include the complete sitePolygon Dto or not
   *
   * @default false
   */
  lightResource?: boolean;
};

export type SitePolygonsIndexError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        /**
         * @example 400
         */
        statusCode: number;
        /**
         * @example Bad Request
         */
        message: string;
      };
    }
  | {
      status: 401;
      payload: {
        /**
         * @example 401
         */
        statusCode: number;
        /**
         * @example Unauthorized
         */
        message: string;
      };
    }
>;

export type SitePolygonsIndexVariables = {
  queryParams?: SitePolygonsIndexQueryParams;
};

export const sitePolygonsIndex = new V3ApiEndpoint<
  | {
      meta?: {
        /**
         * @example sitePolygons
         */
        resourceType?: string;
        indices?: {
          /**
           * The resource type for this included index
           */
          resource?: string;
          /**
           * The full stable (sorted query param) request path for this request, suitable for use as a store key in the FE React app
           */
          requestPath?: string;
          /**
           * The ordered set of resource IDs for this index. If this is omitted, the ids in the main `data` object of the response should be used.
           */
          ids?: string[];
          /**
           * The cursor for the first record on this page.
           */
          cursor?: string;
          /**
           * The total number of records available.
           *
           * @example 42
           */
          total?: number;
        }[];
      };
      data?: {
        /**
         * @example sitePolygons
         */
        type?: string;
        /**
         * @format uuid
         */
        id?: string;
        attributes?: Schemas.SitePolygonFullDto;
        meta?: {
          page?: {
            /**
             * The cursor for this record.
             */
            cursor?: string;
          };
        };
      }[];
    }
  | {
      meta?: {
        /**
         * @example sitePolygons
         */
        resourceType?: string;
        indices?: {
          /**
           * The resource type for this included index
           */
          resource?: string;
          /**
           * The full stable (sorted query param) request path for this request, suitable for use as a store key in the FE React app
           */
          requestPath?: string;
          /**
           * The ordered set of resource IDs for this index. If this is omitted, the ids in the main `data` object of the response should be used.
           */
          ids?: string[];
          /**
           * The current page number.
           */
          pageNumber?: number;
          /**
           * The total number of records available.
           *
           * @example 42
           */
          total?: number;
        }[];
      };
      data?: {
        /**
         * @example sitePolygons
         */
        type?: string;
        /**
         * @format uuid
         */
        id?: string;
        attributes?: Schemas.SitePolygonLightDto;
      }[];
    },
  SitePolygonsIndexError,
  SitePolygonsIndexVariables,
  {}
>("/research/v3/sitePolygons", "GET");

export type BulkUpdateSitePolygonsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        /**
         * @example 400
         */
        statusCode: number;
        /**
         * @example Bad Request
         */
        message: string;
      };
    }
  | {
      status: 401;
      payload: {
        /**
         * @example 401
         */
        statusCode: number;
        /**
         * @example Unauthorized
         */
        message: string;
      };
    }
  | {
      status: 404;
      payload: {
        /**
         * @example 404
         */
        statusCode: number;
        /**
         * @example Not Found
         */
        message: string;
      };
    }
>;

export type BulkUpdateSitePolygonsVariables = {
  body: Schemas.SitePolygonBulkUpdateBodyDto;
};

/**
 * If an indicator is provided that already exists, it will be updated with the value in the
 *        payload. If a new indicator is provided, it will be created in the DB. Indicators are keyed
 *        off of the combination of site polygon ID, indicatorSlug, and yearOfAnalysis.
 */
export const bulkUpdateSitePolygons = new V3ApiEndpoint<
  undefined,
  BulkUpdateSitePolygonsError,
  BulkUpdateSitePolygonsVariables,
  {}
>("/research/v3/sitePolygons", "PATCH");

export type BoundingBoxGetQueryParams = {
  /**
   * UUID of a polygon to get its bounding box
   */
  polygonUuid?: string;
  /**
   * UUID of a site to get the bounding box of all its polygons
   */
  siteUuid?: string;
  /**
   * UUID of a project to get the bounding box of all its site polygons
   */
  projectUuid?: string;
  /**
   * UUID of a project pitch to get the bounding box of all its polygons
   */
  projectPitchUuid?: string;
  /**
   * Array of landscape slugs for combined bounding box (used with country)
   */
  landscapes?: string[];
  /**
   * Country code (3-letter ISO) to get its bounding box
   */
  country?: string;
};

export type BoundingBoxGetError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        /**
         * @example 400
         */
        statusCode: number;
        /**
         * @example Bad Request
         */
        message: string;
      };
    }
  | {
      status: 404;
      payload: {
        /**
         * @example 404
         */
        statusCode: number;
        /**
         * @example Not Found
         */
        message: string;
      };
    }
>;

export type BoundingBoxGetResponse = {
  meta?: {
    /**
     * @example boundingBoxes
     */
    resourceType?: string;
  };
  data?: {
    /**
     * @example boundingBoxes
     */
    type?: string;
    /**
     * @format uuid
     */
    id?: string;
    attributes?: Schemas.BoundingBoxDto;
  };
};

export type BoundingBoxGetVariables = {
  queryParams?: BoundingBoxGetQueryParams;
};

export const boundingBoxGet = new V3ApiEndpoint<
  BoundingBoxGetResponse,
  BoundingBoxGetError,
  BoundingBoxGetVariables,
  {}
>("/boundingBoxes/v3/get", "GET");

export type GetPolygonValidationPathParams = {
  polygonUuid: string;
};

export type GetPolygonValidationError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: {
    /**
     * @example 404
     */
    statusCode: number;
    /**
     * @example Not Found
     */
    message: string;
  };
}>;

export type GetPolygonValidationResponse = {
  meta?: {
    /**
     * @example validations
     */
    resourceType?: string;
  };
  data?: {
    /**
     * @example validations
     */
    type?: string;
    /**
     * @format uuid
     */
    id?: string;
    attributes?: Schemas.ValidationDto;
  };
};

export type GetPolygonValidationVariables = {
  pathParams: GetPolygonValidationPathParams;
};

export const getPolygonValidation = new V3ApiEndpoint<
  GetPolygonValidationResponse,
  GetPolygonValidationError,
  GetPolygonValidationVariables,
  {}
>("/validations/v3/polygons/{polygonUuid}", "GET");

export type GetSiteValidationPathParams = {
  siteUuid: string;
};

export type GetSiteValidationQueryParams = {
  page: Schemas.NumberPage;
  /**
   * Filter validations by criteria ID
   *
   * @example 3
   */
  criteriaId?: number;
};

export type GetSiteValidationError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: {
        /**
         * @example 400
         */
        statusCode: number;
        /**
         * @example Bad Request
         */
        message: string;
      };
    }
  | {
      status: 404;
      payload: {
        /**
         * @example 404
         */
        statusCode: number;
        /**
         * @example Not Found
         */
        message: string;
      };
    }
>;

export type GetSiteValidationResponse = {
  meta?: {
    /**
     * @example validations
     */
    resourceType?: string;
  };
  data?: {
    /**
     * @example validations
     */
    type?: string;
    /**
     * @format uuid
     */
    id?: string;
    attributes?: Schemas.ValidationDto;
  };
};

export type GetSiteValidationVariables = {
  pathParams: GetSiteValidationPathParams;
  queryParams: GetSiteValidationQueryParams;
};

export const getSiteValidation = new V3ApiEndpoint<
  GetSiteValidationResponse,
  GetSiteValidationError,
  GetSiteValidationVariables,
  {}
>("/validations/v3/sites/{siteUuid}", "GET");

export const operationsByTag = {
  sitePolygons: { sitePolygonsIndex, bulkUpdateSitePolygons },
  boundingBoxes: { boundingBoxGet },
  validations: { getPolygonValidation, getSiteValidation }
};
