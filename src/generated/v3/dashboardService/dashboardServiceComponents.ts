/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import { V3ApiEndpoint } from "../utils";
import type * as Fetcher from "./dashboardServiceFetcher";
import type * as Schemas from "./dashboardServiceSchemas";

export type GetTotalSectionHeadersQueryParams = {
  country?: string;
  /**
   * Filter results by programmes
   */
  ["programmesType[]"]?: ("terrafund" | "terrafund-landscapes" | "enterprises" | "epa-ghana-pilot")[];
  /**
   * Filter by cohorts
   */
  cohort?: string[];
  /**
   * Filter results by landscapes using 3-letter codes: gcb (Ghana Cocoa Belt), grv (Greater Rift Valley of Kenya), ikr (Lake Kivu & Rusizi River Basin)
   */
  landscapes?: ("gcb" | "grv" | "ikr")[];
  /**
   * Filter results by organisationType
   */
  ["organisationType[]"]?: ("for-profit-organization" | "non-profit-organization")[];
  projectUuid?: string;
};

export type GetTotalSectionHeadersError = Fetcher.ErrorWrapper<undefined>;

export type GetTotalSectionHeadersVariables = {
  queryParams?: GetTotalSectionHeadersQueryParams;
};

export const getTotalSectionHeaders = new V3ApiEndpoint<
  | {
      meta?: {
        /**
         * @example totalSectionHeaders
         */
        resourceType?: string;
      };
      data?: {
        /**
         * @example totalSectionHeaders
         */
        type?: string;
        /**
         * @format uuid
         */
        id?: string;
        attributes?: Schemas.TotalSectionHeaderDto;
      };
    }
  | {
      meta?: {
        /**
         * @example delayedJobs
         */
        resourceType?: string;
      };
      data?: {
        /**
         * @example delayedJobs
         */
        type?: string;
        /**
         * @format uuid
         */
        id?: string;
        attributes?: Schemas.DelayedJobDto;
      };
    },
  GetTotalSectionHeadersError,
  GetTotalSectionHeadersVariables,
  {}
>("/dashboard/v3/totalSectionHeaders", "GET");

export type GetTreeRestorationGoalQueryParams = {
  country?: string;
  /**
   * Filter results by programmes
   */
  ["programmesType[]"]?: ("terrafund" | "terrafund-landscapes" | "enterprises" | "epa-ghana-pilot")[];
  /**
   * Filter by cohorts
   */
  cohort?: string[];
  /**
   * Filter results by landscapes using 3-letter codes: gcb (Ghana Cocoa Belt), grv (Greater Rift Valley of Kenya), ikr (Lake Kivu & Rusizi River Basin)
   */
  landscapes?: ("gcb" | "grv" | "ikr")[];
  /**
   * Filter results by organisationType
   */
  ["organisationType[]"]?: ("for-profit-organization" | "non-profit-organization")[];
  projectUuid?: string;
};

export type GetTreeRestorationGoalError = Fetcher.ErrorWrapper<undefined>;

export type GetTreeRestorationGoalResponse = {
  meta?: {
    /**
     * @example treeRestorationGoals
     */
    resourceType?: string;
  };
  data?: {
    /**
     * @example treeRestorationGoals
     */
    type?: string;
    /**
     * @format uuid
     */
    id?: string;
    attributes?: Schemas.TreeRestorationGoalDto;
  };
};

export type GetTreeRestorationGoalVariables = {
  queryParams?: GetTreeRestorationGoalQueryParams;
};

export const getTreeRestorationGoal = new V3ApiEndpoint<
  GetTreeRestorationGoalResponse,
  GetTreeRestorationGoalError,
  GetTreeRestorationGoalVariables,
  {}
>("/dashboard/v3/treeRestorationGoal", "GET");

export type GetTotalJobsCreatedQueryParams = {
  country?: string;
  /**
   * Filter results by programmes
   */
  ["programmesType[]"]?: ("terrafund" | "terrafund-landscapes" | "enterprises" | "epa-ghana-pilot")[];
  /**
   * Filter by cohorts
   */
  cohort?: string[];
  /**
   * Filter results by landscapes using 3-letter codes: gcb (Ghana Cocoa Belt), grv (Greater Rift Valley of Kenya), ikr (Lake Kivu & Rusizi River Basin)
   */
  landscapes?: ("gcb" | "grv" | "ikr")[];
  /**
   * Filter results by organisationType
   */
  ["organisationType[]"]?: ("for-profit-organization" | "non-profit-organization")[];
  projectUuid?: string;
};

export type GetTotalJobsCreatedError = Fetcher.ErrorWrapper<undefined>;

export type GetTotalJobsCreatedVariables = {
  queryParams?: GetTotalJobsCreatedQueryParams;
};

export const getTotalJobsCreated = new V3ApiEndpoint<
  | {
      meta?: {
        /**
         * @example totalJobsCreated
         */
        resourceType?: string;
      };
      data?: {
        /**
         * @example totalJobsCreated
         */
        type?: string;
        /**
         * @format uuid
         */
        id?: string;
        attributes?: Schemas.TotalJobsCreatedDto;
      };
    }
  | {
      meta?: {
        /**
         * @example delayedJobs
         */
        resourceType?: string;
      };
      data?: {
        /**
         * @example delayedJobs
         */
        type?: string;
        /**
         * @format uuid
         */
        id?: string;
        attributes?: Schemas.DelayedJobDto;
      };
    },
  GetTotalJobsCreatedError,
  GetTotalJobsCreatedVariables,
  {}
>("/dashboard/v3/totalJobsCreated", "GET");

export type DashboardEntityIndexPathParams = {
  /**
   * Dashboard entity type
   */
  entity: "dashboardProjects";
};

export type DashboardEntityIndexQueryParams = {
  country?: string;
  /**
   * Filter results by programmes
   */
  ["programmesType[]"]?: ("terrafund" | "terrafund-landscapes" | "enterprises" | "epa-ghana-pilot")[];
  /**
   * Filter by cohorts
   */
  cohort?: string[];
  /**
   * Filter results by landscapes using 3-letter codes: gcb (Ghana Cocoa Belt), grv (Greater Rift Valley of Kenya), ikr (Lake Kivu & Rusizi River Basin)
   */
  landscapes?: ("gcb" | "grv" | "ikr")[];
  /**
   * Filter results by organisationType
   */
  ["organisationType[]"]?: ("for-profit-organization" | "non-profit-organization")[];
  projectUuid?: string;
};

export type DashboardEntityIndexError = Fetcher.ErrorWrapper<undefined>;

export type DashboardEntityIndexResponse = {
  meta?: {
    /**
     * @example dashboardProjects
     */
    resourceType?: string;
    indices?: {
      /**
       * The resource type for this included index
       */
      resource?: string;
      /**
       * The full stable (sorted query param) request path for this request, suitable for use as a store key in the FE React app
       */
      requestPath?: string;
      /**
       * The total number of records available.
       *
       * @example 42
       */
      total?: number;
      /**
       * The current page number.
       */
      pageNumber?: number;
      /**
       * The ordered set of resource IDs for this page of this index search.
       */
      ids?: string[];
    }[];
  };
  data?: {
    /**
     * @example dashboardProjects
     */
    type?: string;
    /**
     * @format uuid
     */
    id?: string;
    attributes?: Schemas.DashboardProjectsLightDto;
  }[];
};

export type DashboardEntityIndexVariables = {
  pathParams: DashboardEntityIndexPathParams;
  queryParams?: DashboardEntityIndexQueryParams;
};

export const dashboardEntityIndex = new V3ApiEndpoint<
  DashboardEntityIndexResponse,
  DashboardEntityIndexError,
  DashboardEntityIndexVariables,
  {}
>("/dashboard/v3/{entity}", "GET");

export type DashboardEntityGetPathParams = {
  /**
   * Entity UUID
   */
  uuid: string;
  /**
   * Dashboard entity type
   */
  entity: "dashboardProjects";
};

export type DashboardEntityGetError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: {
    /**
     * @example 404
     */
    statusCode: number;
    /**
     * @example Not Found
     */
    message: string;
  };
}>;

export type DashboardEntityGetVariables = {
  pathParams: DashboardEntityGetPathParams;
};

export const dashboardEntityGet = new V3ApiEndpoint<
  | {
      meta?: {
        /**
         * @example dashboardProjects
         */
        resourceType?: string;
      };
      data?: {
        /**
         * @example dashboardProjects
         */
        type?: string;
        /**
         * @format uuid
         */
        id?: string;
        attributes?: Schemas.DashboardProjectsLightDto;
      };
    }
  | {
      meta?: {
        /**
         * @example dashboardProjects
         */
        resourceType?: string;
      };
      data?: {
        /**
         * @example dashboardProjects
         */
        type?: string;
        /**
         * @format uuid
         */
        id?: string;
        attributes?: Schemas.DashboardProjectsFullDto;
      };
    },
  DashboardEntityGetError,
  DashboardEntityGetVariables,
  {}
>("/dashboard/v3/{entity}/{uuid}", "GET");

export type GetHectaresRestorationQueryParams = {
  country?: string;
  /**
   * Filter results by programmes
   */
  ["programmesType[]"]?: ("terrafund" | "terrafund-landscapes" | "enterprises" | "epa-ghana-pilot")[];
  /**
   * Filter by cohorts
   */
  cohort?: string[];
  /**
   * Filter results by landscapes using 3-letter codes: gcb (Ghana Cocoa Belt), grv (Greater Rift Valley of Kenya), ikr (Lake Kivu & Rusizi River Basin)
   */
  landscapes?: ("gcb" | "grv" | "ikr")[];
  /**
   * Filter results by organisationType
   */
  ["organisationType[]"]?: ("for-profit-organization" | "non-profit-organization")[];
  projectUuid?: string;
};

export type GetHectaresRestorationError = Fetcher.ErrorWrapper<undefined>;

export type GetHectaresRestorationResponse = {
  meta?: {
    /**
     * @example hectareRestoration
     */
    resourceType?: string;
  };
  data?: {
    /**
     * @example hectareRestoration
     */
    type?: string;
    /**
     * @format uuid
     */
    id?: string;
    attributes?: Schemas.HectareRestorationDto;
  };
};

export type GetHectaresRestorationVariables = {
  queryParams?: GetHectaresRestorationQueryParams;
};

export const getHectaresRestoration = new V3ApiEndpoint<
  GetHectaresRestorationResponse,
  GetHectaresRestorationError,
  GetHectaresRestorationVariables,
  {}
>("/dashboard/v3/hectaresRestoration", "GET");

export const operationsByTag = {
  totalSectionHeader: { getTotalSectionHeaders },
  treeRestorationGoal: { getTreeRestorationGoal },
  totalJobsCreated: { getTotalJobsCreated },
  dashboardEntities: { dashboardEntityIndex, dashboardEntityGet },
  hectaresRestoration: { getHectaresRestoration }
};
