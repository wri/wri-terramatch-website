/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import type * as Fetcher from "./userServiceFetcher";
import { userServiceFetch } from "./userServiceFetcher";
import type * as Schemas from "./userServiceSchemas";

export type AuthLoginError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: {
    /**
     * @example 401
     */
    statusCode: number;
    /**
     * @example Unauthorized
     */
    message: string;
    /**
     * @example Unauthorized
     */
    error?: string;
  };
}>;

export type AuthLoginResponse = {
  data?: {
    /**
     * @example logins
     */
    type?: string;
    /**
     * @pattern ^\d{5}$
     */
    id?: string;
    attributes?: Schemas.LoginDto;
  };
};

export type AuthLoginVariables = {
  body: Schemas.LoginRequest;
};

/**
 * Receive a JWT Token in exchange for login credentials
 */
export const authLogin = (variables: AuthLoginVariables, signal?: AbortSignal) =>
  userServiceFetch<AuthLoginResponse, AuthLoginError, Schemas.LoginRequest, {}, {}, {}>({
    url: "/auth/v3/logins",
    method: "post",
    ...variables,
    signal
  });

export type UsersFindPathParams = {
  /**
   * A valid user id or "me"
   */
  id: string;
};

export type UsersFindError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: {
        /**
         * @example 401
         */
        statusCode: number;
        /**
         * @example Unauthorized
         */
        message: string;
        /**
         * @example Unauthorized
         */
        error?: string;
      };
    }
  | {
      status: 404;
      payload: {
        /**
         * @example 404
         */
        statusCode: number;
        /**
         * @example Not Found
         */
        message: string;
        /**
         * @example Not Found
         */
        error?: string;
      };
    }
>;

export type UsersFindResponse = {
  data?: {
    /**
     * @example users
     */
    type?: string;
    /**
     * @format uuid
     */
    id?: string;
    attributes?: Schemas.UserDto;
    relationships?: {
      org?: {
        /**
         * @example organisations
         */
        type?: string;
        /**
         * @format uuid
         */
        id?: string;
        meta?: {
          userStatus?: "approved" | "requested" | "rejected" | "na";
        };
      };
    };
  };
  included?: {
    /**
     * @example organisations
     */
    type?: string;
    /**
     * @format uuid
     */
    id?: string;
    attributes?: Schemas.OrganisationDto;
  }[];
};

export type UsersFindVariables = {
  pathParams: UsersFindPathParams;
};

/**
 * Fetch a user by ID, or with the 'me' identifier
 */
export const usersFind = (variables: UsersFindVariables, signal?: AbortSignal) =>
  userServiceFetch<UsersFindResponse, UsersFindError, undefined, {}, {}, UsersFindPathParams>({
    url: "/users/v3/users/{id}",
    method: "get",
    ...variables,
    signal
  });

export type HealthControllerCheckError = Fetcher.ErrorWrapper<{
  status: 503;
  payload: {
    /**
     * @example error
     */
    status?: string;
    /**
     * @example {"database":{"status":"up"}}
     */
    info?: {
      [key: string]: {
        status: string;
      } & {
        [key: string]: any;
      };
    } | null;
    /**
     * @example {"redis":{"status":"down","message":"Could not connect"}}
     */
    error?: {
      [key: string]: {
        status: string;
      } & {
        [key: string]: any;
      };
    } | null;
    /**
     * @example {"database":{"status":"up"},"redis":{"status":"down","message":"Could not connect"}}
     */
    details?: {
      [key: string]: {
        status: string;
      } & {
        [key: string]: any;
      };
    };
  };
}>;

export type HealthControllerCheckResponse = {
  /**
   * @example ok
   */
  status?: string;
  /**
   * @example {"database":{"status":"up"}}
   */
  info?: {
    [key: string]: {
      status: string;
    } & {
      [key: string]: any;
    };
  } | null;
  /**
   * @example {}
   */
  error?: {
    [key: string]: {
      status: string;
    } & {
      [key: string]: any;
    };
  } | null;
  /**
   * @example {"database":{"status":"up"}}
   */
  details?: {
    [key: string]: {
      status: string;
    } & {
      [key: string]: any;
    };
  };
};

export const healthControllerCheck = (signal?: AbortSignal) =>
  userServiceFetch<HealthControllerCheckResponse, HealthControllerCheckError, undefined, {}, {}, {}>({
    url: "/health",
    method: "get",
    signal
  });
